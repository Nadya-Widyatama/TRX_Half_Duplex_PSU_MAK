
TRX_Half_Duplex_PSU_MAK.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000258  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c684  08000258  08000258  00001258  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005f8  0800c8e0  0800c8e0  0000d8e0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ced8  0800ced8  0000e1d4  2**0
                  CONTENTS
  4 .ARM          00000008  0800ced8  0800ced8  0000ded8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cee0  0800cee0  0000e1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cee0  0800cee0  0000dee0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800cee4  0800cee4  0000dee4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  0800cee8  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000418  200001d4  0800d0bc  0000e1d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200005ec  0800d0bc  0000e5ec  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  0000e1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014a3f  00000000  00000000  0000e20a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000252d  00000000  00000000  00022c49  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010d8  00000000  00000000  00025178  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d2a  00000000  00000000  00026250  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021247  00000000  00000000  00026f7a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014869  00000000  00000000  000481c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d094e  00000000  00000000  0005ca2a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0012d378  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005dfc  00000000  00000000  0012d3bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004d  00000000  00000000  001331b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000258 <__do_global_dtors_aux>:
 8000258:	b510      	push	{r4, lr}
 800025a:	4c05      	ldr	r4, [pc, #20]	@ (8000270 <__do_global_dtors_aux+0x18>)
 800025c:	7823      	ldrb	r3, [r4, #0]
 800025e:	b933      	cbnz	r3, 800026e <__do_global_dtors_aux+0x16>
 8000260:	4b04      	ldr	r3, [pc, #16]	@ (8000274 <__do_global_dtors_aux+0x1c>)
 8000262:	b113      	cbz	r3, 800026a <__do_global_dtors_aux+0x12>
 8000264:	4804      	ldr	r0, [pc, #16]	@ (8000278 <__do_global_dtors_aux+0x20>)
 8000266:	f3af 8000 	nop.w
 800026a:	2301      	movs	r3, #1
 800026c:	7023      	strb	r3, [r4, #0]
 800026e:	bd10      	pop	{r4, pc}
 8000270:	200001d4 	.word	0x200001d4
 8000274:	00000000 	.word	0x00000000
 8000278:	0800c8c4 	.word	0x0800c8c4

0800027c <frame_dummy>:
 800027c:	b508      	push	{r3, lr}
 800027e:	4b03      	ldr	r3, [pc, #12]	@ (800028c <frame_dummy+0x10>)
 8000280:	b11b      	cbz	r3, 800028a <frame_dummy+0xe>
 8000282:	4903      	ldr	r1, [pc, #12]	@ (8000290 <frame_dummy+0x14>)
 8000284:	4803      	ldr	r0, [pc, #12]	@ (8000294 <frame_dummy+0x18>)
 8000286:	f3af 8000 	nop.w
 800028a:	bd08      	pop	{r3, pc}
 800028c:	00000000 	.word	0x00000000
 8000290:	200001d8 	.word	0x200001d8
 8000294:	0800c8c4 	.word	0x0800c8c4

08000298 <strcmp>:
 8000298:	f810 2b01 	ldrb.w	r2, [r0], #1
 800029c:	f811 3b01 	ldrb.w	r3, [r1], #1
 80002a0:	2a01      	cmp	r2, #1
 80002a2:	bf28      	it	cs
 80002a4:	429a      	cmpcs	r2, r3
 80002a6:	d0f7      	beq.n	8000298 <strcmp>
 80002a8:	1ad0      	subs	r0, r2, r3
 80002aa:	4770      	bx	lr

080002ac <strlen>:
 80002ac:	4603      	mov	r3, r0
 80002ae:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b2:	2a00      	cmp	r2, #0
 80002b4:	d1fb      	bne.n	80002ae <strlen+0x2>
 80002b6:	1a18      	subs	r0, r3, r0
 80002b8:	3801      	subs	r0, #1
 80002ba:	4770      	bx	lr

080002bc <__aeabi_drsub>:
 80002bc:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c0:	e002      	b.n	80002c8 <__adddf3>
 80002c2:	bf00      	nop

080002c4 <__aeabi_dsub>:
 80002c4:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002c8 <__adddf3>:
 80002c8:	b530      	push	{r4, r5, lr}
 80002ca:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002ce:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d2:	ea94 0f05 	teq	r4, r5
 80002d6:	bf08      	it	eq
 80002d8:	ea90 0f02 	teqeq	r0, r2
 80002dc:	bf1f      	itttt	ne
 80002de:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e2:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002e6:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ea:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002ee:	f000 80e2 	beq.w	80004b6 <__adddf3+0x1ee>
 80002f2:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002f6:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fa:	bfb8      	it	lt
 80002fc:	426d      	neglt	r5, r5
 80002fe:	dd0c      	ble.n	800031a <__adddf3+0x52>
 8000300:	442c      	add	r4, r5
 8000302:	ea80 0202 	eor.w	r2, r0, r2
 8000306:	ea81 0303 	eor.w	r3, r1, r3
 800030a:	ea82 0000 	eor.w	r0, r2, r0
 800030e:	ea83 0101 	eor.w	r1, r3, r1
 8000312:	ea80 0202 	eor.w	r2, r0, r2
 8000316:	ea81 0303 	eor.w	r3, r1, r3
 800031a:	2d36      	cmp	r5, #54	@ 0x36
 800031c:	bf88      	it	hi
 800031e:	bd30      	pophi	{r4, r5, pc}
 8000320:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000324:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000328:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 800032c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000330:	d002      	beq.n	8000338 <__adddf3+0x70>
 8000332:	4240      	negs	r0, r0
 8000334:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000338:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 800033c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000340:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x84>
 8000346:	4252      	negs	r2, r2
 8000348:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800034c:	ea94 0f05 	teq	r4, r5
 8000350:	f000 80a7 	beq.w	80004a2 <__adddf3+0x1da>
 8000354:	f1a4 0401 	sub.w	r4, r4, #1
 8000358:	f1d5 0e20 	rsbs	lr, r5, #32
 800035c:	db0d      	blt.n	800037a <__adddf3+0xb2>
 800035e:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000362:	fa22 f205 	lsr.w	r2, r2, r5
 8000366:	1880      	adds	r0, r0, r2
 8000368:	f141 0100 	adc.w	r1, r1, #0
 800036c:	fa03 f20e 	lsl.w	r2, r3, lr
 8000370:	1880      	adds	r0, r0, r2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	4159      	adcs	r1, r3
 8000378:	e00e      	b.n	8000398 <__adddf3+0xd0>
 800037a:	f1a5 0520 	sub.w	r5, r5, #32
 800037e:	f10e 0e20 	add.w	lr, lr, #32
 8000382:	2a01      	cmp	r2, #1
 8000384:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000388:	bf28      	it	cs
 800038a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800038e:	fa43 f305 	asr.w	r3, r3, r5
 8000392:	18c0      	adds	r0, r0, r3
 8000394:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800039c:	d507      	bpl.n	80003ae <__adddf3+0xe6>
 800039e:	f04f 0e00 	mov.w	lr, #0
 80003a2:	f1dc 0c00 	rsbs	ip, ip, #0
 80003a6:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003aa:	eb6e 0101 	sbc.w	r1, lr, r1
 80003ae:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b2:	d31b      	bcc.n	80003ec <__adddf3+0x124>
 80003b4:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003b8:	d30c      	bcc.n	80003d4 <__adddf3+0x10c>
 80003ba:	0849      	lsrs	r1, r1, #1
 80003bc:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c0:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c4:	f104 0401 	add.w	r4, r4, #1
 80003c8:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003cc:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d0:	f080 809a 	bcs.w	8000508 <__adddf3+0x240>
 80003d4:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003d8:	bf08      	it	eq
 80003da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003de:	f150 0000 	adcs.w	r0, r0, #0
 80003e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003e6:	ea41 0105 	orr.w	r1, r1, r5
 80003ea:	bd30      	pop	{r4, r5, pc}
 80003ec:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f0:	4140      	adcs	r0, r0
 80003f2:	eb41 0101 	adc.w	r1, r1, r1
 80003f6:	3c01      	subs	r4, #1
 80003f8:	bf28      	it	cs
 80003fa:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003fe:	d2e9      	bcs.n	80003d4 <__adddf3+0x10c>
 8000400:	f091 0f00 	teq	r1, #0
 8000404:	bf04      	itt	eq
 8000406:	4601      	moveq	r1, r0
 8000408:	2000      	moveq	r0, #0
 800040a:	fab1 f381 	clz	r3, r1
 800040e:	bf08      	it	eq
 8000410:	3320      	addeq	r3, #32
 8000412:	f1a3 030b 	sub.w	r3, r3, #11
 8000416:	f1b3 0220 	subs.w	r2, r3, #32
 800041a:	da0c      	bge.n	8000436 <__adddf3+0x16e>
 800041c:	320c      	adds	r2, #12
 800041e:	dd08      	ble.n	8000432 <__adddf3+0x16a>
 8000420:	f102 0c14 	add.w	ip, r2, #20
 8000424:	f1c2 020c 	rsb	r2, r2, #12
 8000428:	fa01 f00c 	lsl.w	r0, r1, ip
 800042c:	fa21 f102 	lsr.w	r1, r1, r2
 8000430:	e00c      	b.n	800044c <__adddf3+0x184>
 8000432:	f102 0214 	add.w	r2, r2, #20
 8000436:	bfd8      	it	le
 8000438:	f1c2 0c20 	rsble	ip, r2, #32
 800043c:	fa01 f102 	lsl.w	r1, r1, r2
 8000440:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000444:	bfdc      	itt	le
 8000446:	ea41 010c 	orrle.w	r1, r1, ip
 800044a:	4090      	lslle	r0, r2
 800044c:	1ae4      	subs	r4, r4, r3
 800044e:	bfa2      	ittt	ge
 8000450:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000454:	4329      	orrge	r1, r5
 8000456:	bd30      	popge	{r4, r5, pc}
 8000458:	ea6f 0404 	mvn.w	r4, r4
 800045c:	3c1f      	subs	r4, #31
 800045e:	da1c      	bge.n	800049a <__adddf3+0x1d2>
 8000460:	340c      	adds	r4, #12
 8000462:	dc0e      	bgt.n	8000482 <__adddf3+0x1ba>
 8000464:	f104 0414 	add.w	r4, r4, #20
 8000468:	f1c4 0220 	rsb	r2, r4, #32
 800046c:	fa20 f004 	lsr.w	r0, r0, r4
 8000470:	fa01 f302 	lsl.w	r3, r1, r2
 8000474:	ea40 0003 	orr.w	r0, r0, r3
 8000478:	fa21 f304 	lsr.w	r3, r1, r4
 800047c:	ea45 0103 	orr.w	r1, r5, r3
 8000480:	bd30      	pop	{r4, r5, pc}
 8000482:	f1c4 040c 	rsb	r4, r4, #12
 8000486:	f1c4 0220 	rsb	r2, r4, #32
 800048a:	fa20 f002 	lsr.w	r0, r0, r2
 800048e:	fa01 f304 	lsl.w	r3, r1, r4
 8000492:	ea40 0003 	orr.w	r0, r0, r3
 8000496:	4629      	mov	r1, r5
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	fa21 f004 	lsr.w	r0, r1, r4
 800049e:	4629      	mov	r1, r5
 80004a0:	bd30      	pop	{r4, r5, pc}
 80004a2:	f094 0f00 	teq	r4, #0
 80004a6:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004aa:	bf06      	itte	eq
 80004ac:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b0:	3401      	addeq	r4, #1
 80004b2:	3d01      	subne	r5, #1
 80004b4:	e74e      	b.n	8000354 <__adddf3+0x8c>
 80004b6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ba:	bf18      	it	ne
 80004bc:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c0:	d029      	beq.n	8000516 <__adddf3+0x24e>
 80004c2:	ea94 0f05 	teq	r4, r5
 80004c6:	bf08      	it	eq
 80004c8:	ea90 0f02 	teqeq	r0, r2
 80004cc:	d005      	beq.n	80004da <__adddf3+0x212>
 80004ce:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d2:	bf04      	itt	eq
 80004d4:	4619      	moveq	r1, r3
 80004d6:	4610      	moveq	r0, r2
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea91 0f03 	teq	r1, r3
 80004de:	bf1e      	ittt	ne
 80004e0:	2100      	movne	r1, #0
 80004e2:	2000      	movne	r0, #0
 80004e4:	bd30      	popne	{r4, r5, pc}
 80004e6:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ea:	d105      	bne.n	80004f8 <__adddf3+0x230>
 80004ec:	0040      	lsls	r0, r0, #1
 80004ee:	4149      	adcs	r1, r1
 80004f0:	bf28      	it	cs
 80004f2:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004f6:	bd30      	pop	{r4, r5, pc}
 80004f8:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004fc:	bf3c      	itt	cc
 80004fe:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000502:	bd30      	popcc	{r4, r5, pc}
 8000504:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000508:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 800050c:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000510:	f04f 0000 	mov.w	r0, #0
 8000514:	bd30      	pop	{r4, r5, pc}
 8000516:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051a:	bf1a      	itte	ne
 800051c:	4619      	movne	r1, r3
 800051e:	4610      	movne	r0, r2
 8000520:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000524:	bf1c      	itt	ne
 8000526:	460b      	movne	r3, r1
 8000528:	4602      	movne	r2, r0
 800052a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800052e:	bf06      	itte	eq
 8000530:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000534:	ea91 0f03 	teqeq	r1, r3
 8000538:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 800053c:	bd30      	pop	{r4, r5, pc}
 800053e:	bf00      	nop

08000540 <__aeabi_ui2d>:
 8000540:	f090 0f00 	teq	r0, #0
 8000544:	bf04      	itt	eq
 8000546:	2100      	moveq	r1, #0
 8000548:	4770      	bxeq	lr
 800054a:	b530      	push	{r4, r5, lr}
 800054c:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000550:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000554:	f04f 0500 	mov.w	r5, #0
 8000558:	f04f 0100 	mov.w	r1, #0
 800055c:	e750      	b.n	8000400 <__adddf3+0x138>
 800055e:	bf00      	nop

08000560 <__aeabi_i2d>:
 8000560:	f090 0f00 	teq	r0, #0
 8000564:	bf04      	itt	eq
 8000566:	2100      	moveq	r1, #0
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000570:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000574:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000578:	bf48      	it	mi
 800057a:	4240      	negmi	r0, r0
 800057c:	f04f 0100 	mov.w	r1, #0
 8000580:	e73e      	b.n	8000400 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_f2d>:
 8000584:	0042      	lsls	r2, r0, #1
 8000586:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058a:	ea4f 0131 	mov.w	r1, r1, rrx
 800058e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000592:	bf1f      	itttt	ne
 8000594:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000598:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 800059c:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a0:	4770      	bxne	lr
 80005a2:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005a6:	bf08      	it	eq
 80005a8:	4770      	bxeq	lr
 80005aa:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005ae:	bf04      	itt	eq
 80005b0:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b4:	4770      	bxeq	lr
 80005b6:	b530      	push	{r4, r5, lr}
 80005b8:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005bc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c4:	e71c      	b.n	8000400 <__adddf3+0x138>
 80005c6:	bf00      	nop

080005c8 <__aeabi_ul2d>:
 80005c8:	ea50 0201 	orrs.w	r2, r0, r1
 80005cc:	bf08      	it	eq
 80005ce:	4770      	bxeq	lr
 80005d0:	b530      	push	{r4, r5, lr}
 80005d2:	f04f 0500 	mov.w	r5, #0
 80005d6:	e00a      	b.n	80005ee <__aeabi_l2d+0x16>

080005d8 <__aeabi_l2d>:
 80005d8:	ea50 0201 	orrs.w	r2, r0, r1
 80005dc:	bf08      	it	eq
 80005de:	4770      	bxeq	lr
 80005e0:	b530      	push	{r4, r5, lr}
 80005e2:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005e6:	d502      	bpl.n	80005ee <__aeabi_l2d+0x16>
 80005e8:	4240      	negs	r0, r0
 80005ea:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005ee:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f2:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005f6:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fa:	f43f aed8 	beq.w	80003ae <__adddf3+0xe6>
 80005fe:	f04f 0203 	mov.w	r2, #3
 8000602:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000606:	bf18      	it	ne
 8000608:	3203      	addne	r2, #3
 800060a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060e:	bf18      	it	ne
 8000610:	3203      	addne	r2, #3
 8000612:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000616:	f1c2 0320 	rsb	r3, r2, #32
 800061a:	fa00 fc03 	lsl.w	ip, r0, r3
 800061e:	fa20 f002 	lsr.w	r0, r0, r2
 8000622:	fa01 fe03 	lsl.w	lr, r1, r3
 8000626:	ea40 000e 	orr.w	r0, r0, lr
 800062a:	fa21 f102 	lsr.w	r1, r1, r2
 800062e:	4414      	add	r4, r2
 8000630:	e6bd      	b.n	80003ae <__adddf3+0xe6>
 8000632:	bf00      	nop

08000634 <__aeabi_dmul>:
 8000634:	b570      	push	{r4, r5, r6, lr}
 8000636:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800063e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000642:	bf1d      	ittte	ne
 8000644:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000648:	ea94 0f0c 	teqne	r4, ip
 800064c:	ea95 0f0c 	teqne	r5, ip
 8000650:	f000 f8de 	bleq	8000810 <__aeabi_dmul+0x1dc>
 8000654:	442c      	add	r4, r5
 8000656:	ea81 0603 	eor.w	r6, r1, r3
 800065a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800065e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000662:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000666:	bf18      	it	ne
 8000668:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 800066c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000670:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000674:	d038      	beq.n	80006e8 <__aeabi_dmul+0xb4>
 8000676:	fba0 ce02 	umull	ip, lr, r0, r2
 800067a:	f04f 0500 	mov.w	r5, #0
 800067e:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000682:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000686:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068a:	f04f 0600 	mov.w	r6, #0
 800068e:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000692:	f09c 0f00 	teq	ip, #0
 8000696:	bf18      	it	ne
 8000698:	f04e 0e01 	orrne.w	lr, lr, #1
 800069c:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a0:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a4:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006a8:	d204      	bcs.n	80006b4 <__aeabi_dmul+0x80>
 80006aa:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006ae:	416d      	adcs	r5, r5
 80006b0:	eb46 0606 	adc.w	r6, r6, r6
 80006b4:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006b8:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006bc:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c0:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c4:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006c8:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006cc:	bf88      	it	hi
 80006ce:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d2:	d81e      	bhi.n	8000712 <__aeabi_dmul+0xde>
 80006d4:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006d8:	bf08      	it	eq
 80006da:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006de:	f150 0000 	adcs.w	r0, r0, #0
 80006e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006e6:	bd70      	pop	{r4, r5, r6, pc}
 80006e8:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006ec:	ea46 0101 	orr.w	r1, r6, r1
 80006f0:	ea40 0002 	orr.w	r0, r0, r2
 80006f4:	ea81 0103 	eor.w	r1, r1, r3
 80006f8:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006fc:	bfc2      	ittt	gt
 80006fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000702:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000706:	bd70      	popgt	{r4, r5, r6, pc}
 8000708:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800070c:	f04f 0e00 	mov.w	lr, #0
 8000710:	3c01      	subs	r4, #1
 8000712:	f300 80ab 	bgt.w	800086c <__aeabi_dmul+0x238>
 8000716:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071a:	bfde      	ittt	le
 800071c:	2000      	movle	r0, #0
 800071e:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000722:	bd70      	pople	{r4, r5, r6, pc}
 8000724:	f1c4 0400 	rsb	r4, r4, #0
 8000728:	3c20      	subs	r4, #32
 800072a:	da35      	bge.n	8000798 <__aeabi_dmul+0x164>
 800072c:	340c      	adds	r4, #12
 800072e:	dc1b      	bgt.n	8000768 <__aeabi_dmul+0x134>
 8000730:	f104 0414 	add.w	r4, r4, #20
 8000734:	f1c4 0520 	rsb	r5, r4, #32
 8000738:	fa00 f305 	lsl.w	r3, r0, r5
 800073c:	fa20 f004 	lsr.w	r0, r0, r4
 8000740:	fa01 f205 	lsl.w	r2, r1, r5
 8000744:	ea40 0002 	orr.w	r0, r0, r2
 8000748:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 800074c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000750:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000754:	fa21 f604 	lsr.w	r6, r1, r4
 8000758:	eb42 0106 	adc.w	r1, r2, r6
 800075c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000760:	bf08      	it	eq
 8000762:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000766:	bd70      	pop	{r4, r5, r6, pc}
 8000768:	f1c4 040c 	rsb	r4, r4, #12
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f304 	lsl.w	r3, r0, r4
 8000774:	fa20 f005 	lsr.w	r0, r0, r5
 8000778:	fa01 f204 	lsl.w	r2, r1, r4
 800077c:	ea40 0002 	orr.w	r0, r0, r2
 8000780:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000784:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000788:	f141 0100 	adc.w	r1, r1, #0
 800078c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000790:	bf08      	it	eq
 8000792:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000796:	bd70      	pop	{r4, r5, r6, pc}
 8000798:	f1c4 0520 	rsb	r5, r4, #32
 800079c:	fa00 f205 	lsl.w	r2, r0, r5
 80007a0:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a4:	fa20 f304 	lsr.w	r3, r0, r4
 80007a8:	fa01 f205 	lsl.w	r2, r1, r5
 80007ac:	ea43 0302 	orr.w	r3, r3, r2
 80007b0:	fa21 f004 	lsr.w	r0, r1, r4
 80007b4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007b8:	fa21 f204 	lsr.w	r2, r1, r4
 80007bc:	ea20 0002 	bic.w	r0, r0, r2
 80007c0:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007c8:	bf08      	it	eq
 80007ca:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ce:	bd70      	pop	{r4, r5, r6, pc}
 80007d0:	f094 0f00 	teq	r4, #0
 80007d4:	d10f      	bne.n	80007f6 <__aeabi_dmul+0x1c2>
 80007d6:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007da:	0040      	lsls	r0, r0, #1
 80007dc:	eb41 0101 	adc.w	r1, r1, r1
 80007e0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e4:	bf08      	it	eq
 80007e6:	3c01      	subeq	r4, #1
 80007e8:	d0f7      	beq.n	80007da <__aeabi_dmul+0x1a6>
 80007ea:	ea41 0106 	orr.w	r1, r1, r6
 80007ee:	f095 0f00 	teq	r5, #0
 80007f2:	bf18      	it	ne
 80007f4:	4770      	bxne	lr
 80007f6:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fa:	0052      	lsls	r2, r2, #1
 80007fc:	eb43 0303 	adc.w	r3, r3, r3
 8000800:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000804:	bf08      	it	eq
 8000806:	3d01      	subeq	r5, #1
 8000808:	d0f7      	beq.n	80007fa <__aeabi_dmul+0x1c6>
 800080a:	ea43 0306 	orr.w	r3, r3, r6
 800080e:	4770      	bx	lr
 8000810:	ea94 0f0c 	teq	r4, ip
 8000814:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000818:	bf18      	it	ne
 800081a:	ea95 0f0c 	teqne	r5, ip
 800081e:	d00c      	beq.n	800083a <__aeabi_dmul+0x206>
 8000820:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000824:	bf18      	it	ne
 8000826:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082a:	d1d1      	bne.n	80007d0 <__aeabi_dmul+0x19c>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f04f 0000 	mov.w	r0, #0
 8000838:	bd70      	pop	{r4, r5, r6, pc}
 800083a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800083e:	bf06      	itte	eq
 8000840:	4610      	moveq	r0, r2
 8000842:	4619      	moveq	r1, r3
 8000844:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000848:	d019      	beq.n	800087e <__aeabi_dmul+0x24a>
 800084a:	ea94 0f0c 	teq	r4, ip
 800084e:	d102      	bne.n	8000856 <__aeabi_dmul+0x222>
 8000850:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000854:	d113      	bne.n	800087e <__aeabi_dmul+0x24a>
 8000856:	ea95 0f0c 	teq	r5, ip
 800085a:	d105      	bne.n	8000868 <__aeabi_dmul+0x234>
 800085c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000860:	bf1c      	itt	ne
 8000862:	4610      	movne	r0, r2
 8000864:	4619      	movne	r1, r3
 8000866:	d10a      	bne.n	800087e <__aeabi_dmul+0x24a>
 8000868:	ea81 0103 	eor.w	r1, r1, r3
 800086c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000870:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000874:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000878:	f04f 0000 	mov.w	r0, #0
 800087c:	bd70      	pop	{r4, r5, r6, pc}
 800087e:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000882:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000886:	bd70      	pop	{r4, r5, r6, pc}

08000888 <__aeabi_ddiv>:
 8000888:	b570      	push	{r4, r5, r6, lr}
 800088a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800088e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000892:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000896:	bf1d      	ittte	ne
 8000898:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800089c:	ea94 0f0c 	teqne	r4, ip
 80008a0:	ea95 0f0c 	teqne	r5, ip
 80008a4:	f000 f8a7 	bleq	80009f6 <__aeabi_ddiv+0x16e>
 80008a8:	eba4 0405 	sub.w	r4, r4, r5
 80008ac:	ea81 0e03 	eor.w	lr, r1, r3
 80008b0:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008b8:	f000 8088 	beq.w	80009cc <__aeabi_ddiv+0x144>
 80008bc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c0:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c4:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008c8:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008cc:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d0:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d4:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008d8:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008dc:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e0:	429d      	cmp	r5, r3
 80008e2:	bf08      	it	eq
 80008e4:	4296      	cmpeq	r6, r2
 80008e6:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ea:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008ee:	d202      	bcs.n	80008f6 <__aeabi_ddiv+0x6e>
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	1ab6      	subs	r6, r6, r2
 80008f8:	eb65 0503 	sbc.w	r5, r5, r3
 80008fc:	085b      	lsrs	r3, r3, #1
 80008fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000902:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000906:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090a:	ebb6 0e02 	subs.w	lr, r6, r2
 800090e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000912:	bf22      	ittt	cs
 8000914:	1ab6      	subcs	r6, r6, r2
 8000916:	4675      	movcs	r5, lr
 8000918:	ea40 000c 	orrcs.w	r0, r0, ip
 800091c:	085b      	lsrs	r3, r3, #1
 800091e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000922:	ebb6 0e02 	subs.w	lr, r6, r2
 8000926:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092a:	bf22      	ittt	cs
 800092c:	1ab6      	subcs	r6, r6, r2
 800092e:	4675      	movcs	r5, lr
 8000930:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000934:	085b      	lsrs	r3, r3, #1
 8000936:	ea4f 0232 	mov.w	r2, r2, rrx
 800093a:	ebb6 0e02 	subs.w	lr, r6, r2
 800093e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000942:	bf22      	ittt	cs
 8000944:	1ab6      	subcs	r6, r6, r2
 8000946:	4675      	movcs	r5, lr
 8000948:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800094c:	085b      	lsrs	r3, r3, #1
 800094e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000952:	ebb6 0e02 	subs.w	lr, r6, r2
 8000956:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095a:	bf22      	ittt	cs
 800095c:	1ab6      	subcs	r6, r6, r2
 800095e:	4675      	movcs	r5, lr
 8000960:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000964:	ea55 0e06 	orrs.w	lr, r5, r6
 8000968:	d018      	beq.n	800099c <__aeabi_ddiv+0x114>
 800096a:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800096e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000972:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000976:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800097e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000982:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000986:	d1c0      	bne.n	800090a <__aeabi_ddiv+0x82>
 8000988:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 800098c:	d10b      	bne.n	80009a6 <__aeabi_ddiv+0x11e>
 800098e:	ea41 0100 	orr.w	r1, r1, r0
 8000992:	f04f 0000 	mov.w	r0, #0
 8000996:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099a:	e7b6      	b.n	800090a <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a0:	bf04      	itt	eq
 80009a2:	4301      	orreq	r1, r0
 80009a4:	2000      	moveq	r0, #0
 80009a6:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009aa:	bf88      	it	hi
 80009ac:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b0:	f63f aeaf 	bhi.w	8000712 <__aeabi_dmul+0xde>
 80009b4:	ebb5 0c03 	subs.w	ip, r5, r3
 80009b8:	bf04      	itt	eq
 80009ba:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c2:	f150 0000 	adcs.w	r0, r0, #0
 80009c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ca:	bd70      	pop	{r4, r5, r6, pc}
 80009cc:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d0:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d4:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009d8:	bfc2      	ittt	gt
 80009da:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009de:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e2:	bd70      	popgt	{r4, r5, r6, pc}
 80009e4:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009e8:	f04f 0e00 	mov.w	lr, #0
 80009ec:	3c01      	subs	r4, #1
 80009ee:	e690      	b.n	8000712 <__aeabi_dmul+0xde>
 80009f0:	ea45 0e06 	orr.w	lr, r5, r6
 80009f4:	e68d      	b.n	8000712 <__aeabi_dmul+0xde>
 80009f6:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fa:	ea94 0f0c 	teq	r4, ip
 80009fe:	bf08      	it	eq
 8000a00:	ea95 0f0c 	teqeq	r5, ip
 8000a04:	f43f af3b 	beq.w	800087e <__aeabi_dmul+0x24a>
 8000a08:	ea94 0f0c 	teq	r4, ip
 8000a0c:	d10a      	bne.n	8000a24 <__aeabi_ddiv+0x19c>
 8000a0e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a12:	f47f af34 	bne.w	800087e <__aeabi_dmul+0x24a>
 8000a16:	ea95 0f0c 	teq	r5, ip
 8000a1a:	f47f af25 	bne.w	8000868 <__aeabi_dmul+0x234>
 8000a1e:	4610      	mov	r0, r2
 8000a20:	4619      	mov	r1, r3
 8000a22:	e72c      	b.n	800087e <__aeabi_dmul+0x24a>
 8000a24:	ea95 0f0c 	teq	r5, ip
 8000a28:	d106      	bne.n	8000a38 <__aeabi_ddiv+0x1b0>
 8000a2a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a2e:	f43f aefd 	beq.w	800082c <__aeabi_dmul+0x1f8>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e722      	b.n	800087e <__aeabi_dmul+0x24a>
 8000a38:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a3c:	bf18      	it	ne
 8000a3e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a42:	f47f aec5 	bne.w	80007d0 <__aeabi_dmul+0x19c>
 8000a46:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4a:	f47f af0d 	bne.w	8000868 <__aeabi_dmul+0x234>
 8000a4e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a52:	f47f aeeb 	bne.w	800082c <__aeabi_dmul+0x1f8>
 8000a56:	e712      	b.n	800087e <__aeabi_dmul+0x24a>

08000a58 <__gedf2>:
 8000a58:	f04f 3cff 	mov.w	ip, #4294967295
 8000a5c:	e006      	b.n	8000a6c <__cmpdf2+0x4>
 8000a5e:	bf00      	nop

08000a60 <__ledf2>:
 8000a60:	f04f 0c01 	mov.w	ip, #1
 8000a64:	e002      	b.n	8000a6c <__cmpdf2+0x4>
 8000a66:	bf00      	nop

08000a68 <__cmpdf2>:
 8000a68:	f04f 0c01 	mov.w	ip, #1
 8000a6c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a70:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a78:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a7c:	bf18      	it	ne
 8000a7e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a82:	d01b      	beq.n	8000abc <__cmpdf2+0x54>
 8000a84:	b001      	add	sp, #4
 8000a86:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8a:	bf0c      	ite	eq
 8000a8c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a90:	ea91 0f03 	teqne	r1, r3
 8000a94:	bf02      	ittt	eq
 8000a96:	ea90 0f02 	teqeq	r0, r2
 8000a9a:	2000      	moveq	r0, #0
 8000a9c:	4770      	bxeq	lr
 8000a9e:	f110 0f00 	cmn.w	r0, #0
 8000aa2:	ea91 0f03 	teq	r1, r3
 8000aa6:	bf58      	it	pl
 8000aa8:	4299      	cmppl	r1, r3
 8000aaa:	bf08      	it	eq
 8000aac:	4290      	cmpeq	r0, r2
 8000aae:	bf2c      	ite	cs
 8000ab0:	17d8      	asrcs	r0, r3, #31
 8000ab2:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ab6:	f040 0001 	orr.w	r0, r0, #1
 8000aba:	4770      	bx	lr
 8000abc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac4:	d102      	bne.n	8000acc <__cmpdf2+0x64>
 8000ac6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aca:	d107      	bne.n	8000adc <__cmpdf2+0x74>
 8000acc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad4:	d1d6      	bne.n	8000a84 <__cmpdf2+0x1c>
 8000ad6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ada:	d0d3      	beq.n	8000a84 <__cmpdf2+0x1c>
 8000adc:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae0:	4770      	bx	lr
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_cdrcmple>:
 8000ae4:	4684      	mov	ip, r0
 8000ae6:	4610      	mov	r0, r2
 8000ae8:	4662      	mov	r2, ip
 8000aea:	468c      	mov	ip, r1
 8000aec:	4619      	mov	r1, r3
 8000aee:	4663      	mov	r3, ip
 8000af0:	e000      	b.n	8000af4 <__aeabi_cdcmpeq>
 8000af2:	bf00      	nop

08000af4 <__aeabi_cdcmpeq>:
 8000af4:	b501      	push	{r0, lr}
 8000af6:	f7ff ffb7 	bl	8000a68 <__cmpdf2>
 8000afa:	2800      	cmp	r0, #0
 8000afc:	bf48      	it	mi
 8000afe:	f110 0f00 	cmnmi.w	r0, #0
 8000b02:	bd01      	pop	{r0, pc}

08000b04 <__aeabi_dcmpeq>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff fff4 	bl	8000af4 <__aeabi_cdcmpeq>
 8000b0c:	bf0c      	ite	eq
 8000b0e:	2001      	moveq	r0, #1
 8000b10:	2000      	movne	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmplt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffea 	bl	8000af4 <__aeabi_cdcmpeq>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmple>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffe0 	bl	8000af4 <__aeabi_cdcmpeq>
 8000b34:	bf94      	ite	ls
 8000b36:	2001      	movls	r0, #1
 8000b38:	2000      	movhi	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmpge>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffce 	bl	8000ae4 <__aeabi_cdrcmple>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpgt>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffc4 	bl	8000ae4 <__aeabi_cdrcmple>
 8000b5c:	bf34      	ite	cc
 8000b5e:	2001      	movcc	r0, #1
 8000b60:	2000      	movcs	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpun>:
 8000b68:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b6c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b70:	d102      	bne.n	8000b78 <__aeabi_dcmpun+0x10>
 8000b72:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b76:	d10a      	bne.n	8000b8e <__aeabi_dcmpun+0x26>
 8000b78:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b7c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b80:	d102      	bne.n	8000b88 <__aeabi_dcmpun+0x20>
 8000b82:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b86:	d102      	bne.n	8000b8e <__aeabi_dcmpun+0x26>
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	f04f 0001 	mov.w	r0, #1
 8000b92:	4770      	bx	lr

08000b94 <__aeabi_d2iz>:
 8000b94:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b98:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b9c:	d215      	bcs.n	8000bca <__aeabi_d2iz+0x36>
 8000b9e:	d511      	bpl.n	8000bc4 <__aeabi_d2iz+0x30>
 8000ba0:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ba8:	d912      	bls.n	8000bd0 <__aeabi_d2iz+0x3c>
 8000baa:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bae:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bba:	fa23 f002 	lsr.w	r0, r3, r2
 8000bbe:	bf18      	it	ne
 8000bc0:	4240      	negne	r0, r0
 8000bc2:	4770      	bx	lr
 8000bc4:	f04f 0000 	mov.w	r0, #0
 8000bc8:	4770      	bx	lr
 8000bca:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bce:	d105      	bne.n	8000bdc <__aeabi_d2iz+0x48>
 8000bd0:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd4:	bf08      	it	eq
 8000bd6:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bda:	4770      	bx	lr
 8000bdc:	f04f 0000 	mov.w	r0, #0
 8000be0:	4770      	bx	lr
 8000be2:	bf00      	nop

08000be4 <__aeabi_d2uiz>:
 8000be4:	004a      	lsls	r2, r1, #1
 8000be6:	d211      	bcs.n	8000c0c <__aeabi_d2uiz+0x28>
 8000be8:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bec:	d211      	bcs.n	8000c12 <__aeabi_d2uiz+0x2e>
 8000bee:	d50d      	bpl.n	8000c0c <__aeabi_d2uiz+0x28>
 8000bf0:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bf4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bf8:	d40e      	bmi.n	8000c18 <__aeabi_d2uiz+0x34>
 8000bfa:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bfe:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c02:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c06:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0a:	4770      	bx	lr
 8000c0c:	f04f 0000 	mov.w	r0, #0
 8000c10:	4770      	bx	lr
 8000c12:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c16:	d102      	bne.n	8000c1e <__aeabi_d2uiz+0x3a>
 8000c18:	f04f 30ff 	mov.w	r0, #4294967295
 8000c1c:	4770      	bx	lr
 8000c1e:	f04f 0000 	mov.w	r0, #0
 8000c22:	4770      	bx	lr

08000c24 <__aeabi_d2f>:
 8000c24:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c28:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c2c:	bf24      	itt	cs
 8000c2e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c32:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c36:	d90d      	bls.n	8000c54 <__aeabi_d2f+0x30>
 8000c38:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c3c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c40:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c44:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c48:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c4c:	bf08      	it	eq
 8000c4e:	f020 0001 	biceq.w	r0, r0, #1
 8000c52:	4770      	bx	lr
 8000c54:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c58:	d121      	bne.n	8000c9e <__aeabi_d2f+0x7a>
 8000c5a:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c5e:	bfbc      	itt	lt
 8000c60:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c64:	4770      	bxlt	lr
 8000c66:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c6a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c6e:	f1c2 0218 	rsb	r2, r2, #24
 8000c72:	f1c2 0c20 	rsb	ip, r2, #32
 8000c76:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7a:	fa20 f002 	lsr.w	r0, r0, r2
 8000c7e:	bf18      	it	ne
 8000c80:	f040 0001 	orrne.w	r0, r0, #1
 8000c84:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c88:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c8c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c90:	ea40 000c 	orr.w	r0, r0, ip
 8000c94:	fa23 f302 	lsr.w	r3, r3, r2
 8000c98:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c9c:	e7cc      	b.n	8000c38 <__aeabi_d2f+0x14>
 8000c9e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca2:	d107      	bne.n	8000cb4 <__aeabi_d2f+0x90>
 8000ca4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ca8:	bf1e      	ittt	ne
 8000caa:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cae:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cb2:	4770      	bxne	lr
 8000cb4:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000cb8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cbc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cc0:	4770      	bx	lr
 8000cc2:	bf00      	nop

08000cc4 <__aeabi_uldivmod>:
 8000cc4:	b953      	cbnz	r3, 8000cdc <__aeabi_uldivmod+0x18>
 8000cc6:	b94a      	cbnz	r2, 8000cdc <__aeabi_uldivmod+0x18>
 8000cc8:	2900      	cmp	r1, #0
 8000cca:	bf08      	it	eq
 8000ccc:	2800      	cmpeq	r0, #0
 8000cce:	bf1c      	itt	ne
 8000cd0:	f04f 31ff 	movne.w	r1, #4294967295
 8000cd4:	f04f 30ff 	movne.w	r0, #4294967295
 8000cd8:	f000 b9b4 	b.w	8001044 <__aeabi_idiv0>
 8000cdc:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce4:	f000 f83c 	bl	8000d60 <__udivmoddi4>
 8000ce8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf0:	b004      	add	sp, #16
 8000cf2:	4770      	bx	lr

08000cf4 <__aeabi_d2lz>:
 8000cf4:	b538      	push	{r3, r4, r5, lr}
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	460d      	mov	r5, r1
 8000cfe:	f7ff ff0b 	bl	8000b18 <__aeabi_dcmplt>
 8000d02:	b928      	cbnz	r0, 8000d10 <__aeabi_d2lz+0x1c>
 8000d04:	4620      	mov	r0, r4
 8000d06:	4629      	mov	r1, r5
 8000d08:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d0c:	f000 b80a 	b.w	8000d24 <__aeabi_d2ulz>
 8000d10:	4620      	mov	r0, r4
 8000d12:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d16:	f000 f805 	bl	8000d24 <__aeabi_d2ulz>
 8000d1a:	4240      	negs	r0, r0
 8000d1c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d20:	bd38      	pop	{r3, r4, r5, pc}
 8000d22:	bf00      	nop

08000d24 <__aeabi_d2ulz>:
 8000d24:	b5d0      	push	{r4, r6, r7, lr}
 8000d26:	2200      	movs	r2, #0
 8000d28:	4b0b      	ldr	r3, [pc, #44]	@ (8000d58 <__aeabi_d2ulz+0x34>)
 8000d2a:	4606      	mov	r6, r0
 8000d2c:	460f      	mov	r7, r1
 8000d2e:	f7ff fc81 	bl	8000634 <__aeabi_dmul>
 8000d32:	f7ff ff57 	bl	8000be4 <__aeabi_d2uiz>
 8000d36:	4604      	mov	r4, r0
 8000d38:	f7ff fc02 	bl	8000540 <__aeabi_ui2d>
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	4b07      	ldr	r3, [pc, #28]	@ (8000d5c <__aeabi_d2ulz+0x38>)
 8000d40:	f7ff fc78 	bl	8000634 <__aeabi_dmul>
 8000d44:	4602      	mov	r2, r0
 8000d46:	460b      	mov	r3, r1
 8000d48:	4630      	mov	r0, r6
 8000d4a:	4639      	mov	r1, r7
 8000d4c:	f7ff faba 	bl	80002c4 <__aeabi_dsub>
 8000d50:	f7ff ff48 	bl	8000be4 <__aeabi_d2uiz>
 8000d54:	4621      	mov	r1, r4
 8000d56:	bdd0      	pop	{r4, r6, r7, pc}
 8000d58:	3df00000 	.word	0x3df00000
 8000d5c:	41f00000 	.word	0x41f00000

08000d60 <__udivmoddi4>:
 8000d60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000d64:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8000d66:	460c      	mov	r4, r1
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d14d      	bne.n	8000e08 <__udivmoddi4+0xa8>
 8000d6c:	428a      	cmp	r2, r1
 8000d6e:	460f      	mov	r7, r1
 8000d70:	4684      	mov	ip, r0
 8000d72:	4696      	mov	lr, r2
 8000d74:	fab2 f382 	clz	r3, r2
 8000d78:	d960      	bls.n	8000e3c <__udivmoddi4+0xdc>
 8000d7a:	b14b      	cbz	r3, 8000d90 <__udivmoddi4+0x30>
 8000d7c:	fa02 fe03 	lsl.w	lr, r2, r3
 8000d80:	f1c3 0220 	rsb	r2, r3, #32
 8000d84:	409f      	lsls	r7, r3
 8000d86:	fa00 fc03 	lsl.w	ip, r0, r3
 8000d8a:	fa20 f202 	lsr.w	r2, r0, r2
 8000d8e:	4317      	orrs	r7, r2
 8000d90:	ea4f 461e 	mov.w	r6, lr, lsr #16
 8000d94:	fa1f f48e 	uxth.w	r4, lr
 8000d98:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8000d9c:	fbb7 f1f6 	udiv	r1, r7, r6
 8000da0:	fb06 7711 	mls	r7, r6, r1, r7
 8000da4:	fb01 f004 	mul.w	r0, r1, r4
 8000da8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000dac:	4290      	cmp	r0, r2
 8000dae:	d908      	bls.n	8000dc2 <__udivmoddi4+0x62>
 8000db0:	eb1e 0202 	adds.w	r2, lr, r2
 8000db4:	f101 37ff 	add.w	r7, r1, #4294967295
 8000db8:	d202      	bcs.n	8000dc0 <__udivmoddi4+0x60>
 8000dba:	4290      	cmp	r0, r2
 8000dbc:	f200 812d 	bhi.w	800101a <__udivmoddi4+0x2ba>
 8000dc0:	4639      	mov	r1, r7
 8000dc2:	1a12      	subs	r2, r2, r0
 8000dc4:	fa1f fc8c 	uxth.w	ip, ip
 8000dc8:	fbb2 f0f6 	udiv	r0, r2, r6
 8000dcc:	fb06 2210 	mls	r2, r6, r0, r2
 8000dd0:	fb00 f404 	mul.w	r4, r0, r4
 8000dd4:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8000dd8:	4564      	cmp	r4, ip
 8000dda:	d908      	bls.n	8000dee <__udivmoddi4+0x8e>
 8000ddc:	eb1e 0c0c 	adds.w	ip, lr, ip
 8000de0:	f100 32ff 	add.w	r2, r0, #4294967295
 8000de4:	d202      	bcs.n	8000dec <__udivmoddi4+0x8c>
 8000de6:	4564      	cmp	r4, ip
 8000de8:	f200 811a 	bhi.w	8001020 <__udivmoddi4+0x2c0>
 8000dec:	4610      	mov	r0, r2
 8000dee:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000df2:	ebac 0c04 	sub.w	ip, ip, r4
 8000df6:	2100      	movs	r1, #0
 8000df8:	b125      	cbz	r5, 8000e04 <__udivmoddi4+0xa4>
 8000dfa:	fa2c f303 	lsr.w	r3, ip, r3
 8000dfe:	2200      	movs	r2, #0
 8000e00:	e9c5 3200 	strd	r3, r2, [r5]
 8000e04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000e08:	428b      	cmp	r3, r1
 8000e0a:	d905      	bls.n	8000e18 <__udivmoddi4+0xb8>
 8000e0c:	b10d      	cbz	r5, 8000e12 <__udivmoddi4+0xb2>
 8000e0e:	e9c5 0100 	strd	r0, r1, [r5]
 8000e12:	2100      	movs	r1, #0
 8000e14:	4608      	mov	r0, r1
 8000e16:	e7f5      	b.n	8000e04 <__udivmoddi4+0xa4>
 8000e18:	fab3 f183 	clz	r1, r3
 8000e1c:	2900      	cmp	r1, #0
 8000e1e:	d14d      	bne.n	8000ebc <__udivmoddi4+0x15c>
 8000e20:	42a3      	cmp	r3, r4
 8000e22:	f0c0 80f2 	bcc.w	800100a <__udivmoddi4+0x2aa>
 8000e26:	4290      	cmp	r0, r2
 8000e28:	f080 80ef 	bcs.w	800100a <__udivmoddi4+0x2aa>
 8000e2c:	4606      	mov	r6, r0
 8000e2e:	4623      	mov	r3, r4
 8000e30:	4608      	mov	r0, r1
 8000e32:	2d00      	cmp	r5, #0
 8000e34:	d0e6      	beq.n	8000e04 <__udivmoddi4+0xa4>
 8000e36:	e9c5 6300 	strd	r6, r3, [r5]
 8000e3a:	e7e3      	b.n	8000e04 <__udivmoddi4+0xa4>
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	f040 80a2 	bne.w	8000f86 <__udivmoddi4+0x226>
 8000e42:	1a8a      	subs	r2, r1, r2
 8000e44:	ea4f 471e 	mov.w	r7, lr, lsr #16
 8000e48:	fa1f f68e 	uxth.w	r6, lr
 8000e4c:	2101      	movs	r1, #1
 8000e4e:	fbb2 f4f7 	udiv	r4, r2, r7
 8000e52:	fb07 2014 	mls	r0, r7, r4, r2
 8000e56:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8000e5a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e5e:	fb06 f004 	mul.w	r0, r6, r4
 8000e62:	4290      	cmp	r0, r2
 8000e64:	d90f      	bls.n	8000e86 <__udivmoddi4+0x126>
 8000e66:	eb1e 0202 	adds.w	r2, lr, r2
 8000e6a:	f104 38ff 	add.w	r8, r4, #4294967295
 8000e6e:	bf2c      	ite	cs
 8000e70:	f04f 0901 	movcs.w	r9, #1
 8000e74:	f04f 0900 	movcc.w	r9, #0
 8000e78:	4290      	cmp	r0, r2
 8000e7a:	d903      	bls.n	8000e84 <__udivmoddi4+0x124>
 8000e7c:	f1b9 0f00 	cmp.w	r9, #0
 8000e80:	f000 80c8 	beq.w	8001014 <__udivmoddi4+0x2b4>
 8000e84:	4644      	mov	r4, r8
 8000e86:	1a12      	subs	r2, r2, r0
 8000e88:	fa1f fc8c 	uxth.w	ip, ip
 8000e8c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e90:	fb07 2210 	mls	r2, r7, r0, r2
 8000e94:	fb00 f606 	mul.w	r6, r0, r6
 8000e98:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8000e9c:	4566      	cmp	r6, ip
 8000e9e:	d908      	bls.n	8000eb2 <__udivmoddi4+0x152>
 8000ea0:	eb1e 0c0c 	adds.w	ip, lr, ip
 8000ea4:	f100 32ff 	add.w	r2, r0, #4294967295
 8000ea8:	d202      	bcs.n	8000eb0 <__udivmoddi4+0x150>
 8000eaa:	4566      	cmp	r6, ip
 8000eac:	f200 80bb 	bhi.w	8001026 <__udivmoddi4+0x2c6>
 8000eb0:	4610      	mov	r0, r2
 8000eb2:	ebac 0c06 	sub.w	ip, ip, r6
 8000eb6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000eba:	e79d      	b.n	8000df8 <__udivmoddi4+0x98>
 8000ebc:	f1c1 0620 	rsb	r6, r1, #32
 8000ec0:	408b      	lsls	r3, r1
 8000ec2:	fa04 fe01 	lsl.w	lr, r4, r1
 8000ec6:	fa22 f706 	lsr.w	r7, r2, r6
 8000eca:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ece:	40f4      	lsrs	r4, r6
 8000ed0:	408a      	lsls	r2, r1
 8000ed2:	431f      	orrs	r7, r3
 8000ed4:	ea4e 030c 	orr.w	r3, lr, ip
 8000ed8:	fa00 fe01 	lsl.w	lr, r0, r1
 8000edc:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000ee0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ee4:	fa1f fc87 	uxth.w	ip, r7
 8000ee8:	fbb4 f0f8 	udiv	r0, r4, r8
 8000eec:	fb08 4410 	mls	r4, r8, r0, r4
 8000ef0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ef4:	fb00 f90c 	mul.w	r9, r0, ip
 8000ef8:	45a1      	cmp	r9, r4
 8000efa:	d90e      	bls.n	8000f1a <__udivmoddi4+0x1ba>
 8000efc:	193c      	adds	r4, r7, r4
 8000efe:	f100 3aff 	add.w	sl, r0, #4294967295
 8000f02:	bf2c      	ite	cs
 8000f04:	f04f 0b01 	movcs.w	fp, #1
 8000f08:	f04f 0b00 	movcc.w	fp, #0
 8000f0c:	45a1      	cmp	r9, r4
 8000f0e:	d903      	bls.n	8000f18 <__udivmoddi4+0x1b8>
 8000f10:	f1bb 0f00 	cmp.w	fp, #0
 8000f14:	f000 8093 	beq.w	800103e <__udivmoddi4+0x2de>
 8000f18:	4650      	mov	r0, sl
 8000f1a:	eba4 0409 	sub.w	r4, r4, r9
 8000f1e:	fa1f f983 	uxth.w	r9, r3
 8000f22:	fbb4 f3f8 	udiv	r3, r4, r8
 8000f26:	fb08 4413 	mls	r4, r8, r3, r4
 8000f2a:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f2e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f32:	45a4      	cmp	ip, r4
 8000f34:	d906      	bls.n	8000f44 <__udivmoddi4+0x1e4>
 8000f36:	193c      	adds	r4, r7, r4
 8000f38:	f103 38ff 	add.w	r8, r3, #4294967295
 8000f3c:	d201      	bcs.n	8000f42 <__udivmoddi4+0x1e2>
 8000f3e:	45a4      	cmp	ip, r4
 8000f40:	d87a      	bhi.n	8001038 <__udivmoddi4+0x2d8>
 8000f42:	4643      	mov	r3, r8
 8000f44:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000f48:	eba4 040c 	sub.w	r4, r4, ip
 8000f4c:	fba0 9802 	umull	r9, r8, r0, r2
 8000f50:	4544      	cmp	r4, r8
 8000f52:	46cc      	mov	ip, r9
 8000f54:	4643      	mov	r3, r8
 8000f56:	d302      	bcc.n	8000f5e <__udivmoddi4+0x1fe>
 8000f58:	d106      	bne.n	8000f68 <__udivmoddi4+0x208>
 8000f5a:	45ce      	cmp	lr, r9
 8000f5c:	d204      	bcs.n	8000f68 <__udivmoddi4+0x208>
 8000f5e:	3801      	subs	r0, #1
 8000f60:	ebb9 0c02 	subs.w	ip, r9, r2
 8000f64:	eb68 0307 	sbc.w	r3, r8, r7
 8000f68:	b15d      	cbz	r5, 8000f82 <__udivmoddi4+0x222>
 8000f6a:	ebbe 020c 	subs.w	r2, lr, ip
 8000f6e:	eb64 0403 	sbc.w	r4, r4, r3
 8000f72:	fa04 f606 	lsl.w	r6, r4, r6
 8000f76:	fa22 f301 	lsr.w	r3, r2, r1
 8000f7a:	40cc      	lsrs	r4, r1
 8000f7c:	431e      	orrs	r6, r3
 8000f7e:	e9c5 6400 	strd	r6, r4, [r5]
 8000f82:	2100      	movs	r1, #0
 8000f84:	e73e      	b.n	8000e04 <__udivmoddi4+0xa4>
 8000f86:	fa02 fe03 	lsl.w	lr, r2, r3
 8000f8a:	f1c3 0120 	rsb	r1, r3, #32
 8000f8e:	fa04 f203 	lsl.w	r2, r4, r3
 8000f92:	fa00 fc03 	lsl.w	ip, r0, r3
 8000f96:	40cc      	lsrs	r4, r1
 8000f98:	ea4f 471e 	mov.w	r7, lr, lsr #16
 8000f9c:	fa20 f101 	lsr.w	r1, r0, r1
 8000fa0:	fa1f f68e 	uxth.w	r6, lr
 8000fa4:	fbb4 f0f7 	udiv	r0, r4, r7
 8000fa8:	430a      	orrs	r2, r1
 8000faa:	fb07 4410 	mls	r4, r7, r0, r4
 8000fae:	0c11      	lsrs	r1, r2, #16
 8000fb0:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8000fb4:	fb00 f406 	mul.w	r4, r0, r6
 8000fb8:	428c      	cmp	r4, r1
 8000fba:	d90e      	bls.n	8000fda <__udivmoddi4+0x27a>
 8000fbc:	eb1e 0101 	adds.w	r1, lr, r1
 8000fc0:	f100 38ff 	add.w	r8, r0, #4294967295
 8000fc4:	bf2c      	ite	cs
 8000fc6:	f04f 0901 	movcs.w	r9, #1
 8000fca:	f04f 0900 	movcc.w	r9, #0
 8000fce:	428c      	cmp	r4, r1
 8000fd0:	d902      	bls.n	8000fd8 <__udivmoddi4+0x278>
 8000fd2:	f1b9 0f00 	cmp.w	r9, #0
 8000fd6:	d02c      	beq.n	8001032 <__udivmoddi4+0x2d2>
 8000fd8:	4640      	mov	r0, r8
 8000fda:	1b09      	subs	r1, r1, r4
 8000fdc:	b292      	uxth	r2, r2
 8000fde:	fbb1 f4f7 	udiv	r4, r1, r7
 8000fe2:	fb07 1114 	mls	r1, r7, r4, r1
 8000fe6:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fea:	fb04 f106 	mul.w	r1, r4, r6
 8000fee:	4291      	cmp	r1, r2
 8000ff0:	d907      	bls.n	8001002 <__udivmoddi4+0x2a2>
 8000ff2:	eb1e 0202 	adds.w	r2, lr, r2
 8000ff6:	f104 38ff 	add.w	r8, r4, #4294967295
 8000ffa:	d201      	bcs.n	8001000 <__udivmoddi4+0x2a0>
 8000ffc:	4291      	cmp	r1, r2
 8000ffe:	d815      	bhi.n	800102c <__udivmoddi4+0x2cc>
 8001000:	4644      	mov	r4, r8
 8001002:	1a52      	subs	r2, r2, r1
 8001004:	ea44 4100 	orr.w	r1, r4, r0, lsl #16
 8001008:	e721      	b.n	8000e4e <__udivmoddi4+0xee>
 800100a:	1a86      	subs	r6, r0, r2
 800100c:	eb64 0303 	sbc.w	r3, r4, r3
 8001010:	2001      	movs	r0, #1
 8001012:	e70e      	b.n	8000e32 <__udivmoddi4+0xd2>
 8001014:	3c02      	subs	r4, #2
 8001016:	4472      	add	r2, lr
 8001018:	e735      	b.n	8000e86 <__udivmoddi4+0x126>
 800101a:	3902      	subs	r1, #2
 800101c:	4472      	add	r2, lr
 800101e:	e6d0      	b.n	8000dc2 <__udivmoddi4+0x62>
 8001020:	44f4      	add	ip, lr
 8001022:	3802      	subs	r0, #2
 8001024:	e6e3      	b.n	8000dee <__udivmoddi4+0x8e>
 8001026:	44f4      	add	ip, lr
 8001028:	3802      	subs	r0, #2
 800102a:	e742      	b.n	8000eb2 <__udivmoddi4+0x152>
 800102c:	3c02      	subs	r4, #2
 800102e:	4472      	add	r2, lr
 8001030:	e7e7      	b.n	8001002 <__udivmoddi4+0x2a2>
 8001032:	3802      	subs	r0, #2
 8001034:	4471      	add	r1, lr
 8001036:	e7d0      	b.n	8000fda <__udivmoddi4+0x27a>
 8001038:	3b02      	subs	r3, #2
 800103a:	443c      	add	r4, r7
 800103c:	e782      	b.n	8000f44 <__udivmoddi4+0x1e4>
 800103e:	3802      	subs	r0, #2
 8001040:	443c      	add	r4, r7
 8001042:	e76a      	b.n	8000f1a <__udivmoddi4+0x1ba>

08001044 <__aeabi_idiv0>:
 8001044:	4770      	bx	lr
 8001046:	bf00      	nop

08001048 <__io_putchar>:
unsigned char RxData[64];
int before;
char voltage1[5], current1[5], SoC1[5], status1[10], SoH1[5];
char voltage2[5], current2[5], SoC2[5], status2[10], SoH2[5];
char temperature[5], activePowerSource[10], emergencybattery[10];
void __io_putchar(char ch) {
 8001048:	b580      	push	{r7, lr}
 800104a:	b082      	sub	sp, #8
 800104c:	af00      	add	r7, sp, #0
 800104e:	4603      	mov	r3, r0
 8001050:	71fb      	strb	r3, [r7, #7]
	HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 10);
 8001052:	1df9      	adds	r1, r7, #7
 8001054:	230a      	movs	r3, #10
 8001056:	2201      	movs	r2, #1
 8001058:	4803      	ldr	r0, [pc, #12]	@ (8001068 <__io_putchar+0x20>)
 800105a:	f005 fe73 	bl	8006d44 <HAL_UART_Transmit>
}
 800105e:	bf00      	nop
 8001060:	3708      	adds	r7, #8
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}
 8001066:	bf00      	nop
 8001068:	2000023c 	.word	0x2000023c

0800106c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b082      	sub	sp, #8
 8001070:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001072:	f000 ff61 	bl	8001f38 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001076:	f000 f8e7 	bl	8001248 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800107a:	f000 fa9f 	bl	80015bc <MX_GPIO_Init>
  MX_GPDMA1_Init();
 800107e:	f000 f945 	bl	800130c <MX_GPDMA1_Init>
  MX_USART1_UART_Init();
 8001082:	f000 fa03 	bl	800148c <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8001086:	f000 fa4d 	bl	8001524 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 800108a:	f000 f95f 	bl	800134c <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_HalfDuplex_EnableReceiver(&huart2);
 800108e:	4854      	ldr	r0, [pc, #336]	@ (80011e0 <main+0x174>)
 8001090:	f006 fb30 	bl	80076f4 <HAL_HalfDuplex_EnableReceiver>
  Beep_Beep(3,50,50);
 8001094:	2232      	movs	r2, #50	@ 0x32
 8001096:	2132      	movs	r1, #50	@ 0x32
 8001098:	2003      	movs	r0, #3
 800109a:	f000 fbd1 	bl	8001840 <Beep_Beep>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  HAL_UART_Receive(&huart1, &rxData, 1, 50);
 800109e:	2332      	movs	r3, #50	@ 0x32
 80010a0:	2201      	movs	r2, #1
 80010a2:	4950      	ldr	r1, [pc, #320]	@ (80011e4 <main+0x178>)
 80010a4:	4850      	ldr	r0, [pc, #320]	@ (80011e8 <main+0x17c>)
 80010a6:	f005 feeb 	bl	8006e80 <HAL_UART_Receive>
	  if (rxData == '1'){ //Hidupkan charger Batt1
 80010aa:	4b4e      	ldr	r3, [pc, #312]	@ (80011e4 <main+0x178>)
 80010ac:	781b      	ldrb	r3, [r3, #0]
 80010ae:	2b31      	cmp	r3, #49	@ 0x31
 80010b0:	d10d      	bne.n	80010ce <main+0x62>
		  request = 0x15;
 80010b2:	4b4e      	ldr	r3, [pc, #312]	@ (80011ec <main+0x180>)
 80010b4:	2215      	movs	r2, #21
 80010b6:	701a      	strb	r2, [r3, #0]
		  HAL_UART_Transmit(&huart2, &request, 1, 1000);
 80010b8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80010bc:	2201      	movs	r2, #1
 80010be:	494b      	ldr	r1, [pc, #300]	@ (80011ec <main+0x180>)
 80010c0:	4847      	ldr	r0, [pc, #284]	@ (80011e0 <main+0x174>)
 80010c2:	f005 fe3f 	bl	8006d44 <HAL_UART_Transmit>
		  printf("Hidupkan charger Batt1");
 80010c6:	484a      	ldr	r0, [pc, #296]	@ (80011f0 <main+0x184>)
 80010c8:	f007 ff96 	bl	8008ff8 <iprintf>
 80010cc:	e046      	b.n	800115c <main+0xf0>
	  }
	  else if (rxData == '2') { //Hidupkan charger Batt2
 80010ce:	4b45      	ldr	r3, [pc, #276]	@ (80011e4 <main+0x178>)
 80010d0:	781b      	ldrb	r3, [r3, #0]
 80010d2:	2b32      	cmp	r3, #50	@ 0x32
 80010d4:	d10d      	bne.n	80010f2 <main+0x86>
		  request = 0x20;
 80010d6:	4b45      	ldr	r3, [pc, #276]	@ (80011ec <main+0x180>)
 80010d8:	2220      	movs	r2, #32
 80010da:	701a      	strb	r2, [r3, #0]
		  HAL_UART_Transmit(&huart2, &request, 1, 1000);
 80010dc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80010e0:	2201      	movs	r2, #1
 80010e2:	4942      	ldr	r1, [pc, #264]	@ (80011ec <main+0x180>)
 80010e4:	483e      	ldr	r0, [pc, #248]	@ (80011e0 <main+0x174>)
 80010e6:	f005 fe2d 	bl	8006d44 <HAL_UART_Transmit>
		  printf("Hidupkan charger Batt2");
 80010ea:	4842      	ldr	r0, [pc, #264]	@ (80011f4 <main+0x188>)
 80010ec:	f007 ff84 	bl	8008ff8 <iprintf>
 80010f0:	e034      	b.n	800115c <main+0xf0>
	  }
	  else if (rxData == '3') { //Hidupkan output Batt1
 80010f2:	4b3c      	ldr	r3, [pc, #240]	@ (80011e4 <main+0x178>)
 80010f4:	781b      	ldrb	r3, [r3, #0]
 80010f6:	2b33      	cmp	r3, #51	@ 0x33
 80010f8:	d10d      	bne.n	8001116 <main+0xaa>
		  request = 0x25;
 80010fa:	4b3c      	ldr	r3, [pc, #240]	@ (80011ec <main+0x180>)
 80010fc:	2225      	movs	r2, #37	@ 0x25
 80010fe:	701a      	strb	r2, [r3, #0]
		  HAL_UART_Transmit(&huart2, &request, 1, 1000);
 8001100:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001104:	2201      	movs	r2, #1
 8001106:	4939      	ldr	r1, [pc, #228]	@ (80011ec <main+0x180>)
 8001108:	4835      	ldr	r0, [pc, #212]	@ (80011e0 <main+0x174>)
 800110a:	f005 fe1b 	bl	8006d44 <HAL_UART_Transmit>
		  printf("Hidupkan output Batt1");
 800110e:	483a      	ldr	r0, [pc, #232]	@ (80011f8 <main+0x18c>)
 8001110:	f007 ff72 	bl	8008ff8 <iprintf>
 8001114:	e022      	b.n	800115c <main+0xf0>
	  }
	  else if (rxData == '4') { //Hidupkan output Batt2
 8001116:	4b33      	ldr	r3, [pc, #204]	@ (80011e4 <main+0x178>)
 8001118:	781b      	ldrb	r3, [r3, #0]
 800111a:	2b34      	cmp	r3, #52	@ 0x34
 800111c:	d10d      	bne.n	800113a <main+0xce>
		  request = 0x30;
 800111e:	4b33      	ldr	r3, [pc, #204]	@ (80011ec <main+0x180>)
 8001120:	2230      	movs	r2, #48	@ 0x30
 8001122:	701a      	strb	r2, [r3, #0]
		  HAL_UART_Transmit(&huart2, &request, 1, 1000);
 8001124:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001128:	2201      	movs	r2, #1
 800112a:	4930      	ldr	r1, [pc, #192]	@ (80011ec <main+0x180>)
 800112c:	482c      	ldr	r0, [pc, #176]	@ (80011e0 <main+0x174>)
 800112e:	f005 fe09 	bl	8006d44 <HAL_UART_Transmit>
		  printf("Hidupkan output Batt2");
 8001132:	4832      	ldr	r0, [pc, #200]	@ (80011fc <main+0x190>)
 8001134:	f007 ff60 	bl	8008ff8 <iprintf>
 8001138:	e010      	b.n	800115c <main+0xf0>
	  }
	  else if (rxData == '5') { //Hidupkan output Batt2
 800113a:	4b2a      	ldr	r3, [pc, #168]	@ (80011e4 <main+0x178>)
 800113c:	781b      	ldrb	r3, [r3, #0]
 800113e:	2b35      	cmp	r3, #53	@ 0x35
 8001140:	d10c      	bne.n	800115c <main+0xf0>
		  request = 0x35;
 8001142:	4b2a      	ldr	r3, [pc, #168]	@ (80011ec <main+0x180>)
 8001144:	2235      	movs	r2, #53	@ 0x35
 8001146:	701a      	strb	r2, [r3, #0]
		  HAL_UART_Transmit(&huart2, &request, 1, 1000);
 8001148:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800114c:	2201      	movs	r2, #1
 800114e:	4927      	ldr	r1, [pc, #156]	@ (80011ec <main+0x180>)
 8001150:	4823      	ldr	r0, [pc, #140]	@ (80011e0 <main+0x174>)
 8001152:	f005 fdf7 	bl	8006d44 <HAL_UART_Transmit>
		  printf("Off all");
 8001156:	482a      	ldr	r0, [pc, #168]	@ (8001200 <main+0x194>)
 8001158:	f007 ff4e 	bl	8008ff8 <iprintf>
	  }
	  rxData = 0;
 800115c:	4b21      	ldr	r3, [pc, #132]	@ (80011e4 <main+0x178>)
 800115e:	2200      	movs	r2, #0
 8001160:	701a      	strb	r2, [r3, #0]

	  HAL_HalfDuplex_EnableTransmitter(&huart2);
 8001162:	481f      	ldr	r0, [pc, #124]	@ (80011e0 <main+0x174>)
 8001164:	f006 fa72 	bl	800764c <HAL_HalfDuplex_EnableTransmitter>
	  HAL_UART_Transmit(&huart2, &request, 1, 200);
 8001168:	23c8      	movs	r3, #200	@ 0xc8
 800116a:	2201      	movs	r2, #1
 800116c:	491f      	ldr	r1, [pc, #124]	@ (80011ec <main+0x180>)
 800116e:	481c      	ldr	r0, [pc, #112]	@ (80011e0 <main+0x174>)
 8001170:	f005 fde8 	bl	8006d44 <HAL_UART_Transmit>
	  HAL_Delay(5);
 8001174:	2005      	movs	r0, #5
 8001176:	f000 ff9d 	bl	80020b4 <HAL_Delay>
	  HAL_HalfDuplex_EnableReceiver(&huart2);
 800117a:	4819      	ldr	r0, [pc, #100]	@ (80011e0 <main+0x174>)
 800117c:	f006 faba 	bl	80076f4 <HAL_HalfDuplex_EnableReceiver>
	  request = 0x6A;
 8001180:	4b1a      	ldr	r3, [pc, #104]	@ (80011ec <main+0x180>)
 8001182:	226a      	movs	r2, #106	@ 0x6a
 8001184:	701a      	strb	r2, [r3, #0]
	  HAL_UART_Receive(&huart2, RxData, sizeof(RxData), 200);
 8001186:	23c8      	movs	r3, #200	@ 0xc8
 8001188:	2240      	movs	r2, #64	@ 0x40
 800118a:	491e      	ldr	r1, [pc, #120]	@ (8001204 <main+0x198>)
 800118c:	4814      	ldr	r0, [pc, #80]	@ (80011e0 <main+0x174>)
 800118e:	f005 fe77 	bl	8006e80 <HAL_UART_Receive>

	  processBuffer();
 8001192:	f000 fa3d 	bl	8001610 <processBuffer>
	  printf("voltage1: %s V | current1: %sA | capacity1: %s%% | status1: %s | SoH1: %s%%\n", voltage1, current1, SoC1, status1, SoH1);
 8001196:	4b1c      	ldr	r3, [pc, #112]	@ (8001208 <main+0x19c>)
 8001198:	9301      	str	r3, [sp, #4]
 800119a:	4b1c      	ldr	r3, [pc, #112]	@ (800120c <main+0x1a0>)
 800119c:	9300      	str	r3, [sp, #0]
 800119e:	4b1c      	ldr	r3, [pc, #112]	@ (8001210 <main+0x1a4>)
 80011a0:	4a1c      	ldr	r2, [pc, #112]	@ (8001214 <main+0x1a8>)
 80011a2:	491d      	ldr	r1, [pc, #116]	@ (8001218 <main+0x1ac>)
 80011a4:	481d      	ldr	r0, [pc, #116]	@ (800121c <main+0x1b0>)
 80011a6:	f007 ff27 	bl	8008ff8 <iprintf>
	  printf("voltage2: %s V | current2: %sA | capacity2: %s%% | status2: %s | SoH2: %s%%\n", voltage2, current2, SoC2, status2, SoH2);
 80011aa:	4b1d      	ldr	r3, [pc, #116]	@ (8001220 <main+0x1b4>)
 80011ac:	9301      	str	r3, [sp, #4]
 80011ae:	4b1d      	ldr	r3, [pc, #116]	@ (8001224 <main+0x1b8>)
 80011b0:	9300      	str	r3, [sp, #0]
 80011b2:	4b1d      	ldr	r3, [pc, #116]	@ (8001228 <main+0x1bc>)
 80011b4:	4a1d      	ldr	r2, [pc, #116]	@ (800122c <main+0x1c0>)
 80011b6:	491e      	ldr	r1, [pc, #120]	@ (8001230 <main+0x1c4>)
 80011b8:	481e      	ldr	r0, [pc, #120]	@ (8001234 <main+0x1c8>)
 80011ba:	f007 ff1d 	bl	8008ff8 <iprintf>
	  printf("temperature: %s C | activePowerSource: %s | emergencybattery: %s\n", temperature, activePowerSource, emergencybattery);
 80011be:	4b1e      	ldr	r3, [pc, #120]	@ (8001238 <main+0x1cc>)
 80011c0:	4a1e      	ldr	r2, [pc, #120]	@ (800123c <main+0x1d0>)
 80011c2:	491f      	ldr	r1, [pc, #124]	@ (8001240 <main+0x1d4>)
 80011c4:	481f      	ldr	r0, [pc, #124]	@ (8001244 <main+0x1d8>)
 80011c6:	f007 ff17 	bl	8008ff8 <iprintf>
	  memset(RxData, 0, sizeof(RxData));
 80011ca:	2240      	movs	r2, #64	@ 0x40
 80011cc:	2100      	movs	r1, #0
 80011ce:	480d      	ldr	r0, [pc, #52]	@ (8001204 <main+0x198>)
 80011d0:	f007 ff87 	bl	80090e2 <memset>
	  HAL_Delay(1000);
 80011d4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80011d8:	f000 ff6c 	bl	80020b4 <HAL_Delay>
	  HAL_UART_Receive(&huart1, &rxData, 1, 50);
 80011dc:	e75f      	b.n	800109e <main+0x32>
 80011de:	bf00      	nop
 80011e0:	200002d0 	.word	0x200002d0
 80011e4:	200003dd 	.word	0x200003dd
 80011e8:	2000023c 	.word	0x2000023c
 80011ec:	200003dc 	.word	0x200003dc
 80011f0:	0800c8e0 	.word	0x0800c8e0
 80011f4:	0800c8f8 	.word	0x0800c8f8
 80011f8:	0800c910 	.word	0x0800c910
 80011fc:	0800c928 	.word	0x0800c928
 8001200:	0800c940 	.word	0x0800c940
 8001204:	200003e0 	.word	0x200003e0
 8001208:	20000444 	.word	0x20000444
 800120c:	20000438 	.word	0x20000438
 8001210:	20000430 	.word	0x20000430
 8001214:	20000428 	.word	0x20000428
 8001218:	20000420 	.word	0x20000420
 800121c:	0800c948 	.word	0x0800c948
 8001220:	20000470 	.word	0x20000470
 8001224:	20000464 	.word	0x20000464
 8001228:	2000045c 	.word	0x2000045c
 800122c:	20000454 	.word	0x20000454
 8001230:	2000044c 	.word	0x2000044c
 8001234:	0800c998 	.word	0x0800c998
 8001238:	2000048c 	.word	0x2000048c
 800123c:	20000480 	.word	0x20000480
 8001240:	20000478 	.word	0x20000478
 8001244:	0800c9e8 	.word	0x0800c9e8

08001248 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b09c      	sub	sp, #112	@ 0x70
 800124c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800124e:	f107 0320 	add.w	r3, r7, #32
 8001252:	2250      	movs	r2, #80	@ 0x50
 8001254:	2100      	movs	r1, #0
 8001256:	4618      	mov	r0, r3
 8001258:	f007 ff43 	bl	80090e2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800125c:	f107 0308 	add.w	r3, r7, #8
 8001260:	2200      	movs	r2, #0
 8001262:	601a      	str	r2, [r3, #0]
 8001264:	605a      	str	r2, [r3, #4]
 8001266:	609a      	str	r2, [r3, #8]
 8001268:	60da      	str	r2, [r3, #12]
 800126a:	611a      	str	r2, [r3, #16]
 800126c:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800126e:	4b25      	ldr	r3, [pc, #148]	@ (8001304 <SystemClock_Config+0xbc>)
 8001270:	691b      	ldr	r3, [r3, #16]
 8001272:	4a24      	ldr	r2, [pc, #144]	@ (8001304 <SystemClock_Config+0xbc>)
 8001274:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8001278:	6113      	str	r3, [r2, #16]
 800127a:	4b22      	ldr	r3, [pc, #136]	@ (8001304 <SystemClock_Config+0xbc>)
 800127c:	691b      	ldr	r3, [r3, #16]
 800127e:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8001282:	607b      	str	r3, [r7, #4]
 8001284:	687b      	ldr	r3, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001286:	bf00      	nop
 8001288:	4b1e      	ldr	r3, [pc, #120]	@ (8001304 <SystemClock_Config+0xbc>)
 800128a:	695b      	ldr	r3, [r3, #20]
 800128c:	f003 0308 	and.w	r3, r3, #8
 8001290:	2b08      	cmp	r3, #8
 8001292:	d1f9      	bne.n	8001288 <SystemClock_Config+0x40>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001294:	2302      	movs	r3, #2
 8001296:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001298:	2301      	movs	r3, #1
 800129a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 800129c:	2300      	movs	r3, #0
 800129e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80012a0:	2340      	movs	r3, #64	@ 0x40
 80012a2:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80012a4:	2300      	movs	r3, #0
 80012a6:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012a8:	f107 0320 	add.w	r3, r7, #32
 80012ac:	4618      	mov	r0, r3
 80012ae:	f001 fe5b 	bl	8002f68 <HAL_RCC_OscConfig>
 80012b2:	4603      	mov	r3, r0
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d001      	beq.n	80012bc <SystemClock_Config+0x74>
  {
    Error_Handler();
 80012b8:	f000 fb04 	bl	80018c4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012bc:	231f      	movs	r3, #31
 80012be:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80012c0:	2300      	movs	r3, #0
 80012c2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012c4:	2300      	movs	r3, #0
 80012c6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80012c8:	2300      	movs	r3, #0
 80012ca:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012cc:	2300      	movs	r3, #0
 80012ce:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 80012d0:	2300      	movs	r3, #0
 80012d2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80012d4:	f107 0308 	add.w	r3, r7, #8
 80012d8:	2103      	movs	r1, #3
 80012da:	4618      	mov	r0, r3
 80012dc:	f002 fa7c 	bl	80037d8 <HAL_RCC_ClockConfig>
 80012e0:	4603      	mov	r3, r0
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d001      	beq.n	80012ea <SystemClock_Config+0xa2>
  {
    Error_Handler();
 80012e6:	f000 faed 	bl	80018c4 <Error_Handler>
  }

  /** Configure the programming delay
  */
  __HAL_FLASH_SET_PROGRAM_DELAY(FLASH_PROGRAMMING_DELAY_1);
 80012ea:	4b07      	ldr	r3, [pc, #28]	@ (8001308 <SystemClock_Config+0xc0>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80012f2:	4a05      	ldr	r2, [pc, #20]	@ (8001308 <SystemClock_Config+0xc0>)
 80012f4:	f043 0310 	orr.w	r3, r3, #16
 80012f8:	6013      	str	r3, [r2, #0]
}
 80012fa:	bf00      	nop
 80012fc:	3770      	adds	r7, #112	@ 0x70
 80012fe:	46bd      	mov	sp, r7
 8001300:	bd80      	pop	{r7, pc}
 8001302:	bf00      	nop
 8001304:	44020800 	.word	0x44020800
 8001308:	40022000 	.word	0x40022000

0800130c <MX_GPDMA1_Init>:
  * @brief GPDMA1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPDMA1_Init(void)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b082      	sub	sp, #8
 8001310:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Init 0 */

  /* USER CODE END GPDMA1_Init 0 */

  /* Peripheral clock enable */
  __HAL_RCC_GPDMA1_CLK_ENABLE();
 8001312:	4b0d      	ldr	r3, [pc, #52]	@ (8001348 <MX_GPDMA1_Init+0x3c>)
 8001314:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001318:	4a0b      	ldr	r2, [pc, #44]	@ (8001348 <MX_GPDMA1_Init+0x3c>)
 800131a:	f043 0301 	orr.w	r3, r3, #1
 800131e:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 8001322:	4b09      	ldr	r3, [pc, #36]	@ (8001348 <MX_GPDMA1_Init+0x3c>)
 8001324:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001328:	f003 0301 	and.w	r3, r3, #1
 800132c:	607b      	str	r3, [r7, #4]
 800132e:	687b      	ldr	r3, [r7, #4]

  /* GPDMA1 interrupt Init */
    HAL_NVIC_SetPriority(GPDMA1_Channel0_IRQn, 0, 0);
 8001330:	2200      	movs	r2, #0
 8001332:	2100      	movs	r1, #0
 8001334:	201b      	movs	r0, #27
 8001336:	f000 ff99 	bl	800226c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA1_Channel0_IRQn);
 800133a:	201b      	movs	r0, #27
 800133c:	f000 ffb0 	bl	80022a0 <HAL_NVIC_EnableIRQ>
  /* USER CODE END GPDMA1_Init 1 */
  /* USER CODE BEGIN GPDMA1_Init 2 */

  /* USER CODE END GPDMA1_Init 2 */

}
 8001340:	bf00      	nop
 8001342:	3708      	adds	r7, #8
 8001344:	46bd      	mov	sp, r7
 8001346:	bd80      	pop	{r7, pc}
 8001348:	44020c00 	.word	0x44020c00

0800134c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b098      	sub	sp, #96	@ 0x60
 8001350:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001352:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001356:	2200      	movs	r2, #0
 8001358:	601a      	str	r2, [r3, #0]
 800135a:	605a      	str	r2, [r3, #4]
 800135c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800135e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001362:	2200      	movs	r2, #0
 8001364:	601a      	str	r2, [r3, #0]
 8001366:	605a      	str	r2, [r3, #4]
 8001368:	609a      	str	r2, [r3, #8]
 800136a:	60da      	str	r2, [r3, #12]
 800136c:	611a      	str	r2, [r3, #16]
 800136e:	615a      	str	r2, [r3, #20]
 8001370:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001372:	1d3b      	adds	r3, r7, #4
 8001374:	2234      	movs	r2, #52	@ 0x34
 8001376:	2100      	movs	r1, #0
 8001378:	4618      	mov	r0, r3
 800137a:	f007 feb2 	bl	80090e2 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800137e:	4b41      	ldr	r3, [pc, #260]	@ (8001484 <MX_TIM1_Init+0x138>)
 8001380:	4a41      	ldr	r2, [pc, #260]	@ (8001488 <MX_TIM1_Init+0x13c>)
 8001382:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1;
 8001384:	4b3f      	ldr	r3, [pc, #252]	@ (8001484 <MX_TIM1_Init+0x138>)
 8001386:	2201      	movs	r2, #1
 8001388:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800138a:	4b3e      	ldr	r3, [pc, #248]	@ (8001484 <MX_TIM1_Init+0x138>)
 800138c:	2200      	movs	r2, #0
 800138e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 8191;
 8001390:	4b3c      	ldr	r3, [pc, #240]	@ (8001484 <MX_TIM1_Init+0x138>)
 8001392:	f641 72ff 	movw	r2, #8191	@ 0x1fff
 8001396:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001398:	4b3a      	ldr	r3, [pc, #232]	@ (8001484 <MX_TIM1_Init+0x138>)
 800139a:	2200      	movs	r2, #0
 800139c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800139e:	4b39      	ldr	r3, [pc, #228]	@ (8001484 <MX_TIM1_Init+0x138>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013a4:	4b37      	ldr	r3, [pc, #220]	@ (8001484 <MX_TIM1_Init+0x138>)
 80013a6:	2200      	movs	r2, #0
 80013a8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80013aa:	4836      	ldr	r0, [pc, #216]	@ (8001484 <MX_TIM1_Init+0x138>)
 80013ac:	f004 fe24 	bl	8005ff8 <HAL_TIM_PWM_Init>
 80013b0:	4603      	mov	r3, r0
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d001      	beq.n	80013ba <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 80013b6:	f000 fa85 	bl	80018c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013ba:	2300      	movs	r3, #0
 80013bc:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80013be:	2300      	movs	r3, #0
 80013c0:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013c2:	2300      	movs	r3, #0
 80013c4:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80013c6:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80013ca:	4619      	mov	r1, r3
 80013cc:	482d      	ldr	r0, [pc, #180]	@ (8001484 <MX_TIM1_Init+0x138>)
 80013ce:	f005 fb23 	bl	8006a18 <HAL_TIMEx_MasterConfigSynchronization>
 80013d2:	4603      	mov	r3, r0
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d001      	beq.n	80013dc <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80013d8:	f000 fa74 	bl	80018c4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80013dc:	2360      	movs	r3, #96	@ 0x60
 80013de:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 80013e0:	2300      	movs	r3, #0
 80013e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80013e4:	2300      	movs	r3, #0
 80013e6:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80013e8:	2300      	movs	r3, #0
 80013ea:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80013ec:	2300      	movs	r3, #0
 80013ee:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80013f0:	2300      	movs	r3, #0
 80013f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80013f4:	2300      	movs	r3, #0
 80013f6:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80013f8:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80013fc:	2200      	movs	r2, #0
 80013fe:	4619      	mov	r1, r3
 8001400:	4820      	ldr	r0, [pc, #128]	@ (8001484 <MX_TIM1_Init+0x138>)
 8001402:	f004 ff1f 	bl	8006244 <HAL_TIM_PWM_ConfigChannel>
 8001406:	4603      	mov	r3, r0
 8001408:	2b00      	cmp	r3, #0
 800140a:	d001      	beq.n	8001410 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 800140c:	f000 fa5a 	bl	80018c4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001410:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001414:	2204      	movs	r2, #4
 8001416:	4619      	mov	r1, r3
 8001418:	481a      	ldr	r0, [pc, #104]	@ (8001484 <MX_TIM1_Init+0x138>)
 800141a:	f004 ff13 	bl	8006244 <HAL_TIM_PWM_ConfigChannel>
 800141e:	4603      	mov	r3, r0
 8001420:	2b00      	cmp	r3, #0
 8001422:	d001      	beq.n	8001428 <MX_TIM1_Init+0xdc>
  {
    Error_Handler();
 8001424:	f000 fa4e 	bl	80018c4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001428:	2300      	movs	r3, #0
 800142a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800142c:	2300      	movs	r3, #0
 800142e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001430:	2300      	movs	r3, #0
 8001432:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001434:	2300      	movs	r3, #0
 8001436:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001438:	2300      	movs	r3, #0
 800143a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800143c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001440:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001442:	2300      	movs	r3, #0
 8001444:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001446:	2300      	movs	r3, #0
 8001448:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800144a:	2300      	movs	r3, #0
 800144c:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800144e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001452:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001454:	2300      	movs	r3, #0
 8001456:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001458:	2300      	movs	r3, #0
 800145a:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800145c:	2300      	movs	r3, #0
 800145e:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001460:	1d3b      	adds	r3, r7, #4
 8001462:	4619      	mov	r1, r3
 8001464:	4807      	ldr	r0, [pc, #28]	@ (8001484 <MX_TIM1_Init+0x138>)
 8001466:	f005 fb3f 	bl	8006ae8 <HAL_TIMEx_ConfigBreakDeadTime>
 800146a:	4603      	mov	r3, r0
 800146c:	2b00      	cmp	r3, #0
 800146e:	d001      	beq.n	8001474 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8001470:	f000 fa28 	bl	80018c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001474:	4803      	ldr	r0, [pc, #12]	@ (8001484 <MX_TIM1_Init+0x138>)
 8001476:	f000 fa55 	bl	8001924 <HAL_TIM_MspPostInit>

}
 800147a:	bf00      	nop
 800147c:	3760      	adds	r7, #96	@ 0x60
 800147e:	46bd      	mov	sp, r7
 8001480:	bd80      	pop	{r7, pc}
 8001482:	bf00      	nop
 8001484:	200001f0 	.word	0x200001f0
 8001488:	40012c00 	.word	0x40012c00

0800148c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001490:	4b22      	ldr	r3, [pc, #136]	@ (800151c <MX_USART1_UART_Init+0x90>)
 8001492:	4a23      	ldr	r2, [pc, #140]	@ (8001520 <MX_USART1_UART_Init+0x94>)
 8001494:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001496:	4b21      	ldr	r3, [pc, #132]	@ (800151c <MX_USART1_UART_Init+0x90>)
 8001498:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800149c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800149e:	4b1f      	ldr	r3, [pc, #124]	@ (800151c <MX_USART1_UART_Init+0x90>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80014a4:	4b1d      	ldr	r3, [pc, #116]	@ (800151c <MX_USART1_UART_Init+0x90>)
 80014a6:	2200      	movs	r2, #0
 80014a8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80014aa:	4b1c      	ldr	r3, [pc, #112]	@ (800151c <MX_USART1_UART_Init+0x90>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80014b0:	4b1a      	ldr	r3, [pc, #104]	@ (800151c <MX_USART1_UART_Init+0x90>)
 80014b2:	220c      	movs	r2, #12
 80014b4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014b6:	4b19      	ldr	r3, [pc, #100]	@ (800151c <MX_USART1_UART_Init+0x90>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80014bc:	4b17      	ldr	r3, [pc, #92]	@ (800151c <MX_USART1_UART_Init+0x90>)
 80014be:	2200      	movs	r2, #0
 80014c0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80014c2:	4b16      	ldr	r3, [pc, #88]	@ (800151c <MX_USART1_UART_Init+0x90>)
 80014c4:	2200      	movs	r2, #0
 80014c6:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80014c8:	4b14      	ldr	r3, [pc, #80]	@ (800151c <MX_USART1_UART_Init+0x90>)
 80014ca:	2200      	movs	r2, #0
 80014cc:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80014ce:	4b13      	ldr	r3, [pc, #76]	@ (800151c <MX_USART1_UART_Init+0x90>)
 80014d0:	2200      	movs	r2, #0
 80014d2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80014d4:	4811      	ldr	r0, [pc, #68]	@ (800151c <MX_USART1_UART_Init+0x90>)
 80014d6:	f005 fb8d 	bl	8006bf4 <HAL_UART_Init>
 80014da:	4603      	mov	r3, r0
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d001      	beq.n	80014e4 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80014e0:	f000 f9f0 	bl	80018c4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80014e4:	2100      	movs	r1, #0
 80014e6:	480d      	ldr	r0, [pc, #52]	@ (800151c <MX_USART1_UART_Init+0x90>)
 80014e8:	f006 fd8d 	bl	8008006 <HAL_UARTEx_SetTxFifoThreshold>
 80014ec:	4603      	mov	r3, r0
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d001      	beq.n	80014f6 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80014f2:	f000 f9e7 	bl	80018c4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80014f6:	2100      	movs	r1, #0
 80014f8:	4808      	ldr	r0, [pc, #32]	@ (800151c <MX_USART1_UART_Init+0x90>)
 80014fa:	f006 fdc2 	bl	8008082 <HAL_UARTEx_SetRxFifoThreshold>
 80014fe:	4603      	mov	r3, r0
 8001500:	2b00      	cmp	r3, #0
 8001502:	d001      	beq.n	8001508 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001504:	f000 f9de 	bl	80018c4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001508:	4804      	ldr	r0, [pc, #16]	@ (800151c <MX_USART1_UART_Init+0x90>)
 800150a:	f006 fd43 	bl	8007f94 <HAL_UARTEx_DisableFifoMode>
 800150e:	4603      	mov	r3, r0
 8001510:	2b00      	cmp	r3, #0
 8001512:	d001      	beq.n	8001518 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001514:	f000 f9d6 	bl	80018c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001518:	bf00      	nop
 800151a:	bd80      	pop	{r7, pc}
 800151c:	2000023c 	.word	0x2000023c
 8001520:	40013800 	.word	0x40013800

08001524 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001528:	4b22      	ldr	r3, [pc, #136]	@ (80015b4 <MX_USART2_UART_Init+0x90>)
 800152a:	4a23      	ldr	r2, [pc, #140]	@ (80015b8 <MX_USART2_UART_Init+0x94>)
 800152c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800152e:	4b21      	ldr	r3, [pc, #132]	@ (80015b4 <MX_USART2_UART_Init+0x90>)
 8001530:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001534:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001536:	4b1f      	ldr	r3, [pc, #124]	@ (80015b4 <MX_USART2_UART_Init+0x90>)
 8001538:	2200      	movs	r2, #0
 800153a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800153c:	4b1d      	ldr	r3, [pc, #116]	@ (80015b4 <MX_USART2_UART_Init+0x90>)
 800153e:	2200      	movs	r2, #0
 8001540:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001542:	4b1c      	ldr	r3, [pc, #112]	@ (80015b4 <MX_USART2_UART_Init+0x90>)
 8001544:	2200      	movs	r2, #0
 8001546:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001548:	4b1a      	ldr	r3, [pc, #104]	@ (80015b4 <MX_USART2_UART_Init+0x90>)
 800154a:	220c      	movs	r2, #12
 800154c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800154e:	4b19      	ldr	r3, [pc, #100]	@ (80015b4 <MX_USART2_UART_Init+0x90>)
 8001550:	2200      	movs	r2, #0
 8001552:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001554:	4b17      	ldr	r3, [pc, #92]	@ (80015b4 <MX_USART2_UART_Init+0x90>)
 8001556:	2200      	movs	r2, #0
 8001558:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800155a:	4b16      	ldr	r3, [pc, #88]	@ (80015b4 <MX_USART2_UART_Init+0x90>)
 800155c:	2200      	movs	r2, #0
 800155e:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001560:	4b14      	ldr	r3, [pc, #80]	@ (80015b4 <MX_USART2_UART_Init+0x90>)
 8001562:	2200      	movs	r2, #0
 8001564:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001566:	4b13      	ldr	r3, [pc, #76]	@ (80015b4 <MX_USART2_UART_Init+0x90>)
 8001568:	2200      	movs	r2, #0
 800156a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_HalfDuplex_Init(&huart2) != HAL_OK)
 800156c:	4811      	ldr	r0, [pc, #68]	@ (80015b4 <MX_USART2_UART_Init+0x90>)
 800156e:	f005 fb91 	bl	8006c94 <HAL_HalfDuplex_Init>
 8001572:	4603      	mov	r3, r0
 8001574:	2b00      	cmp	r3, #0
 8001576:	d001      	beq.n	800157c <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001578:	f000 f9a4 	bl	80018c4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800157c:	2100      	movs	r1, #0
 800157e:	480d      	ldr	r0, [pc, #52]	@ (80015b4 <MX_USART2_UART_Init+0x90>)
 8001580:	f006 fd41 	bl	8008006 <HAL_UARTEx_SetTxFifoThreshold>
 8001584:	4603      	mov	r3, r0
 8001586:	2b00      	cmp	r3, #0
 8001588:	d001      	beq.n	800158e <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800158a:	f000 f99b 	bl	80018c4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800158e:	2100      	movs	r1, #0
 8001590:	4808      	ldr	r0, [pc, #32]	@ (80015b4 <MX_USART2_UART_Init+0x90>)
 8001592:	f006 fd76 	bl	8008082 <HAL_UARTEx_SetRxFifoThreshold>
 8001596:	4603      	mov	r3, r0
 8001598:	2b00      	cmp	r3, #0
 800159a:	d001      	beq.n	80015a0 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 800159c:	f000 f992 	bl	80018c4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80015a0:	4804      	ldr	r0, [pc, #16]	@ (80015b4 <MX_USART2_UART_Init+0x90>)
 80015a2:	f006 fcf7 	bl	8007f94 <HAL_UARTEx_DisableFifoMode>
 80015a6:	4603      	mov	r3, r0
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d001      	beq.n	80015b0 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80015ac:	f000 f98a 	bl	80018c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80015b0:	bf00      	nop
 80015b2:	bd80      	pop	{r7, pc}
 80015b4:	200002d0 	.word	0x200002d0
 80015b8:	40004400 	.word	0x40004400

080015bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80015bc:	b480      	push	{r7}
 80015be:	b083      	sub	sp, #12
 80015c0:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015c2:	4b12      	ldr	r3, [pc, #72]	@ (800160c <MX_GPIO_Init+0x50>)
 80015c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80015c8:	4a10      	ldr	r2, [pc, #64]	@ (800160c <MX_GPIO_Init+0x50>)
 80015ca:	f043 0301 	orr.w	r3, r3, #1
 80015ce:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80015d2:	4b0e      	ldr	r3, [pc, #56]	@ (800160c <MX_GPIO_Init+0x50>)
 80015d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80015d8:	f003 0301 	and.w	r3, r3, #1
 80015dc:	607b      	str	r3, [r7, #4]
 80015de:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80015e0:	4b0a      	ldr	r3, [pc, #40]	@ (800160c <MX_GPIO_Init+0x50>)
 80015e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80015e6:	4a09      	ldr	r2, [pc, #36]	@ (800160c <MX_GPIO_Init+0x50>)
 80015e8:	f043 0304 	orr.w	r3, r3, #4
 80015ec:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80015f0:	4b06      	ldr	r3, [pc, #24]	@ (800160c <MX_GPIO_Init+0x50>)
 80015f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80015f6:	f003 0304 	and.w	r3, r3, #4
 80015fa:	603b      	str	r3, [r7, #0]
 80015fc:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80015fe:	bf00      	nop
 8001600:	370c      	adds	r7, #12
 8001602:	46bd      	mov	sp, r7
 8001604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001608:	4770      	bx	lr
 800160a:	bf00      	nop
 800160c:	44020c00 	.word	0x44020c00

08001610 <processBuffer>:
    if (huart->Instance == USART2) {

    }
}

void processBuffer(){
 8001610:	b580      	push	{r7, lr}
 8001612:	af00      	add	r7, sp, #0
	if(RxData[0] != '\0'){
 8001614:	4b69      	ldr	r3, [pc, #420]	@ (80017bc <processBuffer+0x1ac>)
 8001616:	781b      	ldrb	r3, [r3, #0]
 8001618:	2b00      	cmp	r3, #0
 800161a:	f000 80cd 	beq.w	80017b8 <processBuffer+0x1a8>
		//Process of demultiplexing battery data 1
		memcpy(voltage1, RxData, 4);
 800161e:	4b67      	ldr	r3, [pc, #412]	@ (80017bc <processBuffer+0x1ac>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	4a67      	ldr	r2, [pc, #412]	@ (80017c0 <processBuffer+0x1b0>)
 8001624:	6013      	str	r3, [r2, #0]
		voltage1[4] = '\0';
 8001626:	4b66      	ldr	r3, [pc, #408]	@ (80017c0 <processBuffer+0x1b0>)
 8001628:	2200      	movs	r2, #0
 800162a:	711a      	strb	r2, [r3, #4]

		memcpy(current1, RxData + 5, 5);
 800162c:	4a65      	ldr	r2, [pc, #404]	@ (80017c4 <processBuffer+0x1b4>)
 800162e:	4b66      	ldr	r3, [pc, #408]	@ (80017c8 <processBuffer+0x1b8>)
 8001630:	6810      	ldr	r0, [r2, #0]
 8001632:	6018      	str	r0, [r3, #0]
 8001634:	7912      	ldrb	r2, [r2, #4]
 8001636:	711a      	strb	r2, [r3, #4]
		current1[5] = '\0';
 8001638:	4b63      	ldr	r3, [pc, #396]	@ (80017c8 <processBuffer+0x1b8>)
 800163a:	2200      	movs	r2, #0
 800163c:	715a      	strb	r2, [r3, #5]

		memcpy(SoC1, RxData + 11, 3);
 800163e:	4b63      	ldr	r3, [pc, #396]	@ (80017cc <processBuffer+0x1bc>)
 8001640:	2203      	movs	r2, #3
 8001642:	4619      	mov	r1, r3
 8001644:	4862      	ldr	r0, [pc, #392]	@ (80017d0 <processBuffer+0x1c0>)
 8001646:	f007 fdda 	bl	80091fe <memcpy>
		SoC1[3] = '\0';
 800164a:	4b61      	ldr	r3, [pc, #388]	@ (80017d0 <processBuffer+0x1c0>)
 800164c:	2200      	movs	r2, #0
 800164e:	70da      	strb	r2, [r3, #3]

		memcpy(status1, RxData + 16, 1);
 8001650:	4b60      	ldr	r3, [pc, #384]	@ (80017d4 <processBuffer+0x1c4>)
 8001652:	781a      	ldrb	r2, [r3, #0]
 8001654:	4b60      	ldr	r3, [pc, #384]	@ (80017d8 <processBuffer+0x1c8>)
 8001656:	701a      	strb	r2, [r3, #0]
		status1[1] = '\0';
 8001658:	4b5f      	ldr	r3, [pc, #380]	@ (80017d8 <processBuffer+0x1c8>)
 800165a:	2200      	movs	r2, #0
 800165c:	705a      	strb	r2, [r3, #1]
		if (strcmp(status1, "1") == 0) {
 800165e:	495f      	ldr	r1, [pc, #380]	@ (80017dc <processBuffer+0x1cc>)
 8001660:	485d      	ldr	r0, [pc, #372]	@ (80017d8 <processBuffer+0x1c8>)
 8001662:	f7fe fe19 	bl	8000298 <strcmp>
 8001666:	4603      	mov	r3, r0
 8001668:	2b00      	cmp	r3, #0
 800166a:	d10a      	bne.n	8001682 <processBuffer+0x72>
			strcpy(status1, "charge");
 800166c:	4b5a      	ldr	r3, [pc, #360]	@ (80017d8 <processBuffer+0x1c8>)
 800166e:	4a5c      	ldr	r2, [pc, #368]	@ (80017e0 <processBuffer+0x1d0>)
 8001670:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001674:	6018      	str	r0, [r3, #0]
 8001676:	3304      	adds	r3, #4
 8001678:	8019      	strh	r1, [r3, #0]
 800167a:	3302      	adds	r3, #2
 800167c:	0c0a      	lsrs	r2, r1, #16
 800167e:	701a      	strb	r2, [r3, #0]
 8001680:	e004      	b.n	800168c <processBuffer+0x7c>
		} else {
			strcpy(status1, "discharge");
 8001682:	4b55      	ldr	r3, [pc, #340]	@ (80017d8 <processBuffer+0x1c8>)
 8001684:	4a57      	ldr	r2, [pc, #348]	@ (80017e4 <processBuffer+0x1d4>)
 8001686:	ca07      	ldmia	r2, {r0, r1, r2}
 8001688:	c303      	stmia	r3!, {r0, r1}
 800168a:	801a      	strh	r2, [r3, #0]
		}

		memcpy(SoH1, RxData + 18, 3);
 800168c:	4b56      	ldr	r3, [pc, #344]	@ (80017e8 <processBuffer+0x1d8>)
 800168e:	2203      	movs	r2, #3
 8001690:	4619      	mov	r1, r3
 8001692:	4856      	ldr	r0, [pc, #344]	@ (80017ec <processBuffer+0x1dc>)
 8001694:	f007 fdb3 	bl	80091fe <memcpy>
		SoH1[4] = '\0';
 8001698:	4b54      	ldr	r3, [pc, #336]	@ (80017ec <processBuffer+0x1dc>)
 800169a:	2200      	movs	r2, #0
 800169c:	711a      	strb	r2, [r3, #4]

		//Process of demultiplexing battery data 2
		memcpy(voltage2, RxData + 22, 4);
 800169e:	4b54      	ldr	r3, [pc, #336]	@ (80017f0 <processBuffer+0x1e0>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	461a      	mov	r2, r3
 80016a4:	4b53      	ldr	r3, [pc, #332]	@ (80017f4 <processBuffer+0x1e4>)
 80016a6:	601a      	str	r2, [r3, #0]
		voltage2[4] = '\0';
 80016a8:	4b52      	ldr	r3, [pc, #328]	@ (80017f4 <processBuffer+0x1e4>)
 80016aa:	2200      	movs	r2, #0
 80016ac:	711a      	strb	r2, [r3, #4]

		memcpy(current2, RxData + 27, 5);
 80016ae:	4a52      	ldr	r2, [pc, #328]	@ (80017f8 <processBuffer+0x1e8>)
 80016b0:	4b52      	ldr	r3, [pc, #328]	@ (80017fc <processBuffer+0x1ec>)
 80016b2:	6810      	ldr	r0, [r2, #0]
 80016b4:	6018      	str	r0, [r3, #0]
 80016b6:	7912      	ldrb	r2, [r2, #4]
 80016b8:	711a      	strb	r2, [r3, #4]
		current2[5] = '\0';
 80016ba:	4b50      	ldr	r3, [pc, #320]	@ (80017fc <processBuffer+0x1ec>)
 80016bc:	2200      	movs	r2, #0
 80016be:	715a      	strb	r2, [r3, #5]

		memcpy(SoC2, RxData + 33, 3);
 80016c0:	4b4f      	ldr	r3, [pc, #316]	@ (8001800 <processBuffer+0x1f0>)
 80016c2:	2203      	movs	r2, #3
 80016c4:	4619      	mov	r1, r3
 80016c6:	484f      	ldr	r0, [pc, #316]	@ (8001804 <processBuffer+0x1f4>)
 80016c8:	f007 fd99 	bl	80091fe <memcpy>
		SoC2[3] = '\0';
 80016cc:	4b4d      	ldr	r3, [pc, #308]	@ (8001804 <processBuffer+0x1f4>)
 80016ce:	2200      	movs	r2, #0
 80016d0:	70da      	strb	r2, [r3, #3]

		memcpy(status2, RxData + 38, 1);
 80016d2:	4b4d      	ldr	r3, [pc, #308]	@ (8001808 <processBuffer+0x1f8>)
 80016d4:	781a      	ldrb	r2, [r3, #0]
 80016d6:	4b4d      	ldr	r3, [pc, #308]	@ (800180c <processBuffer+0x1fc>)
 80016d8:	701a      	strb	r2, [r3, #0]
		status2[1] = '\0';
 80016da:	4b4c      	ldr	r3, [pc, #304]	@ (800180c <processBuffer+0x1fc>)
 80016dc:	2200      	movs	r2, #0
 80016de:	705a      	strb	r2, [r3, #1]
		if (strcmp(status2, "1") == 0) {
 80016e0:	493e      	ldr	r1, [pc, #248]	@ (80017dc <processBuffer+0x1cc>)
 80016e2:	484a      	ldr	r0, [pc, #296]	@ (800180c <processBuffer+0x1fc>)
 80016e4:	f7fe fdd8 	bl	8000298 <strcmp>
 80016e8:	4603      	mov	r3, r0
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d10a      	bne.n	8001704 <processBuffer+0xf4>
			strcpy(status2, "charge");
 80016ee:	4b47      	ldr	r3, [pc, #284]	@ (800180c <processBuffer+0x1fc>)
 80016f0:	4a3b      	ldr	r2, [pc, #236]	@ (80017e0 <processBuffer+0x1d0>)
 80016f2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80016f6:	6018      	str	r0, [r3, #0]
 80016f8:	3304      	adds	r3, #4
 80016fa:	8019      	strh	r1, [r3, #0]
 80016fc:	3302      	adds	r3, #2
 80016fe:	0c0a      	lsrs	r2, r1, #16
 8001700:	701a      	strb	r2, [r3, #0]
 8001702:	e004      	b.n	800170e <processBuffer+0xfe>
		} else {
			strcpy(status2, "discharge");
 8001704:	4b41      	ldr	r3, [pc, #260]	@ (800180c <processBuffer+0x1fc>)
 8001706:	4a37      	ldr	r2, [pc, #220]	@ (80017e4 <processBuffer+0x1d4>)
 8001708:	ca07      	ldmia	r2, {r0, r1, r2}
 800170a:	c303      	stmia	r3!, {r0, r1}
 800170c:	801a      	strh	r2, [r3, #0]
		}

		memcpy(SoH2, RxData + 40, 3);
 800170e:	4b40      	ldr	r3, [pc, #256]	@ (8001810 <processBuffer+0x200>)
 8001710:	2203      	movs	r2, #3
 8001712:	4619      	mov	r1, r3
 8001714:	483f      	ldr	r0, [pc, #252]	@ (8001814 <processBuffer+0x204>)
 8001716:	f007 fd72 	bl	80091fe <memcpy>
		SoH2[4] = '\0';
 800171a:	4b3e      	ldr	r3, [pc, #248]	@ (8001814 <processBuffer+0x204>)
 800171c:	2200      	movs	r2, #0
 800171e:	711a      	strb	r2, [r3, #4]

		//Process of demultiplexing temperature and activepowersource
		memcpy(temperature, RxData + 44, 4);
 8001720:	4b3d      	ldr	r3, [pc, #244]	@ (8001818 <processBuffer+0x208>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	461a      	mov	r2, r3
 8001726:	4b3d      	ldr	r3, [pc, #244]	@ (800181c <processBuffer+0x20c>)
 8001728:	601a      	str	r2, [r3, #0]
		temperature[4] = '\0';
 800172a:	4b3c      	ldr	r3, [pc, #240]	@ (800181c <processBuffer+0x20c>)
 800172c:	2200      	movs	r2, #0
 800172e:	711a      	strb	r2, [r3, #4]

		memcpy(activePowerSource, RxData + 49, 1);
 8001730:	4b3b      	ldr	r3, [pc, #236]	@ (8001820 <processBuffer+0x210>)
 8001732:	781a      	ldrb	r2, [r3, #0]
 8001734:	4b3b      	ldr	r3, [pc, #236]	@ (8001824 <processBuffer+0x214>)
 8001736:	701a      	strb	r2, [r3, #0]
		activePowerSource[1] = '\0';
 8001738:	4b3a      	ldr	r3, [pc, #232]	@ (8001824 <processBuffer+0x214>)
 800173a:	2200      	movs	r2, #0
 800173c:	705a      	strb	r2, [r3, #1]
		if (strcmp(activePowerSource, "1") == 0) {
 800173e:	4927      	ldr	r1, [pc, #156]	@ (80017dc <processBuffer+0x1cc>)
 8001740:	4838      	ldr	r0, [pc, #224]	@ (8001824 <processBuffer+0x214>)
 8001742:	f7fe fda9 	bl	8000298 <strcmp>
 8001746:	4603      	mov	r3, r0
 8001748:	2b00      	cmp	r3, #0
 800174a:	d105      	bne.n	8001758 <processBuffer+0x148>
			strcpy(activePowerSource, "Baterai 1");
 800174c:	4b35      	ldr	r3, [pc, #212]	@ (8001824 <processBuffer+0x214>)
 800174e:	4a36      	ldr	r2, [pc, #216]	@ (8001828 <processBuffer+0x218>)
 8001750:	ca07      	ldmia	r2, {r0, r1, r2}
 8001752:	c303      	stmia	r3!, {r0, r1}
 8001754:	801a      	strh	r2, [r3, #0]
 8001756:	e004      	b.n	8001762 <processBuffer+0x152>
		} else {
			strcpy(activePowerSource, "Baterai 2");
 8001758:	4b32      	ldr	r3, [pc, #200]	@ (8001824 <processBuffer+0x214>)
 800175a:	4a34      	ldr	r2, [pc, #208]	@ (800182c <processBuffer+0x21c>)
 800175c:	ca07      	ldmia	r2, {r0, r1, r2}
 800175e:	c303      	stmia	r3!, {r0, r1}
 8001760:	801a      	strh	r2, [r3, #0]
		}

		memcpy(emergencybattery, RxData + 51, 1);
 8001762:	4b33      	ldr	r3, [pc, #204]	@ (8001830 <processBuffer+0x220>)
 8001764:	781a      	ldrb	r2, [r3, #0]
 8001766:	4b33      	ldr	r3, [pc, #204]	@ (8001834 <processBuffer+0x224>)
 8001768:	701a      	strb	r2, [r3, #0]
		emergencybattery[1] = '\0';
 800176a:	4b32      	ldr	r3, [pc, #200]	@ (8001834 <processBuffer+0x224>)
 800176c:	2200      	movs	r2, #0
 800176e:	705a      	strb	r2, [r3, #1]
		if (strcmp(emergencybattery, "1") == 0) {
 8001770:	491a      	ldr	r1, [pc, #104]	@ (80017dc <processBuffer+0x1cc>)
 8001772:	4830      	ldr	r0, [pc, #192]	@ (8001834 <processBuffer+0x224>)
 8001774:	f7fe fd90 	bl	8000298 <strcmp>
 8001778:	4603      	mov	r3, r0
 800177a:	2b00      	cmp	r3, #0
 800177c:	d105      	bne.n	800178a <processBuffer+0x17a>
			strcpy(emergencybattery, "Baterai 1");
 800177e:	4b2d      	ldr	r3, [pc, #180]	@ (8001834 <processBuffer+0x224>)
 8001780:	4a29      	ldr	r2, [pc, #164]	@ (8001828 <processBuffer+0x218>)
 8001782:	ca07      	ldmia	r2, {r0, r1, r2}
 8001784:	c303      	stmia	r3!, {r0, r1}
 8001786:	801a      	strh	r2, [r3, #0]
		}
		else{
			strcpy(emergencybattery, "Normal");
		}
	}
}
 8001788:	e016      	b.n	80017b8 <processBuffer+0x1a8>
		else if (strcmp(emergencybattery, "2") == 0){
 800178a:	492b      	ldr	r1, [pc, #172]	@ (8001838 <processBuffer+0x228>)
 800178c:	4829      	ldr	r0, [pc, #164]	@ (8001834 <processBuffer+0x224>)
 800178e:	f7fe fd83 	bl	8000298 <strcmp>
 8001792:	4603      	mov	r3, r0
 8001794:	2b00      	cmp	r3, #0
 8001796:	d105      	bne.n	80017a4 <processBuffer+0x194>
			strcpy(emergencybattery, "Baterai 2");
 8001798:	4b26      	ldr	r3, [pc, #152]	@ (8001834 <processBuffer+0x224>)
 800179a:	4a24      	ldr	r2, [pc, #144]	@ (800182c <processBuffer+0x21c>)
 800179c:	ca07      	ldmia	r2, {r0, r1, r2}
 800179e:	c303      	stmia	r3!, {r0, r1}
 80017a0:	801a      	strh	r2, [r3, #0]
}
 80017a2:	e009      	b.n	80017b8 <processBuffer+0x1a8>
			strcpy(emergencybattery, "Normal");
 80017a4:	4b23      	ldr	r3, [pc, #140]	@ (8001834 <processBuffer+0x224>)
 80017a6:	4a25      	ldr	r2, [pc, #148]	@ (800183c <processBuffer+0x22c>)
 80017a8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80017ac:	6018      	str	r0, [r3, #0]
 80017ae:	3304      	adds	r3, #4
 80017b0:	8019      	strh	r1, [r3, #0]
 80017b2:	3302      	adds	r3, #2
 80017b4:	0c0a      	lsrs	r2, r1, #16
 80017b6:	701a      	strb	r2, [r3, #0]
}
 80017b8:	bf00      	nop
 80017ba:	bd80      	pop	{r7, pc}
 80017bc:	200003e0 	.word	0x200003e0
 80017c0:	20000420 	.word	0x20000420
 80017c4:	200003e5 	.word	0x200003e5
 80017c8:	20000428 	.word	0x20000428
 80017cc:	200003eb 	.word	0x200003eb
 80017d0:	20000430 	.word	0x20000430
 80017d4:	200003f0 	.word	0x200003f0
 80017d8:	20000438 	.word	0x20000438
 80017dc:	0800ca2c 	.word	0x0800ca2c
 80017e0:	0800ca30 	.word	0x0800ca30
 80017e4:	0800ca38 	.word	0x0800ca38
 80017e8:	200003f2 	.word	0x200003f2
 80017ec:	20000444 	.word	0x20000444
 80017f0:	200003f6 	.word	0x200003f6
 80017f4:	2000044c 	.word	0x2000044c
 80017f8:	200003fb 	.word	0x200003fb
 80017fc:	20000454 	.word	0x20000454
 8001800:	20000401 	.word	0x20000401
 8001804:	2000045c 	.word	0x2000045c
 8001808:	20000406 	.word	0x20000406
 800180c:	20000464 	.word	0x20000464
 8001810:	20000408 	.word	0x20000408
 8001814:	20000470 	.word	0x20000470
 8001818:	2000040c 	.word	0x2000040c
 800181c:	20000478 	.word	0x20000478
 8001820:	20000411 	.word	0x20000411
 8001824:	20000480 	.word	0x20000480
 8001828:	0800ca44 	.word	0x0800ca44
 800182c:	0800ca50 	.word	0x0800ca50
 8001830:	20000413 	.word	0x20000413
 8001834:	2000048c 	.word	0x2000048c
 8001838:	0800ca5c 	.word	0x0800ca5c
 800183c:	0800ca60 	.word	0x0800ca60

08001840 <Beep_Beep>:

void Beep_Beep(uint8_t cycle, uint16_t delay1, uint16_t delay2) {
 8001840:	b580      	push	{r7, lr}
 8001842:	b084      	sub	sp, #16
 8001844:	af00      	add	r7, sp, #0
 8001846:	4603      	mov	r3, r0
 8001848:	71fb      	strb	r3, [r7, #7]
 800184a:	460b      	mov	r3, r1
 800184c:	80bb      	strh	r3, [r7, #4]
 800184e:	4613      	mov	r3, r2
 8001850:	807b      	strh	r3, [r7, #2]
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001852:	2100      	movs	r1, #0
 8001854:	481a      	ldr	r0, [pc, #104]	@ (80018c0 <Beep_Beep+0x80>)
 8001856:	f004 fc27 	bl	80060a8 <HAL_TIM_PWM_Start>
	for (int i = 0; i < cycle; i++) {
 800185a:	2300      	movs	r3, #0
 800185c:	60fb      	str	r3, [r7, #12]
 800185e:	e026      	b.n	80018ae <Beep_Beep+0x6e>
		HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001860:	2100      	movs	r1, #0
 8001862:	4817      	ldr	r0, [pc, #92]	@ (80018c0 <Beep_Beep+0x80>)
 8001864:	f004 fc20 	bl	80060a8 <HAL_TIM_PWM_Start>
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 3000);
 8001868:	4b15      	ldr	r3, [pc, #84]	@ (80018c0 <Beep_Beep+0x80>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8001870:	635a      	str	r2, [r3, #52]	@ 0x34
		HAL_Delay(delay1);
 8001872:	88bb      	ldrh	r3, [r7, #4]
 8001874:	4618      	mov	r0, r3
 8001876:	f000 fc1d 	bl	80020b4 <HAL_Delay>
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 800187a:	4b11      	ldr	r3, [pc, #68]	@ (80018c0 <Beep_Beep+0x80>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	2200      	movs	r2, #0
 8001880:	635a      	str	r2, [r3, #52]	@ 0x34
		HAL_Delay(50);
 8001882:	2032      	movs	r0, #50	@ 0x32
 8001884:	f000 fc16 	bl	80020b4 <HAL_Delay>
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 1000);
 8001888:	4b0d      	ldr	r3, [pc, #52]	@ (80018c0 <Beep_Beep+0x80>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001890:	635a      	str	r2, [r3, #52]	@ 0x34
		HAL_Delay(delay2);
 8001892:	887b      	ldrh	r3, [r7, #2]
 8001894:	4618      	mov	r0, r3
 8001896:	f000 fc0d 	bl	80020b4 <HAL_Delay>
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 800189a:	4b09      	ldr	r3, [pc, #36]	@ (80018c0 <Beep_Beep+0x80>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	2200      	movs	r2, #0
 80018a0:	635a      	str	r2, [r3, #52]	@ 0x34
		HAL_Delay(50);
 80018a2:	2032      	movs	r0, #50	@ 0x32
 80018a4:	f000 fc06 	bl	80020b4 <HAL_Delay>
	for (int i = 0; i < cycle; i++) {
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	3301      	adds	r3, #1
 80018ac:	60fb      	str	r3, [r7, #12]
 80018ae:	79fb      	ldrb	r3, [r7, #7]
 80018b0:	68fa      	ldr	r2, [r7, #12]
 80018b2:	429a      	cmp	r2, r3
 80018b4:	dbd4      	blt.n	8001860 <Beep_Beep+0x20>
	}
}
 80018b6:	bf00      	nop
 80018b8:	bf00      	nop
 80018ba:	3710      	adds	r7, #16
 80018bc:	46bd      	mov	sp, r7
 80018be:	bd80      	pop	{r7, pc}
 80018c0:	200001f0 	.word	0x200001f0

080018c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018c4:	b480      	push	{r7}
 80018c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80018c8:	b672      	cpsid	i
}
 80018ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80018cc:	bf00      	nop
 80018ce:	e7fd      	b.n	80018cc <Error_Handler+0x8>

080018d0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018d0:	b480      	push	{r7}
 80018d2:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018d4:	bf00      	nop
 80018d6:	46bd      	mov	sp, r7
 80018d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018dc:	4770      	bx	lr
	...

080018e0 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80018e0:	b480      	push	{r7}
 80018e2:	b085      	sub	sp, #20
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	4a0b      	ldr	r2, [pc, #44]	@ (800191c <HAL_TIM_PWM_MspInit+0x3c>)
 80018ee:	4293      	cmp	r3, r2
 80018f0:	d10e      	bne.n	8001910 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80018f2:	4b0b      	ldr	r3, [pc, #44]	@ (8001920 <HAL_TIM_PWM_MspInit+0x40>)
 80018f4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80018f8:	4a09      	ldr	r2, [pc, #36]	@ (8001920 <HAL_TIM_PWM_MspInit+0x40>)
 80018fa:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80018fe:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8001902:	4b07      	ldr	r3, [pc, #28]	@ (8001920 <HAL_TIM_PWM_MspInit+0x40>)
 8001904:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8001908:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800190c:	60fb      	str	r3, [r7, #12]
 800190e:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 8001910:	bf00      	nop
 8001912:	3714      	adds	r7, #20
 8001914:	46bd      	mov	sp, r7
 8001916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191a:	4770      	bx	lr
 800191c:	40012c00 	.word	0x40012c00
 8001920:	44020c00 	.word	0x44020c00

08001924 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b08a      	sub	sp, #40	@ 0x28
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800192c:	f107 0314 	add.w	r3, r7, #20
 8001930:	2200      	movs	r2, #0
 8001932:	601a      	str	r2, [r3, #0]
 8001934:	605a      	str	r2, [r3, #4]
 8001936:	609a      	str	r2, [r3, #8]
 8001938:	60da      	str	r2, [r3, #12]
 800193a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	4a22      	ldr	r2, [pc, #136]	@ (80019cc <HAL_TIM_MspPostInit+0xa8>)
 8001942:	4293      	cmp	r3, r2
 8001944:	d13e      	bne.n	80019c4 <HAL_TIM_MspPostInit+0xa0>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001946:	4b22      	ldr	r3, [pc, #136]	@ (80019d0 <HAL_TIM_MspPostInit+0xac>)
 8001948:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800194c:	4a20      	ldr	r2, [pc, #128]	@ (80019d0 <HAL_TIM_MspPostInit+0xac>)
 800194e:	f043 0304 	orr.w	r3, r3, #4
 8001952:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001956:	4b1e      	ldr	r3, [pc, #120]	@ (80019d0 <HAL_TIM_MspPostInit+0xac>)
 8001958:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800195c:	f003 0304 	and.w	r3, r3, #4
 8001960:	613b      	str	r3, [r7, #16]
 8001962:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001964:	4b1a      	ldr	r3, [pc, #104]	@ (80019d0 <HAL_TIM_MspPostInit+0xac>)
 8001966:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800196a:	4a19      	ldr	r2, [pc, #100]	@ (80019d0 <HAL_TIM_MspPostInit+0xac>)
 800196c:	f043 0301 	orr.w	r3, r3, #1
 8001970:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001974:	4b16      	ldr	r3, [pc, #88]	@ (80019d0 <HAL_TIM_MspPostInit+0xac>)
 8001976:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800197a:	f003 0301 	and.w	r3, r3, #1
 800197e:	60fb      	str	r3, [r7, #12]
 8001980:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PC7     ------> TIM1_CH2
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001982:	2380      	movs	r3, #128	@ 0x80
 8001984:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001986:	2302      	movs	r3, #2
 8001988:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800198a:	2300      	movs	r3, #0
 800198c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800198e:	2300      	movs	r3, #0
 8001990:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001992:	2301      	movs	r3, #1
 8001994:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001996:	f107 0314 	add.w	r3, r7, #20
 800199a:	4619      	mov	r1, r3
 800199c:	480d      	ldr	r0, [pc, #52]	@ (80019d4 <HAL_TIM_MspPostInit+0xb0>)
 800199e:	f001 f991 	bl	8002cc4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80019a2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80019a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019a8:	2302      	movs	r3, #2
 80019aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ac:	2300      	movs	r3, #0
 80019ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019b0:	2300      	movs	r3, #0
 80019b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80019b4:	2301      	movs	r3, #1
 80019b6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019b8:	f107 0314 	add.w	r3, r7, #20
 80019bc:	4619      	mov	r1, r3
 80019be:	4806      	ldr	r0, [pc, #24]	@ (80019d8 <HAL_TIM_MspPostInit+0xb4>)
 80019c0:	f001 f980 	bl	8002cc4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80019c4:	bf00      	nop
 80019c6:	3728      	adds	r7, #40	@ 0x28
 80019c8:	46bd      	mov	sp, r7
 80019ca:	bd80      	pop	{r7, pc}
 80019cc:	40012c00 	.word	0x40012c00
 80019d0:	44020c00 	.word	0x44020c00
 80019d4:	42020800 	.word	0x42020800
 80019d8:	42020000 	.word	0x42020000

080019dc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b0ae      	sub	sp, #184	@ 0xb8
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019e4:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80019e8:	2200      	movs	r2, #0
 80019ea:	601a      	str	r2, [r3, #0]
 80019ec:	605a      	str	r2, [r3, #4]
 80019ee:	609a      	str	r2, [r3, #8]
 80019f0:	60da      	str	r2, [r3, #12]
 80019f2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80019f4:	f107 0318 	add.w	r3, r7, #24
 80019f8:	2288      	movs	r2, #136	@ 0x88
 80019fa:	2100      	movs	r1, #0
 80019fc:	4618      	mov	r0, r3
 80019fe:	f007 fb70 	bl	80090e2 <memset>
  if(huart->Instance==USART1)
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	4a73      	ldr	r2, [pc, #460]	@ (8001bd4 <HAL_UART_MspInit+0x1f8>)
 8001a08:	4293      	cmp	r3, r2
 8001a0a:	d146      	bne.n	8001a9a <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001a0c:	f04f 0201 	mov.w	r2, #1
 8001a10:	f04f 0300 	mov.w	r3, #0
 8001a14:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001a1c:	f107 0318 	add.w	r3, r7, #24
 8001a20:	4618      	mov	r0, r3
 8001a22:	f002 fa1b 	bl	8003e5c <HAL_RCCEx_PeriphCLKConfig>
 8001a26:	4603      	mov	r3, r0
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d001      	beq.n	8001a30 <HAL_UART_MspInit+0x54>
    {
      Error_Handler();
 8001a2c:	f7ff ff4a 	bl	80018c4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001a30:	4b69      	ldr	r3, [pc, #420]	@ (8001bd8 <HAL_UART_MspInit+0x1fc>)
 8001a32:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8001a36:	4a68      	ldr	r2, [pc, #416]	@ (8001bd8 <HAL_UART_MspInit+0x1fc>)
 8001a38:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001a3c:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8001a40:	4b65      	ldr	r3, [pc, #404]	@ (8001bd8 <HAL_UART_MspInit+0x1fc>)
 8001a42:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8001a46:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001a4a:	617b      	str	r3, [r7, #20]
 8001a4c:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a4e:	4b62      	ldr	r3, [pc, #392]	@ (8001bd8 <HAL_UART_MspInit+0x1fc>)
 8001a50:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001a54:	4a60      	ldr	r2, [pc, #384]	@ (8001bd8 <HAL_UART_MspInit+0x1fc>)
 8001a56:	f043 0301 	orr.w	r3, r3, #1
 8001a5a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001a5e:	4b5e      	ldr	r3, [pc, #376]	@ (8001bd8 <HAL_UART_MspInit+0x1fc>)
 8001a60:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001a64:	f003 0301 	and.w	r3, r3, #1
 8001a68:	613b      	str	r3, [r7, #16]
 8001a6a:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001a6c:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001a70:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a74:	2302      	movs	r3, #2
 8001a76:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a80:	2300      	movs	r3, #0
 8001a82:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001a86:	2307      	movs	r3, #7
 8001a88:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a8c:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001a90:	4619      	mov	r1, r3
 8001a92:	4852      	ldr	r0, [pc, #328]	@ (8001bdc <HAL_UART_MspInit+0x200>)
 8001a94:	f001 f916 	bl	8002cc4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001a98:	e097      	b.n	8001bca <HAL_UART_MspInit+0x1ee>
  else if(huart->Instance==USART2)
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	4a50      	ldr	r2, [pc, #320]	@ (8001be0 <HAL_UART_MspInit+0x204>)
 8001aa0:	4293      	cmp	r3, r2
 8001aa2:	f040 8092 	bne.w	8001bca <HAL_UART_MspInit+0x1ee>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001aa6:	f04f 0202 	mov.w	r2, #2
 8001aaa:	f04f 0300 	mov.w	r3, #0
 8001aae:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001ab6:	f107 0318 	add.w	r3, r7, #24
 8001aba:	4618      	mov	r0, r3
 8001abc:	f002 f9ce 	bl	8003e5c <HAL_RCCEx_PeriphCLKConfig>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d001      	beq.n	8001aca <HAL_UART_MspInit+0xee>
      Error_Handler();
 8001ac6:	f7ff fefd 	bl	80018c4 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001aca:	4b43      	ldr	r3, [pc, #268]	@ (8001bd8 <HAL_UART_MspInit+0x1fc>)
 8001acc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001ad0:	4a41      	ldr	r2, [pc, #260]	@ (8001bd8 <HAL_UART_MspInit+0x1fc>)
 8001ad2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001ad6:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8001ada:	4b3f      	ldr	r3, [pc, #252]	@ (8001bd8 <HAL_UART_MspInit+0x1fc>)
 8001adc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001ae0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ae4:	60fb      	str	r3, [r7, #12]
 8001ae6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ae8:	4b3b      	ldr	r3, [pc, #236]	@ (8001bd8 <HAL_UART_MspInit+0x1fc>)
 8001aea:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001aee:	4a3a      	ldr	r2, [pc, #232]	@ (8001bd8 <HAL_UART_MspInit+0x1fc>)
 8001af0:	f043 0301 	orr.w	r3, r3, #1
 8001af4:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001af8:	4b37      	ldr	r3, [pc, #220]	@ (8001bd8 <HAL_UART_MspInit+0x1fc>)
 8001afa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001afe:	f003 0301 	and.w	r3, r3, #1
 8001b02:	60bb      	str	r3, [r7, #8]
 8001b04:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001b06:	2304      	movs	r3, #4
 8001b08:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b0c:	2312      	movs	r3, #18
 8001b0e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b12:	2301      	movs	r3, #1
 8001b14:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b18:	2300      	movs	r3, #0
 8001b1a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001b1e:	2307      	movs	r3, #7
 8001b20:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b24:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001b28:	4619      	mov	r1, r3
 8001b2a:	482c      	ldr	r0, [pc, #176]	@ (8001bdc <HAL_UART_MspInit+0x200>)
 8001b2c:	f001 f8ca 	bl	8002cc4 <HAL_GPIO_Init>
    handle_GPDMA1_Channel0.Instance = GPDMA1_Channel0;
 8001b30:	4b2c      	ldr	r3, [pc, #176]	@ (8001be4 <HAL_UART_MspInit+0x208>)
 8001b32:	4a2d      	ldr	r2, [pc, #180]	@ (8001be8 <HAL_UART_MspInit+0x20c>)
 8001b34:	601a      	str	r2, [r3, #0]
    handle_GPDMA1_Channel0.Init.Request = GPDMA1_REQUEST_USART2_TX;
 8001b36:	4b2b      	ldr	r3, [pc, #172]	@ (8001be4 <HAL_UART_MspInit+0x208>)
 8001b38:	2218      	movs	r2, #24
 8001b3a:	605a      	str	r2, [r3, #4]
    handle_GPDMA1_Channel0.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 8001b3c:	4b29      	ldr	r3, [pc, #164]	@ (8001be4 <HAL_UART_MspInit+0x208>)
 8001b3e:	2200      	movs	r2, #0
 8001b40:	609a      	str	r2, [r3, #8]
    handle_GPDMA1_Channel0.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001b42:	4b28      	ldr	r3, [pc, #160]	@ (8001be4 <HAL_UART_MspInit+0x208>)
 8001b44:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001b48:	60da      	str	r2, [r3, #12]
    handle_GPDMA1_Channel0.Init.SrcInc = DMA_SINC_FIXED;
 8001b4a:	4b26      	ldr	r3, [pc, #152]	@ (8001be4 <HAL_UART_MspInit+0x208>)
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	611a      	str	r2, [r3, #16]
    handle_GPDMA1_Channel0.Init.DestInc = DMA_DINC_INCREMENTED;
 8001b50:	4b24      	ldr	r3, [pc, #144]	@ (8001be4 <HAL_UART_MspInit+0x208>)
 8001b52:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8001b56:	615a      	str	r2, [r3, #20]
    handle_GPDMA1_Channel0.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_BYTE;
 8001b58:	4b22      	ldr	r3, [pc, #136]	@ (8001be4 <HAL_UART_MspInit+0x208>)
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	619a      	str	r2, [r3, #24]
    handle_GPDMA1_Channel0.Init.DestDataWidth = DMA_DEST_DATAWIDTH_BYTE;
 8001b5e:	4b21      	ldr	r3, [pc, #132]	@ (8001be4 <HAL_UART_MspInit+0x208>)
 8001b60:	2200      	movs	r2, #0
 8001b62:	61da      	str	r2, [r3, #28]
    handle_GPDMA1_Channel0.Init.Priority = DMA_LOW_PRIORITY_HIGH_WEIGHT;
 8001b64:	4b1f      	ldr	r3, [pc, #124]	@ (8001be4 <HAL_UART_MspInit+0x208>)
 8001b66:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001b6a:	621a      	str	r2, [r3, #32]
    handle_GPDMA1_Channel0.Init.SrcBurstLength = 1;
 8001b6c:	4b1d      	ldr	r3, [pc, #116]	@ (8001be4 <HAL_UART_MspInit+0x208>)
 8001b6e:	2201      	movs	r2, #1
 8001b70:	625a      	str	r2, [r3, #36]	@ 0x24
    handle_GPDMA1_Channel0.Init.DestBurstLength = 1;
 8001b72:	4b1c      	ldr	r3, [pc, #112]	@ (8001be4 <HAL_UART_MspInit+0x208>)
 8001b74:	2201      	movs	r2, #1
 8001b76:	629a      	str	r2, [r3, #40]	@ 0x28
    handle_GPDMA1_Channel0.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT1;
 8001b78:	4b1a      	ldr	r3, [pc, #104]	@ (8001be4 <HAL_UART_MspInit+0x208>)
 8001b7a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001b7e:	62da      	str	r2, [r3, #44]	@ 0x2c
    handle_GPDMA1_Channel0.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 8001b80:	4b18      	ldr	r3, [pc, #96]	@ (8001be4 <HAL_UART_MspInit+0x208>)
 8001b82:	2200      	movs	r2, #0
 8001b84:	631a      	str	r2, [r3, #48]	@ 0x30
    handle_GPDMA1_Channel0.Init.Mode = DMA_NORMAL;
 8001b86:	4b17      	ldr	r3, [pc, #92]	@ (8001be4 <HAL_UART_MspInit+0x208>)
 8001b88:	2200      	movs	r2, #0
 8001b8a:	635a      	str	r2, [r3, #52]	@ 0x34
    if (HAL_DMA_Init(&handle_GPDMA1_Channel0) != HAL_OK)
 8001b8c:	4815      	ldr	r0, [pc, #84]	@ (8001be4 <HAL_UART_MspInit+0x208>)
 8001b8e:	f000 fc45 	bl	800241c <HAL_DMA_Init>
 8001b92:	4603      	mov	r3, r0
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d001      	beq.n	8001b9c <HAL_UART_MspInit+0x1c0>
      Error_Handler();
 8001b98:	f7ff fe94 	bl	80018c4 <Error_Handler>
    __HAL_LINKDMA(huart, hdmatx, handle_GPDMA1_Channel0);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	4a11      	ldr	r2, [pc, #68]	@ (8001be4 <HAL_UART_MspInit+0x208>)
 8001ba0:	67da      	str	r2, [r3, #124]	@ 0x7c
 8001ba2:	4a10      	ldr	r2, [pc, #64]	@ (8001be4 <HAL_UART_MspInit+0x208>)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	65d3      	str	r3, [r2, #92]	@ 0x5c
    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel0, DMA_CHANNEL_NPRIV) != HAL_OK)
 8001ba8:	2110      	movs	r1, #16
 8001baa:	480e      	ldr	r0, [pc, #56]	@ (8001be4 <HAL_UART_MspInit+0x208>)
 8001bac:	f000 fef2 	bl	8002994 <HAL_DMA_ConfigChannelAttributes>
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d001      	beq.n	8001bba <HAL_UART_MspInit+0x1de>
      Error_Handler();
 8001bb6:	f7ff fe85 	bl	80018c4 <Error_Handler>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001bba:	2200      	movs	r2, #0
 8001bbc:	2100      	movs	r1, #0
 8001bbe:	203b      	movs	r0, #59	@ 0x3b
 8001bc0:	f000 fb54 	bl	800226c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001bc4:	203b      	movs	r0, #59	@ 0x3b
 8001bc6:	f000 fb6b 	bl	80022a0 <HAL_NVIC_EnableIRQ>
}
 8001bca:	bf00      	nop
 8001bcc:	37b8      	adds	r7, #184	@ 0xb8
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bd80      	pop	{r7, pc}
 8001bd2:	bf00      	nop
 8001bd4:	40013800 	.word	0x40013800
 8001bd8:	44020c00 	.word	0x44020c00
 8001bdc:	42020000 	.word	0x42020000
 8001be0:	40004400 	.word	0x40004400
 8001be4:	20000364 	.word	0x20000364
 8001be8:	40020050 	.word	0x40020050

08001bec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001bec:	b480      	push	{r7}
 8001bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001bf0:	bf00      	nop
 8001bf2:	e7fd      	b.n	8001bf0 <NMI_Handler+0x4>

08001bf4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001bf8:	bf00      	nop
 8001bfa:	e7fd      	b.n	8001bf8 <HardFault_Handler+0x4>

08001bfc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c00:	bf00      	nop
 8001c02:	e7fd      	b.n	8001c00 <MemManage_Handler+0x4>

08001c04 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c04:	b480      	push	{r7}
 8001c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c08:	bf00      	nop
 8001c0a:	e7fd      	b.n	8001c08 <BusFault_Handler+0x4>

08001c0c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c10:	bf00      	nop
 8001c12:	e7fd      	b.n	8001c10 <UsageFault_Handler+0x4>

08001c14 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c14:	b480      	push	{r7}
 8001c16:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c18:	bf00      	nop
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c20:	4770      	bx	lr

08001c22 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c22:	b480      	push	{r7}
 8001c24:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c26:	bf00      	nop
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2e:	4770      	bx	lr

08001c30 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c30:	b480      	push	{r7}
 8001c32:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c34:	bf00      	nop
 8001c36:	46bd      	mov	sp, r7
 8001c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3c:	4770      	bx	lr

08001c3e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c3e:	b580      	push	{r7, lr}
 8001c40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c42:	f000 fa17 	bl	8002074 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c46:	bf00      	nop
 8001c48:	bd80      	pop	{r7, pc}
	...

08001c4c <GPDMA1_Channel0_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 0 global interrupt.
  */
void GPDMA1_Channel0_IRQHandler(void)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel0_IRQn 0 */

  /* USER CODE END GPDMA1_Channel0_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel0);
 8001c50:	4802      	ldr	r0, [pc, #8]	@ (8001c5c <GPDMA1_Channel0_IRQHandler+0x10>)
 8001c52:	f000 fd3e 	bl	80026d2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel0_IRQn 1 */

  /* USER CODE END GPDMA1_Channel0_IRQn 1 */
}
 8001c56:	bf00      	nop
 8001c58:	bd80      	pop	{r7, pc}
 8001c5a:	bf00      	nop
 8001c5c:	20000364 	.word	0x20000364

08001c60 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001c64:	4802      	ldr	r0, [pc, #8]	@ (8001c70 <USART2_IRQHandler+0x10>)
 8001c66:	f005 f9e3 	bl	8007030 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001c6a:	bf00      	nop
 8001c6c:	bd80      	pop	{r7, pc}
 8001c6e:	bf00      	nop
 8001c70:	200002d0 	.word	0x200002d0

08001c74 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001c74:	b480      	push	{r7}
 8001c76:	af00      	add	r7, sp, #0
  return 1;
 8001c78:	2301      	movs	r3, #1
}
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c82:	4770      	bx	lr

08001c84 <_kill>:

int _kill(int pid, int sig)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b082      	sub	sp, #8
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
 8001c8c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001c8e:	f007 fa7b 	bl	8009188 <__errno>
 8001c92:	4603      	mov	r3, r0
 8001c94:	2216      	movs	r2, #22
 8001c96:	601a      	str	r2, [r3, #0]
  return -1;
 8001c98:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	3708      	adds	r7, #8
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	bd80      	pop	{r7, pc}

08001ca4 <_exit>:

void _exit (int status)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b082      	sub	sp, #8
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001cac:	f04f 31ff 	mov.w	r1, #4294967295
 8001cb0:	6878      	ldr	r0, [r7, #4]
 8001cb2:	f7ff ffe7 	bl	8001c84 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001cb6:	bf00      	nop
 8001cb8:	e7fd      	b.n	8001cb6 <_exit+0x12>

08001cba <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001cba:	b580      	push	{r7, lr}
 8001cbc:	b086      	sub	sp, #24
 8001cbe:	af00      	add	r7, sp, #0
 8001cc0:	60f8      	str	r0, [r7, #12]
 8001cc2:	60b9      	str	r1, [r7, #8]
 8001cc4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	617b      	str	r3, [r7, #20]
 8001cca:	e00a      	b.n	8001ce2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001ccc:	f3af 8000 	nop.w
 8001cd0:	4601      	mov	r1, r0
 8001cd2:	68bb      	ldr	r3, [r7, #8]
 8001cd4:	1c5a      	adds	r2, r3, #1
 8001cd6:	60ba      	str	r2, [r7, #8]
 8001cd8:	b2ca      	uxtb	r2, r1
 8001cda:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cdc:	697b      	ldr	r3, [r7, #20]
 8001cde:	3301      	adds	r3, #1
 8001ce0:	617b      	str	r3, [r7, #20]
 8001ce2:	697a      	ldr	r2, [r7, #20]
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	429a      	cmp	r2, r3
 8001ce8:	dbf0      	blt.n	8001ccc <_read+0x12>
  }

  return len;
 8001cea:	687b      	ldr	r3, [r7, #4]
}
 8001cec:	4618      	mov	r0, r3
 8001cee:	3718      	adds	r7, #24
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	bd80      	pop	{r7, pc}

08001cf4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b086      	sub	sp, #24
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	60f8      	str	r0, [r7, #12]
 8001cfc:	60b9      	str	r1, [r7, #8]
 8001cfe:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d00:	2300      	movs	r3, #0
 8001d02:	617b      	str	r3, [r7, #20]
 8001d04:	e009      	b.n	8001d1a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001d06:	68bb      	ldr	r3, [r7, #8]
 8001d08:	1c5a      	adds	r2, r3, #1
 8001d0a:	60ba      	str	r2, [r7, #8]
 8001d0c:	781b      	ldrb	r3, [r3, #0]
 8001d0e:	4618      	mov	r0, r3
 8001d10:	f7ff f99a 	bl	8001048 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d14:	697b      	ldr	r3, [r7, #20]
 8001d16:	3301      	adds	r3, #1
 8001d18:	617b      	str	r3, [r7, #20]
 8001d1a:	697a      	ldr	r2, [r7, #20]
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	429a      	cmp	r2, r3
 8001d20:	dbf1      	blt.n	8001d06 <_write+0x12>
  }
  return len;
 8001d22:	687b      	ldr	r3, [r7, #4]
}
 8001d24:	4618      	mov	r0, r3
 8001d26:	3718      	adds	r7, #24
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	bd80      	pop	{r7, pc}

08001d2c <_close>:

int _close(int file)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	b083      	sub	sp, #12
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001d34:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d38:	4618      	mov	r0, r3
 8001d3a:	370c      	adds	r7, #12
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d42:	4770      	bx	lr

08001d44 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001d44:	b480      	push	{r7}
 8001d46:	b083      	sub	sp, #12
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
 8001d4c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001d4e:	683b      	ldr	r3, [r7, #0]
 8001d50:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001d54:	605a      	str	r2, [r3, #4]
  return 0;
 8001d56:	2300      	movs	r3, #0
}
 8001d58:	4618      	mov	r0, r3
 8001d5a:	370c      	adds	r7, #12
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d62:	4770      	bx	lr

08001d64 <_isatty>:

int _isatty(int file)
{
 8001d64:	b480      	push	{r7}
 8001d66:	b083      	sub	sp, #12
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001d6c:	2301      	movs	r3, #1
}
 8001d6e:	4618      	mov	r0, r3
 8001d70:	370c      	adds	r7, #12
 8001d72:	46bd      	mov	sp, r7
 8001d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d78:	4770      	bx	lr

08001d7a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001d7a:	b480      	push	{r7}
 8001d7c:	b085      	sub	sp, #20
 8001d7e:	af00      	add	r7, sp, #0
 8001d80:	60f8      	str	r0, [r7, #12]
 8001d82:	60b9      	str	r1, [r7, #8]
 8001d84:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001d86:	2300      	movs	r3, #0
}
 8001d88:	4618      	mov	r0, r3
 8001d8a:	3714      	adds	r7, #20
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d92:	4770      	bx	lr

08001d94 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b086      	sub	sp, #24
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d9c:	4a14      	ldr	r2, [pc, #80]	@ (8001df0 <_sbrk+0x5c>)
 8001d9e:	4b15      	ldr	r3, [pc, #84]	@ (8001df4 <_sbrk+0x60>)
 8001da0:	1ad3      	subs	r3, r2, r3
 8001da2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001da4:	697b      	ldr	r3, [r7, #20]
 8001da6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001da8:	4b13      	ldr	r3, [pc, #76]	@ (8001df8 <_sbrk+0x64>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d102      	bne.n	8001db6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001db0:	4b11      	ldr	r3, [pc, #68]	@ (8001df8 <_sbrk+0x64>)
 8001db2:	4a12      	ldr	r2, [pc, #72]	@ (8001dfc <_sbrk+0x68>)
 8001db4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001db6:	4b10      	ldr	r3, [pc, #64]	@ (8001df8 <_sbrk+0x64>)
 8001db8:	681a      	ldr	r2, [r3, #0]
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	4413      	add	r3, r2
 8001dbe:	693a      	ldr	r2, [r7, #16]
 8001dc0:	429a      	cmp	r2, r3
 8001dc2:	d207      	bcs.n	8001dd4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001dc4:	f007 f9e0 	bl	8009188 <__errno>
 8001dc8:	4603      	mov	r3, r0
 8001dca:	220c      	movs	r2, #12
 8001dcc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001dce:	f04f 33ff 	mov.w	r3, #4294967295
 8001dd2:	e009      	b.n	8001de8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001dd4:	4b08      	ldr	r3, [pc, #32]	@ (8001df8 <_sbrk+0x64>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001dda:	4b07      	ldr	r3, [pc, #28]	@ (8001df8 <_sbrk+0x64>)
 8001ddc:	681a      	ldr	r2, [r3, #0]
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	4413      	add	r3, r2
 8001de2:	4a05      	ldr	r2, [pc, #20]	@ (8001df8 <_sbrk+0x64>)
 8001de4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001de6:	68fb      	ldr	r3, [r7, #12]
}
 8001de8:	4618      	mov	r0, r3
 8001dea:	3718      	adds	r7, #24
 8001dec:	46bd      	mov	sp, r7
 8001dee:	bd80      	pop	{r7, pc}
 8001df0:	20008000 	.word	0x20008000
 8001df4:	00000400 	.word	0x00000400
 8001df8:	20000498 	.word	0x20000498
 8001dfc:	200005f0 	.word	0x200005f0

08001e00 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001e00:	b480      	push	{r7}
 8001e02:	b083      	sub	sp, #12
 8001e04:	af00      	add	r7, sp, #0
  uint32_t reg_opsr;

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001e06:	4b30      	ldr	r3, [pc, #192]	@ (8001ec8 <SystemInit+0xc8>)
 8001e08:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001e0c:	4a2e      	ldr	r2, [pc, #184]	@ (8001ec8 <SystemInit+0xc8>)
 8001e0e:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001e12:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR = RCC_CR_HSION;
 8001e16:	4b2d      	ldr	r3, [pc, #180]	@ (8001ecc <SystemInit+0xcc>)
 8001e18:	2201      	movs	r2, #1
 8001e1a:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8001e1c:	4b2b      	ldr	r3, [pc, #172]	@ (8001ecc <SystemInit+0xcc>)
 8001e1e:	2200      	movs	r2, #0
 8001e20:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8001e22:	4b2a      	ldr	r3, [pc, #168]	@ (8001ecc <SystemInit+0xcc>)
 8001e24:	2200      	movs	r2, #0
 8001e26:	621a      	str	r2, [r3, #32]
  /* Reset HSEON, HSECSSON, HSEBYP, HSEEXT, HSIDIV, HSIKERON, CSION, CSIKERON, HSI48 and PLLxON bits */
#if defined(RCC_CR_PLL3ON)
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
               RCC_CR_CSION | RCC_CR_CSIKERON |RCC_CR_HSI48ON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
#else
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
 8001e28:	4b28      	ldr	r3, [pc, #160]	@ (8001ecc <SystemInit+0xcc>)
 8001e2a:	681a      	ldr	r2, [r3, #0]
 8001e2c:	4927      	ldr	r1, [pc, #156]	@ (8001ecc <SystemInit+0xcc>)
 8001e2e:	4b28      	ldr	r3, [pc, #160]	@ (8001ed0 <SystemInit+0xd0>)
 8001e30:	4013      	ands	r3, r2
 8001e32:	600b      	str	r3, [r1, #0]
               RCC_CR_CSION | RCC_CR_CSIKERON |RCC_CR_HSI48ON | RCC_CR_PLL1ON | RCC_CR_PLL2ON);
#endif

  /* Reset PLLxCFGR register */
  RCC->PLL1CFGR = 0U;
 8001e34:	4b25      	ldr	r3, [pc, #148]	@ (8001ecc <SystemInit+0xcc>)
 8001e36:	2200      	movs	r2, #0
 8001e38:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC->PLL2CFGR = 0U;
 8001e3a:	4b24      	ldr	r3, [pc, #144]	@ (8001ecc <SystemInit+0xcc>)
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	62da      	str	r2, [r3, #44]	@ 0x2c
#if defined(RCC_CR_PLL3ON)
  RCC->PLL3CFGR = 0U;
#endif /* RCC_CR_PLL3ON */

  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280U;
 8001e40:	4b22      	ldr	r3, [pc, #136]	@ (8001ecc <SystemInit+0xcc>)
 8001e42:	4a24      	ldr	r2, [pc, #144]	@ (8001ed4 <SystemInit+0xd4>)
 8001e44:	635a      	str	r2, [r3, #52]	@ 0x34
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000U;
 8001e46:	4b21      	ldr	r3, [pc, #132]	@ (8001ecc <SystemInit+0xcc>)
 8001e48:	2200      	movs	r2, #0
 8001e4a:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280U;
 8001e4c:	4b1f      	ldr	r3, [pc, #124]	@ (8001ecc <SystemInit+0xcc>)
 8001e4e:	4a21      	ldr	r2, [pc, #132]	@ (8001ed4 <SystemInit+0xd4>)
 8001e50:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL2FRACR register */
  RCC->PLL2FRACR = 0x00000000U;
 8001e52:	4b1e      	ldr	r3, [pc, #120]	@ (8001ecc <SystemInit+0xcc>)
 8001e54:	2200      	movs	r2, #0
 8001e56:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000U;
#endif /* RCC_CR_PLL3ON */

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8001e58:	4b1c      	ldr	r3, [pc, #112]	@ (8001ecc <SystemInit+0xcc>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	4a1b      	ldr	r2, [pc, #108]	@ (8001ecc <SystemInit+0xcc>)
 8001e5e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001e62:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8001e64:	4b19      	ldr	r3, [pc, #100]	@ (8001ecc <SystemInit+0xcc>)
 8001e66:	2200      	movs	r2, #0
 8001e68:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001e6a:	4b17      	ldr	r3, [pc, #92]	@ (8001ec8 <SystemInit+0xc8>)
 8001e6c:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001e70:	609a      	str	r2, [r3, #8]
  #endif /* VECT_TAB_SRAM */

  /* Check OPSR register to verify if there is an ongoing swap or option bytes update interrupted by a reset */
  reg_opsr = FLASH->OPSR & FLASH_OPSR_CODE_OP;
 8001e72:	4b19      	ldr	r3, [pc, #100]	@ (8001ed8 <SystemInit+0xd8>)
 8001e74:	699b      	ldr	r3, [r3, #24]
 8001e76:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
 8001e7a:	607b      	str	r3, [r7, #4]
  if ((reg_opsr == FLASH_OPSR_CODE_OP) || (reg_opsr == (FLASH_OPSR_CODE_OP_2 | FLASH_OPSR_CODE_OP_1)))
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	f1b3 4f60 	cmp.w	r3, #3758096384	@ 0xe0000000
 8001e82:	d003      	beq.n	8001e8c <SystemInit+0x8c>
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8001e8a:	d117      	bne.n	8001ebc <SystemInit+0xbc>
  {
    /* Check FLASH Option Control Register access */
    if ((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != 0U)
 8001e8c:	4b12      	ldr	r3, [pc, #72]	@ (8001ed8 <SystemInit+0xd8>)
 8001e8e:	69db      	ldr	r3, [r3, #28]
 8001e90:	f003 0301 	and.w	r3, r3, #1
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d005      	beq.n	8001ea4 <SystemInit+0xa4>
    {
      /* Authorizes the Option Byte registers programming */
      FLASH->OPTKEYR = 0x08192A3BU;
 8001e98:	4b0f      	ldr	r3, [pc, #60]	@ (8001ed8 <SystemInit+0xd8>)
 8001e9a:	4a10      	ldr	r2, [pc, #64]	@ (8001edc <SystemInit+0xdc>)
 8001e9c:	60da      	str	r2, [r3, #12]
      FLASH->OPTKEYR = 0x4C5D6E7FU;
 8001e9e:	4b0e      	ldr	r3, [pc, #56]	@ (8001ed8 <SystemInit+0xd8>)
 8001ea0:	4a0f      	ldr	r2, [pc, #60]	@ (8001ee0 <SystemInit+0xe0>)
 8001ea2:	60da      	str	r2, [r3, #12]
    }
    /* Launch the option bytes change operation */
    FLASH->OPTCR |= FLASH_OPTCR_OPTSTART;
 8001ea4:	4b0c      	ldr	r3, [pc, #48]	@ (8001ed8 <SystemInit+0xd8>)
 8001ea6:	69db      	ldr	r3, [r3, #28]
 8001ea8:	4a0b      	ldr	r2, [pc, #44]	@ (8001ed8 <SystemInit+0xd8>)
 8001eaa:	f043 0302 	orr.w	r3, r3, #2
 8001eae:	61d3      	str	r3, [r2, #28]

    /* Lock the FLASH Option Control Register access */
    FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 8001eb0:	4b09      	ldr	r3, [pc, #36]	@ (8001ed8 <SystemInit+0xd8>)
 8001eb2:	69db      	ldr	r3, [r3, #28]
 8001eb4:	4a08      	ldr	r2, [pc, #32]	@ (8001ed8 <SystemInit+0xd8>)
 8001eb6:	f043 0301 	orr.w	r3, r3, #1
 8001eba:	61d3      	str	r3, [r2, #28]
  }
}
 8001ebc:	bf00      	nop
 8001ebe:	370c      	adds	r7, #12
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec6:	4770      	bx	lr
 8001ec8:	e000ed00 	.word	0xe000ed00
 8001ecc:	44020c00 	.word	0x44020c00
 8001ed0:	fae2eae3 	.word	0xfae2eae3
 8001ed4:	01010280 	.word	0x01010280
 8001ed8:	40022000 	.word	0x40022000
 8001edc:	08192a3b 	.word	0x08192a3b
 8001ee0:	4c5d6e7f 	.word	0x4c5d6e7f

08001ee4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8001ee4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001f1c <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001ee8:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001eea:	e003      	b.n	8001ef4 <LoopCopyDataInit>

08001eec <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001eec:	4b0c      	ldr	r3, [pc, #48]	@ (8001f20 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001eee:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001ef0:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001ef2:	3104      	adds	r1, #4

08001ef4 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001ef4:	480b      	ldr	r0, [pc, #44]	@ (8001f24 <LoopForever+0xa>)
	ldr	r3, =_edata
 8001ef6:	4b0c      	ldr	r3, [pc, #48]	@ (8001f28 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001ef8:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001efa:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001efc:	d3f6      	bcc.n	8001eec <CopyDataInit>
	ldr	r2, =_sbss
 8001efe:	4a0b      	ldr	r2, [pc, #44]	@ (8001f2c <LoopForever+0x12>)
	b	LoopFillZerobss
 8001f00:	e002      	b.n	8001f08 <LoopFillZerobss>

08001f02 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001f02:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001f04:	f842 3b04 	str.w	r3, [r2], #4

08001f08 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001f08:	4b09      	ldr	r3, [pc, #36]	@ (8001f30 <LoopForever+0x16>)
	cmp	r2, r3
 8001f0a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001f0c:	d3f9      	bcc.n	8001f02 <FillZerobss>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001f0e:	f7ff ff77 	bl	8001e00 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001f12:	f007 f93f 	bl	8009194 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001f16:	f7ff f8a9 	bl	800106c <main>

08001f1a <LoopForever>:

LoopForever:
    b LoopForever
 8001f1a:	e7fe      	b.n	8001f1a <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8001f1c:	20008000 	.word	0x20008000
	ldr	r3, =_sidata
 8001f20:	0800cee8 	.word	0x0800cee8
	ldr	r0, =_sdata
 8001f24:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001f28:	200001d4 	.word	0x200001d4
	ldr	r2, =_sbss
 8001f2c:	200001d4 	.word	0x200001d4
	ldr	r3, = _ebss
 8001f30:	200005ec 	.word	0x200005ec

08001f34 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001f34:	e7fe      	b.n	8001f34 <ADC1_IRQHandler>
	...

08001f38 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f3c:	2003      	movs	r0, #3
 8001f3e:	f000 f98a 	bl	8002256 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8001f42:	f001 fe01 	bl	8003b48 <HAL_RCC_GetSysClockFreq>
 8001f46:	4602      	mov	r2, r0
 8001f48:	4b0c      	ldr	r3, [pc, #48]	@ (8001f7c <HAL_Init+0x44>)
 8001f4a:	6a1b      	ldr	r3, [r3, #32]
 8001f4c:	f003 030f 	and.w	r3, r3, #15
 8001f50:	490b      	ldr	r1, [pc, #44]	@ (8001f80 <HAL_Init+0x48>)
 8001f52:	5ccb      	ldrb	r3, [r1, r3]
 8001f54:	fa22 f303 	lsr.w	r3, r2, r3
 8001f58:	4a0a      	ldr	r2, [pc, #40]	@ (8001f84 <HAL_Init+0x4c>)
 8001f5a:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8001f5c:	2004      	movs	r0, #4
 8001f5e:	f000 f9cf 	bl	8002300 <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001f62:	200f      	movs	r0, #15
 8001f64:	f000 f810 	bl	8001f88 <HAL_InitTick>
 8001f68:	4603      	mov	r3, r0
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d001      	beq.n	8001f72 <HAL_Init+0x3a>
  {
    return HAL_ERROR;
 8001f6e:	2301      	movs	r3, #1
 8001f70:	e002      	b.n	8001f78 <HAL_Init+0x40>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001f72:	f7ff fcad 	bl	80018d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f76:	2300      	movs	r3, #0
}
 8001f78:	4618      	mov	r0, r3
 8001f7a:	bd80      	pop	{r7, pc}
 8001f7c:	44020c00 	.word	0x44020c00
 8001f80:	0800ca68 	.word	0x0800ca68
 8001f84:	20000000 	.word	0x20000000

08001f88 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b084      	sub	sp, #16
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
  uint32_t ticknumber = 0U;
 8001f90:	2300      	movs	r3, #0
 8001f92:	60fb      	str	r3, [r7, #12]
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 8001f94:	4b33      	ldr	r3, [pc, #204]	@ (8002064 <HAL_InitTick+0xdc>)
 8001f96:	781b      	ldrb	r3, [r3, #0]
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d101      	bne.n	8001fa0 <HAL_InitTick+0x18>
  {
    return HAL_ERROR;
 8001f9c:	2301      	movs	r3, #1
 8001f9e:	e05c      	b.n	800205a <HAL_InitTick+0xd2>
  }

  /* Check Clock source to calculate the tickNumber */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 8001fa0:	4b31      	ldr	r3, [pc, #196]	@ (8002068 <HAL_InitTick+0xe0>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f003 0304 	and.w	r3, r3, #4
 8001fa8:	2b04      	cmp	r3, #4
 8001faa:	d10c      	bne.n	8001fc6 <HAL_InitTick+0x3e>
  {
    /* HCLK selected as SysTick clock source */
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 8001fac:	4b2f      	ldr	r3, [pc, #188]	@ (800206c <HAL_InitTick+0xe4>)
 8001fae:	681a      	ldr	r2, [r3, #0]
 8001fb0:	4b2c      	ldr	r3, [pc, #176]	@ (8002064 <HAL_InitTick+0xdc>)
 8001fb2:	781b      	ldrb	r3, [r3, #0]
 8001fb4:	4619      	mov	r1, r3
 8001fb6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001fba:	fbb3 f3f1 	udiv	r3, r3, r1
 8001fbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fc2:	60fb      	str	r3, [r7, #12]
 8001fc4:	e037      	b.n	8002036 <HAL_InitTick+0xae>
  }
  else
  {
    systicksel = HAL_SYSTICK_GetCLKSourceConfig();
 8001fc6:	f000 f9f3 	bl	80023b0 <HAL_SYSTICK_GetCLKSourceConfig>
 8001fca:	60b8      	str	r0, [r7, #8]
    switch (systicksel)
 8001fcc:	68bb      	ldr	r3, [r7, #8]
 8001fce:	2b02      	cmp	r3, #2
 8001fd0:	d023      	beq.n	800201a <HAL_InitTick+0x92>
 8001fd2:	68bb      	ldr	r3, [r7, #8]
 8001fd4:	2b02      	cmp	r3, #2
 8001fd6:	d82d      	bhi.n	8002034 <HAL_InitTick+0xac>
 8001fd8:	68bb      	ldr	r3, [r7, #8]
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d003      	beq.n	8001fe6 <HAL_InitTick+0x5e>
 8001fde:	68bb      	ldr	r3, [r7, #8]
 8001fe0:	2b01      	cmp	r3, #1
 8001fe2:	d00d      	beq.n	8002000 <HAL_InitTick+0x78>
        /* Calculate tick value */
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
        break;
      default:
        /* Nothing to do */
        break;
 8001fe4:	e026      	b.n	8002034 <HAL_InitTick+0xac>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 8001fe6:	4b21      	ldr	r3, [pc, #132]	@ (800206c <HAL_InitTick+0xe4>)
 8001fe8:	681a      	ldr	r2, [r3, #0]
 8001fea:	4b1e      	ldr	r3, [pc, #120]	@ (8002064 <HAL_InitTick+0xdc>)
 8001fec:	781b      	ldrb	r3, [r3, #0]
 8001fee:	4619      	mov	r1, r3
 8001ff0:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 8001ff4:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ff8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ffc:	60fb      	str	r3, [r7, #12]
        break;
 8001ffe:	e01a      	b.n	8002036 <HAL_InitTick+0xae>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8002000:	4b18      	ldr	r3, [pc, #96]	@ (8002064 <HAL_InitTick+0xdc>)
 8002002:	781b      	ldrb	r3, [r3, #0]
 8002004:	461a      	mov	r2, r3
 8002006:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800200a:	fbb3 f3f2 	udiv	r3, r3, r2
 800200e:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 8002012:	fbb2 f3f3 	udiv	r3, r2, r3
 8002016:	60fb      	str	r3, [r7, #12]
        break;
 8002018:	e00d      	b.n	8002036 <HAL_InitTick+0xae>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 800201a:	4b12      	ldr	r3, [pc, #72]	@ (8002064 <HAL_InitTick+0xdc>)
 800201c:	781b      	ldrb	r3, [r3, #0]
 800201e:	461a      	mov	r2, r3
 8002020:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002024:	fbb3 f3f2 	udiv	r3, r3, r2
 8002028:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800202c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002030:	60fb      	str	r3, [r7, #12]
        break;
 8002032:	e000      	b.n	8002036 <HAL_InitTick+0xae>
        break;
 8002034:	bf00      	nop
    }
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 8002036:	68f8      	ldr	r0, [r7, #12]
 8002038:	f000 f940 	bl	80022bc <HAL_SYSTICK_Config>
 800203c:	4603      	mov	r3, r0
 800203e:	2b00      	cmp	r3, #0
 8002040:	d001      	beq.n	8002046 <HAL_InitTick+0xbe>
  {
    return HAL_ERROR;
 8002042:	2301      	movs	r3, #1
 8002044:	e009      	b.n	800205a <HAL_InitTick+0xd2>
  }

  /* Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002046:	2200      	movs	r2, #0
 8002048:	6879      	ldr	r1, [r7, #4]
 800204a:	f04f 30ff 	mov.w	r0, #4294967295
 800204e:	f000 f90d 	bl	800226c <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 8002052:	4a07      	ldr	r2, [pc, #28]	@ (8002070 <HAL_InitTick+0xe8>)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8002058:	2300      	movs	r3, #0
}
 800205a:	4618      	mov	r0, r3
 800205c:	3710      	adds	r7, #16
 800205e:	46bd      	mov	sp, r7
 8002060:	bd80      	pop	{r7, pc}
 8002062:	bf00      	nop
 8002064:	20000008 	.word	0x20000008
 8002068:	e000e010 	.word	0xe000e010
 800206c:	20000000 	.word	0x20000000
 8002070:	20000004 	.word	0x20000004

08002074 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002074:	b480      	push	{r7}
 8002076:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002078:	4b06      	ldr	r3, [pc, #24]	@ (8002094 <HAL_IncTick+0x20>)
 800207a:	781b      	ldrb	r3, [r3, #0]
 800207c:	461a      	mov	r2, r3
 800207e:	4b06      	ldr	r3, [pc, #24]	@ (8002098 <HAL_IncTick+0x24>)
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	4413      	add	r3, r2
 8002084:	4a04      	ldr	r2, [pc, #16]	@ (8002098 <HAL_IncTick+0x24>)
 8002086:	6013      	str	r3, [r2, #0]
}
 8002088:	bf00      	nop
 800208a:	46bd      	mov	sp, r7
 800208c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002090:	4770      	bx	lr
 8002092:	bf00      	nop
 8002094:	20000008 	.word	0x20000008
 8002098:	2000049c 	.word	0x2000049c

0800209c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800209c:	b480      	push	{r7}
 800209e:	af00      	add	r7, sp, #0
  return uwTick;
 80020a0:	4b03      	ldr	r3, [pc, #12]	@ (80020b0 <HAL_GetTick+0x14>)
 80020a2:	681b      	ldr	r3, [r3, #0]
}
 80020a4:	4618      	mov	r0, r3
 80020a6:	46bd      	mov	sp, r7
 80020a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ac:	4770      	bx	lr
 80020ae:	bf00      	nop
 80020b0:	2000049c 	.word	0x2000049c

080020b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b084      	sub	sp, #16
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80020bc:	f7ff ffee 	bl	800209c <HAL_GetTick>
 80020c0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020cc:	d005      	beq.n	80020da <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80020ce:	4b0a      	ldr	r3, [pc, #40]	@ (80020f8 <HAL_Delay+0x44>)
 80020d0:	781b      	ldrb	r3, [r3, #0]
 80020d2:	461a      	mov	r2, r3
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	4413      	add	r3, r2
 80020d8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80020da:	bf00      	nop
 80020dc:	f7ff ffde 	bl	800209c <HAL_GetTick>
 80020e0:	4602      	mov	r2, r0
 80020e2:	68bb      	ldr	r3, [r7, #8]
 80020e4:	1ad3      	subs	r3, r2, r3
 80020e6:	68fa      	ldr	r2, [r7, #12]
 80020e8:	429a      	cmp	r2, r3
 80020ea:	d8f7      	bhi.n	80020dc <HAL_Delay+0x28>
  {
  }
}
 80020ec:	bf00      	nop
 80020ee:	bf00      	nop
 80020f0:	3710      	adds	r7, #16
 80020f2:	46bd      	mov	sp, r7
 80020f4:	bd80      	pop	{r7, pc}
 80020f6:	bf00      	nop
 80020f8:	20000008 	.word	0x20000008

080020fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020fc:	b480      	push	{r7}
 80020fe:	b085      	sub	sp, #20
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	f003 0307 	and.w	r3, r3, #7
 800210a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800210c:	4b0c      	ldr	r3, [pc, #48]	@ (8002140 <__NVIC_SetPriorityGrouping+0x44>)
 800210e:	68db      	ldr	r3, [r3, #12]
 8002110:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002112:	68ba      	ldr	r2, [r7, #8]
 8002114:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002118:	4013      	ands	r3, r2
 800211a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002120:	68bb      	ldr	r3, [r7, #8]
 8002122:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002124:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002128:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800212c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800212e:	4a04      	ldr	r2, [pc, #16]	@ (8002140 <__NVIC_SetPriorityGrouping+0x44>)
 8002130:	68bb      	ldr	r3, [r7, #8]
 8002132:	60d3      	str	r3, [r2, #12]
}
 8002134:	bf00      	nop
 8002136:	3714      	adds	r7, #20
 8002138:	46bd      	mov	sp, r7
 800213a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213e:	4770      	bx	lr
 8002140:	e000ed00 	.word	0xe000ed00

08002144 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002144:	b480      	push	{r7}
 8002146:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002148:	4b04      	ldr	r3, [pc, #16]	@ (800215c <__NVIC_GetPriorityGrouping+0x18>)
 800214a:	68db      	ldr	r3, [r3, #12]
 800214c:	0a1b      	lsrs	r3, r3, #8
 800214e:	f003 0307 	and.w	r3, r3, #7
}
 8002152:	4618      	mov	r0, r3
 8002154:	46bd      	mov	sp, r7
 8002156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215a:	4770      	bx	lr
 800215c:	e000ed00 	.word	0xe000ed00

08002160 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002160:	b480      	push	{r7}
 8002162:	b083      	sub	sp, #12
 8002164:	af00      	add	r7, sp, #0
 8002166:	4603      	mov	r3, r0
 8002168:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800216a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800216e:	2b00      	cmp	r3, #0
 8002170:	db0b      	blt.n	800218a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002172:	88fb      	ldrh	r3, [r7, #6]
 8002174:	f003 021f 	and.w	r2, r3, #31
 8002178:	4907      	ldr	r1, [pc, #28]	@ (8002198 <__NVIC_EnableIRQ+0x38>)
 800217a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800217e:	095b      	lsrs	r3, r3, #5
 8002180:	2001      	movs	r0, #1
 8002182:	fa00 f202 	lsl.w	r2, r0, r2
 8002186:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800218a:	bf00      	nop
 800218c:	370c      	adds	r7, #12
 800218e:	46bd      	mov	sp, r7
 8002190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002194:	4770      	bx	lr
 8002196:	bf00      	nop
 8002198:	e000e100 	.word	0xe000e100

0800219c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800219c:	b480      	push	{r7}
 800219e:	b083      	sub	sp, #12
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	4603      	mov	r3, r0
 80021a4:	6039      	str	r1, [r7, #0]
 80021a6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80021a8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	db0a      	blt.n	80021c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	b2da      	uxtb	r2, r3
 80021b4:	490c      	ldr	r1, [pc, #48]	@ (80021e8 <__NVIC_SetPriority+0x4c>)
 80021b6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80021ba:	0112      	lsls	r2, r2, #4
 80021bc:	b2d2      	uxtb	r2, r2
 80021be:	440b      	add	r3, r1
 80021c0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80021c4:	e00a      	b.n	80021dc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	b2da      	uxtb	r2, r3
 80021ca:	4908      	ldr	r1, [pc, #32]	@ (80021ec <__NVIC_SetPriority+0x50>)
 80021cc:	88fb      	ldrh	r3, [r7, #6]
 80021ce:	f003 030f 	and.w	r3, r3, #15
 80021d2:	3b04      	subs	r3, #4
 80021d4:	0112      	lsls	r2, r2, #4
 80021d6:	b2d2      	uxtb	r2, r2
 80021d8:	440b      	add	r3, r1
 80021da:	761a      	strb	r2, [r3, #24]
}
 80021dc:	bf00      	nop
 80021de:	370c      	adds	r7, #12
 80021e0:	46bd      	mov	sp, r7
 80021e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e6:	4770      	bx	lr
 80021e8:	e000e100 	.word	0xe000e100
 80021ec:	e000ed00 	.word	0xe000ed00

080021f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021f0:	b480      	push	{r7}
 80021f2:	b089      	sub	sp, #36	@ 0x24
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	60f8      	str	r0, [r7, #12]
 80021f8:	60b9      	str	r1, [r7, #8]
 80021fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	f003 0307 	and.w	r3, r3, #7
 8002202:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002204:	69fb      	ldr	r3, [r7, #28]
 8002206:	f1c3 0307 	rsb	r3, r3, #7
 800220a:	2b04      	cmp	r3, #4
 800220c:	bf28      	it	cs
 800220e:	2304      	movcs	r3, #4
 8002210:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002212:	69fb      	ldr	r3, [r7, #28]
 8002214:	3304      	adds	r3, #4
 8002216:	2b06      	cmp	r3, #6
 8002218:	d902      	bls.n	8002220 <NVIC_EncodePriority+0x30>
 800221a:	69fb      	ldr	r3, [r7, #28]
 800221c:	3b03      	subs	r3, #3
 800221e:	e000      	b.n	8002222 <NVIC_EncodePriority+0x32>
 8002220:	2300      	movs	r3, #0
 8002222:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002224:	f04f 32ff 	mov.w	r2, #4294967295
 8002228:	69bb      	ldr	r3, [r7, #24]
 800222a:	fa02 f303 	lsl.w	r3, r2, r3
 800222e:	43da      	mvns	r2, r3
 8002230:	68bb      	ldr	r3, [r7, #8]
 8002232:	401a      	ands	r2, r3
 8002234:	697b      	ldr	r3, [r7, #20]
 8002236:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002238:	f04f 31ff 	mov.w	r1, #4294967295
 800223c:	697b      	ldr	r3, [r7, #20]
 800223e:	fa01 f303 	lsl.w	r3, r1, r3
 8002242:	43d9      	mvns	r1, r3
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002248:	4313      	orrs	r3, r2
         );
}
 800224a:	4618      	mov	r0, r3
 800224c:	3724      	adds	r7, #36	@ 0x24
 800224e:	46bd      	mov	sp, r7
 8002250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002254:	4770      	bx	lr

08002256 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PRIORITYGROUP_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002256:	b580      	push	{r7, lr}
 8002258:	b082      	sub	sp, #8
 800225a:	af00      	add	r7, sp, #0
 800225c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800225e:	6878      	ldr	r0, [r7, #4]
 8002260:	f7ff ff4c 	bl	80020fc <__NVIC_SetPriorityGrouping>
}
 8002264:	bf00      	nop
 8002266:	3708      	adds	r7, #8
 8002268:	46bd      	mov	sp, r7
 800226a:	bd80      	pop	{r7, pc}

0800226c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b086      	sub	sp, #24
 8002270:	af00      	add	r7, sp, #0
 8002272:	4603      	mov	r3, r0
 8002274:	60b9      	str	r1, [r7, #8]
 8002276:	607a      	str	r2, [r7, #4]
 8002278:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800227a:	f7ff ff63 	bl	8002144 <__NVIC_GetPriorityGrouping>
 800227e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002280:	687a      	ldr	r2, [r7, #4]
 8002282:	68b9      	ldr	r1, [r7, #8]
 8002284:	6978      	ldr	r0, [r7, #20]
 8002286:	f7ff ffb3 	bl	80021f0 <NVIC_EncodePriority>
 800228a:	4602      	mov	r2, r0
 800228c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002290:	4611      	mov	r1, r2
 8002292:	4618      	mov	r0, r3
 8002294:	f7ff ff82 	bl	800219c <__NVIC_SetPriority>
}
 8002298:	bf00      	nop
 800229a:	3718      	adds	r7, #24
 800229c:	46bd      	mov	sp, r7
 800229e:	bd80      	pop	{r7, pc}

080022a0 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32h5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b082      	sub	sp, #8
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	4603      	mov	r3, r0
 80022a8:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80022aa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80022ae:	4618      	mov	r0, r3
 80022b0:	f7ff ff56 	bl	8002160 <__NVIC_EnableIRQ>
}
 80022b4:	bf00      	nop
 80022b6:	3708      	adds	r7, #8
 80022b8:	46bd      	mov	sp, r7
 80022ba:	bd80      	pop	{r7, pc}

080022bc <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80022bc:	b480      	push	{r7}
 80022be:	b083      	sub	sp, #12
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	3b01      	subs	r3, #1
 80022c8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80022cc:	d301      	bcc.n	80022d2 <HAL_SYSTICK_Config+0x16>
  {
    /* Reload value impossible */
    return (1UL);
 80022ce:	2301      	movs	r3, #1
 80022d0:	e00d      	b.n	80022ee <HAL_SYSTICK_Config+0x32>
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 80022d2:	4a0a      	ldr	r2, [pc, #40]	@ (80022fc <HAL_SYSTICK_Config+0x40>)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	3b01      	subs	r3, #1
 80022d8:	6053      	str	r3, [r2, #4]

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 80022da:	4b08      	ldr	r3, [pc, #32]	@ (80022fc <HAL_SYSTICK_Config+0x40>)
 80022dc:	2200      	movs	r2, #0
 80022de:	609a      	str	r2, [r3, #8]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 80022e0:	4b06      	ldr	r3, [pc, #24]	@ (80022fc <HAL_SYSTICK_Config+0x40>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	4a05      	ldr	r2, [pc, #20]	@ (80022fc <HAL_SYSTICK_Config+0x40>)
 80022e6:	f043 0303 	orr.w	r3, r3, #3
 80022ea:	6013      	str	r3, [r2, #0]

  /* Function successful */
  return (0UL);
 80022ec:	2300      	movs	r3, #0
}
 80022ee:	4618      	mov	r0, r3
 80022f0:	370c      	adds	r7, #12
 80022f2:	46bd      	mov	sp, r7
 80022f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f8:	4770      	bx	lr
 80022fa:	bf00      	nop
 80022fc:	e000e010 	.word	0xe000e010

08002300 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8002300:	b480      	push	{r7}
 8002302:	b083      	sub	sp, #12
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	2b04      	cmp	r3, #4
 800230c:	d844      	bhi.n	8002398 <HAL_SYSTICK_CLKSourceConfig+0x98>
 800230e:	a201      	add	r2, pc, #4	@ (adr r2, 8002314 <HAL_SYSTICK_CLKSourceConfig+0x14>)
 8002310:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002314:	08002337 	.word	0x08002337
 8002318:	08002355 	.word	0x08002355
 800231c:	08002377 	.word	0x08002377
 8002320:	08002399 	.word	0x08002399
 8002324:	08002329 	.word	0x08002329
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8002328:	4b1f      	ldr	r3, [pc, #124]	@ (80023a8 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	4a1e      	ldr	r2, [pc, #120]	@ (80023a8 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800232e:	f043 0304 	orr.w	r3, r3, #4
 8002332:	6013      	str	r3, [r2, #0]
      break;
 8002334:	e031      	b.n	800239a <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8002336:	4b1c      	ldr	r3, [pc, #112]	@ (80023a8 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	4a1b      	ldr	r2, [pc, #108]	@ (80023a8 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800233c:	f023 0304 	bic.w	r3, r3, #4
 8002340:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, (0x00000000U));
 8002342:	4b1a      	ldr	r3, [pc, #104]	@ (80023ac <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8002344:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8002348:	4a18      	ldr	r2, [pc, #96]	@ (80023ac <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800234a:	f023 030c 	bic.w	r3, r3, #12
 800234e:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 8002352:	e022      	b.n	800239a <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8002354:	4b14      	ldr	r3, [pc, #80]	@ (80023a8 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	4a13      	ldr	r2, [pc, #76]	@ (80023a8 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800235a:	f023 0304 	bic.w	r3, r3, #4
 800235e:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_0);
 8002360:	4b12      	ldr	r3, [pc, #72]	@ (80023ac <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8002362:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8002366:	f023 030c 	bic.w	r3, r3, #12
 800236a:	4a10      	ldr	r2, [pc, #64]	@ (80023ac <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800236c:	f043 0304 	orr.w	r3, r3, #4
 8002370:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 8002374:	e011      	b.n	800239a <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8002376:	4b0c      	ldr	r3, [pc, #48]	@ (80023a8 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	4a0b      	ldr	r2, [pc, #44]	@ (80023a8 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800237c:	f023 0304 	bic.w	r3, r3, #4
 8002380:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_1);
 8002382:	4b0a      	ldr	r3, [pc, #40]	@ (80023ac <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8002384:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8002388:	f023 030c 	bic.w	r3, r3, #12
 800238c:	4a07      	ldr	r2, [pc, #28]	@ (80023ac <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800238e:	f043 0308 	orr.w	r3, r3, #8
 8002392:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 8002396:	e000      	b.n	800239a <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 8002398:	bf00      	nop
  }
}
 800239a:	bf00      	nop
 800239c:	370c      	adds	r7, #12
 800239e:	46bd      	mov	sp, r7
 80023a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a4:	4770      	bx	lr
 80023a6:	bf00      	nop
 80023a8:	e000e010 	.word	0xe000e010
 80023ac:	44020c00 	.word	0x44020c00

080023b0 <HAL_SYSTICK_GetCLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_LSE: LSE clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  */
uint32_t HAL_SYSTICK_GetCLKSourceConfig(void)
{
 80023b0:	b480      	push	{r7}
 80023b2:	b083      	sub	sp, #12
 80023b4:	af00      	add	r7, sp, #0
  uint32_t systick_source;
  uint32_t systick_rcc_source;

  /* Read SysTick->CTRL register for internal or external clock source */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) != 0U)
 80023b6:	4b17      	ldr	r3, [pc, #92]	@ (8002414 <HAL_SYSTICK_GetCLKSourceConfig+0x64>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f003 0304 	and.w	r3, r3, #4
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d002      	beq.n	80023c8 <HAL_SYSTICK_GetCLKSourceConfig+0x18>
  {
    /* Internal clock source */
    systick_source = SYSTICK_CLKSOURCE_HCLK;
 80023c2:	2304      	movs	r3, #4
 80023c4:	607b      	str	r3, [r7, #4]
 80023c6:	e01e      	b.n	8002406 <HAL_SYSTICK_GetCLKSourceConfig+0x56>
  }
  else
  {
    /* External clock source, check the selected one in RCC */
    systick_rcc_source = READ_BIT(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL);
 80023c8:	4b13      	ldr	r3, [pc, #76]	@ (8002418 <HAL_SYSTICK_GetCLKSourceConfig+0x68>)
 80023ca:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80023ce:	f003 030c 	and.w	r3, r3, #12
 80023d2:	603b      	str	r3, [r7, #0]

    switch (systick_rcc_source)
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	2b08      	cmp	r3, #8
 80023d8:	d00f      	beq.n	80023fa <HAL_SYSTICK_GetCLKSourceConfig+0x4a>
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	2b08      	cmp	r3, #8
 80023de:	d80f      	bhi.n	8002400 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d003      	beq.n	80023ee <HAL_SYSTICK_GetCLKSourceConfig+0x3e>
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	2b04      	cmp	r3, #4
 80023ea:	d003      	beq.n	80023f4 <HAL_SYSTICK_GetCLKSourceConfig+0x44>
 80023ec:	e008      	b.n	8002400 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
    {
      case (0x00000000U):
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 80023ee:	2300      	movs	r3, #0
 80023f0:	607b      	str	r3, [r7, #4]
        break;
 80023f2:	e008      	b.n	8002406 <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      case (RCC_CCIPR4_SYSTICKSEL_0):
        systick_source = SYSTICK_CLKSOURCE_LSI;
 80023f4:	2301      	movs	r3, #1
 80023f6:	607b      	str	r3, [r7, #4]
        break;
 80023f8:	e005      	b.n	8002406 <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      case (RCC_CCIPR4_SYSTICKSEL_1):
        systick_source = SYSTICK_CLKSOURCE_LSE;
 80023fa:	2302      	movs	r3, #2
 80023fc:	607b      	str	r3, [r7, #4]
        break;
 80023fe:	e002      	b.n	8002406 <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      default:
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8002400:	2300      	movs	r3, #0
 8002402:	607b      	str	r3, [r7, #4]
        break;
 8002404:	bf00      	nop
    }
  }
  return systick_source;
 8002406:	687b      	ldr	r3, [r7, #4]
}
 8002408:	4618      	mov	r0, r3
 800240a:	370c      	adds	r7, #12
 800240c:	46bd      	mov	sp, r7
 800240e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002412:	4770      	bx	lr
 8002414:	e000e010 	.word	0xe000e010
 8002418:	44020c00 	.word	0x44020c00

0800241c <HAL_DMA_Init>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *const hdma)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b084      	sub	sp, #16
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart = HAL_GetTick();
 8002424:	f7ff fe3a 	bl	800209c <HAL_GetTick>
 8002428:	60f8      	str	r0, [r7, #12]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	2b00      	cmp	r3, #0
 800242e:	d101      	bne.n	8002434 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8002430:	2301      	movs	r3, #1
 8002432:	e085      	b.n	8002540 <HAL_DMA_Init+0x124>
  if (hdma->Init.Mode == DMA_PFCTRL)
  {
    assert_param(IS_DMA_PFREQ_INSTANCE(hdma->Instance));
  }
  /* Check DMA channel instance */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	4a43      	ldr	r2, [pc, #268]	@ (8002548 <HAL_DMA_Init+0x12c>)
 800243a:	4293      	cmp	r3, r2
 800243c:	d049      	beq.n	80024d2 <HAL_DMA_Init+0xb6>
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	4a42      	ldr	r2, [pc, #264]	@ (800254c <HAL_DMA_Init+0x130>)
 8002444:	4293      	cmp	r3, r2
 8002446:	d044      	beq.n	80024d2 <HAL_DMA_Init+0xb6>
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	4a40      	ldr	r2, [pc, #256]	@ (8002550 <HAL_DMA_Init+0x134>)
 800244e:	4293      	cmp	r3, r2
 8002450:	d03f      	beq.n	80024d2 <HAL_DMA_Init+0xb6>
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	4a3f      	ldr	r2, [pc, #252]	@ (8002554 <HAL_DMA_Init+0x138>)
 8002458:	4293      	cmp	r3, r2
 800245a:	d03a      	beq.n	80024d2 <HAL_DMA_Init+0xb6>
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	4a3d      	ldr	r2, [pc, #244]	@ (8002558 <HAL_DMA_Init+0x13c>)
 8002462:	4293      	cmp	r3, r2
 8002464:	d035      	beq.n	80024d2 <HAL_DMA_Init+0xb6>
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	4a3c      	ldr	r2, [pc, #240]	@ (800255c <HAL_DMA_Init+0x140>)
 800246c:	4293      	cmp	r3, r2
 800246e:	d030      	beq.n	80024d2 <HAL_DMA_Init+0xb6>
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	4a3a      	ldr	r2, [pc, #232]	@ (8002560 <HAL_DMA_Init+0x144>)
 8002476:	4293      	cmp	r3, r2
 8002478:	d02b      	beq.n	80024d2 <HAL_DMA_Init+0xb6>
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	4a39      	ldr	r2, [pc, #228]	@ (8002564 <HAL_DMA_Init+0x148>)
 8002480:	4293      	cmp	r3, r2
 8002482:	d026      	beq.n	80024d2 <HAL_DMA_Init+0xb6>
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	4a37      	ldr	r2, [pc, #220]	@ (8002568 <HAL_DMA_Init+0x14c>)
 800248a:	4293      	cmp	r3, r2
 800248c:	d021      	beq.n	80024d2 <HAL_DMA_Init+0xb6>
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	4a36      	ldr	r2, [pc, #216]	@ (800256c <HAL_DMA_Init+0x150>)
 8002494:	4293      	cmp	r3, r2
 8002496:	d01c      	beq.n	80024d2 <HAL_DMA_Init+0xb6>
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	4a34      	ldr	r2, [pc, #208]	@ (8002570 <HAL_DMA_Init+0x154>)
 800249e:	4293      	cmp	r3, r2
 80024a0:	d017      	beq.n	80024d2 <HAL_DMA_Init+0xb6>
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	4a33      	ldr	r2, [pc, #204]	@ (8002574 <HAL_DMA_Init+0x158>)
 80024a8:	4293      	cmp	r3, r2
 80024aa:	d012      	beq.n	80024d2 <HAL_DMA_Init+0xb6>
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	4a31      	ldr	r2, [pc, #196]	@ (8002578 <HAL_DMA_Init+0x15c>)
 80024b2:	4293      	cmp	r3, r2
 80024b4:	d00d      	beq.n	80024d2 <HAL_DMA_Init+0xb6>
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	4a30      	ldr	r2, [pc, #192]	@ (800257c <HAL_DMA_Init+0x160>)
 80024bc:	4293      	cmp	r3, r2
 80024be:	d008      	beq.n	80024d2 <HAL_DMA_Init+0xb6>
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	4a2e      	ldr	r2, [pc, #184]	@ (8002580 <HAL_DMA_Init+0x164>)
 80024c6:	4293      	cmp	r3, r2
 80024c8:	d003      	beq.n	80024d2 <HAL_DMA_Init+0xb6>
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	4a2d      	ldr	r2, [pc, #180]	@ (8002584 <HAL_DMA_Init+0x168>)
 80024d0:	4293      	cmp	r3, r2
    assert_param(IS_DMA_BURST_LENGTH(hdma->Init.DestBurstLength));
    assert_param(IS_DMA_TRANSFER_ALLOCATED_PORT(hdma->Init.TransferAllocatedPort));
  }

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	2200      	movs	r2, #0
 80024d6:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  /* Update the DMA channel state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	2202      	movs	r2, #2
 80024de:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Disable the DMA channel */
  __HAL_DMA_DISABLE(hdma);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	695a      	ldr	r2, [r3, #20]
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f042 0206 	orr.w	r2, r2, #6
 80024f0:	615a      	str	r2, [r3, #20]

  /* Check if the DMA channel is effectively disabled */
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 80024f2:	e00f      	b.n	8002514 <HAL_DMA_Init+0xf8>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 80024f4:	f7ff fdd2 	bl	800209c <HAL_GetTick>
 80024f8:	4602      	mov	r2, r0
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	1ad3      	subs	r3, r2, r3
 80024fe:	2b05      	cmp	r3, #5
 8002500:	d908      	bls.n	8002514 <HAL_DMA_Init+0xf8>
    {
      /* Update the DMA channel error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	2210      	movs	r2, #16
 8002506:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Update the DMA channel state */
      hdma->State = HAL_DMA_STATE_ERROR;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	2203      	movs	r2, #3
 800250c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

      return HAL_ERROR;
 8002510:	2301      	movs	r3, #1
 8002512:	e015      	b.n	8002540 <HAL_DMA_Init+0x124>
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	695b      	ldr	r3, [r3, #20]
 800251a:	f003 0301 	and.w	r3, r3, #1
 800251e:	2b00      	cmp	r3, #0
 8002520:	d1e8      	bne.n	80024f4 <HAL_DMA_Init+0xd8>
    }
  }

  /* Initialize the DMA channel registers */
  DMA_Init(hdma);
 8002522:	6878      	ldr	r0, [r7, #4]
 8002524:	f000 fa72 	bl	8002a0c <DMA_Init>

  /* Update DMA channel operation mode */
  hdma->Mode = hdma->Init.Mode;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Update the DMA channel error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	2200      	movs	r2, #0
 8002534:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Update the DMA channel state */
  hdma->State = HAL_DMA_STATE_READY;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	2201      	movs	r2, #1
 800253a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 800253e:	2300      	movs	r3, #0
}
 8002540:	4618      	mov	r0, r3
 8002542:	3710      	adds	r7, #16
 8002544:	46bd      	mov	sp, r7
 8002546:	bd80      	pop	{r7, pc}
 8002548:	40020050 	.word	0x40020050
 800254c:	400200d0 	.word	0x400200d0
 8002550:	40020150 	.word	0x40020150
 8002554:	400201d0 	.word	0x400201d0
 8002558:	40020250 	.word	0x40020250
 800255c:	400202d0 	.word	0x400202d0
 8002560:	40020350 	.word	0x40020350
 8002564:	400203d0 	.word	0x400203d0
 8002568:	40021050 	.word	0x40021050
 800256c:	400210d0 	.word	0x400210d0
 8002570:	40021150 	.word	0x40021150
 8002574:	400211d0 	.word	0x400211d0
 8002578:	40021250 	.word	0x40021250
 800257c:	400212d0 	.word	0x400212d0
 8002580:	40021350 	.word	0x40021350
 8002584:	400213d0 	.word	0x400213d0

08002588 <HAL_DMA_Abort>:
  *         is suspended while a data transfer is on-going, the current data will be transferred and the channel will be
  *         effectively suspended only after the transfer of any on-going data is finished.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *const hdma)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b084      	sub	sp, #16
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart =  HAL_GetTick();
 8002590:	f7ff fd84 	bl	800209c <HAL_GetTick>
 8002594:	60f8      	str	r0, [r7, #12]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	2b00      	cmp	r3, #0
 800259a:	d101      	bne.n	80025a0 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 800259c:	2301      	movs	r3, #1
 800259e:	e06b      	b.n	8002678 <HAL_DMA_Abort+0xf0>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80025a6:	b2db      	uxtb	r3, r3
 80025a8:	2b02      	cmp	r3, #2
 80025aa:	d008      	beq.n	80025be <HAL_DMA_Abort+0x36>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	2220      	movs	r2, #32
 80025b0:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	2200      	movs	r2, #0
 80025b6:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    return HAL_ERROR;
 80025ba:	2301      	movs	r3, #1
 80025bc:	e05c      	b.n	8002678 <HAL_DMA_Abort+0xf0>
  }
  else
  {
    /* Suspend the channel */
    hdma->Instance->CCR |= DMA_CCR_SUSP;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	695a      	ldr	r2, [r3, #20]
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f042 0204 	orr.w	r2, r2, #4
 80025cc:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_SUSPEND;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	2205      	movs	r2, #5
 80025d2:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check if the DMA Channel is suspended */
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 80025d6:	e020      	b.n	800261a <HAL_DMA_Abort+0x92>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 80025d8:	f7ff fd60 	bl	800209c <HAL_GetTick>
 80025dc:	4602      	mov	r2, r0
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	1ad3      	subs	r3, r2, r3
 80025e2:	2b05      	cmp	r3, #5
 80025e4:	d919      	bls.n	800261a <HAL_DMA_Abort+0x92>
      {
        /* Update the DMA channel error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TIMEOUT;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025ea:	f043 0210 	orr.w	r2, r3, #16
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	659a      	str	r2, [r3, #88]	@ 0x58

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	2203      	movs	r2, #3
 80025f6:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80025fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002602:	2b00      	cmp	r3, #0
 8002604:	d003      	beq.n	800260e <HAL_DMA_Abort+0x86>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800260a:	2201      	movs	r2, #1
 800260c:	731a      	strb	r2, [r3, #12]
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	2200      	movs	r2, #0
 8002612:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        return HAL_ERROR;
 8002616:	2301      	movs	r3, #1
 8002618:	e02e      	b.n	8002678 <HAL_DMA_Abort+0xf0>
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	691b      	ldr	r3, [r3, #16]
 8002620:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002624:	2b00      	cmp	r3, #0
 8002626:	d0d7      	beq.n	80025d8 <HAL_DMA_Abort+0x50>
      }
    }

    /* Reset the channel */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	695a      	ldr	r2, [r3, #20]
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f042 0202 	orr.w	r2, r2, #2
 8002636:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2204      	movs	r2, #4
 800263c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Clear all status flags */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f44f 42fe 	mov.w	r2, #32512	@ 0x7f00
 8002648:	60da      	str	r2, [r3, #12]
                                DMA_FLAG_TO));

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	2201      	movs	r2, #1
 800264e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002656:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800265a:	2b00      	cmp	r3, #0
 800265c:	d007      	beq.n	800266e <HAL_DMA_Abort+0xe6>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002662:	2201      	movs	r2, #1
 8002664:	731a      	strb	r2, [r3, #12]

      /* Clear remaining data size to ensure loading linked-list from memory next start */
      hdma->Instance->CBR1 = 0U;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	2200      	movs	r2, #0
 800266c:	649a      	str	r2, [r3, #72]	@ 0x48
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	2200      	movs	r2, #0
 8002672:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8002676:	2300      	movs	r3, #0
}
 8002678:	4618      	mov	r0, r3
 800267a:	3710      	adds	r7, #16
 800267c:	46bd      	mov	sp, r7
 800267e:	bd80      	pop	{r7, pc}

08002680 <HAL_DMA_Abort_IT>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *const hdma)
{
 8002680:	b480      	push	{r7}
 8002682:	b083      	sub	sp, #12
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	2b00      	cmp	r3, #0
 800268c:	d101      	bne.n	8002692 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800268e:	2301      	movs	r3, #1
 8002690:	e019      	b.n	80026c6 <HAL_DMA_Abort_IT+0x46>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8002698:	b2db      	uxtb	r3, r3
 800269a:	2b02      	cmp	r3, #2
 800269c:	d004      	beq.n	80026a8 <HAL_DMA_Abort_IT+0x28>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	2220      	movs	r2, #32
 80026a2:	659a      	str	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 80026a4:	2301      	movs	r3, #1
 80026a6:	e00e      	b.n	80026c6 <HAL_DMA_Abort_IT+0x46>
  }
  else
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	2204      	movs	r2, #4
 80026ac:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Suspend the channel and activate suspend interrupt */
    hdma->Instance->CCR |= (DMA_CCR_SUSP | DMA_CCR_SUSPIE);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	695b      	ldr	r3, [r3, #20]
 80026b6:	687a      	ldr	r2, [r7, #4]
 80026b8:	6812      	ldr	r2, [r2, #0]
 80026ba:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80026be:	f043 0304 	orr.w	r3, r3, #4
 80026c2:	6153      	str	r3, [r2, #20]
  }

  return HAL_OK;
 80026c4:	2300      	movs	r3, #0
}
 80026c6:	4618      	mov	r0, r3
 80026c8:	370c      	adds	r7, #12
 80026ca:	46bd      	mov	sp, r7
 80026cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d0:	4770      	bx	lr

080026d2 <HAL_DMA_IRQHandler>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *const hdma)
{
 80026d2:	b580      	push	{r7, lr}
 80026d4:	b086      	sub	sp, #24
 80026d6:	af00      	add	r7, sp, #0
 80026d8:	6078      	str	r0, [r7, #4]
  const DMA_TypeDef *p_dma_instance = GET_DMA_INSTANCE(hdma);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 80026e2:	f023 030f 	bic.w	r3, r3, #15
 80026e6:	617b      	str	r3, [r7, #20]
  uint32_t global_it_flag =  1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026f0:	3b50      	subs	r3, #80	@ 0x50
 80026f2:	09db      	lsrs	r3, r3, #7
 80026f4:	f003 031f 	and.w	r3, r3, #31
 80026f8:	2201      	movs	r2, #1
 80026fa:	fa02 f303 	lsl.w	r3, r2, r3
 80026fe:	613b      	str	r3, [r7, #16]
  uint32_t global_active_flag_ns = IS_DMA_GLOBAL_ACTIVE_FLAG_NS(p_dma_instance, global_it_flag);
 8002700:	697b      	ldr	r3, [r7, #20]
 8002702:	68db      	ldr	r3, [r3, #12]
 8002704:	693a      	ldr	r2, [r7, #16]
 8002706:	4013      	ands	r3, r2
 8002708:	60fb      	str	r3, [r7, #12]

  /* Global Interrupt Flag management *********************************************************************************/
#if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
  if ((global_active_flag_s == 0U) && (global_active_flag_ns == 0U))
#else
  if (global_active_flag_ns == 0U)
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	2b00      	cmp	r3, #0
 800270e:	f000 813b 	beq.w	8002988 <HAL_DMA_IRQHandler+0x2b6>
  {
    return; /* the global interrupt flag for the current channel is down , nothing to do */
  }

  /* Data Transfer Error Interrupt management *************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_DTE) != 0U))
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	691b      	ldr	r3, [r3, #16]
 8002718:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800271c:	2b00      	cmp	r3, #0
 800271e:	d011      	beq.n	8002744 <HAL_DMA_IRQHandler+0x72>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DTE) != 0U)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	695b      	ldr	r3, [r3, #20]
 8002726:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800272a:	2b00      	cmp	r3, #0
 800272c:	d00a      	beq.n	8002744 <HAL_DMA_IRQHandler+0x72>
    {
      /* Clear the transfer error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_DTE);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002736:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DTE;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800273c:	f043 0201 	orr.w	r2, r3, #1
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Update Linked-list Error Interrupt management ********************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_ULE) != 0U))
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	691b      	ldr	r3, [r3, #16]
 800274a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800274e:	2b00      	cmp	r3, #0
 8002750:	d011      	beq.n	8002776 <HAL_DMA_IRQHandler+0xa4>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_ULE) != 0U)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	695b      	ldr	r3, [r3, #20]
 8002758:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800275c:	2b00      	cmp	r3, #0
 800275e:	d00a      	beq.n	8002776 <HAL_DMA_IRQHandler+0xa4>
    {
      /* Clear the update linked-list error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_ULE);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002768:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_ULE;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800276e:	f043 0202 	orr.w	r2, r3, #2
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* User Setting Error Interrupt management **************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_USE) != 0U))
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	691b      	ldr	r3, [r3, #16]
 800277c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002780:	2b00      	cmp	r3, #0
 8002782:	d011      	beq.n	80027a8 <HAL_DMA_IRQHandler+0xd6>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_USE) != 0U)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	695b      	ldr	r3, [r3, #20]
 800278a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800278e:	2b00      	cmp	r3, #0
 8002790:	d00a      	beq.n	80027a8 <HAL_DMA_IRQHandler+0xd6>
    {
      /* Clear the user setting error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_USE);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800279a:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_USE;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027a0:	f043 0204 	orr.w	r2, r3, #4
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Trigger Overrun Interrupt management *****************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TO) != 0U))
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	691b      	ldr	r3, [r3, #16]
 80027ae:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d011      	beq.n	80027da <HAL_DMA_IRQHandler+0x108>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TO) != 0U)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	695b      	ldr	r3, [r3, #20]
 80027bc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d00a      	beq.n	80027da <HAL_DMA_IRQHandler+0x108>
    {
      /* Clear the trigger overrun flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_TO);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80027cc:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TO;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027d2:	f043 0208 	orr.w	r2, r3, #8
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Half Transfer Complete Interrupt management **********************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_HT) != 0U))
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	691b      	ldr	r3, [r3, #16]
 80027e0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d013      	beq.n	8002810 <HAL_DMA_IRQHandler+0x13e>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	695b      	ldr	r3, [r3, #20]
 80027ee:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d00c      	beq.n	8002810 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Clear the half transfer flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_HT);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80027fe:	60da      	str	r2, [r3, #12]

      /* Check half transfer complete callback */
      if (hdma->XferHalfCpltCallback != NULL)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002804:	2b00      	cmp	r3, #0
 8002806:	d003      	beq.n	8002810 <HAL_DMA_IRQHandler+0x13e>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800280c:	6878      	ldr	r0, [r7, #4]
 800280e:	4798      	blx	r3
      }
    }
  }

  /* Suspend Transfer Interrupt management ****************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_SUSP) != 0U))
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	691b      	ldr	r3, [r3, #16]
 8002816:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800281a:	2b00      	cmp	r3, #0
 800281c:	d04c      	beq.n	80028b8 <HAL_DMA_IRQHandler+0x1e6>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_SUSP) != 0U)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	695b      	ldr	r3, [r3, #20]
 8002824:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002828:	2b00      	cmp	r3, #0
 800282a:	d045      	beq.n	80028b8 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Clear the block transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_SUSP);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002834:	60da      	str	r2, [r3, #12]

      /* Check DMA channel state */
      if (hdma->State == HAL_DMA_STATE_ABORT)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 800283c:	b2db      	uxtb	r3, r3
 800283e:	2b04      	cmp	r3, #4
 8002840:	d12e      	bne.n	80028a0 <HAL_DMA_IRQHandler+0x1ce>
      {
        /* Disable the suspend transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_SUSP);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	695a      	ldr	r2, [r3, #20]
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002850:	615a      	str	r2, [r3, #20]

        /* Reset the channel internal state and reset the FIFO */
        hdma->Instance->CCR |= DMA_CCR_RESET;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	695a      	ldr	r2, [r3, #20]
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f042 0202 	orr.w	r2, r2, #2
 8002860:	615a      	str	r2, [r3, #20]

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_READY;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	2201      	movs	r2, #1
 8002866:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800286e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002872:	2b00      	cmp	r3, #0
 8002874:	d007      	beq.n	8002886 <HAL_DMA_IRQHandler+0x1b4>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800287a:	2201      	movs	r2, #1
 800287c:	731a      	strb	r2, [r3, #12]

          /* Clear remaining data size to ensure loading linked-list from memory next start */
          hdma->Instance->CBR1 = 0U;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	2200      	movs	r2, #0
 8002884:	649a      	str	r2, [r3, #72]	@ 0x48
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	2200      	movs	r2, #0
 800288a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        /* Check transfer abort callback */
        if (hdma->XferAbortCallback != NULL)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002892:	2b00      	cmp	r3, #0
 8002894:	d07a      	beq.n	800298c <HAL_DMA_IRQHandler+0x2ba>
        {
          /* Transfer abort callback */
          hdma->XferAbortCallback(hdma);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800289a:	6878      	ldr	r0, [r7, #4]
 800289c:	4798      	blx	r3
        }

        return;
 800289e:	e075      	b.n	800298c <HAL_DMA_IRQHandler+0x2ba>
      }
      else
      {
        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_SUSPEND;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2205      	movs	r2, #5
 80028a4:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check transfer suspend callback */
        if (hdma->XferSuspendCallback != NULL)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d003      	beq.n	80028b8 <HAL_DMA_IRQHandler+0x1e6>
        {
          /* Transfer suspend callback */
          hdma->XferSuspendCallback(hdma);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028b4:	6878      	ldr	r0, [r7, #4]
 80028b6:	4798      	blx	r3
      }
    }
  }

  /* Transfer Complete Interrupt management ***************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TC) != 0U))
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	691b      	ldr	r3, [r3, #16]
 80028be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d039      	beq.n	800293a <HAL_DMA_IRQHandler+0x268>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	695b      	ldr	r3, [r3, #20]
 80028cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d032      	beq.n	800293a <HAL_DMA_IRQHandler+0x268>
    {
      /* Check DMA channel transfer mode */
      if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80028d8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d012      	beq.n	8002906 <HAL_DMA_IRQHandler+0x234>
      {
        /* If linked-list transfer */
        if (hdma->Instance->CLLR == 0U)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d116      	bne.n	8002918 <HAL_DMA_IRQHandler+0x246>
        {
          if (hdma->Instance->CBR1 == 0U)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d111      	bne.n	8002918 <HAL_DMA_IRQHandler+0x246>
          {
            /* Update the DMA channel state */
            hdma->State = HAL_DMA_STATE_READY;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	2201      	movs	r2, #1
 80028f8:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

            /* Update the linked-list queue state */
            hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002900:	2201      	movs	r2, #1
 8002902:	731a      	strb	r2, [r3, #12]
 8002904:	e008      	b.n	8002918 <HAL_DMA_IRQHandler+0x246>
        }
      }
      else
      {
        /* If normal transfer */
        if (hdma->Instance->CBR1 == 0U)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800290c:	2b00      	cmp	r3, #0
 800290e:	d103      	bne.n	8002918 <HAL_DMA_IRQHandler+0x246>
        {
          /* Update the DMA channel state */
          hdma->State = HAL_DMA_STATE_READY;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2201      	movs	r2, #1
 8002914:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
        }
      }

      /* Clear TC and HT transfer flags */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT));
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8002920:	60da      	str	r2, [r3, #12]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	2200      	movs	r2, #0
 8002926:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

      /* Check transfer complete callback */
      if (hdma->XferCpltCallback != NULL)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800292e:	2b00      	cmp	r3, #0
 8002930:	d003      	beq.n	800293a <HAL_DMA_IRQHandler+0x268>
      {
        /* Channel Transfer Complete callback */
        hdma->XferCpltCallback(hdma);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002936:	6878      	ldr	r0, [r7, #4]
 8002938:	4798      	blx	r3
      }
    }
  }

  /* Manage error case ************************************************************************************************/
  if (hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800293e:	2b00      	cmp	r3, #0
 8002940:	d025      	beq.n	800298e <HAL_DMA_IRQHandler+0x2bc>
  {
    /* Reset the channel internal state and reset the FIFO */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	695a      	ldr	r2, [r3, #20]
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f042 0202 	orr.w	r2, r2, #2
 8002950:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	2201      	movs	r2, #1
 8002956:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800295e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002962:	2b00      	cmp	r3, #0
 8002964:	d003      	beq.n	800296e <HAL_DMA_IRQHandler+0x29c>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800296a:	2201      	movs	r2, #1
 800296c:	731a      	strb	r2, [r3, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	2200      	movs	r2, #0
 8002972:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /* Check transfer error callback */
    if (hdma->XferErrorCallback != NULL)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800297a:	2b00      	cmp	r3, #0
 800297c:	d007      	beq.n	800298e <HAL_DMA_IRQHandler+0x2bc>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002982:	6878      	ldr	r0, [r7, #4]
 8002984:	4798      	blx	r3
 8002986:	e002      	b.n	800298e <HAL_DMA_IRQHandler+0x2bc>
    return; /* the global interrupt flag for the current channel is down , nothing to do */
 8002988:	bf00      	nop
 800298a:	e000      	b.n	800298e <HAL_DMA_IRQHandler+0x2bc>
        return;
 800298c:	bf00      	nop
    }
  }
}
 800298e:	3718      	adds	r7, #24
 8002990:	46bd      	mov	sp, r7
 8002992:	bd80      	pop	{r7, pc}

08002994 <HAL_DMA_ConfigChannelAttributes>:
  * @param  ChannelAttributes : Specifies the DMA channel secure/privilege attributes.
  *                             This parameter can be a one or a combination of @ref DMA_Channel_Attributes.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_DMA_ConfigChannelAttributes(DMA_HandleTypeDef *const hdma, uint32_t ChannelAttributes)
{
 8002994:	b480      	push	{r7}
 8002996:	b085      	sub	sp, #20
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
 800299c:	6039      	str	r1, [r7, #0]
  DMA_TypeDef *p_dma_instance;
  uint32_t channel_idx;

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d101      	bne.n	80029a8 <HAL_DMA_ConfigChannelAttributes+0x14>
  {
    return HAL_ERROR;
 80029a4:	2301      	movs	r3, #1
 80029a6:	e02b      	b.n	8002a00 <HAL_DMA_ConfigChannelAttributes+0x6c>

  /* Check the parameters */
  assert_param(IS_DMA_ATTRIBUTES(ChannelAttributes));

  /* Get DMA instance */
  p_dma_instance = GET_DMA_INSTANCE(hdma);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 80029b0:	f023 030f 	bic.w	r3, r3, #15
 80029b4:	60fb      	str	r3, [r7, #12]

  /* Get channel index */
  channel_idx = 1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029be:	3b50      	subs	r3, #80	@ 0x50
 80029c0:	09db      	lsrs	r3, r3, #7
 80029c2:	f003 031f 	and.w	r3, r3, #31
 80029c6:	2201      	movs	r2, #1
 80029c8:	fa02 f303 	lsl.w	r3, r2, r3
 80029cc:	60bb      	str	r3, [r7, #8]

  /* Check DMA channel privilege attribute management */
  if ((ChannelAttributes & DMA_CHANNEL_ATTR_PRIV_MASK) == DMA_CHANNEL_ATTR_PRIV_MASK)
 80029ce:	683b      	ldr	r3, [r7, #0]
 80029d0:	f003 0310 	and.w	r3, r3, #16
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d012      	beq.n	80029fe <HAL_DMA_ConfigChannelAttributes+0x6a>
  {
    /* Configure DMA channel privilege attribute */
    if ((ChannelAttributes & DMA_CHANNEL_PRIV) == DMA_CHANNEL_PRIV)
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	f003 0311 	and.w	r3, r3, #17
 80029de:	2b11      	cmp	r3, #17
 80029e0:	d106      	bne.n	80029f0 <HAL_DMA_ConfigChannelAttributes+0x5c>
    {
      p_dma_instance->PRIVCFGR |= channel_idx;
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	685a      	ldr	r2, [r3, #4]
 80029e6:	68bb      	ldr	r3, [r7, #8]
 80029e8:	431a      	orrs	r2, r3
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	605a      	str	r2, [r3, #4]
 80029ee:	e006      	b.n	80029fe <HAL_DMA_ConfigChannelAttributes+0x6a>
    }
    else
    {
      p_dma_instance->PRIVCFGR &= (~channel_idx);
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	685a      	ldr	r2, [r3, #4]
 80029f4:	68bb      	ldr	r3, [r7, #8]
 80029f6:	43db      	mvns	r3, r3
 80029f8:	401a      	ands	r2, r3
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	605a      	str	r2, [r3, #4]
      hdma->Instance->CTR1 &= (~DMA_CTR1_DSEC);
    }
  }
#endif /* (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  return HAL_OK;
 80029fe:	2300      	movs	r3, #0
}
 8002a00:	4618      	mov	r0, r3
 8002a02:	3714      	adds	r7, #20
 8002a04:	46bd      	mov	sp, r7
 8002a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0a:	4770      	bx	lr

08002a0c <DMA_Init>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
static void DMA_Init(DMA_HandleTypeDef const *const hdma)
{
 8002a0c:	b480      	push	{r7}
 8002a0e:	b085      	sub	sp, #20
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Prepare DMA Channel Control Register (CCR) value *****************************************************************/
  tmpreg = hdma->Init.Priority;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	6a1b      	ldr	r3, [r3, #32]
 8002a18:	60fb      	str	r3, [r7, #12]

  /* Write DMA Channel Control Register (CCR) */
  MODIFY_REG(hdma->Instance->CCR, DMA_CCR_PRIO | DMA_CCR_LAP | DMA_CCR_LSM, tmpreg);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	695b      	ldr	r3, [r3, #20]
 8002a20:	f423 0143 	bic.w	r1, r3, #12779520	@ 0xc30000
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	68fa      	ldr	r2, [r7, #12]
 8002a2a:	430a      	orrs	r2, r1
 8002a2c:	615a      	str	r2, [r3, #20]

  /* Prepare DMA Channel Transfer Register (CTR1) value ***************************************************************/
  tmpreg = hdma->Init.DestInc | hdma->Init.DestDataWidth | hdma->Init.SrcInc | hdma->Init.SrcDataWidth;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	695a      	ldr	r2, [r3, #20]
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	69db      	ldr	r3, [r3, #28]
 8002a36:	431a      	orrs	r2, r3
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	691b      	ldr	r3, [r3, #16]
 8002a3c:	431a      	orrs	r2, r3
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	699b      	ldr	r3, [r3, #24]
 8002a42:	4313      	orrs	r3, r2
 8002a44:	60fb      	str	r3, [r7, #12]

  /* Add parameters specific to GPDMA */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	4a82      	ldr	r2, [pc, #520]	@ (8002c54 <DMA_Init+0x248>)
 8002a4c:	4293      	cmp	r3, r2
 8002a4e:	d04a      	beq.n	8002ae6 <DMA_Init+0xda>
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	4a80      	ldr	r2, [pc, #512]	@ (8002c58 <DMA_Init+0x24c>)
 8002a56:	4293      	cmp	r3, r2
 8002a58:	d045      	beq.n	8002ae6 <DMA_Init+0xda>
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	4a7f      	ldr	r2, [pc, #508]	@ (8002c5c <DMA_Init+0x250>)
 8002a60:	4293      	cmp	r3, r2
 8002a62:	d040      	beq.n	8002ae6 <DMA_Init+0xda>
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	4a7d      	ldr	r2, [pc, #500]	@ (8002c60 <DMA_Init+0x254>)
 8002a6a:	4293      	cmp	r3, r2
 8002a6c:	d03b      	beq.n	8002ae6 <DMA_Init+0xda>
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	4a7c      	ldr	r2, [pc, #496]	@ (8002c64 <DMA_Init+0x258>)
 8002a74:	4293      	cmp	r3, r2
 8002a76:	d036      	beq.n	8002ae6 <DMA_Init+0xda>
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	4a7a      	ldr	r2, [pc, #488]	@ (8002c68 <DMA_Init+0x25c>)
 8002a7e:	4293      	cmp	r3, r2
 8002a80:	d031      	beq.n	8002ae6 <DMA_Init+0xda>
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	4a79      	ldr	r2, [pc, #484]	@ (8002c6c <DMA_Init+0x260>)
 8002a88:	4293      	cmp	r3, r2
 8002a8a:	d02c      	beq.n	8002ae6 <DMA_Init+0xda>
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	4a77      	ldr	r2, [pc, #476]	@ (8002c70 <DMA_Init+0x264>)
 8002a92:	4293      	cmp	r3, r2
 8002a94:	d027      	beq.n	8002ae6 <DMA_Init+0xda>
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	4a76      	ldr	r2, [pc, #472]	@ (8002c74 <DMA_Init+0x268>)
 8002a9c:	4293      	cmp	r3, r2
 8002a9e:	d022      	beq.n	8002ae6 <DMA_Init+0xda>
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	4a74      	ldr	r2, [pc, #464]	@ (8002c78 <DMA_Init+0x26c>)
 8002aa6:	4293      	cmp	r3, r2
 8002aa8:	d01d      	beq.n	8002ae6 <DMA_Init+0xda>
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	4a73      	ldr	r2, [pc, #460]	@ (8002c7c <DMA_Init+0x270>)
 8002ab0:	4293      	cmp	r3, r2
 8002ab2:	d018      	beq.n	8002ae6 <DMA_Init+0xda>
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	4a71      	ldr	r2, [pc, #452]	@ (8002c80 <DMA_Init+0x274>)
 8002aba:	4293      	cmp	r3, r2
 8002abc:	d013      	beq.n	8002ae6 <DMA_Init+0xda>
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	4a70      	ldr	r2, [pc, #448]	@ (8002c84 <DMA_Init+0x278>)
 8002ac4:	4293      	cmp	r3, r2
 8002ac6:	d00e      	beq.n	8002ae6 <DMA_Init+0xda>
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	4a6e      	ldr	r2, [pc, #440]	@ (8002c88 <DMA_Init+0x27c>)
 8002ace:	4293      	cmp	r3, r2
 8002ad0:	d009      	beq.n	8002ae6 <DMA_Init+0xda>
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	4a6d      	ldr	r2, [pc, #436]	@ (8002c8c <DMA_Init+0x280>)
 8002ad8:	4293      	cmp	r3, r2
 8002ada:	d004      	beq.n	8002ae6 <DMA_Init+0xda>
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	4a6b      	ldr	r2, [pc, #428]	@ (8002c90 <DMA_Init+0x284>)
 8002ae2:	4293      	cmp	r3, r2
 8002ae4:	d101      	bne.n	8002aea <DMA_Init+0xde>
 8002ae6:	2301      	movs	r3, #1
 8002ae8:	e000      	b.n	8002aec <DMA_Init+0xe0>
 8002aea:	2300      	movs	r3, #0
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d012      	beq.n	8002b16 <DMA_Init+0x10a>
  {
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
               (((hdma->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1) |
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002af8:	3b01      	subs	r3, #1
 8002afa:	051b      	lsls	r3, r3, #20
 8002afc:	f003 737c 	and.w	r3, r3, #66060288	@ 0x3f00000
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
 8002b00:	431a      	orrs	r2, r3
               (((hdma->Init.SrcBurstLength - 1U) << DMA_CTR1_SBL_1_Pos) & DMA_CTR1_SBL_1));
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b06:	3b01      	subs	r3, #1
 8002b08:	011b      	lsls	r3, r3, #4
 8002b0a:	f403 737c 	and.w	r3, r3, #1008	@ 0x3f0
               (((hdma->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1) |
 8002b0e:	4313      	orrs	r3, r2
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
 8002b10:	68fa      	ldr	r2, [r7, #12]
 8002b12:	4313      	orrs	r3, r2
 8002b14:	60fb      	str	r3, [r7, #12]

  /* Write DMA Channel Transfer Register 1 (CTR1) */
#if defined (DMA_CTR1_SSEC)
  MODIFY_REG(hdma->Instance->CTR1, ~(DMA_CTR1_SSEC | DMA_CTR1_DSEC), tmpreg);
#else
  WRITE_REG(hdma->Instance->CTR1, tmpreg);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	68fa      	ldr	r2, [r7, #12]
 8002b1c:	641a      	str	r2, [r3, #64]	@ 0x40
#endif /* DMA_CTR1_SSEC */

  /* Prepare DMA Channel Transfer Register 2 (CTR2) value *************************************************************/
  tmpreg = hdma->Init.BlkHWRequest | (hdma->Init.Request & DMA_CTR2_REQSEL) | hdma->Init.TransferEventMode;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	689a      	ldr	r2, [r3, #8]
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	685b      	ldr	r3, [r3, #4]
 8002b26:	b2db      	uxtb	r3, r3
 8002b28:	431a      	orrs	r2, r3
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b2e:	4313      	orrs	r3, r2
 8002b30:	60fb      	str	r3, [r7, #12]

  /* Memory to Peripheral Transfer */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	68db      	ldr	r3, [r3, #12]
 8002b36:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002b3a:	d159      	bne.n	8002bf0 <DMA_Init+0x1e4>
  {
    if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	4a44      	ldr	r2, [pc, #272]	@ (8002c54 <DMA_Init+0x248>)
 8002b42:	4293      	cmp	r3, r2
 8002b44:	d04a      	beq.n	8002bdc <DMA_Init+0x1d0>
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	4a43      	ldr	r2, [pc, #268]	@ (8002c58 <DMA_Init+0x24c>)
 8002b4c:	4293      	cmp	r3, r2
 8002b4e:	d045      	beq.n	8002bdc <DMA_Init+0x1d0>
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	4a41      	ldr	r2, [pc, #260]	@ (8002c5c <DMA_Init+0x250>)
 8002b56:	4293      	cmp	r3, r2
 8002b58:	d040      	beq.n	8002bdc <DMA_Init+0x1d0>
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	4a40      	ldr	r2, [pc, #256]	@ (8002c60 <DMA_Init+0x254>)
 8002b60:	4293      	cmp	r3, r2
 8002b62:	d03b      	beq.n	8002bdc <DMA_Init+0x1d0>
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	4a3e      	ldr	r2, [pc, #248]	@ (8002c64 <DMA_Init+0x258>)
 8002b6a:	4293      	cmp	r3, r2
 8002b6c:	d036      	beq.n	8002bdc <DMA_Init+0x1d0>
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	4a3d      	ldr	r2, [pc, #244]	@ (8002c68 <DMA_Init+0x25c>)
 8002b74:	4293      	cmp	r3, r2
 8002b76:	d031      	beq.n	8002bdc <DMA_Init+0x1d0>
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	4a3b      	ldr	r2, [pc, #236]	@ (8002c6c <DMA_Init+0x260>)
 8002b7e:	4293      	cmp	r3, r2
 8002b80:	d02c      	beq.n	8002bdc <DMA_Init+0x1d0>
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	4a3a      	ldr	r2, [pc, #232]	@ (8002c70 <DMA_Init+0x264>)
 8002b88:	4293      	cmp	r3, r2
 8002b8a:	d027      	beq.n	8002bdc <DMA_Init+0x1d0>
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	4a38      	ldr	r2, [pc, #224]	@ (8002c74 <DMA_Init+0x268>)
 8002b92:	4293      	cmp	r3, r2
 8002b94:	d022      	beq.n	8002bdc <DMA_Init+0x1d0>
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	4a37      	ldr	r2, [pc, #220]	@ (8002c78 <DMA_Init+0x26c>)
 8002b9c:	4293      	cmp	r3, r2
 8002b9e:	d01d      	beq.n	8002bdc <DMA_Init+0x1d0>
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	4a35      	ldr	r2, [pc, #212]	@ (8002c7c <DMA_Init+0x270>)
 8002ba6:	4293      	cmp	r3, r2
 8002ba8:	d018      	beq.n	8002bdc <DMA_Init+0x1d0>
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	4a34      	ldr	r2, [pc, #208]	@ (8002c80 <DMA_Init+0x274>)
 8002bb0:	4293      	cmp	r3, r2
 8002bb2:	d013      	beq.n	8002bdc <DMA_Init+0x1d0>
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	4a32      	ldr	r2, [pc, #200]	@ (8002c84 <DMA_Init+0x278>)
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	d00e      	beq.n	8002bdc <DMA_Init+0x1d0>
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	4a31      	ldr	r2, [pc, #196]	@ (8002c88 <DMA_Init+0x27c>)
 8002bc4:	4293      	cmp	r3, r2
 8002bc6:	d009      	beq.n	8002bdc <DMA_Init+0x1d0>
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	4a2f      	ldr	r2, [pc, #188]	@ (8002c8c <DMA_Init+0x280>)
 8002bce:	4293      	cmp	r3, r2
 8002bd0:	d004      	beq.n	8002bdc <DMA_Init+0x1d0>
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	4a2e      	ldr	r2, [pc, #184]	@ (8002c90 <DMA_Init+0x284>)
 8002bd8:	4293      	cmp	r3, r2
 8002bda:	d101      	bne.n	8002be0 <DMA_Init+0x1d4>
 8002bdc:	2301      	movs	r3, #1
 8002bde:	e000      	b.n	8002be2 <DMA_Init+0x1d6>
 8002be0:	2300      	movs	r3, #0
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d00d      	beq.n	8002c02 <DMA_Init+0x1f6>
    {
      tmpreg |= DMA_CTR2_DREQ;
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002bec:	60fb      	str	r3, [r7, #12]
 8002bee:	e008      	b.n	8002c02 <DMA_Init+0x1f6>
    }
  }
  /* Memory to Memory Transfer */
  else if ((hdma->Init.Direction) == DMA_MEMORY_TO_MEMORY)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	68db      	ldr	r3, [r3, #12]
 8002bf4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002bf8:	d103      	bne.n	8002c02 <DMA_Init+0x1f6>
  {
    tmpreg |= DMA_CTR2_SWREQ;
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002c00:	60fb      	str	r3, [r7, #12]
  {
    /* Nothing to do */
  }

  /* Set DMA channel operation mode */
  tmpreg |= hdma->Init.Mode;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c06:	68fa      	ldr	r2, [r7, #12]
 8002c08:	4313      	orrs	r3, r2
 8002c0a:	60fb      	str	r3, [r7, #12]

  /* Write DMA Channel Transfer Register 2 (CTR2) */
  MODIFY_REG(hdma->Instance->CTR2, (DMA_CTR2_TCEM  | DMA_CTR2_TRIGPOL | DMA_CTR2_TRIGSEL | DMA_CTR2_TRIGM |
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002c12:	4b20      	ldr	r3, [pc, #128]	@ (8002c94 <DMA_Init+0x288>)
 8002c14:	4013      	ands	r3, r2
 8002c16:	687a      	ldr	r2, [r7, #4]
 8002c18:	6812      	ldr	r2, [r2, #0]
 8002c1a:	68f9      	ldr	r1, [r7, #12]
 8002c1c:	430b      	orrs	r3, r1
 8002c1e:	6453      	str	r3, [r2, #68]	@ 0x44
                                    DMA_CTR2_PFREQ | DMA_CTR2_BREQ  | DMA_CTR2_DREQ    | DMA_CTR2_SWREQ   |
                                    DMA_CTR2_REQSEL), tmpreg);


  /* Write DMA Channel Block Register 1 (CBR1) ************************************************************************/
  WRITE_REG(hdma->Instance->CBR1, 0U);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	2200      	movs	r2, #0
 8002c26:	649a      	str	r2, [r3, #72]	@ 0x48

  /* If 2D Addressing is supported by current channel */
  if (IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) != 0U)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	4a0f      	ldr	r2, [pc, #60]	@ (8002c6c <DMA_Init+0x260>)
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	d00e      	beq.n	8002c50 <DMA_Init+0x244>
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	4a0e      	ldr	r2, [pc, #56]	@ (8002c70 <DMA_Init+0x264>)
 8002c38:	4293      	cmp	r3, r2
 8002c3a:	d009      	beq.n	8002c50 <DMA_Init+0x244>
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	4a12      	ldr	r2, [pc, #72]	@ (8002c8c <DMA_Init+0x280>)
 8002c42:	4293      	cmp	r3, r2
 8002c44:	d004      	beq.n	8002c50 <DMA_Init+0x244>
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	4a11      	ldr	r2, [pc, #68]	@ (8002c90 <DMA_Init+0x284>)
 8002c4c:	4293      	cmp	r3, r2
 8002c4e:	d123      	bne.n	8002c98 <DMA_Init+0x28c>
 8002c50:	2301      	movs	r3, #1
 8002c52:	e022      	b.n	8002c9a <DMA_Init+0x28e>
 8002c54:	40020050 	.word	0x40020050
 8002c58:	400200d0 	.word	0x400200d0
 8002c5c:	40020150 	.word	0x40020150
 8002c60:	400201d0 	.word	0x400201d0
 8002c64:	40020250 	.word	0x40020250
 8002c68:	400202d0 	.word	0x400202d0
 8002c6c:	40020350 	.word	0x40020350
 8002c70:	400203d0 	.word	0x400203d0
 8002c74:	40021050 	.word	0x40021050
 8002c78:	400210d0 	.word	0x400210d0
 8002c7c:	40021150 	.word	0x40021150
 8002c80:	400211d0 	.word	0x400211d0
 8002c84:	40021250 	.word	0x40021250
 8002c88:	400212d0 	.word	0x400212d0
 8002c8c:	40021350 	.word	0x40021350
 8002c90:	400213d0 	.word	0x400213d0
 8002c94:	3cc02100 	.word	0x3cc02100
 8002c98:	2300      	movs	r3, #0
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d007      	beq.n	8002cae <DMA_Init+0x2a2>
  {
    /* Write DMA Channel Transfer Register 3 (CTR3) *******************************************************************/
    WRITE_REG(hdma->Instance->CTR3, 0U);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Write DMA Channel Block Register 2 (CBR2) **********************************************************************/
    WRITE_REG(hdma->Instance->CBR2, 0U);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	2200      	movs	r2, #0
 8002cac:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Write DMA Channel linked-list address register (CLLR) ************************************************************/
  WRITE_REG(hdma->Instance->CLLR, 0U);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8002cb6:	bf00      	nop
 8002cb8:	3714      	adds	r7, #20
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc0:	4770      	bx	lr
 8002cc2:	bf00      	nop

08002cc4 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8002cc4:	b480      	push	{r7}
 8002cc6:	b087      	sub	sp, #28
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
 8002ccc:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 8002cce:	2300      	movs	r3, #0
 8002cd0:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8002cd2:	e136      	b.n	8002f42 <HAL_GPIO_Init+0x27e>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	681a      	ldr	r2, [r3, #0]
 8002cd8:	2101      	movs	r1, #1
 8002cda:	693b      	ldr	r3, [r7, #16]
 8002cdc:	fa01 f303 	lsl.w	r3, r1, r3
 8002ce0:	4013      	ands	r3, r2
 8002ce2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	f000 8128 	beq.w	8002f3c <HAL_GPIO_Init+0x278>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	685b      	ldr	r3, [r3, #4]
 8002cf0:	2b02      	cmp	r3, #2
 8002cf2:	d003      	beq.n	8002cfc <HAL_GPIO_Init+0x38>
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	685b      	ldr	r3, [r3, #4]
 8002cf8:	2b12      	cmp	r3, #18
 8002cfa:	d125      	bne.n	8002d48 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8002cfc:	693b      	ldr	r3, [r7, #16]
 8002cfe:	08da      	lsrs	r2, r3, #3
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	3208      	adds	r2, #8
 8002d04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d08:	617b      	str	r3, [r7, #20]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8002d0a:	693b      	ldr	r3, [r7, #16]
 8002d0c:	f003 0307 	and.w	r3, r3, #7
 8002d10:	009b      	lsls	r3, r3, #2
 8002d12:	220f      	movs	r2, #15
 8002d14:	fa02 f303 	lsl.w	r3, r2, r3
 8002d18:	43db      	mvns	r3, r3
 8002d1a:	697a      	ldr	r2, [r7, #20]
 8002d1c:	4013      	ands	r3, r2
 8002d1e:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	691b      	ldr	r3, [r3, #16]
 8002d24:	f003 020f 	and.w	r2, r3, #15
 8002d28:	693b      	ldr	r3, [r7, #16]
 8002d2a:	f003 0307 	and.w	r3, r3, #7
 8002d2e:	009b      	lsls	r3, r3, #2
 8002d30:	fa02 f303 	lsl.w	r3, r2, r3
 8002d34:	697a      	ldr	r2, [r7, #20]
 8002d36:	4313      	orrs	r3, r2
 8002d38:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 8002d3a:	693b      	ldr	r3, [r7, #16]
 8002d3c:	08da      	lsrs	r2, r3, #3
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	3208      	adds	r2, #8
 8002d42:	6979      	ldr	r1, [r7, #20]
 8002d44:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 8002d4e:	693b      	ldr	r3, [r7, #16]
 8002d50:	005b      	lsls	r3, r3, #1
 8002d52:	2203      	movs	r2, #3
 8002d54:	fa02 f303 	lsl.w	r3, r2, r3
 8002d58:	43db      	mvns	r3, r3
 8002d5a:	697a      	ldr	r2, [r7, #20]
 8002d5c:	4013      	ands	r3, r2
 8002d5e:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	685b      	ldr	r3, [r3, #4]
 8002d64:	f003 0203 	and.w	r2, r3, #3
 8002d68:	693b      	ldr	r3, [r7, #16]
 8002d6a:	005b      	lsls	r3, r3, #1
 8002d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d70:	697a      	ldr	r2, [r7, #20]
 8002d72:	4313      	orrs	r3, r2
 8002d74:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	697a      	ldr	r2, [r7, #20]
 8002d7a:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	685b      	ldr	r3, [r3, #4]
 8002d80:	2b01      	cmp	r3, #1
 8002d82:	d00b      	beq.n	8002d9c <HAL_GPIO_Init+0xd8>
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	685b      	ldr	r3, [r3, #4]
 8002d88:	2b02      	cmp	r3, #2
 8002d8a:	d007      	beq.n	8002d9c <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002d90:	2b11      	cmp	r3, #17
 8002d92:	d003      	beq.n	8002d9c <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	685b      	ldr	r3, [r3, #4]
 8002d98:	2b12      	cmp	r3, #18
 8002d9a:	d130      	bne.n	8002dfe <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	689b      	ldr	r3, [r3, #8]
 8002da0:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8002da2:	693b      	ldr	r3, [r7, #16]
 8002da4:	005b      	lsls	r3, r3, #1
 8002da6:	2203      	movs	r2, #3
 8002da8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dac:	43db      	mvns	r3, r3
 8002dae:	697a      	ldr	r2, [r7, #20]
 8002db0:	4013      	ands	r3, r2
 8002db2:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	68da      	ldr	r2, [r3, #12]
 8002db8:	693b      	ldr	r3, [r7, #16]
 8002dba:	005b      	lsls	r3, r3, #1
 8002dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8002dc0:	697a      	ldr	r2, [r7, #20]
 8002dc2:	4313      	orrs	r3, r2
 8002dc4:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	697a      	ldr	r2, [r7, #20]
 8002dca:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	685b      	ldr	r3, [r3, #4]
 8002dd0:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002dd2:	2201      	movs	r2, #1
 8002dd4:	693b      	ldr	r3, [r7, #16]
 8002dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8002dda:	43db      	mvns	r3, r3
 8002ddc:	697a      	ldr	r2, [r7, #20]
 8002dde:	4013      	ands	r3, r2
 8002de0:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	685b      	ldr	r3, [r3, #4]
 8002de6:	091b      	lsrs	r3, r3, #4
 8002de8:	f003 0201 	and.w	r2, r3, #1
 8002dec:	693b      	ldr	r3, [r7, #16]
 8002dee:	fa02 f303 	lsl.w	r3, r2, r3
 8002df2:	697a      	ldr	r2, [r7, #20]
 8002df4:	4313      	orrs	r3, r2
 8002df6:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	697a      	ldr	r2, [r7, #20]
 8002dfc:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8002dfe:	683b      	ldr	r3, [r7, #0]
 8002e00:	685b      	ldr	r3, [r3, #4]
 8002e02:	2b03      	cmp	r3, #3
 8002e04:	d017      	beq.n	8002e36 <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	68db      	ldr	r3, [r3, #12]
 8002e0a:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 8002e0c:	693b      	ldr	r3, [r7, #16]
 8002e0e:	005b      	lsls	r3, r3, #1
 8002e10:	2203      	movs	r2, #3
 8002e12:	fa02 f303 	lsl.w	r3, r2, r3
 8002e16:	43db      	mvns	r3, r3
 8002e18:	697a      	ldr	r2, [r7, #20]
 8002e1a:	4013      	ands	r3, r2
 8002e1c:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 8002e1e:	683b      	ldr	r3, [r7, #0]
 8002e20:	689a      	ldr	r2, [r3, #8]
 8002e22:	693b      	ldr	r3, [r7, #16]
 8002e24:	005b      	lsls	r3, r3, #1
 8002e26:	fa02 f303 	lsl.w	r3, r2, r3
 8002e2a:	697a      	ldr	r2, [r7, #20]
 8002e2c:	4313      	orrs	r3, r2
 8002e2e:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	697a      	ldr	r2, [r7, #20]
 8002e34:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002e36:	683b      	ldr	r3, [r7, #0]
 8002e38:	685b      	ldr	r3, [r3, #4]
 8002e3a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d07c      	beq.n	8002f3c <HAL_GPIO_Init+0x278>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8002e42:	4a47      	ldr	r2, [pc, #284]	@ (8002f60 <HAL_GPIO_Init+0x29c>)
 8002e44:	693b      	ldr	r3, [r7, #16]
 8002e46:	089b      	lsrs	r3, r3, #2
 8002e48:	3318      	adds	r3, #24
 8002e4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e4e:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8002e50:	693b      	ldr	r3, [r7, #16]
 8002e52:	f003 0303 	and.w	r3, r3, #3
 8002e56:	00db      	lsls	r3, r3, #3
 8002e58:	220f      	movs	r2, #15
 8002e5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e5e:	43db      	mvns	r3, r3
 8002e60:	697a      	ldr	r2, [r7, #20]
 8002e62:	4013      	ands	r3, r2
 8002e64:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	0a9a      	lsrs	r2, r3, #10
 8002e6a:	4b3e      	ldr	r3, [pc, #248]	@ (8002f64 <HAL_GPIO_Init+0x2a0>)
 8002e6c:	4013      	ands	r3, r2
 8002e6e:	693a      	ldr	r2, [r7, #16]
 8002e70:	f002 0203 	and.w	r2, r2, #3
 8002e74:	00d2      	lsls	r2, r2, #3
 8002e76:	4093      	lsls	r3, r2
 8002e78:	697a      	ldr	r2, [r7, #20]
 8002e7a:	4313      	orrs	r3, r2
 8002e7c:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 8002e7e:	4938      	ldr	r1, [pc, #224]	@ (8002f60 <HAL_GPIO_Init+0x29c>)
 8002e80:	693b      	ldr	r3, [r7, #16]
 8002e82:	089b      	lsrs	r3, r3, #2
 8002e84:	3318      	adds	r3, #24
 8002e86:	697a      	ldr	r2, [r7, #20]
 8002e88:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8002e8c:	4b34      	ldr	r3, [pc, #208]	@ (8002f60 <HAL_GPIO_Init+0x29c>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	43db      	mvns	r3, r3
 8002e96:	697a      	ldr	r2, [r7, #20]
 8002e98:	4013      	ands	r3, r2
 8002e9a:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002e9c:	683b      	ldr	r3, [r7, #0]
 8002e9e:	685b      	ldr	r3, [r3, #4]
 8002ea0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d003      	beq.n	8002eb0 <HAL_GPIO_Init+0x1ec>
        {
          tmp |= iocurrent;
 8002ea8:	697a      	ldr	r2, [r7, #20]
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	4313      	orrs	r3, r2
 8002eae:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 8002eb0:	4a2b      	ldr	r2, [pc, #172]	@ (8002f60 <HAL_GPIO_Init+0x29c>)
 8002eb2:	697b      	ldr	r3, [r7, #20]
 8002eb4:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 8002eb6:	4b2a      	ldr	r3, [pc, #168]	@ (8002f60 <HAL_GPIO_Init+0x29c>)
 8002eb8:	685b      	ldr	r3, [r3, #4]
 8002eba:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	43db      	mvns	r3, r3
 8002ec0:	697a      	ldr	r2, [r7, #20]
 8002ec2:	4013      	ands	r3, r2
 8002ec4:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002ec6:	683b      	ldr	r3, [r7, #0]
 8002ec8:	685b      	ldr	r3, [r3, #4]
 8002eca:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d003      	beq.n	8002eda <HAL_GPIO_Init+0x216>
        {
          tmp |= iocurrent;
 8002ed2:	697a      	ldr	r2, [r7, #20]
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	4313      	orrs	r3, r2
 8002ed8:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 8002eda:	4a21      	ldr	r2, [pc, #132]	@ (8002f60 <HAL_GPIO_Init+0x29c>)
 8002edc:	697b      	ldr	r3, [r7, #20]
 8002ede:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8002ee0:	4b1f      	ldr	r3, [pc, #124]	@ (8002f60 <HAL_GPIO_Init+0x29c>)
 8002ee2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002ee6:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	43db      	mvns	r3, r3
 8002eec:	697a      	ldr	r2, [r7, #20]
 8002eee:	4013      	ands	r3, r2
 8002ef0:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002ef2:	683b      	ldr	r3, [r7, #0]
 8002ef4:	685b      	ldr	r3, [r3, #4]
 8002ef6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d003      	beq.n	8002f06 <HAL_GPIO_Init+0x242>
        {
          tmp |= iocurrent;
 8002efe:	697a      	ldr	r2, [r7, #20]
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	4313      	orrs	r3, r2
 8002f04:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 8002f06:	4a16      	ldr	r2, [pc, #88]	@ (8002f60 <HAL_GPIO_Init+0x29c>)
 8002f08:	697b      	ldr	r3, [r7, #20]
 8002f0a:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 8002f0e:	4b14      	ldr	r3, [pc, #80]	@ (8002f60 <HAL_GPIO_Init+0x29c>)
 8002f10:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002f14:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	43db      	mvns	r3, r3
 8002f1a:	697a      	ldr	r2, [r7, #20]
 8002f1c:	4013      	ands	r3, r2
 8002f1e:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	685b      	ldr	r3, [r3, #4]
 8002f24:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d003      	beq.n	8002f34 <HAL_GPIO_Init+0x270>
        {
          tmp |= iocurrent;
 8002f2c:	697a      	ldr	r2, [r7, #20]
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	4313      	orrs	r3, r2
 8002f32:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 8002f34:	4a0a      	ldr	r2, [pc, #40]	@ (8002f60 <HAL_GPIO_Init+0x29c>)
 8002f36:	697b      	ldr	r3, [r7, #20]
 8002f38:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }

    position++;
 8002f3c:	693b      	ldr	r3, [r7, #16]
 8002f3e:	3301      	adds	r3, #1
 8002f40:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8002f42:	683b      	ldr	r3, [r7, #0]
 8002f44:	681a      	ldr	r2, [r3, #0]
 8002f46:	693b      	ldr	r3, [r7, #16]
 8002f48:	fa22 f303 	lsr.w	r3, r2, r3
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	f47f aec1 	bne.w	8002cd4 <HAL_GPIO_Init+0x10>
  }
}
 8002f52:	bf00      	nop
 8002f54:	bf00      	nop
 8002f56:	371c      	adds	r7, #28
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5e:	4770      	bx	lr
 8002f60:	44022000 	.word	0x44022000
 8002f64:	002f7f7f 	.word	0x002f7f7f

08002f68 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pOscInitStruct)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b088      	sub	sp, #32
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
  uint32_t temp_pllckselr;
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pOscInitStruct == NULL)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d102      	bne.n	8002f7c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002f76:	2301      	movs	r3, #1
 8002f78:	f000 bc28 	b.w	80037cc <HAL_RCC_OscConfig+0x864>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pOscInitStruct->OscillatorType));
  temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002f7c:	4b94      	ldr	r3, [pc, #592]	@ (80031d0 <HAL_RCC_OscConfig+0x268>)
 8002f7e:	69db      	ldr	r3, [r3, #28]
 8002f80:	f003 0318 	and.w	r3, r3, #24
 8002f84:	61fb      	str	r3, [r7, #28]
  temp_pllckselr = __HAL_RCC_GET_PLL1_OSCSOURCE();
 8002f86:	4b92      	ldr	r3, [pc, #584]	@ (80031d0 <HAL_RCC_OscConfig+0x268>)
 8002f88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f8a:	f003 0303 	and.w	r3, r3, #3
 8002f8e:	61bb      	str	r3, [r7, #24]

  /*----------------------------- CSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f003 0310 	and.w	r3, r3, #16
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d05b      	beq.n	8003054 <HAL_RCC_OscConfig+0xec>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(pOscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(pOscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_CSI) ||
 8002f9c:	69fb      	ldr	r3, [r7, #28]
 8002f9e:	2b08      	cmp	r3, #8
 8002fa0:	d005      	beq.n	8002fae <HAL_RCC_OscConfig+0x46>
 8002fa2:	69fb      	ldr	r3, [r7, #28]
 8002fa4:	2b18      	cmp	r3, #24
 8002fa6:	d114      	bne.n	8002fd2 <HAL_RCC_OscConfig+0x6a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_CSI)))
 8002fa8:	69bb      	ldr	r3, [r7, #24]
 8002faa:	2b02      	cmp	r3, #2
 8002fac:	d111      	bne.n	8002fd2 <HAL_RCC_OscConfig+0x6a>
    {
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	69db      	ldr	r3, [r3, #28]
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d102      	bne.n	8002fbc <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8002fb6:	2301      	movs	r3, #1
 8002fb8:	f000 bc08 	b.w	80037cc <HAL_RCC_OscConfig+0x864>

      /* Otherwise, just the calibration and CSI is allowed */
      else
      {
        /* Adjusts the Internal Low-power oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 8002fbc:	4b84      	ldr	r3, [pc, #528]	@ (80031d0 <HAL_RCC_OscConfig+0x268>)
 8002fbe:	699b      	ldr	r3, [r3, #24]
 8002fc0:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	6a1b      	ldr	r3, [r3, #32]
 8002fc8:	041b      	lsls	r3, r3, #16
 8002fca:	4981      	ldr	r1, [pc, #516]	@ (80031d0 <HAL_RCC_OscConfig+0x268>)
 8002fcc:	4313      	orrs	r3, r2
 8002fce:	618b      	str	r3, [r1, #24]
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 8002fd0:	e040      	b.n	8003054 <HAL_RCC_OscConfig+0xec>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((pOscInitStruct->CSIState) != RCC_CSI_OFF)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	69db      	ldr	r3, [r3, #28]
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d023      	beq.n	8003022 <HAL_RCC_OscConfig+0xba>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002fda:	4b7d      	ldr	r3, [pc, #500]	@ (80031d0 <HAL_RCC_OscConfig+0x268>)
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	4a7c      	ldr	r2, [pc, #496]	@ (80031d0 <HAL_RCC_OscConfig+0x268>)
 8002fe0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002fe4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fe6:	f7ff f859 	bl	800209c <HAL_GetTick>
 8002fea:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8002fec:	e008      	b.n	8003000 <HAL_RCC_OscConfig+0x98>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 8002fee:	f7ff f855 	bl	800209c <HAL_GetTick>
 8002ff2:	4602      	mov	r2, r0
 8002ff4:	697b      	ldr	r3, [r7, #20]
 8002ff6:	1ad3      	subs	r3, r2, r3
 8002ff8:	2b02      	cmp	r3, #2
 8002ffa:	d901      	bls.n	8003000 <HAL_RCC_OscConfig+0x98>
          {
            return HAL_TIMEOUT;
 8002ffc:	2303      	movs	r3, #3
 8002ffe:	e3e5      	b.n	80037cc <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8003000:	4b73      	ldr	r3, [pc, #460]	@ (80031d0 <HAL_RCC_OscConfig+0x268>)
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003008:	2b00      	cmp	r3, #0
 800300a:	d0f0      	beq.n	8002fee <HAL_RCC_OscConfig+0x86>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 800300c:	4b70      	ldr	r3, [pc, #448]	@ (80031d0 <HAL_RCC_OscConfig+0x268>)
 800300e:	699b      	ldr	r3, [r3, #24]
 8003010:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	6a1b      	ldr	r3, [r3, #32]
 8003018:	041b      	lsls	r3, r3, #16
 800301a:	496d      	ldr	r1, [pc, #436]	@ (80031d0 <HAL_RCC_OscConfig+0x268>)
 800301c:	4313      	orrs	r3, r2
 800301e:	618b      	str	r3, [r1, #24]
 8003020:	e018      	b.n	8003054 <HAL_RCC_OscConfig+0xec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8003022:	4b6b      	ldr	r3, [pc, #428]	@ (80031d0 <HAL_RCC_OscConfig+0x268>)
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	4a6a      	ldr	r2, [pc, #424]	@ (80031d0 <HAL_RCC_OscConfig+0x268>)
 8003028:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800302c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800302e:	f7ff f835 	bl	800209c <HAL_GetTick>
 8003032:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8003034:	e008      	b.n	8003048 <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 8003036:	f7ff f831 	bl	800209c <HAL_GetTick>
 800303a:	4602      	mov	r2, r0
 800303c:	697b      	ldr	r3, [r7, #20]
 800303e:	1ad3      	subs	r3, r2, r3
 8003040:	2b02      	cmp	r3, #2
 8003042:	d901      	bls.n	8003048 <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 8003044:	2303      	movs	r3, #3
 8003046:	e3c1      	b.n	80037cc <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8003048:	4b61      	ldr	r3, [pc, #388]	@ (80031d0 <HAL_RCC_OscConfig+0x268>)
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003050:	2b00      	cmp	r3, #0
 8003052:	d1f0      	bne.n	8003036 <HAL_RCC_OscConfig+0xce>
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f003 0301 	and.w	r3, r3, #1
 800305c:	2b00      	cmp	r3, #0
 800305e:	f000 80a0 	beq.w	80031a2 <HAL_RCC_OscConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pOscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8003062:	69fb      	ldr	r3, [r7, #28]
 8003064:	2b10      	cmp	r3, #16
 8003066:	d005      	beq.n	8003074 <HAL_RCC_OscConfig+0x10c>
 8003068:	69fb      	ldr	r3, [r7, #28]
 800306a:	2b18      	cmp	r3, #24
 800306c:	d109      	bne.n	8003082 <HAL_RCC_OscConfig+0x11a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSE)))
 800306e:	69bb      	ldr	r3, [r7, #24]
 8003070:	2b03      	cmp	r3, #3
 8003072:	d106      	bne.n	8003082 <HAL_RCC_OscConfig+0x11a>
    {
      if (pOscInitStruct->HSEState == RCC_HSE_OFF)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	685b      	ldr	r3, [r3, #4]
 8003078:	2b00      	cmp	r3, #0
 800307a:	f040 8092 	bne.w	80031a2 <HAL_RCC_OscConfig+0x23a>
      {
        return HAL_ERROR;
 800307e:	2301      	movs	r3, #1
 8003080:	e3a4      	b.n	80037cc <HAL_RCC_OscConfig+0x864>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pOscInitStruct->HSEState);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	685b      	ldr	r3, [r3, #4]
 8003086:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800308a:	d106      	bne.n	800309a <HAL_RCC_OscConfig+0x132>
 800308c:	4b50      	ldr	r3, [pc, #320]	@ (80031d0 <HAL_RCC_OscConfig+0x268>)
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	4a4f      	ldr	r2, [pc, #316]	@ (80031d0 <HAL_RCC_OscConfig+0x268>)
 8003092:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003096:	6013      	str	r3, [r2, #0]
 8003098:	e058      	b.n	800314c <HAL_RCC_OscConfig+0x1e4>
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	685b      	ldr	r3, [r3, #4]
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d112      	bne.n	80030c8 <HAL_RCC_OscConfig+0x160>
 80030a2:	4b4b      	ldr	r3, [pc, #300]	@ (80031d0 <HAL_RCC_OscConfig+0x268>)
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	4a4a      	ldr	r2, [pc, #296]	@ (80031d0 <HAL_RCC_OscConfig+0x268>)
 80030a8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80030ac:	6013      	str	r3, [r2, #0]
 80030ae:	4b48      	ldr	r3, [pc, #288]	@ (80031d0 <HAL_RCC_OscConfig+0x268>)
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	4a47      	ldr	r2, [pc, #284]	@ (80031d0 <HAL_RCC_OscConfig+0x268>)
 80030b4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80030b8:	6013      	str	r3, [r2, #0]
 80030ba:	4b45      	ldr	r3, [pc, #276]	@ (80031d0 <HAL_RCC_OscConfig+0x268>)
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	4a44      	ldr	r2, [pc, #272]	@ (80031d0 <HAL_RCC_OscConfig+0x268>)
 80030c0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80030c4:	6013      	str	r3, [r2, #0]
 80030c6:	e041      	b.n	800314c <HAL_RCC_OscConfig+0x1e4>
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	685b      	ldr	r3, [r3, #4]
 80030cc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80030d0:	d112      	bne.n	80030f8 <HAL_RCC_OscConfig+0x190>
 80030d2:	4b3f      	ldr	r3, [pc, #252]	@ (80031d0 <HAL_RCC_OscConfig+0x268>)
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	4a3e      	ldr	r2, [pc, #248]	@ (80031d0 <HAL_RCC_OscConfig+0x268>)
 80030d8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80030dc:	6013      	str	r3, [r2, #0]
 80030de:	4b3c      	ldr	r3, [pc, #240]	@ (80031d0 <HAL_RCC_OscConfig+0x268>)
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	4a3b      	ldr	r2, [pc, #236]	@ (80031d0 <HAL_RCC_OscConfig+0x268>)
 80030e4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80030e8:	6013      	str	r3, [r2, #0]
 80030ea:	4b39      	ldr	r3, [pc, #228]	@ (80031d0 <HAL_RCC_OscConfig+0x268>)
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	4a38      	ldr	r2, [pc, #224]	@ (80031d0 <HAL_RCC_OscConfig+0x268>)
 80030f0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80030f4:	6013      	str	r3, [r2, #0]
 80030f6:	e029      	b.n	800314c <HAL_RCC_OscConfig+0x1e4>
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	685b      	ldr	r3, [r3, #4]
 80030fc:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 8003100:	d112      	bne.n	8003128 <HAL_RCC_OscConfig+0x1c0>
 8003102:	4b33      	ldr	r3, [pc, #204]	@ (80031d0 <HAL_RCC_OscConfig+0x268>)
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	4a32      	ldr	r2, [pc, #200]	@ (80031d0 <HAL_RCC_OscConfig+0x268>)
 8003108:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800310c:	6013      	str	r3, [r2, #0]
 800310e:	4b30      	ldr	r3, [pc, #192]	@ (80031d0 <HAL_RCC_OscConfig+0x268>)
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	4a2f      	ldr	r2, [pc, #188]	@ (80031d0 <HAL_RCC_OscConfig+0x268>)
 8003114:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003118:	6013      	str	r3, [r2, #0]
 800311a:	4b2d      	ldr	r3, [pc, #180]	@ (80031d0 <HAL_RCC_OscConfig+0x268>)
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	4a2c      	ldr	r2, [pc, #176]	@ (80031d0 <HAL_RCC_OscConfig+0x268>)
 8003120:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003124:	6013      	str	r3, [r2, #0]
 8003126:	e011      	b.n	800314c <HAL_RCC_OscConfig+0x1e4>
 8003128:	4b29      	ldr	r3, [pc, #164]	@ (80031d0 <HAL_RCC_OscConfig+0x268>)
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	4a28      	ldr	r2, [pc, #160]	@ (80031d0 <HAL_RCC_OscConfig+0x268>)
 800312e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003132:	6013      	str	r3, [r2, #0]
 8003134:	4b26      	ldr	r3, [pc, #152]	@ (80031d0 <HAL_RCC_OscConfig+0x268>)
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	4a25      	ldr	r2, [pc, #148]	@ (80031d0 <HAL_RCC_OscConfig+0x268>)
 800313a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800313e:	6013      	str	r3, [r2, #0]
 8003140:	4b23      	ldr	r3, [pc, #140]	@ (80031d0 <HAL_RCC_OscConfig+0x268>)
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	4a22      	ldr	r2, [pc, #136]	@ (80031d0 <HAL_RCC_OscConfig+0x268>)
 8003146:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800314a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pOscInitStruct->HSEState != RCC_HSE_OFF)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	685b      	ldr	r3, [r3, #4]
 8003150:	2b00      	cmp	r3, #0
 8003152:	d013      	beq.n	800317c <HAL_RCC_OscConfig+0x214>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003154:	f7fe ffa2 	bl	800209c <HAL_GetTick>
 8003158:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800315a:	e008      	b.n	800316e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 800315c:	f7fe ff9e 	bl	800209c <HAL_GetTick>
 8003160:	4602      	mov	r2, r0
 8003162:	697b      	ldr	r3, [r7, #20]
 8003164:	1ad3      	subs	r3, r2, r3
 8003166:	2b64      	cmp	r3, #100	@ 0x64
 8003168:	d901      	bls.n	800316e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800316a:	2303      	movs	r3, #3
 800316c:	e32e      	b.n	80037cc <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800316e:	4b18      	ldr	r3, [pc, #96]	@ (80031d0 <HAL_RCC_OscConfig+0x268>)
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003176:	2b00      	cmp	r3, #0
 8003178:	d0f0      	beq.n	800315c <HAL_RCC_OscConfig+0x1f4>
 800317a:	e012      	b.n	80031a2 <HAL_RCC_OscConfig+0x23a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800317c:	f7fe ff8e 	bl	800209c <HAL_GetTick>
 8003180:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003182:	e008      	b.n	8003196 <HAL_RCC_OscConfig+0x22e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8003184:	f7fe ff8a 	bl	800209c <HAL_GetTick>
 8003188:	4602      	mov	r2, r0
 800318a:	697b      	ldr	r3, [r7, #20]
 800318c:	1ad3      	subs	r3, r2, r3
 800318e:	2b64      	cmp	r3, #100	@ 0x64
 8003190:	d901      	bls.n	8003196 <HAL_RCC_OscConfig+0x22e>
          {
            return HAL_TIMEOUT;
 8003192:	2303      	movs	r3, #3
 8003194:	e31a      	b.n	80037cc <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003196:	4b0e      	ldr	r3, [pc, #56]	@ (80031d0 <HAL_RCC_OscConfig+0x268>)
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d1f0      	bne.n	8003184 <HAL_RCC_OscConfig+0x21c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f003 0302 	and.w	r3, r3, #2
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	f000 809a 	beq.w	80032e4 <HAL_RCC_OscConfig+0x37c>
    assert_param(IS_RCC_HSI(pOscInitStruct->HSIState));
    assert_param(IS_RCC_HSIDIV(pOscInitStruct->HSIDiv));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pOscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80031b0:	69fb      	ldr	r3, [r7, #28]
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d005      	beq.n	80031c2 <HAL_RCC_OscConfig+0x25a>
 80031b6:	69fb      	ldr	r3, [r7, #28]
 80031b8:	2b18      	cmp	r3, #24
 80031ba:	d149      	bne.n	8003250 <HAL_RCC_OscConfig+0x2e8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSI)))
 80031bc:	69bb      	ldr	r3, [r7, #24]
 80031be:	2b01      	cmp	r3, #1
 80031c0:	d146      	bne.n	8003250 <HAL_RCC_OscConfig+0x2e8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	68db      	ldr	r3, [r3, #12]
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d104      	bne.n	80031d4 <HAL_RCC_OscConfig+0x26c>
      {
        return HAL_ERROR;
 80031ca:	2301      	movs	r3, #1
 80031cc:	e2fe      	b.n	80037cc <HAL_RCC_OscConfig+0x864>
 80031ce:	bf00      	nop
 80031d0:	44020c00 	.word	0x44020c00
      /* Otherwise, HSI calibration and division may be allowed */
      else
      {

        /* HSI division is allowed if HSI is used as system clock */
        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80031d4:	69fb      	ldr	r3, [r7, #28]
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d11c      	bne.n	8003214 <HAL_RCC_OscConfig+0x2ac>
        {
          if (__HAL_RCC_GET_HSI_DIVIDER() != (pOscInitStruct->HSIDiv))
 80031da:	4b9a      	ldr	r3, [pc, #616]	@ (8003444 <HAL_RCC_OscConfig+0x4dc>)
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f003 0218 	and.w	r2, r3, #24
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	691b      	ldr	r3, [r3, #16]
 80031e6:	429a      	cmp	r2, r3
 80031e8:	d014      	beq.n	8003214 <HAL_RCC_OscConfig+0x2ac>
          {
            /* Adjust the HSI division factor */
            __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 80031ea:	4b96      	ldr	r3, [pc, #600]	@ (8003444 <HAL_RCC_OscConfig+0x4dc>)
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f023 0218 	bic.w	r2, r3, #24
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	691b      	ldr	r3, [r3, #16]
 80031f6:	4993      	ldr	r1, [pc, #588]	@ (8003444 <HAL_RCC_OscConfig+0x4dc>)
 80031f8:	4313      	orrs	r3, r2
 80031fa:	600b      	str	r3, [r1, #0]

            /* Update the SystemCoreClock global variable with new HSI value  */
            (void) HAL_RCC_GetHCLKFreq();
 80031fc:	f000 fdd0 	bl	8003da0 <HAL_RCC_GetHCLKFreq>

            /* Configure the source of time base considering new system clocks settings*/
            if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003200:	4b91      	ldr	r3, [pc, #580]	@ (8003448 <HAL_RCC_OscConfig+0x4e0>)
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	4618      	mov	r0, r3
 8003206:	f7fe febf 	bl	8001f88 <HAL_InitTick>
 800320a:	4603      	mov	r3, r0
 800320c:	2b00      	cmp	r3, #0
 800320e:	d001      	beq.n	8003214 <HAL_RCC_OscConfig+0x2ac>
            {
              return HAL_ERROR;
 8003210:	2301      	movs	r3, #1
 8003212:	e2db      	b.n	80037cc <HAL_RCC_OscConfig+0x864>
            }
          }
        }

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003214:	f7fe ff42 	bl	800209c <HAL_GetTick>
 8003218:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800321a:	e008      	b.n	800322e <HAL_RCC_OscConfig+0x2c6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 800321c:	f7fe ff3e 	bl	800209c <HAL_GetTick>
 8003220:	4602      	mov	r2, r0
 8003222:	697b      	ldr	r3, [r7, #20]
 8003224:	1ad3      	subs	r3, r2, r3
 8003226:	2b02      	cmp	r3, #2
 8003228:	d901      	bls.n	800322e <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 800322a:	2303      	movs	r3, #3
 800322c:	e2ce      	b.n	80037cc <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800322e:	4b85      	ldr	r3, [pc, #532]	@ (8003444 <HAL_RCC_OscConfig+0x4dc>)
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f003 0302 	and.w	r3, r3, #2
 8003236:	2b00      	cmp	r3, #0
 8003238:	d0f0      	beq.n	800321c <HAL_RCC_OscConfig+0x2b4>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 800323a:	4b82      	ldr	r3, [pc, #520]	@ (8003444 <HAL_RCC_OscConfig+0x4dc>)
 800323c:	691b      	ldr	r3, [r3, #16]
 800323e:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	695b      	ldr	r3, [r3, #20]
 8003246:	041b      	lsls	r3, r3, #16
 8003248:	497e      	ldr	r1, [pc, #504]	@ (8003444 <HAL_RCC_OscConfig+0x4dc>)
 800324a:	4313      	orrs	r3, r2
 800324c:	610b      	str	r3, [r1, #16]
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 800324e:	e049      	b.n	80032e4 <HAL_RCC_OscConfig+0x37c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pOscInitStruct->HSIState != RCC_HSI_OFF)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	68db      	ldr	r3, [r3, #12]
 8003254:	2b00      	cmp	r3, #0
 8003256:	d02c      	beq.n	80032b2 <HAL_RCC_OscConfig+0x34a>
      {
        /* Adjust the HSI division factor */
        __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 8003258:	4b7a      	ldr	r3, [pc, #488]	@ (8003444 <HAL_RCC_OscConfig+0x4dc>)
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f023 0218 	bic.w	r2, r3, #24
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	691b      	ldr	r3, [r3, #16]
 8003264:	4977      	ldr	r1, [pc, #476]	@ (8003444 <HAL_RCC_OscConfig+0x4dc>)
 8003266:	4313      	orrs	r3, r2
 8003268:	600b      	str	r3, [r1, #0]

        /* Enable the HSI oscillator */
        __HAL_RCC_HSI_ENABLE();
 800326a:	4b76      	ldr	r3, [pc, #472]	@ (8003444 <HAL_RCC_OscConfig+0x4dc>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	4a75      	ldr	r2, [pc, #468]	@ (8003444 <HAL_RCC_OscConfig+0x4dc>)
 8003270:	f043 0301 	orr.w	r3, r3, #1
 8003274:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003276:	f7fe ff11 	bl	800209c <HAL_GetTick>
 800327a:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800327c:	e008      	b.n	8003290 <HAL_RCC_OscConfig+0x328>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 800327e:	f7fe ff0d 	bl	800209c <HAL_GetTick>
 8003282:	4602      	mov	r2, r0
 8003284:	697b      	ldr	r3, [r7, #20]
 8003286:	1ad3      	subs	r3, r2, r3
 8003288:	2b02      	cmp	r3, #2
 800328a:	d901      	bls.n	8003290 <HAL_RCC_OscConfig+0x328>
          {
            return HAL_TIMEOUT;
 800328c:	2303      	movs	r3, #3
 800328e:	e29d      	b.n	80037cc <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003290:	4b6c      	ldr	r3, [pc, #432]	@ (8003444 <HAL_RCC_OscConfig+0x4dc>)
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f003 0302 	and.w	r3, r3, #2
 8003298:	2b00      	cmp	r3, #0
 800329a:	d0f0      	beq.n	800327e <HAL_RCC_OscConfig+0x316>
          }
        }

        /* Adjust the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 800329c:	4b69      	ldr	r3, [pc, #420]	@ (8003444 <HAL_RCC_OscConfig+0x4dc>)
 800329e:	691b      	ldr	r3, [r3, #16]
 80032a0:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	695b      	ldr	r3, [r3, #20]
 80032a8:	041b      	lsls	r3, r3, #16
 80032aa:	4966      	ldr	r1, [pc, #408]	@ (8003444 <HAL_RCC_OscConfig+0x4dc>)
 80032ac:	4313      	orrs	r3, r2
 80032ae:	610b      	str	r3, [r1, #16]
 80032b0:	e018      	b.n	80032e4 <HAL_RCC_OscConfig+0x37c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80032b2:	4b64      	ldr	r3, [pc, #400]	@ (8003444 <HAL_RCC_OscConfig+0x4dc>)
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	4a63      	ldr	r2, [pc, #396]	@ (8003444 <HAL_RCC_OscConfig+0x4dc>)
 80032b8:	f023 0301 	bic.w	r3, r3, #1
 80032bc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032be:	f7fe feed 	bl	800209c <HAL_GetTick>
 80032c2:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80032c4:	e008      	b.n	80032d8 <HAL_RCC_OscConfig+0x370>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 80032c6:	f7fe fee9 	bl	800209c <HAL_GetTick>
 80032ca:	4602      	mov	r2, r0
 80032cc:	697b      	ldr	r3, [r7, #20]
 80032ce:	1ad3      	subs	r3, r2, r3
 80032d0:	2b02      	cmp	r3, #2
 80032d2:	d901      	bls.n	80032d8 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 80032d4:	2303      	movs	r3, #3
 80032d6:	e279      	b.n	80037cc <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80032d8:	4b5a      	ldr	r3, [pc, #360]	@ (8003444 <HAL_RCC_OscConfig+0x4dc>)
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f003 0302 	and.w	r3, r3, #2
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d1f0      	bne.n	80032c6 <HAL_RCC_OscConfig+0x35e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f003 0308 	and.w	r3, r3, #8
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d03c      	beq.n	800336a <HAL_RCC_OscConfig+0x402>
    assert_param(IS_RCC_LSI(pOscInitStruct->LSIState));

    /* Update LSI configuration in Backup Domain control register    */

    /* Check the LSI State */
    if (pOscInitStruct->LSIState != RCC_LSI_OFF)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	699b      	ldr	r3, [r3, #24]
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d01c      	beq.n	8003332 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80032f8:	4b52      	ldr	r3, [pc, #328]	@ (8003444 <HAL_RCC_OscConfig+0x4dc>)
 80032fa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80032fe:	4a51      	ldr	r2, [pc, #324]	@ (8003444 <HAL_RCC_OscConfig+0x4dc>)
 8003300:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003304:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003308:	f7fe fec8 	bl	800209c <HAL_GetTick>
 800330c:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 800330e:	e008      	b.n	8003322 <HAL_RCC_OscConfig+0x3ba>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8003310:	f7fe fec4 	bl	800209c <HAL_GetTick>
 8003314:	4602      	mov	r2, r0
 8003316:	697b      	ldr	r3, [r7, #20]
 8003318:	1ad3      	subs	r3, r2, r3
 800331a:	2b02      	cmp	r3, #2
 800331c:	d901      	bls.n	8003322 <HAL_RCC_OscConfig+0x3ba>
        {
          return HAL_TIMEOUT;
 800331e:	2303      	movs	r3, #3
 8003320:	e254      	b.n	80037cc <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8003322:	4b48      	ldr	r3, [pc, #288]	@ (8003444 <HAL_RCC_OscConfig+0x4dc>)
 8003324:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003328:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800332c:	2b00      	cmp	r3, #0
 800332e:	d0ef      	beq.n	8003310 <HAL_RCC_OscConfig+0x3a8>
 8003330:	e01b      	b.n	800336a <HAL_RCC_OscConfig+0x402>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003332:	4b44      	ldr	r3, [pc, #272]	@ (8003444 <HAL_RCC_OscConfig+0x4dc>)
 8003334:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003338:	4a42      	ldr	r2, [pc, #264]	@ (8003444 <HAL_RCC_OscConfig+0x4dc>)
 800333a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800333e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003342:	f7fe feab 	bl	800209c <HAL_GetTick>
 8003346:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8003348:	e008      	b.n	800335c <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 800334a:	f7fe fea7 	bl	800209c <HAL_GetTick>
 800334e:	4602      	mov	r2, r0
 8003350:	697b      	ldr	r3, [r7, #20]
 8003352:	1ad3      	subs	r3, r2, r3
 8003354:	2b02      	cmp	r3, #2
 8003356:	d901      	bls.n	800335c <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8003358:	2303      	movs	r3, #3
 800335a:	e237      	b.n	80037cc <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800335c:	4b39      	ldr	r3, [pc, #228]	@ (8003444 <HAL_RCC_OscConfig+0x4dc>)
 800335e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003362:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003366:	2b00      	cmp	r3, #0
 8003368:	d1ef      	bne.n	800334a <HAL_RCC_OscConfig+0x3e2>
      }
    }

  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f003 0304 	and.w	r3, r3, #4
 8003372:	2b00      	cmp	r3, #0
 8003374:	f000 80d2 	beq.w	800351c <HAL_RCC_OscConfig+0x5b4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pOscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain */
    if (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8003378:	4b34      	ldr	r3, [pc, #208]	@ (800344c <HAL_RCC_OscConfig+0x4e4>)
 800337a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800337c:	f003 0301 	and.w	r3, r3, #1
 8003380:	2b00      	cmp	r3, #0
 8003382:	d118      	bne.n	80033b6 <HAL_RCC_OscConfig+0x44e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 8003384:	4b31      	ldr	r3, [pc, #196]	@ (800344c <HAL_RCC_OscConfig+0x4e4>)
 8003386:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003388:	4a30      	ldr	r2, [pc, #192]	@ (800344c <HAL_RCC_OscConfig+0x4e4>)
 800338a:	f043 0301 	orr.w	r3, r3, #1
 800338e:	6253      	str	r3, [r2, #36]	@ 0x24

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003390:	f7fe fe84 	bl	800209c <HAL_GetTick>
 8003394:	6178      	str	r0, [r7, #20]

      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8003396:	e008      	b.n	80033aa <HAL_RCC_OscConfig+0x442>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003398:	f7fe fe80 	bl	800209c <HAL_GetTick>
 800339c:	4602      	mov	r2, r0
 800339e:	697b      	ldr	r3, [r7, #20]
 80033a0:	1ad3      	subs	r3, r2, r3
 80033a2:	2b02      	cmp	r3, #2
 80033a4:	d901      	bls.n	80033aa <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 80033a6:	2303      	movs	r3, #3
 80033a8:	e210      	b.n	80037cc <HAL_RCC_OscConfig+0x864>
      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 80033aa:	4b28      	ldr	r3, [pc, #160]	@ (800344c <HAL_RCC_OscConfig+0x4e4>)
 80033ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033ae:	f003 0301 	and.w	r3, r3, #1
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d0f0      	beq.n	8003398 <HAL_RCC_OscConfig+0x430>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(pOscInitStruct->LSEState);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	689b      	ldr	r3, [r3, #8]
 80033ba:	2b01      	cmp	r3, #1
 80033bc:	d108      	bne.n	80033d0 <HAL_RCC_OscConfig+0x468>
 80033be:	4b21      	ldr	r3, [pc, #132]	@ (8003444 <HAL_RCC_OscConfig+0x4dc>)
 80033c0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80033c4:	4a1f      	ldr	r2, [pc, #124]	@ (8003444 <HAL_RCC_OscConfig+0x4dc>)
 80033c6:	f043 0301 	orr.w	r3, r3, #1
 80033ca:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80033ce:	e074      	b.n	80034ba <HAL_RCC_OscConfig+0x552>
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	689b      	ldr	r3, [r3, #8]
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d118      	bne.n	800340a <HAL_RCC_OscConfig+0x4a2>
 80033d8:	4b1a      	ldr	r3, [pc, #104]	@ (8003444 <HAL_RCC_OscConfig+0x4dc>)
 80033da:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80033de:	4a19      	ldr	r2, [pc, #100]	@ (8003444 <HAL_RCC_OscConfig+0x4dc>)
 80033e0:	f023 0301 	bic.w	r3, r3, #1
 80033e4:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80033e8:	4b16      	ldr	r3, [pc, #88]	@ (8003444 <HAL_RCC_OscConfig+0x4dc>)
 80033ea:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80033ee:	4a15      	ldr	r2, [pc, #84]	@ (8003444 <HAL_RCC_OscConfig+0x4dc>)
 80033f0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80033f4:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80033f8:	4b12      	ldr	r3, [pc, #72]	@ (8003444 <HAL_RCC_OscConfig+0x4dc>)
 80033fa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80033fe:	4a11      	ldr	r2, [pc, #68]	@ (8003444 <HAL_RCC_OscConfig+0x4dc>)
 8003400:	f023 0304 	bic.w	r3, r3, #4
 8003404:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003408:	e057      	b.n	80034ba <HAL_RCC_OscConfig+0x552>
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	689b      	ldr	r3, [r3, #8]
 800340e:	2b05      	cmp	r3, #5
 8003410:	d11e      	bne.n	8003450 <HAL_RCC_OscConfig+0x4e8>
 8003412:	4b0c      	ldr	r3, [pc, #48]	@ (8003444 <HAL_RCC_OscConfig+0x4dc>)
 8003414:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003418:	4a0a      	ldr	r2, [pc, #40]	@ (8003444 <HAL_RCC_OscConfig+0x4dc>)
 800341a:	f043 0304 	orr.w	r3, r3, #4
 800341e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003422:	4b08      	ldr	r3, [pc, #32]	@ (8003444 <HAL_RCC_OscConfig+0x4dc>)
 8003424:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003428:	4a06      	ldr	r2, [pc, #24]	@ (8003444 <HAL_RCC_OscConfig+0x4dc>)
 800342a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800342e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003432:	4b04      	ldr	r3, [pc, #16]	@ (8003444 <HAL_RCC_OscConfig+0x4dc>)
 8003434:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003438:	4a02      	ldr	r2, [pc, #8]	@ (8003444 <HAL_RCC_OscConfig+0x4dc>)
 800343a:	f043 0301 	orr.w	r3, r3, #1
 800343e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003442:	e03a      	b.n	80034ba <HAL_RCC_OscConfig+0x552>
 8003444:	44020c00 	.word	0x44020c00
 8003448:	20000004 	.word	0x20000004
 800344c:	44020800 	.word	0x44020800
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	689b      	ldr	r3, [r3, #8]
 8003454:	2b85      	cmp	r3, #133	@ 0x85
 8003456:	d118      	bne.n	800348a <HAL_RCC_OscConfig+0x522>
 8003458:	4ba2      	ldr	r3, [pc, #648]	@ (80036e4 <HAL_RCC_OscConfig+0x77c>)
 800345a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800345e:	4aa1      	ldr	r2, [pc, #644]	@ (80036e4 <HAL_RCC_OscConfig+0x77c>)
 8003460:	f043 0304 	orr.w	r3, r3, #4
 8003464:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003468:	4b9e      	ldr	r3, [pc, #632]	@ (80036e4 <HAL_RCC_OscConfig+0x77c>)
 800346a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800346e:	4a9d      	ldr	r2, [pc, #628]	@ (80036e4 <HAL_RCC_OscConfig+0x77c>)
 8003470:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003474:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003478:	4b9a      	ldr	r3, [pc, #616]	@ (80036e4 <HAL_RCC_OscConfig+0x77c>)
 800347a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800347e:	4a99      	ldr	r2, [pc, #612]	@ (80036e4 <HAL_RCC_OscConfig+0x77c>)
 8003480:	f043 0301 	orr.w	r3, r3, #1
 8003484:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003488:	e017      	b.n	80034ba <HAL_RCC_OscConfig+0x552>
 800348a:	4b96      	ldr	r3, [pc, #600]	@ (80036e4 <HAL_RCC_OscConfig+0x77c>)
 800348c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003490:	4a94      	ldr	r2, [pc, #592]	@ (80036e4 <HAL_RCC_OscConfig+0x77c>)
 8003492:	f023 0301 	bic.w	r3, r3, #1
 8003496:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800349a:	4b92      	ldr	r3, [pc, #584]	@ (80036e4 <HAL_RCC_OscConfig+0x77c>)
 800349c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80034a0:	4a90      	ldr	r2, [pc, #576]	@ (80036e4 <HAL_RCC_OscConfig+0x77c>)
 80034a2:	f023 0304 	bic.w	r3, r3, #4
 80034a6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80034aa:	4b8e      	ldr	r3, [pc, #568]	@ (80036e4 <HAL_RCC_OscConfig+0x77c>)
 80034ac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80034b0:	4a8c      	ldr	r2, [pc, #560]	@ (80036e4 <HAL_RCC_OscConfig+0x77c>)
 80034b2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80034b6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

    /* Check the LSE State */
    if (pOscInitStruct->LSEState != RCC_LSE_OFF)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	689b      	ldr	r3, [r3, #8]
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d016      	beq.n	80034f0 <HAL_RCC_OscConfig+0x588>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034c2:	f7fe fdeb 	bl	800209c <HAL_GetTick>
 80034c6:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80034c8:	e00a      	b.n	80034e0 <HAL_RCC_OscConfig+0x578>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034ca:	f7fe fde7 	bl	800209c <HAL_GetTick>
 80034ce:	4602      	mov	r2, r0
 80034d0:	697b      	ldr	r3, [r7, #20]
 80034d2:	1ad3      	subs	r3, r2, r3
 80034d4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80034d8:	4293      	cmp	r3, r2
 80034da:	d901      	bls.n	80034e0 <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 80034dc:	2303      	movs	r3, #3
 80034de:	e175      	b.n	80037cc <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80034e0:	4b80      	ldr	r3, [pc, #512]	@ (80036e4 <HAL_RCC_OscConfig+0x77c>)
 80034e2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80034e6:	f003 0302 	and.w	r3, r3, #2
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d0ed      	beq.n	80034ca <HAL_RCC_OscConfig+0x562>
 80034ee:	e015      	b.n	800351c <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034f0:	f7fe fdd4 	bl	800209c <HAL_GetTick>
 80034f4:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80034f6:	e00a      	b.n	800350e <HAL_RCC_OscConfig+0x5a6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034f8:	f7fe fdd0 	bl	800209c <HAL_GetTick>
 80034fc:	4602      	mov	r2, r0
 80034fe:	697b      	ldr	r3, [r7, #20]
 8003500:	1ad3      	subs	r3, r2, r3
 8003502:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003506:	4293      	cmp	r3, r2
 8003508:	d901      	bls.n	800350e <HAL_RCC_OscConfig+0x5a6>
        {
          return HAL_TIMEOUT;
 800350a:	2303      	movs	r3, #3
 800350c:	e15e      	b.n	80037cc <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800350e:	4b75      	ldr	r3, [pc, #468]	@ (80036e4 <HAL_RCC_OscConfig+0x77c>)
 8003510:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003514:	f003 0302 	and.w	r3, r3, #2
 8003518:	2b00      	cmp	r3, #0
 800351a:	d1ed      	bne.n	80034f8 <HAL_RCC_OscConfig+0x590>
      }
    }

  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f003 0320 	and.w	r3, r3, #32
 8003524:	2b00      	cmp	r3, #0
 8003526:	d036      	beq.n	8003596 <HAL_RCC_OscConfig+0x62e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pOscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pOscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800352c:	2b00      	cmp	r3, #0
 800352e:	d019      	beq.n	8003564 <HAL_RCC_OscConfig+0x5fc>
    {
      /* Enable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003530:	4b6c      	ldr	r3, [pc, #432]	@ (80036e4 <HAL_RCC_OscConfig+0x77c>)
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	4a6b      	ldr	r2, [pc, #428]	@ (80036e4 <HAL_RCC_OscConfig+0x77c>)
 8003536:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800353a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800353c:	f7fe fdae 	bl	800209c <HAL_GetTick>
 8003540:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8003542:	e008      	b.n	8003556 <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 8003544:	f7fe fdaa 	bl	800209c <HAL_GetTick>
 8003548:	4602      	mov	r2, r0
 800354a:	697b      	ldr	r3, [r7, #20]
 800354c:	1ad3      	subs	r3, r2, r3
 800354e:	2b02      	cmp	r3, #2
 8003550:	d901      	bls.n	8003556 <HAL_RCC_OscConfig+0x5ee>
        {
          return HAL_TIMEOUT;
 8003552:	2303      	movs	r3, #3
 8003554:	e13a      	b.n	80037cc <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8003556:	4b63      	ldr	r3, [pc, #396]	@ (80036e4 <HAL_RCC_OscConfig+0x77c>)
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800355e:	2b00      	cmp	r3, #0
 8003560:	d0f0      	beq.n	8003544 <HAL_RCC_OscConfig+0x5dc>
 8003562:	e018      	b.n	8003596 <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003564:	4b5f      	ldr	r3, [pc, #380]	@ (80036e4 <HAL_RCC_OscConfig+0x77c>)
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	4a5e      	ldr	r2, [pc, #376]	@ (80036e4 <HAL_RCC_OscConfig+0x77c>)
 800356a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800356e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003570:	f7fe fd94 	bl	800209c <HAL_GetTick>
 8003574:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8003576:	e008      	b.n	800358a <HAL_RCC_OscConfig+0x622>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 8003578:	f7fe fd90 	bl	800209c <HAL_GetTick>
 800357c:	4602      	mov	r2, r0
 800357e:	697b      	ldr	r3, [r7, #20]
 8003580:	1ad3      	subs	r3, r2, r3
 8003582:	2b02      	cmp	r3, #2
 8003584:	d901      	bls.n	800358a <HAL_RCC_OscConfig+0x622>
        {
          return HAL_TIMEOUT;
 8003586:	2303      	movs	r3, #3
 8003588:	e120      	b.n	80037cc <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800358a:	4b56      	ldr	r3, [pc, #344]	@ (80036e4 <HAL_RCC_OscConfig+0x77c>)
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003592:	2b00      	cmp	r3, #0
 8003594:	d1f0      	bne.n	8003578 <HAL_RCC_OscConfig+0x610>

  /*-------------------------------- PLL1 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pOscInitStruct->PLL.PLLState));

  if ((pOscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800359a:	2b00      	cmp	r3, #0
 800359c:	f000 8115 	beq.w	80037ca <HAL_RCC_OscConfig+0x862>
  {
    /* Check if the PLL1 is used as system clock or not */
    if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80035a0:	69fb      	ldr	r3, [r7, #28]
 80035a2:	2b18      	cmp	r3, #24
 80035a4:	f000 80af 	beq.w	8003706 <HAL_RCC_OscConfig+0x79e>
    {
      if ((pOscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035ac:	2b02      	cmp	r3, #2
 80035ae:	f040 8086 	bne.w	80036be <HAL_RCC_OscConfig+0x756>
        assert_param(IS_RCC_PLL1_DIVP_VALUE(pOscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLL1_DIVQ_VALUE(pOscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLL1_DIVR_VALUE(pOscInitStruct->PLL.PLLR));

        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 80035b2:	4b4c      	ldr	r3, [pc, #304]	@ (80036e4 <HAL_RCC_OscConfig+0x77c>)
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	4a4b      	ldr	r2, [pc, #300]	@ (80036e4 <HAL_RCC_OscConfig+0x77c>)
 80035b8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80035bc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035be:	f7fe fd6d 	bl	800209c <HAL_GetTick>
 80035c2:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80035c4:	e008      	b.n	80035d8 <HAL_RCC_OscConfig+0x670>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 80035c6:	f7fe fd69 	bl	800209c <HAL_GetTick>
 80035ca:	4602      	mov	r2, r0
 80035cc:	697b      	ldr	r3, [r7, #20]
 80035ce:	1ad3      	subs	r3, r2, r3
 80035d0:	2b02      	cmp	r3, #2
 80035d2:	d901      	bls.n	80035d8 <HAL_RCC_OscConfig+0x670>
          {
            return HAL_TIMEOUT;
 80035d4:	2303      	movs	r3, #3
 80035d6:	e0f9      	b.n	80037cc <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80035d8:	4b42      	ldr	r3, [pc, #264]	@ (80036e4 <HAL_RCC_OscConfig+0x77c>)
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d1f0      	bne.n	80035c6 <HAL_RCC_OscConfig+0x65e>
          }
        }

        /* Configure the PLL1 clock source, multiplication and division factors. */
        __HAL_RCC_PLL1_CONFIG(pOscInitStruct->PLL.PLLSource,
 80035e4:	4b3f      	ldr	r3, [pc, #252]	@ (80036e4 <HAL_RCC_OscConfig+0x77c>)
 80035e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035e8:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80035ec:	f023 0303 	bic.w	r3, r3, #3
 80035f0:	687a      	ldr	r2, [r7, #4]
 80035f2:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80035f4:	687a      	ldr	r2, [r7, #4]
 80035f6:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80035f8:	0212      	lsls	r2, r2, #8
 80035fa:	430a      	orrs	r2, r1
 80035fc:	4939      	ldr	r1, [pc, #228]	@ (80036e4 <HAL_RCC_OscConfig+0x77c>)
 80035fe:	4313      	orrs	r3, r2
 8003600:	628b      	str	r3, [r1, #40]	@ 0x28
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003606:	3b01      	subs	r3, #1
 8003608:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003610:	3b01      	subs	r3, #1
 8003612:	025b      	lsls	r3, r3, #9
 8003614:	b29b      	uxth	r3, r3
 8003616:	431a      	orrs	r2, r3
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800361c:	3b01      	subs	r3, #1
 800361e:	041b      	lsls	r3, r3, #16
 8003620:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8003624:	431a      	orrs	r2, r3
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800362a:	3b01      	subs	r3, #1
 800362c:	061b      	lsls	r3, r3, #24
 800362e:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8003632:	492c      	ldr	r1, [pc, #176]	@ (80036e4 <HAL_RCC_OscConfig+0x77c>)
 8003634:	4313      	orrs	r3, r2
 8003636:	634b      	str	r3, [r1, #52]	@ 0x34
                              pOscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 8003638:	4b2a      	ldr	r3, [pc, #168]	@ (80036e4 <HAL_RCC_OscConfig+0x77c>)
 800363a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800363c:	4a29      	ldr	r2, [pc, #164]	@ (80036e4 <HAL_RCC_OscConfig+0x77c>)
 800363e:	f023 0310 	bic.w	r3, r3, #16
 8003642:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003648:	4a26      	ldr	r2, [pc, #152]	@ (80036e4 <HAL_RCC_OscConfig+0x77c>)
 800364a:	00db      	lsls	r3, r3, #3
 800364c:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 800364e:	4b25      	ldr	r3, [pc, #148]	@ (80036e4 <HAL_RCC_OscConfig+0x77c>)
 8003650:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003652:	4a24      	ldr	r2, [pc, #144]	@ (80036e4 <HAL_RCC_OscConfig+0x77c>)
 8003654:	f043 0310 	orr.w	r3, r3, #16
 8003658:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCIRGE_VALUE(pOscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL1_VCIRANGE(pOscInitStruct->PLL.PLLRGE) ;
 800365a:	4b22      	ldr	r3, [pc, #136]	@ (80036e4 <HAL_RCC_OscConfig+0x77c>)
 800365c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800365e:	f023 020c 	bic.w	r2, r3, #12
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003666:	491f      	ldr	r1, [pc, #124]	@ (80036e4 <HAL_RCC_OscConfig+0x77c>)
 8003668:	4313      	orrs	r3, r2
 800366a:	628b      	str	r3, [r1, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCORGE_VALUE(pOscInitStruct->PLL.PLLVCOSEL));

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL1_VCORANGE(pOscInitStruct->PLL.PLLVCOSEL) ;
 800366c:	4b1d      	ldr	r3, [pc, #116]	@ (80036e4 <HAL_RCC_OscConfig+0x77c>)
 800366e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003670:	f023 0220 	bic.w	r2, r3, #32
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003678:	491a      	ldr	r1, [pc, #104]	@ (80036e4 <HAL_RCC_OscConfig+0x77c>)
 800367a:	4313      	orrs	r3, r2
 800367c:	628b      	str	r3, [r1, #40]	@ 0x28

        /* Enable PLL1 System Clock output. */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVP);
 800367e:	4b19      	ldr	r3, [pc, #100]	@ (80036e4 <HAL_RCC_OscConfig+0x77c>)
 8003680:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003682:	4a18      	ldr	r2, [pc, #96]	@ (80036e4 <HAL_RCC_OscConfig+0x77c>)
 8003684:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003688:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Enable the PLL1. */
        __HAL_RCC_PLL1_ENABLE();
 800368a:	4b16      	ldr	r3, [pc, #88]	@ (80036e4 <HAL_RCC_OscConfig+0x77c>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	4a15      	ldr	r2, [pc, #84]	@ (80036e4 <HAL_RCC_OscConfig+0x77c>)
 8003690:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003694:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003696:	f7fe fd01 	bl	800209c <HAL_GetTick>
 800369a:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800369c:	e008      	b.n	80036b0 <HAL_RCC_OscConfig+0x748>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 800369e:	f7fe fcfd 	bl	800209c <HAL_GetTick>
 80036a2:	4602      	mov	r2, r0
 80036a4:	697b      	ldr	r3, [r7, #20]
 80036a6:	1ad3      	subs	r3, r2, r3
 80036a8:	2b02      	cmp	r3, #2
 80036aa:	d901      	bls.n	80036b0 <HAL_RCC_OscConfig+0x748>
          {
            return HAL_TIMEOUT;
 80036ac:	2303      	movs	r3, #3
 80036ae:	e08d      	b.n	80037cc <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80036b0:	4b0c      	ldr	r3, [pc, #48]	@ (80036e4 <HAL_RCC_OscConfig+0x77c>)
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d0f0      	beq.n	800369e <HAL_RCC_OscConfig+0x736>
 80036bc:	e085      	b.n	80037ca <HAL_RCC_OscConfig+0x862>
        }
      }
      else
      {
        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 80036be:	4b09      	ldr	r3, [pc, #36]	@ (80036e4 <HAL_RCC_OscConfig+0x77c>)
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	4a08      	ldr	r2, [pc, #32]	@ (80036e4 <HAL_RCC_OscConfig+0x77c>)
 80036c4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80036c8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036ca:	f7fe fce7 	bl	800209c <HAL_GetTick>
 80036ce:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80036d0:	e00a      	b.n	80036e8 <HAL_RCC_OscConfig+0x780>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 80036d2:	f7fe fce3 	bl	800209c <HAL_GetTick>
 80036d6:	4602      	mov	r2, r0
 80036d8:	697b      	ldr	r3, [r7, #20]
 80036da:	1ad3      	subs	r3, r2, r3
 80036dc:	2b02      	cmp	r3, #2
 80036de:	d903      	bls.n	80036e8 <HAL_RCC_OscConfig+0x780>
          {
            return HAL_TIMEOUT;
 80036e0:	2303      	movs	r3, #3
 80036e2:	e073      	b.n	80037cc <HAL_RCC_OscConfig+0x864>
 80036e4:	44020c00 	.word	0x44020c00
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80036e8:	4b3a      	ldr	r3, [pc, #232]	@ (80037d4 <HAL_RCC_OscConfig+0x86c>)
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d1ee      	bne.n	80036d2 <HAL_RCC_OscConfig+0x76a>
          }
        }

        /* Unselect PLL1 clock source and disable all PLL1 outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 80036f4:	4b37      	ldr	r3, [pc, #220]	@ (80037d4 <HAL_RCC_OscConfig+0x86c>)
 80036f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036f8:	4a36      	ldr	r2, [pc, #216]	@ (80037d4 <HAL_RCC_OscConfig+0x86c>)
 80036fa:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 80036fe:	f023 0303 	bic.w	r3, r3, #3
 8003702:	6293      	str	r3, [r2, #40]	@ 0x28
 8003704:	e061      	b.n	80037ca <HAL_RCC_OscConfig+0x862>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 8003706:	4b33      	ldr	r3, [pc, #204]	@ (80037d4 <HAL_RCC_OscConfig+0x86c>)
 8003708:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800370a:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800370c:	4b31      	ldr	r3, [pc, #196]	@ (80037d4 <HAL_RCC_OscConfig+0x86c>)
 800370e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003710:	60fb      	str	r3, [r7, #12]
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003716:	2b01      	cmp	r3, #1
 8003718:	d031      	beq.n	800377e <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 800371a:	693b      	ldr	r3, [r7, #16]
 800371c:	f003 0203 	and.w	r2, r3, #3
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003724:	429a      	cmp	r2, r3
 8003726:	d12a      	bne.n	800377e <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8003728:	693b      	ldr	r3, [r7, #16]
 800372a:	0a1b      	lsrs	r3, r3, #8
 800372c:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 8003734:	429a      	cmp	r2, r3
 8003736:	d122      	bne.n	800377e <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003742:	3b01      	subs	r3, #1
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 8003744:	429a      	cmp	r2, r3
 8003746:	d11a      	bne.n	800377e <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	0a5b      	lsrs	r3, r3, #9
 800374c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003754:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 8003756:	429a      	cmp	r2, r3
 8003758:	d111      	bne.n	800377e <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	0c1b      	lsrs	r3, r3, #16
 800375e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003766:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 8003768:	429a      	cmp	r2, r3
 800376a:	d108      	bne.n	800377e <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	0e1b      	lsrs	r3, r3, #24
 8003770:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pOscInitStruct->PLL.PLLR - 1U)))
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003778:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 800377a:	429a      	cmp	r2, r3
 800377c:	d001      	beq.n	8003782 <HAL_RCC_OscConfig+0x81a>
      {
        return HAL_ERROR;
 800377e:	2301      	movs	r3, #1
 8003780:	e024      	b.n	80037cc <HAL_RCC_OscConfig+0x864>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8003782:	4b14      	ldr	r3, [pc, #80]	@ (80037d4 <HAL_RCC_OscConfig+0x86c>)
 8003784:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003786:	08db      	lsrs	r3, r3, #3
 8003788:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pOscInitStruct->PLL.PLLFRACN))
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8003790:	429a      	cmp	r2, r3
 8003792:	d01a      	beq.n	80037ca <HAL_RCC_OscConfig+0x862>
      {
        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 8003794:	4b0f      	ldr	r3, [pc, #60]	@ (80037d4 <HAL_RCC_OscConfig+0x86c>)
 8003796:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003798:	4a0e      	ldr	r2, [pc, #56]	@ (80037d4 <HAL_RCC_OscConfig+0x86c>)
 800379a:	f023 0310 	bic.w	r3, r3, #16
 800379e:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037a0:	f7fe fc7c 	bl	800209c <HAL_GetTick>
 80037a4:	6178      	str	r0, [r7, #20]

        /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < RCC_PLL_FRAC_WAIT_VALUE)
 80037a6:	bf00      	nop
 80037a8:	f7fe fc78 	bl	800209c <HAL_GetTick>
 80037ac:	4602      	mov	r2, r0
 80037ae:	697b      	ldr	r3, [r7, #20]
 80037b0:	4293      	cmp	r3, r2
 80037b2:	d0f9      	beq.n	80037a8 <HAL_RCC_OscConfig+0x840>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80037b8:	4a06      	ldr	r2, [pc, #24]	@ (80037d4 <HAL_RCC_OscConfig+0x86c>)
 80037ba:	00db      	lsls	r3, r3, #3
 80037bc:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 80037be:	4b05      	ldr	r3, [pc, #20]	@ (80037d4 <HAL_RCC_OscConfig+0x86c>)
 80037c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037c2:	4a04      	ldr	r2, [pc, #16]	@ (80037d4 <HAL_RCC_OscConfig+0x86c>)
 80037c4:	f043 0310 	orr.w	r3, r3, #16
 80037c8:	6293      	str	r3, [r2, #40]	@ 0x28
      }

    }
  }
  return HAL_OK;
 80037ca:	2300      	movs	r3, #0
}
 80037cc:	4618      	mov	r0, r3
 80037ce:	3720      	adds	r7, #32
 80037d0:	46bd      	mov	sp, r7
 80037d2:	bd80      	pop	{r7, pc}
 80037d4:	44020c00 	.word	0x44020c00

080037d8 <HAL_RCC_ClockConfig>:
  *         currently used as system clock source.
  *
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *pClkInitStruct, uint32_t FLatency)
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	b084      	sub	sp, #16
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
 80037e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pClkInitStruct == NULL)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d101      	bne.n	80037ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80037e8:	2301      	movs	r3, #1
 80037ea:	e19e      	b.n	8003b2a <HAL_RCC_ClockConfig+0x352>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80037ec:	4b83      	ldr	r3, [pc, #524]	@ (80039fc <HAL_RCC_ClockConfig+0x224>)
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f003 030f 	and.w	r3, r3, #15
 80037f4:	683a      	ldr	r2, [r7, #0]
 80037f6:	429a      	cmp	r2, r3
 80037f8:	d910      	bls.n	800381c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037fa:	4b80      	ldr	r3, [pc, #512]	@ (80039fc <HAL_RCC_ClockConfig+0x224>)
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f023 020f 	bic.w	r2, r3, #15
 8003802:	497e      	ldr	r1, [pc, #504]	@ (80039fc <HAL_RCC_ClockConfig+0x224>)
 8003804:	683b      	ldr	r3, [r7, #0]
 8003806:	4313      	orrs	r3, r2
 8003808:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800380a:	4b7c      	ldr	r3, [pc, #496]	@ (80039fc <HAL_RCC_ClockConfig+0x224>)
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f003 030f 	and.w	r3, r3, #15
 8003812:	683a      	ldr	r2, [r7, #0]
 8003814:	429a      	cmp	r2, r3
 8003816:	d001      	beq.n	800381c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003818:	2301      	movs	r3, #1
 800381a:	e186      	b.n	8003b2a <HAL_RCC_ClockConfig+0x352>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f003 0310 	and.w	r3, r3, #16
 8003824:	2b00      	cmp	r3, #0
 8003826:	d012      	beq.n	800384e <HAL_RCC_ClockConfig+0x76>
  {
    if ((pClkInitStruct->APB3CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	695a      	ldr	r2, [r3, #20]
 800382c:	4b74      	ldr	r3, [pc, #464]	@ (8003a00 <HAL_RCC_ClockConfig+0x228>)
 800382e:	6a1b      	ldr	r3, [r3, #32]
 8003830:	0a1b      	lsrs	r3, r3, #8
 8003832:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003836:	429a      	cmp	r2, r3
 8003838:	d909      	bls.n	800384e <HAL_RCC_ClockConfig+0x76>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 800383a:	4b71      	ldr	r3, [pc, #452]	@ (8003a00 <HAL_RCC_ClockConfig+0x228>)
 800383c:	6a1b      	ldr	r3, [r3, #32]
 800383e:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	695b      	ldr	r3, [r3, #20]
 8003846:	021b      	lsls	r3, r3, #8
 8003848:	496d      	ldr	r1, [pc, #436]	@ (8003a00 <HAL_RCC_ClockConfig+0x228>)
 800384a:	4313      	orrs	r3, r2
 800384c:	620b      	str	r3, [r1, #32]
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f003 0308 	and.w	r3, r3, #8
 8003856:	2b00      	cmp	r3, #0
 8003858:	d012      	beq.n	8003880 <HAL_RCC_ClockConfig+0xa8>
  {
    if ((pClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	691a      	ldr	r2, [r3, #16]
 800385e:	4b68      	ldr	r3, [pc, #416]	@ (8003a00 <HAL_RCC_ClockConfig+0x228>)
 8003860:	6a1b      	ldr	r3, [r3, #32]
 8003862:	091b      	lsrs	r3, r3, #4
 8003864:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003868:	429a      	cmp	r2, r3
 800386a:	d909      	bls.n	8003880 <HAL_RCC_ClockConfig+0xa8>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 800386c:	4b64      	ldr	r3, [pc, #400]	@ (8003a00 <HAL_RCC_ClockConfig+0x228>)
 800386e:	6a1b      	ldr	r3, [r3, #32]
 8003870:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	691b      	ldr	r3, [r3, #16]
 8003878:	011b      	lsls	r3, r3, #4
 800387a:	4961      	ldr	r1, [pc, #388]	@ (8003a00 <HAL_RCC_ClockConfig+0x228>)
 800387c:	4313      	orrs	r3, r2
 800387e:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f003 0304 	and.w	r3, r3, #4
 8003888:	2b00      	cmp	r3, #0
 800388a:	d010      	beq.n	80038ae <HAL_RCC_ClockConfig+0xd6>
  {
    if ((pClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	68da      	ldr	r2, [r3, #12]
 8003890:	4b5b      	ldr	r3, [pc, #364]	@ (8003a00 <HAL_RCC_ClockConfig+0x228>)
 8003892:	6a1b      	ldr	r3, [r3, #32]
 8003894:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003898:	429a      	cmp	r2, r3
 800389a:	d908      	bls.n	80038ae <HAL_RCC_ClockConfig+0xd6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 800389c:	4b58      	ldr	r3, [pc, #352]	@ (8003a00 <HAL_RCC_ClockConfig+0x228>)
 800389e:	6a1b      	ldr	r3, [r3, #32]
 80038a0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	68db      	ldr	r3, [r3, #12]
 80038a8:	4955      	ldr	r1, [pc, #340]	@ (8003a00 <HAL_RCC_ClockConfig+0x228>)
 80038aa:	4313      	orrs	r3, r2
 80038ac:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f003 0302 	and.w	r3, r3, #2
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d010      	beq.n	80038dc <HAL_RCC_ClockConfig+0x104>
  {
    if ((pClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	689a      	ldr	r2, [r3, #8]
 80038be:	4b50      	ldr	r3, [pc, #320]	@ (8003a00 <HAL_RCC_ClockConfig+0x228>)
 80038c0:	6a1b      	ldr	r3, [r3, #32]
 80038c2:	f003 030f 	and.w	r3, r3, #15
 80038c6:	429a      	cmp	r2, r3
 80038c8:	d908      	bls.n	80038dc <HAL_RCC_ClockConfig+0x104>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 80038ca:	4b4d      	ldr	r3, [pc, #308]	@ (8003a00 <HAL_RCC_ClockConfig+0x228>)
 80038cc:	6a1b      	ldr	r3, [r3, #32]
 80038ce:	f023 020f 	bic.w	r2, r3, #15
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	689b      	ldr	r3, [r3, #8]
 80038d6:	494a      	ldr	r1, [pc, #296]	@ (8003a00 <HAL_RCC_ClockConfig+0x228>)
 80038d8:	4313      	orrs	r3, r2
 80038da:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f003 0301 	and.w	r3, r3, #1
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	f000 8093 	beq.w	8003a10 <HAL_RCC_ClockConfig+0x238>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	685b      	ldr	r3, [r3, #4]
 80038ee:	2b03      	cmp	r3, #3
 80038f0:	d107      	bne.n	8003902 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80038f2:	4b43      	ldr	r3, [pc, #268]	@ (8003a00 <HAL_RCC_ClockConfig+0x228>)
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d121      	bne.n	8003942 <HAL_RCC_ClockConfig+0x16a>
      {
        return HAL_ERROR;
 80038fe:	2301      	movs	r3, #1
 8003900:	e113      	b.n	8003b2a <HAL_RCC_ClockConfig+0x352>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	685b      	ldr	r3, [r3, #4]
 8003906:	2b02      	cmp	r3, #2
 8003908:	d107      	bne.n	800391a <HAL_RCC_ClockConfig+0x142>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800390a:	4b3d      	ldr	r3, [pc, #244]	@ (8003a00 <HAL_RCC_ClockConfig+0x228>)
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003912:	2b00      	cmp	r3, #0
 8003914:	d115      	bne.n	8003942 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8003916:	2301      	movs	r3, #1
 8003918:	e107      	b.n	8003b2a <HAL_RCC_ClockConfig+0x352>
        }
      }
      /* CSI is selected as System Clock Source */
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	685b      	ldr	r3, [r3, #4]
 800391e:	2b01      	cmp	r3, #1
 8003920:	d107      	bne.n	8003932 <HAL_RCC_ClockConfig+0x15a>
      {
        /* Check the CSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8003922:	4b37      	ldr	r3, [pc, #220]	@ (8003a00 <HAL_RCC_ClockConfig+0x228>)
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800392a:	2b00      	cmp	r3, #0
 800392c:	d109      	bne.n	8003942 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 800392e:	2301      	movs	r3, #1
 8003930:	e0fb      	b.n	8003b2a <HAL_RCC_ClockConfig+0x352>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003932:	4b33      	ldr	r3, [pc, #204]	@ (8003a00 <HAL_RCC_ClockConfig+0x228>)
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f003 0302 	and.w	r3, r3, #2
 800393a:	2b00      	cmp	r3, #0
 800393c:	d101      	bne.n	8003942 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 800393e:	2301      	movs	r3, #1
 8003940:	e0f3      	b.n	8003b2a <HAL_RCC_ClockConfig+0x352>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pClkInitStruct->SYSCLKSource);
 8003942:	4b2f      	ldr	r3, [pc, #188]	@ (8003a00 <HAL_RCC_ClockConfig+0x228>)
 8003944:	69db      	ldr	r3, [r3, #28]
 8003946:	f023 0203 	bic.w	r2, r3, #3
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	685b      	ldr	r3, [r3, #4]
 800394e:	492c      	ldr	r1, [pc, #176]	@ (8003a00 <HAL_RCC_ClockConfig+0x228>)
 8003950:	4313      	orrs	r3, r2
 8003952:	61cb      	str	r3, [r1, #28]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003954:	f7fe fba2 	bl	800209c <HAL_GetTick>
 8003958:	60f8      	str	r0, [r7, #12]

    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	685b      	ldr	r3, [r3, #4]
 800395e:	2b03      	cmp	r3, #3
 8003960:	d112      	bne.n	8003988 <HAL_RCC_ClockConfig+0x1b0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003962:	e00a      	b.n	800397a <HAL_RCC_ClockConfig+0x1a2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8003964:	f7fe fb9a 	bl	800209c <HAL_GetTick>
 8003968:	4602      	mov	r2, r0
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	1ad3      	subs	r3, r2, r3
 800396e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003972:	4293      	cmp	r3, r2
 8003974:	d901      	bls.n	800397a <HAL_RCC_ClockConfig+0x1a2>
        {
          return HAL_TIMEOUT;
 8003976:	2303      	movs	r3, #3
 8003978:	e0d7      	b.n	8003b2a <HAL_RCC_ClockConfig+0x352>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800397a:	4b21      	ldr	r3, [pc, #132]	@ (8003a00 <HAL_RCC_ClockConfig+0x228>)
 800397c:	69db      	ldr	r3, [r3, #28]
 800397e:	f003 0318 	and.w	r3, r3, #24
 8003982:	2b18      	cmp	r3, #24
 8003984:	d1ee      	bne.n	8003964 <HAL_RCC_ClockConfig+0x18c>
 8003986:	e043      	b.n	8003a10 <HAL_RCC_ClockConfig+0x238>
        }
      }
    }
    else
    {
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	685b      	ldr	r3, [r3, #4]
 800398c:	2b02      	cmp	r3, #2
 800398e:	d112      	bne.n	80039b6 <HAL_RCC_ClockConfig+0x1de>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003990:	e00a      	b.n	80039a8 <HAL_RCC_ClockConfig+0x1d0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8003992:	f7fe fb83 	bl	800209c <HAL_GetTick>
 8003996:	4602      	mov	r2, r0
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	1ad3      	subs	r3, r2, r3
 800399c:	f241 3288 	movw	r2, #5000	@ 0x1388
 80039a0:	4293      	cmp	r3, r2
 80039a2:	d901      	bls.n	80039a8 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80039a4:	2303      	movs	r3, #3
 80039a6:	e0c0      	b.n	8003b2a <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80039a8:	4b15      	ldr	r3, [pc, #84]	@ (8003a00 <HAL_RCC_ClockConfig+0x228>)
 80039aa:	69db      	ldr	r3, [r3, #28]
 80039ac:	f003 0318 	and.w	r3, r3, #24
 80039b0:	2b10      	cmp	r3, #16
 80039b2:	d1ee      	bne.n	8003992 <HAL_RCC_ClockConfig+0x1ba>
 80039b4:	e02c      	b.n	8003a10 <HAL_RCC_ClockConfig+0x238>
          }
        }
      }
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	685b      	ldr	r3, [r3, #4]
 80039ba:	2b01      	cmp	r3, #1
 80039bc:	d122      	bne.n	8003a04 <HAL_RCC_ClockConfig+0x22c>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 80039be:	e00a      	b.n	80039d6 <HAL_RCC_ClockConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80039c0:	f7fe fb6c 	bl	800209c <HAL_GetTick>
 80039c4:	4602      	mov	r2, r0
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	1ad3      	subs	r3, r2, r3
 80039ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 80039ce:	4293      	cmp	r3, r2
 80039d0:	d901      	bls.n	80039d6 <HAL_RCC_ClockConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 80039d2:	2303      	movs	r3, #3
 80039d4:	e0a9      	b.n	8003b2a <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 80039d6:	4b0a      	ldr	r3, [pc, #40]	@ (8003a00 <HAL_RCC_ClockConfig+0x228>)
 80039d8:	69db      	ldr	r3, [r3, #28]
 80039da:	f003 0318 	and.w	r3, r3, #24
 80039de:	2b08      	cmp	r3, #8
 80039e0:	d1ee      	bne.n	80039c0 <HAL_RCC_ClockConfig+0x1e8>
 80039e2:	e015      	b.n	8003a10 <HAL_RCC_ClockConfig+0x238>
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80039e4:	f7fe fb5a 	bl	800209c <HAL_GetTick>
 80039e8:	4602      	mov	r2, r0
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	1ad3      	subs	r3, r2, r3
 80039ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 80039f2:	4293      	cmp	r3, r2
 80039f4:	d906      	bls.n	8003a04 <HAL_RCC_ClockConfig+0x22c>
          {
            return HAL_TIMEOUT;
 80039f6:	2303      	movs	r3, #3
 80039f8:	e097      	b.n	8003b2a <HAL_RCC_ClockConfig+0x352>
 80039fa:	bf00      	nop
 80039fc:	40022000 	.word	0x40022000
 8003a00:	44020c00 	.word	0x44020c00
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003a04:	4b4b      	ldr	r3, [pc, #300]	@ (8003b34 <HAL_RCC_ClockConfig+0x35c>)
 8003a06:	69db      	ldr	r3, [r3, #28]
 8003a08:	f003 0318 	and.w	r3, r3, #24
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d1e9      	bne.n	80039e4 <HAL_RCC_ClockConfig+0x20c>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f003 0302 	and.w	r3, r3, #2
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d010      	beq.n	8003a3e <HAL_RCC_ClockConfig+0x266>
  {
    if ((pClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	689a      	ldr	r2, [r3, #8]
 8003a20:	4b44      	ldr	r3, [pc, #272]	@ (8003b34 <HAL_RCC_ClockConfig+0x35c>)
 8003a22:	6a1b      	ldr	r3, [r3, #32]
 8003a24:	f003 030f 	and.w	r3, r3, #15
 8003a28:	429a      	cmp	r2, r3
 8003a2a:	d208      	bcs.n	8003a3e <HAL_RCC_ClockConfig+0x266>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 8003a2c:	4b41      	ldr	r3, [pc, #260]	@ (8003b34 <HAL_RCC_ClockConfig+0x35c>)
 8003a2e:	6a1b      	ldr	r3, [r3, #32]
 8003a30:	f023 020f 	bic.w	r2, r3, #15
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	689b      	ldr	r3, [r3, #8]
 8003a38:	493e      	ldr	r1, [pc, #248]	@ (8003b34 <HAL_RCC_ClockConfig+0x35c>)
 8003a3a:	4313      	orrs	r3, r2
 8003a3c:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003a3e:	4b3e      	ldr	r3, [pc, #248]	@ (8003b38 <HAL_RCC_ClockConfig+0x360>)
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f003 030f 	and.w	r3, r3, #15
 8003a46:	683a      	ldr	r2, [r7, #0]
 8003a48:	429a      	cmp	r2, r3
 8003a4a:	d210      	bcs.n	8003a6e <HAL_RCC_ClockConfig+0x296>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a4c:	4b3a      	ldr	r3, [pc, #232]	@ (8003b38 <HAL_RCC_ClockConfig+0x360>)
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f023 020f 	bic.w	r2, r3, #15
 8003a54:	4938      	ldr	r1, [pc, #224]	@ (8003b38 <HAL_RCC_ClockConfig+0x360>)
 8003a56:	683b      	ldr	r3, [r7, #0]
 8003a58:	4313      	orrs	r3, r2
 8003a5a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a5c:	4b36      	ldr	r3, [pc, #216]	@ (8003b38 <HAL_RCC_ClockConfig+0x360>)
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f003 030f 	and.w	r3, r3, #15
 8003a64:	683a      	ldr	r2, [r7, #0]
 8003a66:	429a      	cmp	r2, r3
 8003a68:	d001      	beq.n	8003a6e <HAL_RCC_ClockConfig+0x296>
    {
      return HAL_ERROR;
 8003a6a:	2301      	movs	r3, #1
 8003a6c:	e05d      	b.n	8003b2a <HAL_RCC_ClockConfig+0x352>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f003 0304 	and.w	r3, r3, #4
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d010      	beq.n	8003a9c <HAL_RCC_ClockConfig+0x2c4>
  {
    if ((pClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	68da      	ldr	r2, [r3, #12]
 8003a7e:	4b2d      	ldr	r3, [pc, #180]	@ (8003b34 <HAL_RCC_ClockConfig+0x35c>)
 8003a80:	6a1b      	ldr	r3, [r3, #32]
 8003a82:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003a86:	429a      	cmp	r2, r3
 8003a88:	d208      	bcs.n	8003a9c <HAL_RCC_ClockConfig+0x2c4>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 8003a8a:	4b2a      	ldr	r3, [pc, #168]	@ (8003b34 <HAL_RCC_ClockConfig+0x35c>)
 8003a8c:	6a1b      	ldr	r3, [r3, #32]
 8003a8e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	68db      	ldr	r3, [r3, #12]
 8003a96:	4927      	ldr	r1, [pc, #156]	@ (8003b34 <HAL_RCC_ClockConfig+0x35c>)
 8003a98:	4313      	orrs	r3, r2
 8003a9a:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f003 0308 	and.w	r3, r3, #8
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d012      	beq.n	8003ace <HAL_RCC_ClockConfig+0x2f6>
  {
    if ((pClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	691a      	ldr	r2, [r3, #16]
 8003aac:	4b21      	ldr	r3, [pc, #132]	@ (8003b34 <HAL_RCC_ClockConfig+0x35c>)
 8003aae:	6a1b      	ldr	r3, [r3, #32]
 8003ab0:	091b      	lsrs	r3, r3, #4
 8003ab2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003ab6:	429a      	cmp	r2, r3
 8003ab8:	d209      	bcs.n	8003ace <HAL_RCC_ClockConfig+0x2f6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 8003aba:	4b1e      	ldr	r3, [pc, #120]	@ (8003b34 <HAL_RCC_ClockConfig+0x35c>)
 8003abc:	6a1b      	ldr	r3, [r3, #32]
 8003abe:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	691b      	ldr	r3, [r3, #16]
 8003ac6:	011b      	lsls	r3, r3, #4
 8003ac8:	491a      	ldr	r1, [pc, #104]	@ (8003b34 <HAL_RCC_ClockConfig+0x35c>)
 8003aca:	4313      	orrs	r3, r2
 8003acc:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f003 0310 	and.w	r3, r3, #16
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d012      	beq.n	8003b00 <HAL_RCC_ClockConfig+0x328>
  {
    if ((pClkInitStruct->APB3CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	695a      	ldr	r2, [r3, #20]
 8003ade:	4b15      	ldr	r3, [pc, #84]	@ (8003b34 <HAL_RCC_ClockConfig+0x35c>)
 8003ae0:	6a1b      	ldr	r3, [r3, #32]
 8003ae2:	0a1b      	lsrs	r3, r3, #8
 8003ae4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003ae8:	429a      	cmp	r2, r3
 8003aea:	d209      	bcs.n	8003b00 <HAL_RCC_ClockConfig+0x328>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 8003aec:	4b11      	ldr	r3, [pc, #68]	@ (8003b34 <HAL_RCC_ClockConfig+0x35c>)
 8003aee:	6a1b      	ldr	r3, [r3, #32]
 8003af0:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	695b      	ldr	r3, [r3, #20]
 8003af8:	021b      	lsls	r3, r3, #8
 8003afa:	490e      	ldr	r1, [pc, #56]	@ (8003b34 <HAL_RCC_ClockConfig+0x35c>)
 8003afc:	4313      	orrs	r3, r2
 8003afe:	620b      	str	r3, [r1, #32]
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8003b00:	f000 f822 	bl	8003b48 <HAL_RCC_GetSysClockFreq>
 8003b04:	4602      	mov	r2, r0
 8003b06:	4b0b      	ldr	r3, [pc, #44]	@ (8003b34 <HAL_RCC_ClockConfig+0x35c>)
 8003b08:	6a1b      	ldr	r3, [r3, #32]
 8003b0a:	f003 030f 	and.w	r3, r3, #15
 8003b0e:	490b      	ldr	r1, [pc, #44]	@ (8003b3c <HAL_RCC_ClockConfig+0x364>)
 8003b10:	5ccb      	ldrb	r3, [r1, r3]
 8003b12:	fa22 f303 	lsr.w	r3, r2, r3
 8003b16:	4a0a      	ldr	r2, [pc, #40]	@ (8003b40 <HAL_RCC_ClockConfig+0x368>)
 8003b18:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8003b1a:	4b0a      	ldr	r3, [pc, #40]	@ (8003b44 <HAL_RCC_ClockConfig+0x36c>)
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	4618      	mov	r0, r3
 8003b20:	f7fe fa32 	bl	8001f88 <HAL_InitTick>
 8003b24:	4603      	mov	r3, r0
 8003b26:	72fb      	strb	r3, [r7, #11]

  return halstatus;
 8003b28:	7afb      	ldrb	r3, [r7, #11]
}
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	3710      	adds	r7, #16
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	bd80      	pop	{r7, pc}
 8003b32:	bf00      	nop
 8003b34:	44020c00 	.word	0x44020c00
 8003b38:	40022000 	.word	0x40022000
 8003b3c:	0800ca68 	.word	0x0800ca68
 8003b40:	20000000 	.word	0x20000000
 8003b44:	20000004 	.word	0x20000004

08003b48 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b48:	b480      	push	{r7}
 8003b4a:	b089      	sub	sp, #36	@ 0x24
 8003b4c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;
  uint32_t hsivalue;
  float_t fracn1;
  float_t pllvco;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_CSI)
 8003b4e:	4b8c      	ldr	r3, [pc, #560]	@ (8003d80 <HAL_RCC_GetSysClockFreq+0x238>)
 8003b50:	69db      	ldr	r3, [r3, #28]
 8003b52:	f003 0318 	and.w	r3, r3, #24
 8003b56:	2b08      	cmp	r3, #8
 8003b58:	d102      	bne.n	8003b60 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8003b5a:	4b8a      	ldr	r3, [pc, #552]	@ (8003d84 <HAL_RCC_GetSysClockFreq+0x23c>)
 8003b5c:	61fb      	str	r3, [r7, #28]
 8003b5e:	e107      	b.n	8003d70 <HAL_RCC_GetSysClockFreq+0x228>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003b60:	4b87      	ldr	r3, [pc, #540]	@ (8003d80 <HAL_RCC_GetSysClockFreq+0x238>)
 8003b62:	69db      	ldr	r3, [r3, #28]
 8003b64:	f003 0318 	and.w	r3, r3, #24
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d112      	bne.n	8003b92 <HAL_RCC_GetSysClockFreq+0x4a>
  {
    /* HSI used as system clock source */
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 8003b6c:	4b84      	ldr	r3, [pc, #528]	@ (8003d80 <HAL_RCC_GetSysClockFreq+0x238>)
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f003 0320 	and.w	r3, r3, #32
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d009      	beq.n	8003b8c <HAL_RCC_GetSysClockFreq+0x44>
    {
      sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8003b78:	4b81      	ldr	r3, [pc, #516]	@ (8003d80 <HAL_RCC_GetSysClockFreq+0x238>)
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	08db      	lsrs	r3, r3, #3
 8003b7e:	f003 0303 	and.w	r3, r3, #3
 8003b82:	4a81      	ldr	r2, [pc, #516]	@ (8003d88 <HAL_RCC_GetSysClockFreq+0x240>)
 8003b84:	fa22 f303 	lsr.w	r3, r2, r3
 8003b88:	61fb      	str	r3, [r7, #28]
 8003b8a:	e0f1      	b.n	8003d70 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = (uint32_t) HSI_VALUE;
 8003b8c:	4b7e      	ldr	r3, [pc, #504]	@ (8003d88 <HAL_RCC_GetSysClockFreq+0x240>)
 8003b8e:	61fb      	str	r3, [r7, #28]
 8003b90:	e0ee      	b.n	8003d70 <HAL_RCC_GetSysClockFreq+0x228>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003b92:	4b7b      	ldr	r3, [pc, #492]	@ (8003d80 <HAL_RCC_GetSysClockFreq+0x238>)
 8003b94:	69db      	ldr	r3, [r3, #28]
 8003b96:	f003 0318 	and.w	r3, r3, #24
 8003b9a:	2b10      	cmp	r3, #16
 8003b9c:	d102      	bne.n	8003ba4 <HAL_RCC_GetSysClockFreq+0x5c>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003b9e:	4b7b      	ldr	r3, [pc, #492]	@ (8003d8c <HAL_RCC_GetSysClockFreq+0x244>)
 8003ba0:	61fb      	str	r3, [r7, #28]
 8003ba2:	e0e5      	b.n	8003d70 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003ba4:	4b76      	ldr	r3, [pc, #472]	@ (8003d80 <HAL_RCC_GetSysClockFreq+0x238>)
 8003ba6:	69db      	ldr	r3, [r3, #28]
 8003ba8:	f003 0318 	and.w	r3, r3, #24
 8003bac:	2b18      	cmp	r3, #24
 8003bae:	f040 80dd 	bne.w	8003d6c <HAL_RCC_GetSysClockFreq+0x224>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8003bb2:	4b73      	ldr	r3, [pc, #460]	@ (8003d80 <HAL_RCC_GetSysClockFreq+0x238>)
 8003bb4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bb6:	f003 0303 	and.w	r3, r3, #3
 8003bba:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 8003bbc:	4b70      	ldr	r3, [pc, #448]	@ (8003d80 <HAL_RCC_GetSysClockFreq+0x238>)
 8003bbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bc0:	0a1b      	lsrs	r3, r3, #8
 8003bc2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003bc6:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8003bc8:	4b6d      	ldr	r3, [pc, #436]	@ (8003d80 <HAL_RCC_GetSysClockFreq+0x238>)
 8003bca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bcc:	091b      	lsrs	r3, r3, #4
 8003bce:	f003 0301 	and.w	r3, r3, #1
 8003bd2:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 8003bd4:	4b6a      	ldr	r3, [pc, #424]	@ (8003d80 <HAL_RCC_GetSysClockFreq+0x238>)
 8003bd6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                               RCC_PLL1FRACR_PLL1FRACN) >> RCC_PLL1FRACR_PLL1FRACN_Pos));
 8003bd8:	08db      	lsrs	r3, r3, #3
 8003bda:	f3c3 030c 	ubfx	r3, r3, #0, #13
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 8003bde:	68fa      	ldr	r2, [r7, #12]
 8003be0:	fb02 f303 	mul.w	r3, r2, r3
 8003be4:	ee07 3a90 	vmov	s15, r3
 8003be8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003bec:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8003bf0:	693b      	ldr	r3, [r7, #16]
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	f000 80b7 	beq.w	8003d66 <HAL_RCC_GetSysClockFreq+0x21e>
    {
      switch (pllsource)
 8003bf8:	697b      	ldr	r3, [r7, #20]
 8003bfa:	2b01      	cmp	r3, #1
 8003bfc:	d003      	beq.n	8003c06 <HAL_RCC_GetSysClockFreq+0xbe>
 8003bfe:	697b      	ldr	r3, [r7, #20]
 8003c00:	2b03      	cmp	r3, #3
 8003c02:	d056      	beq.n	8003cb2 <HAL_RCC_GetSysClockFreq+0x16a>
 8003c04:	e077      	b.n	8003cf6 <HAL_RCC_GetSysClockFreq+0x1ae>
      {
        case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */

          if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 8003c06:	4b5e      	ldr	r3, [pc, #376]	@ (8003d80 <HAL_RCC_GetSysClockFreq+0x238>)
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f003 0320 	and.w	r3, r3, #32
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d02d      	beq.n	8003c6e <HAL_RCC_GetSysClockFreq+0x126>
          {
            hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8003c12:	4b5b      	ldr	r3, [pc, #364]	@ (8003d80 <HAL_RCC_GetSysClockFreq+0x238>)
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	08db      	lsrs	r3, r3, #3
 8003c18:	f003 0303 	and.w	r3, r3, #3
 8003c1c:	4a5a      	ldr	r2, [pc, #360]	@ (8003d88 <HAL_RCC_GetSysClockFreq+0x240>)
 8003c1e:	fa22 f303 	lsr.w	r3, r2, r3
 8003c22:	607b      	str	r3, [r7, #4]
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	ee07 3a90 	vmov	s15, r3
 8003c2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003c2e:	693b      	ldr	r3, [r7, #16]
 8003c30:	ee07 3a90 	vmov	s15, r3
 8003c34:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c38:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003c3c:	4b50      	ldr	r3, [pc, #320]	@ (8003d80 <HAL_RCC_GetSysClockFreq+0x238>)
 8003c3e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c40:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c44:	ee07 3a90 	vmov	s15, r3
 8003c48:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8003c4c:	ed97 6a02 	vldr	s12, [r7, #8]
 8003c50:	eddf 5a4f 	vldr	s11, [pc, #316]	@ 8003d90 <HAL_RCC_GetSysClockFreq+0x248>
 8003c54:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003c58:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8003c5c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003c60:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003c64:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c68:	edc7 7a06 	vstr	s15, [r7, #24]
          {
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
          }

          break;
 8003c6c:	e065      	b.n	8003d3a <HAL_RCC_GetSysClockFreq+0x1f2>
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003c6e:	693b      	ldr	r3, [r7, #16]
 8003c70:	ee07 3a90 	vmov	s15, r3
 8003c74:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c78:	eddf 6a46 	vldr	s13, [pc, #280]	@ 8003d94 <HAL_RCC_GetSysClockFreq+0x24c>
 8003c7c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003c80:	4b3f      	ldr	r3, [pc, #252]	@ (8003d80 <HAL_RCC_GetSysClockFreq+0x238>)
 8003c82:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c84:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c88:	ee07 3a90 	vmov	s15, r3
 8003c8c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 8003c90:	ed97 6a02 	vldr	s12, [r7, #8]
 8003c94:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8003d90 <HAL_RCC_GetSysClockFreq+0x248>
 8003c98:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003c9c:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 8003ca0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003ca4:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003ca8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003cac:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 8003cb0:	e043      	b.n	8003d3a <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003cb2:	693b      	ldr	r3, [r7, #16]
 8003cb4:	ee07 3a90 	vmov	s15, r3
 8003cb8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003cbc:	eddf 6a36 	vldr	s13, [pc, #216]	@ 8003d98 <HAL_RCC_GetSysClockFreq+0x250>
 8003cc0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003cc4:	4b2e      	ldr	r3, [pc, #184]	@ (8003d80 <HAL_RCC_GetSysClockFreq+0x238>)
 8003cc6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003cc8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ccc:	ee07 3a90 	vmov	s15, r3
 8003cd0:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8003cd4:	ed97 6a02 	vldr	s12, [r7, #8]
 8003cd8:	eddf 5a2d 	vldr	s11, [pc, #180]	@ 8003d90 <HAL_RCC_GetSysClockFreq+0x248>
 8003cdc:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003ce0:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8003ce4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003ce8:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003cec:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003cf0:	edc7 7a06 	vstr	s15, [r7, #24]

          break;
 8003cf4:	e021      	b.n	8003d3a <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        default:
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003cf6:	693b      	ldr	r3, [r7, #16]
 8003cf8:	ee07 3a90 	vmov	s15, r3
 8003cfc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d00:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8003d9c <HAL_RCC_GetSysClockFreq+0x254>
 8003d04:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003d08:	4b1d      	ldr	r3, [pc, #116]	@ (8003d80 <HAL_RCC_GetSysClockFreq+0x238>)
 8003d0a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d0c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d10:	ee07 3a90 	vmov	s15, r3
 8003d14:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8003d18:	ed97 6a02 	vldr	s12, [r7, #8]
 8003d1c:	eddf 5a1c 	vldr	s11, [pc, #112]	@ 8003d90 <HAL_RCC_GetSysClockFreq+0x248>
 8003d20:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003d24:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8003d28:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003d2c:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003d30:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d34:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 8003d38:	bf00      	nop
      }

      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + 1U) ;
 8003d3a:	4b11      	ldr	r3, [pc, #68]	@ (8003d80 <HAL_RCC_GetSysClockFreq+0x238>)
 8003d3c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d3e:	0a5b      	lsrs	r3, r3, #9
 8003d40:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003d44:	3301      	adds	r3, #1
 8003d46:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8003d48:	683b      	ldr	r3, [r7, #0]
 8003d4a:	ee07 3a90 	vmov	s15, r3
 8003d4e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003d52:	edd7 6a06 	vldr	s13, [r7, #24]
 8003d56:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003d5a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003d5e:	ee17 3a90 	vmov	r3, s15
 8003d62:	61fb      	str	r3, [r7, #28]
 8003d64:	e004      	b.n	8003d70 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = 0;
 8003d66:	2300      	movs	r3, #0
 8003d68:	61fb      	str	r3, [r7, #28]
 8003d6a:	e001      	b.n	8003d70 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else
  {
    /* HSI is the default system clock source */
    sysclockfreq = (uint32_t) HSI_VALUE;
 8003d6c:	4b06      	ldr	r3, [pc, #24]	@ (8003d88 <HAL_RCC_GetSysClockFreq+0x240>)
 8003d6e:	61fb      	str	r3, [r7, #28]
  }

  return sysclockfreq;
 8003d70:	69fb      	ldr	r3, [r7, #28]
}
 8003d72:	4618      	mov	r0, r3
 8003d74:	3724      	adds	r7, #36	@ 0x24
 8003d76:	46bd      	mov	sp, r7
 8003d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7c:	4770      	bx	lr
 8003d7e:	bf00      	nop
 8003d80:	44020c00 	.word	0x44020c00
 8003d84:	003d0900 	.word	0x003d0900
 8003d88:	03d09000 	.word	0x03d09000
 8003d8c:	017d7840 	.word	0x017d7840
 8003d90:	46000000 	.word	0x46000000
 8003d94:	4c742400 	.word	0x4c742400
 8003d98:	4bbebc20 	.word	0x4bbebc20
 8003d9c:	4a742400 	.word	0x4a742400

08003da0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003da0:	b580      	push	{r7, lr}
 8003da2:	af00      	add	r7, sp, #0

  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8003da4:	f7ff fed0 	bl	8003b48 <HAL_RCC_GetSysClockFreq>
 8003da8:	4602      	mov	r2, r0
 8003daa:	4b08      	ldr	r3, [pc, #32]	@ (8003dcc <HAL_RCC_GetHCLKFreq+0x2c>)
 8003dac:	6a1b      	ldr	r3, [r3, #32]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 8003dae:	f003 030f 	and.w	r3, r3, #15
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8003db2:	4907      	ldr	r1, [pc, #28]	@ (8003dd0 <HAL_RCC_GetHCLKFreq+0x30>)
 8003db4:	5ccb      	ldrb	r3, [r1, r3]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 8003db6:	f003 031f 	and.w	r3, r3, #31
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8003dba:	fa22 f303 	lsr.w	r3, r2, r3
 8003dbe:	4a05      	ldr	r2, [pc, #20]	@ (8003dd4 <HAL_RCC_GetHCLKFreq+0x34>)
 8003dc0:	6013      	str	r3, [r2, #0]

  return SystemCoreClock;
 8003dc2:	4b04      	ldr	r3, [pc, #16]	@ (8003dd4 <HAL_RCC_GetHCLKFreq+0x34>)
 8003dc4:	681b      	ldr	r3, [r3, #0]
}
 8003dc6:	4618      	mov	r0, r3
 8003dc8:	bd80      	pop	{r7, pc}
 8003dca:	bf00      	nop
 8003dcc:	44020c00 	.word	0x44020c00
 8003dd0:	0800ca68 	.word	0x0800ca68
 8003dd4:	20000000 	.word	0x20000000

08003dd8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003dd8:	b580      	push	{r7, lr}
 8003dda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]) & 0x1FU));
 8003ddc:	f7ff ffe0 	bl	8003da0 <HAL_RCC_GetHCLKFreq>
 8003de0:	4602      	mov	r2, r0
 8003de2:	4b06      	ldr	r3, [pc, #24]	@ (8003dfc <HAL_RCC_GetPCLK1Freq+0x24>)
 8003de4:	6a1b      	ldr	r3, [r3, #32]
 8003de6:	091b      	lsrs	r3, r3, #4
 8003de8:	f003 0307 	and.w	r3, r3, #7
 8003dec:	4904      	ldr	r1, [pc, #16]	@ (8003e00 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003dee:	5ccb      	ldrb	r3, [r1, r3]
 8003df0:	f003 031f 	and.w	r3, r3, #31
 8003df4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003df8:	4618      	mov	r0, r3
 8003dfa:	bd80      	pop	{r7, pc}
 8003dfc:	44020c00 	.word	0x44020c00
 8003e00:	0800ca78 	.word	0x0800ca78

08003e04 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003e04:	b580      	push	{r7, lr}
 8003e06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]) & 0x1FU));
 8003e08:	f7ff ffca 	bl	8003da0 <HAL_RCC_GetHCLKFreq>
 8003e0c:	4602      	mov	r2, r0
 8003e0e:	4b06      	ldr	r3, [pc, #24]	@ (8003e28 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003e10:	6a1b      	ldr	r3, [r3, #32]
 8003e12:	0a1b      	lsrs	r3, r3, #8
 8003e14:	f003 0307 	and.w	r3, r3, #7
 8003e18:	4904      	ldr	r1, [pc, #16]	@ (8003e2c <HAL_RCC_GetPCLK2Freq+0x28>)
 8003e1a:	5ccb      	ldrb	r3, [r1, r3]
 8003e1c:	f003 031f 	and.w	r3, r3, #31
 8003e20:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e24:	4618      	mov	r0, r3
 8003e26:	bd80      	pop	{r7, pc}
 8003e28:	44020c00 	.word	0x44020c00
 8003e2c:	0800ca78 	.word	0x0800ca78

08003e30 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 8003e30:	b580      	push	{r7, lr}
 8003e32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK3 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE3) >> RCC_CFGR2_PPRE3_Pos]) & 0x1FU));
 8003e34:	f7ff ffb4 	bl	8003da0 <HAL_RCC_GetHCLKFreq>
 8003e38:	4602      	mov	r2, r0
 8003e3a:	4b06      	ldr	r3, [pc, #24]	@ (8003e54 <HAL_RCC_GetPCLK3Freq+0x24>)
 8003e3c:	6a1b      	ldr	r3, [r3, #32]
 8003e3e:	0b1b      	lsrs	r3, r3, #12
 8003e40:	f003 0307 	and.w	r3, r3, #7
 8003e44:	4904      	ldr	r1, [pc, #16]	@ (8003e58 <HAL_RCC_GetPCLK3Freq+0x28>)
 8003e46:	5ccb      	ldrb	r3, [r1, r3]
 8003e48:	f003 031f 	and.w	r3, r3, #31
 8003e4c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e50:	4618      	mov	r0, r3
 8003e52:	bd80      	pop	{r7, pc}
 8003e54:	44020c00 	.word	0x44020c00
 8003e58:	0800ca78 	.word	0x0800ca78

08003e5c <HAL_RCCEx_PeriphCLKConfig>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 8003e5c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003e60:	b0aa      	sub	sp, #168	@ 0xa8
 8003e62:	af00      	add	r7, sp, #0
 8003e64:	f8c7 0094 	str.w	r0, [r7, #148]	@ 0x94
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003e68:	2300      	movs	r3, #0
 8003e6a:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003e6e:	2300      	movs	r3, #0
 8003e70:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8003e74:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003e78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e7c:	f002 7480 	and.w	r4, r2, #16777216	@ 0x1000000
 8003e80:	2500      	movs	r5, #0
 8003e82:	ea54 0305 	orrs.w	r3, r4, r5
 8003e86:	d00b      	beq.n	8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(pPeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(pPeriphClkInit->CkperClockSelection);
 8003e88:	4bb8      	ldr	r3, [pc, #736]	@ (800416c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003e8a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003e8e:	f023 4140 	bic.w	r1, r3, #3221225472	@ 0xc0000000
 8003e92:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003e96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e98:	4ab4      	ldr	r2, [pc, #720]	@ (800416c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003e9a:	430b      	orrs	r3, r1
 8003e9c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003ea0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003ea4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ea8:	f002 0801 	and.w	r8, r2, #1
 8003eac:	f04f 0900 	mov.w	r9, #0
 8003eb0:	ea58 0309 	orrs.w	r3, r8, r9
 8003eb4:	d038      	beq.n	8003f28 <HAL_RCCEx_PeriphCLKConfig+0xcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    switch (pPeriphClkInit->Usart1ClockSelection)
 8003eb6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003eba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ebc:	2b05      	cmp	r3, #5
 8003ebe:	d819      	bhi.n	8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8003ec0:	a201      	add	r2, pc, #4	@ (adr r2, 8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x6c>)
 8003ec2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ec6:	bf00      	nop
 8003ec8:	08003efd 	.word	0x08003efd
 8003ecc:	08003ee1 	.word	0x08003ee1
 8003ed0:	08003ef5 	.word	0x08003ef5
 8003ed4:	08003efd 	.word	0x08003efd
 8003ed8:	08003efd 	.word	0x08003efd
 8003edc:	08003efd 	.word	0x08003efd
        /* USART1 clock source config set later after clock selection check */
        break;

      case RCC_USART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003ee0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003ee4:	3308      	adds	r3, #8
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	f001 ffee 	bl	8005ec8 <RCCEx_PLL2_Config>
 8003eec:	4603      	mov	r3, r0
 8003eee:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        /* USART1 clock source config set later after clock selection check */
        break;
 8003ef2:	e004      	b.n	8003efe <HAL_RCCEx_PeriphCLKConfig+0xa2>
      case RCC_USART1CLKSOURCE_LSE:      /* LSE clock is used as source of USART1 clock*/
        /* USART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003ef4:	2301      	movs	r3, #1
 8003ef6:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8003efa:	e000      	b.n	8003efe <HAL_RCCEx_PeriphCLKConfig+0xa2>
        break;
 8003efc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003efe:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d10c      	bne.n	8003f20 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      /* Set the source of USART1 clock*/
      __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 8003f06:	4b99      	ldr	r3, [pc, #612]	@ (800416c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003f08:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003f0c:	f023 0107 	bic.w	r1, r3, #7
 8003f10:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003f14:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f16:	4a95      	ldr	r2, [pc, #596]	@ (800416c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003f18:	430b      	orrs	r3, r1
 8003f1a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8003f1e:	e003      	b.n	8003f28 <HAL_RCCEx_PeriphCLKConfig+0xcc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f20:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003f24:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003f28:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003f2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f30:	f002 0a02 	and.w	sl, r2, #2
 8003f34:	f04f 0b00 	mov.w	fp, #0
 8003f38:	ea5a 030b 	orrs.w	r3, sl, fp
 8003f3c:	d03c      	beq.n	8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x15c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    switch (pPeriphClkInit->Usart2ClockSelection)
 8003f3e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003f42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f44:	2b28      	cmp	r3, #40	@ 0x28
 8003f46:	d01b      	beq.n	8003f80 <HAL_RCCEx_PeriphCLKConfig+0x124>
 8003f48:	2b28      	cmp	r3, #40	@ 0x28
 8003f4a:	d815      	bhi.n	8003f78 <HAL_RCCEx_PeriphCLKConfig+0x11c>
 8003f4c:	2b20      	cmp	r3, #32
 8003f4e:	d019      	beq.n	8003f84 <HAL_RCCEx_PeriphCLKConfig+0x128>
 8003f50:	2b20      	cmp	r3, #32
 8003f52:	d811      	bhi.n	8003f78 <HAL_RCCEx_PeriphCLKConfig+0x11c>
 8003f54:	2b18      	cmp	r3, #24
 8003f56:	d017      	beq.n	8003f88 <HAL_RCCEx_PeriphCLKConfig+0x12c>
 8003f58:	2b18      	cmp	r3, #24
 8003f5a:	d80d      	bhi.n	8003f78 <HAL_RCCEx_PeriphCLKConfig+0x11c>
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d015      	beq.n	8003f8c <HAL_RCCEx_PeriphCLKConfig+0x130>
 8003f60:	2b08      	cmp	r3, #8
 8003f62:	d109      	bne.n	8003f78 <HAL_RCCEx_PeriphCLKConfig+0x11c>
        /* USART2 clock source config set later after clock selection check */
        break;

      case RCC_USART2CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART2*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003f64:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003f68:	3308      	adds	r3, #8
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	f001 ffac 	bl	8005ec8 <RCCEx_PLL2_Config>
 8003f70:	4603      	mov	r3, r0
 8003f72:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        /* USART2 clock source config set later after clock selection check */
        break;
 8003f76:	e00a      	b.n	8003f8e <HAL_RCCEx_PeriphCLKConfig+0x132>
      case RCC_USART2CLKSOURCE_LSE:      /* LSE clock is used as source of USART2 clock*/
        /* USART2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003f78:	2301      	movs	r3, #1
 8003f7a:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8003f7e:	e006      	b.n	8003f8e <HAL_RCCEx_PeriphCLKConfig+0x132>
        break;
 8003f80:	bf00      	nop
 8003f82:	e004      	b.n	8003f8e <HAL_RCCEx_PeriphCLKConfig+0x132>
        break;
 8003f84:	bf00      	nop
 8003f86:	e002      	b.n	8003f8e <HAL_RCCEx_PeriphCLKConfig+0x132>
        break;
 8003f88:	bf00      	nop
 8003f8a:	e000      	b.n	8003f8e <HAL_RCCEx_PeriphCLKConfig+0x132>
        break;
 8003f8c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f8e:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d10c      	bne.n	8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x154>
    {
      /* Set the source of USART2 clock*/
      __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 8003f96:	4b75      	ldr	r3, [pc, #468]	@ (800416c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003f98:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003f9c:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8003fa0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003fa4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003fa6:	4a71      	ldr	r2, [pc, #452]	@ (800416c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003fa8:	430b      	orrs	r3, r1
 8003faa:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8003fae:	e003      	b.n	8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x15c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fb0:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003fb4:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003fb8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003fbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fc0:	f002 0304 	and.w	r3, r2, #4
 8003fc4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003fc8:	2300      	movs	r3, #0
 8003fca:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8003fce:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8003fd2:	460b      	mov	r3, r1
 8003fd4:	4313      	orrs	r3, r2
 8003fd6:	d040      	beq.n	800405a <HAL_RCCEx_PeriphCLKConfig+0x1fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    switch (pPeriphClkInit->Usart3ClockSelection)
 8003fd8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003fdc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003fde:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8003fe2:	d01e      	beq.n	8004022 <HAL_RCCEx_PeriphCLKConfig+0x1c6>
 8003fe4:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8003fe8:	d817      	bhi.n	800401a <HAL_RCCEx_PeriphCLKConfig+0x1be>
 8003fea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003fee:	d01a      	beq.n	8004026 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
 8003ff0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003ff4:	d811      	bhi.n	800401a <HAL_RCCEx_PeriphCLKConfig+0x1be>
 8003ff6:	2bc0      	cmp	r3, #192	@ 0xc0
 8003ff8:	d017      	beq.n	800402a <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 8003ffa:	2bc0      	cmp	r3, #192	@ 0xc0
 8003ffc:	d80d      	bhi.n	800401a <HAL_RCCEx_PeriphCLKConfig+0x1be>
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d015      	beq.n	800402e <HAL_RCCEx_PeriphCLKConfig+0x1d2>
 8004002:	2b40      	cmp	r3, #64	@ 0x40
 8004004:	d109      	bne.n	800401a <HAL_RCCEx_PeriphCLKConfig+0x1be>
        /* USART3 clock source config set later after clock selection check */
        break;

      case RCC_USART3CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART3*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004006:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800400a:	3308      	adds	r3, #8
 800400c:	4618      	mov	r0, r3
 800400e:	f001 ff5b 	bl	8005ec8 <RCCEx_PLL2_Config>
 8004012:	4603      	mov	r3, r0
 8004014:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        /* USART3 clock source config set later after clock selection check */
        break;
 8004018:	e00a      	b.n	8004030 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
      case RCC_USART3CLKSOURCE_LSE:      /* LSE clock is used as source of USART3 clock*/
        /* USART3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800401a:	2301      	movs	r3, #1
 800401c:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8004020:	e006      	b.n	8004030 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
        break;
 8004022:	bf00      	nop
 8004024:	e004      	b.n	8004030 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
        break;
 8004026:	bf00      	nop
 8004028:	e002      	b.n	8004030 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
        break;
 800402a:	bf00      	nop
 800402c:	e000      	b.n	8004030 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
        break;
 800402e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004030:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8004034:	2b00      	cmp	r3, #0
 8004036:	d10c      	bne.n	8004052 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Set the source of USART3 clock*/
      __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 8004038:	4b4c      	ldr	r3, [pc, #304]	@ (800416c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800403a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800403e:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8004042:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004046:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004048:	4a48      	ldr	r2, [pc, #288]	@ (800416c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800404a:	430b      	orrs	r3, r1
 800404c:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8004050:	e003      	b.n	800405a <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004052:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8004056:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }
#endif /* UART12 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800405a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800405e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004062:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8004066:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800406a:	2300      	movs	r3, #0
 800406c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004070:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8004074:	460b      	mov	r3, r1
 8004076:	4313      	orrs	r3, r2
 8004078:	d043      	beq.n	8004102 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    switch (pPeriphClkInit->Lpuart1ClockSelection)
 800407a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800407e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004080:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8004084:	d021      	beq.n	80040ca <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8004086:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800408a:	d81a      	bhi.n	80040c2 <HAL_RCCEx_PeriphCLKConfig+0x266>
 800408c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004090:	d01d      	beq.n	80040ce <HAL_RCCEx_PeriphCLKConfig+0x272>
 8004092:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004096:	d814      	bhi.n	80040c2 <HAL_RCCEx_PeriphCLKConfig+0x266>
 8004098:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800409c:	d019      	beq.n	80040d2 <HAL_RCCEx_PeriphCLKConfig+0x276>
 800409e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80040a2:	d80e      	bhi.n	80040c2 <HAL_RCCEx_PeriphCLKConfig+0x266>
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d016      	beq.n	80040d6 <HAL_RCCEx_PeriphCLKConfig+0x27a>
 80040a8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80040ac:	d109      	bne.n	80040c2 <HAL_RCCEx_PeriphCLKConfig+0x266>
        /* LPUART1 clock source config set later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for LPUART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80040ae:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80040b2:	3308      	adds	r3, #8
 80040b4:	4618      	mov	r0, r3
 80040b6:	f001 ff07 	bl	8005ec8 <RCCEx_PLL2_Config>
 80040ba:	4603      	mov	r3, r0
 80040bc:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        /* LPUART1 clock source config set later after clock selection check */
        break;
 80040c0:	e00a      	b.n	80040d8 <HAL_RCCEx_PeriphCLKConfig+0x27c>
      case RCC_LPUART1CLKSOURCE_LSE:      /* LSE clock is used as source of LPUART1 clock*/
        /* LPUART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80040c2:	2301      	movs	r3, #1
 80040c4:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 80040c8:	e006      	b.n	80040d8 <HAL_RCCEx_PeriphCLKConfig+0x27c>
        break;
 80040ca:	bf00      	nop
 80040cc:	e004      	b.n	80040d8 <HAL_RCCEx_PeriphCLKConfig+0x27c>
        break;
 80040ce:	bf00      	nop
 80040d0:	e002      	b.n	80040d8 <HAL_RCCEx_PeriphCLKConfig+0x27c>
        break;
 80040d2:	bf00      	nop
 80040d4:	e000      	b.n	80040d8 <HAL_RCCEx_PeriphCLKConfig+0x27c>
        break;
 80040d6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80040d8:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d10c      	bne.n	80040fa <HAL_RCCEx_PeriphCLKConfig+0x29e>
    {
      /* Set the source of LPUART1 clock*/
      __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 80040e0:	4b22      	ldr	r3, [pc, #136]	@ (800416c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80040e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80040e6:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 80040ea:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80040ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040f0:	4a1e      	ldr	r2, [pc, #120]	@ (800416c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80040f2:	430b      	orrs	r3, r1
 80040f4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80040f8:	e003      	b.n	8004102 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040fa:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80040fe:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004102:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004106:	e9d3 2300 	ldrd	r2, r3, [r3]
 800410a:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800410e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004110:	2300      	movs	r3, #0
 8004112:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004114:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8004118:	460b      	mov	r3, r1
 800411a:	4313      	orrs	r3, r2
 800411c:	d03e      	beq.n	800419c <HAL_RCCEx_PeriphCLKConfig+0x340>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    switch (pPeriphClkInit->I2c1ClockSelection)
 800411e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004122:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004124:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004128:	d01b      	beq.n	8004162 <HAL_RCCEx_PeriphCLKConfig+0x306>
 800412a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800412e:	d814      	bhi.n	800415a <HAL_RCCEx_PeriphCLKConfig+0x2fe>
 8004130:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004134:	d017      	beq.n	8004166 <HAL_RCCEx_PeriphCLKConfig+0x30a>
 8004136:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800413a:	d80e      	bhi.n	800415a <HAL_RCCEx_PeriphCLKConfig+0x2fe>
 800413c:	2b00      	cmp	r3, #0
 800413e:	d017      	beq.n	8004170 <HAL_RCCEx_PeriphCLKConfig+0x314>
 8004140:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004144:	d109      	bne.n	800415a <HAL_RCCEx_PeriphCLKConfig+0x2fe>
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
#else
      case RCC_I2C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I2C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004146:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800414a:	3308      	adds	r3, #8
 800414c:	4618      	mov	r0, r3
 800414e:	f001 febb 	bl	8005ec8 <RCCEx_PLL2_Config>
 8004152:	4603      	mov	r3, r0
 8004154:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
#endif /* RCC_I2C1CLKSOURCE_PLL3R */
        /* I2C1 clock source config set later after clock selection check */
        break;
 8004158:	e00b      	b.n	8004172 <HAL_RCCEx_PeriphCLKConfig+0x316>
      case RCC_I2C1CLKSOURCE_CSI:      /* CSI clock is used as source of I2C1 clock*/
        /* I2C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800415a:	2301      	movs	r3, #1
 800415c:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8004160:	e007      	b.n	8004172 <HAL_RCCEx_PeriphCLKConfig+0x316>
        break;
 8004162:	bf00      	nop
 8004164:	e005      	b.n	8004172 <HAL_RCCEx_PeriphCLKConfig+0x316>
        break;
 8004166:	bf00      	nop
 8004168:	e003      	b.n	8004172 <HAL_RCCEx_PeriphCLKConfig+0x316>
 800416a:	bf00      	nop
 800416c:	44020c00 	.word	0x44020c00
        break;
 8004170:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004172:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8004176:	2b00      	cmp	r3, #0
 8004178:	d10c      	bne.n	8004194 <HAL_RCCEx_PeriphCLKConfig+0x338>
    {
      /* Set the source of I2C1 clock*/
      __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 800417a:	4ba5      	ldr	r3, [pc, #660]	@ (8004410 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 800417c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004180:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8004184:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004188:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800418a:	4aa1      	ldr	r2, [pc, #644]	@ (8004410 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 800418c:	430b      	orrs	r3, r1
 800418e:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8004192:	e003      	b.n	800419c <HAL_RCCEx_PeriphCLKConfig+0x340>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004194:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8004198:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800419c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80041a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041a4:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80041a8:	673b      	str	r3, [r7, #112]	@ 0x70
 80041aa:	2300      	movs	r3, #0
 80041ac:	677b      	str	r3, [r7, #116]	@ 0x74
 80041ae:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 80041b2:	460b      	mov	r3, r1
 80041b4:	4313      	orrs	r3, r2
 80041b6:	d03b      	beq.n	8004230 <HAL_RCCEx_PeriphCLKConfig+0x3d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    switch (pPeriphClkInit->I2c2ClockSelection)
 80041b8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80041bc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80041be:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80041c2:	d01b      	beq.n	80041fc <HAL_RCCEx_PeriphCLKConfig+0x3a0>
 80041c4:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80041c8:	d814      	bhi.n	80041f4 <HAL_RCCEx_PeriphCLKConfig+0x398>
 80041ca:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80041ce:	d017      	beq.n	8004200 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 80041d0:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80041d4:	d80e      	bhi.n	80041f4 <HAL_RCCEx_PeriphCLKConfig+0x398>
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d014      	beq.n	8004204 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
 80041da:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80041de:	d109      	bne.n	80041f4 <HAL_RCCEx_PeriphCLKConfig+0x398>
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
#else
      case RCC_I2C2CLKSOURCE_PLL2R:  /* PLL32 is used as clock source for I2C2*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80041e0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80041e4:	3308      	adds	r3, #8
 80041e6:	4618      	mov	r0, r3
 80041e8:	f001 fe6e 	bl	8005ec8 <RCCEx_PLL2_Config>
 80041ec:	4603      	mov	r3, r0
 80041ee:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
#endif /* RCC_I2C2CLKSOURCE_PLL3R */
        /* I2C2 clock source config set later after clock selection check */
        break;
 80041f2:	e008      	b.n	8004206 <HAL_RCCEx_PeriphCLKConfig+0x3aa>
      case RCC_I2C2CLKSOURCE_CSI:      /* CSI clock is used as source of I2C2 clock*/
        /* I2C2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80041f4:	2301      	movs	r3, #1
 80041f6:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 80041fa:	e004      	b.n	8004206 <HAL_RCCEx_PeriphCLKConfig+0x3aa>
        break;
 80041fc:	bf00      	nop
 80041fe:	e002      	b.n	8004206 <HAL_RCCEx_PeriphCLKConfig+0x3aa>
        break;
 8004200:	bf00      	nop
 8004202:	e000      	b.n	8004206 <HAL_RCCEx_PeriphCLKConfig+0x3aa>
        break;
 8004204:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004206:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 800420a:	2b00      	cmp	r3, #0
 800420c:	d10c      	bne.n	8004228 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
    {
      /* Set the source of I2C2 clock*/
      __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 800420e:	4b80      	ldr	r3, [pc, #512]	@ (8004410 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8004210:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004214:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 8004218:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800421c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800421e:	4a7c      	ldr	r2, [pc, #496]	@ (8004410 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8004220:	430b      	orrs	r3, r1
 8004222:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8004226:	e003      	b.n	8004230 <HAL_RCCEx_PeriphCLKConfig+0x3d4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004228:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 800422c:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }
#endif /* I2C4 */

  /*-------------------------- I3C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C1) == RCC_PERIPHCLK_I3C1)
 8004230:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004234:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004238:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800423c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800423e:	2300      	movs	r3, #0
 8004240:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004242:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8004246:	460b      	mov	r3, r1
 8004248:	4313      	orrs	r3, r2
 800424a:	d033      	beq.n	80042b4 <HAL_RCCEx_PeriphCLKConfig+0x458>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C1CLKSOURCE(pPeriphClkInit->I3c1ClockSelection));

    switch (pPeriphClkInit->I3c1ClockSelection)
 800424c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004250:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004252:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004256:	d015      	beq.n	8004284 <HAL_RCCEx_PeriphCLKConfig+0x428>
 8004258:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800425c:	d80e      	bhi.n	800427c <HAL_RCCEx_PeriphCLKConfig+0x420>
 800425e:	2b00      	cmp	r3, #0
 8004260:	d012      	beq.n	8004288 <HAL_RCCEx_PeriphCLKConfig+0x42c>
 8004262:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004266:	d109      	bne.n	800427c <HAL_RCCEx_PeriphCLKConfig+0x420>
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
#else
      case RCC_I3C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I3C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004268:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800426c:	3308      	adds	r3, #8
 800426e:	4618      	mov	r0, r3
 8004270:	f001 fe2a 	bl	8005ec8 <RCCEx_PLL2_Config>
 8004274:	4603      	mov	r3, r0
 8004276:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
#endif /* RCC_I3C1CLKSOURCE_PLL3R */
        /* I3C1 clock source config set later after clock selection check */
        break;
 800427a:	e006      	b.n	800428a <HAL_RCCEx_PeriphCLKConfig+0x42e>
      case RCC_I3C1CLKSOURCE_HSI:      /* HSI clock is used as source of I3C1 clock*/
        /* I3C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800427c:	2301      	movs	r3, #1
 800427e:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8004282:	e002      	b.n	800428a <HAL_RCCEx_PeriphCLKConfig+0x42e>
        break;
 8004284:	bf00      	nop
 8004286:	e000      	b.n	800428a <HAL_RCCEx_PeriphCLKConfig+0x42e>
        break;
 8004288:	bf00      	nop
    }

    if (ret == HAL_OK)
 800428a:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 800428e:	2b00      	cmp	r3, #0
 8004290:	d10c      	bne.n	80042ac <HAL_RCCEx_PeriphCLKConfig+0x450>
    {
      /* Set the source of I3C1 clock*/
      __HAL_RCC_I3C1_CONFIG(pPeriphClkInit->I3c1ClockSelection);
 8004292:	4b5f      	ldr	r3, [pc, #380]	@ (8004410 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8004294:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004298:	f023 7140 	bic.w	r1, r3, #50331648	@ 0x3000000
 800429c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80042a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80042a2:	4a5b      	ldr	r2, [pc, #364]	@ (8004410 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 80042a4:	430b      	orrs	r3, r1
 80042a6:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80042aa:	e003      	b.n	80042b4 <HAL_RCCEx_PeriphCLKConfig+0x458>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042ac:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80042b0:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }

#if defined (I3C2)
  /*-------------------------- I3C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C2) == RCC_PERIPHCLK_I3C2)
 80042b4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80042b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042bc:	2100      	movs	r1, #0
 80042be:	6639      	str	r1, [r7, #96]	@ 0x60
 80042c0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80042c4:	667b      	str	r3, [r7, #100]	@ 0x64
 80042c6:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 80042ca:	460b      	mov	r3, r1
 80042cc:	4313      	orrs	r3, r2
 80042ce:	d033      	beq.n	8004338 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C2CLKSOURCE(pPeriphClkInit->I3c2ClockSelection));

    switch (pPeriphClkInit->I3c2ClockSelection)
 80042d0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80042d4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80042d6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80042da:	d015      	beq.n	8004308 <HAL_RCCEx_PeriphCLKConfig+0x4ac>
 80042dc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80042e0:	d80e      	bhi.n	8004300 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d012      	beq.n	800430c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 80042e6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80042ea:	d109      	bne.n	8004300 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
#else
      case RCC_I3C2CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I3C2*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80042ec:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80042f0:	3308      	adds	r3, #8
 80042f2:	4618      	mov	r0, r3
 80042f4:	f001 fde8 	bl	8005ec8 <RCCEx_PLL2_Config>
 80042f8:	4603      	mov	r3, r0
 80042fa:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
#endif /* RCC_I3C2CLKSOURCE_PLL3R */
        /* I3C2 clock source config set later after clock selection check */
        break;
 80042fe:	e006      	b.n	800430e <HAL_RCCEx_PeriphCLKConfig+0x4b2>
      case RCC_I3C2CLKSOURCE_HSI:      /* HSI clock is used as source of I3C2 clock*/
        /* I3C2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004300:	2301      	movs	r3, #1
 8004302:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8004306:	e002      	b.n	800430e <HAL_RCCEx_PeriphCLKConfig+0x4b2>
        break;
 8004308:	bf00      	nop
 800430a:	e000      	b.n	800430e <HAL_RCCEx_PeriphCLKConfig+0x4b2>
        break;
 800430c:	bf00      	nop
    }
    if (ret == HAL_OK)
 800430e:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8004312:	2b00      	cmp	r3, #0
 8004314:	d10c      	bne.n	8004330 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
    {
      /* Set the source of I3C2 clock*/
      __HAL_RCC_I3C2_CONFIG(pPeriphClkInit->I3c2ClockSelection);
 8004316:	4b3e      	ldr	r3, [pc, #248]	@ (8004410 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8004318:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800431c:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8004320:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004324:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004326:	4a3a      	ldr	r2, [pc, #232]	@ (8004410 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8004328:	430b      	orrs	r3, r1
 800432a:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800432e:	e003      	b.n	8004338 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004330:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8004334:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }
#endif /* I3C2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004338:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800433c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004340:	2100      	movs	r1, #0
 8004342:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004344:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004348:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800434a:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800434e:	460b      	mov	r3, r1
 8004350:	4313      	orrs	r3, r2
 8004352:	d00e      	beq.n	8004372 <HAL_RCCEx_PeriphCLKConfig+0x516>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(pPeriphClkInit->TimPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(pPeriphClkInit->TimPresSelection);
 8004354:	4b2e      	ldr	r3, [pc, #184]	@ (8004410 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8004356:	69db      	ldr	r3, [r3, #28]
 8004358:	4a2d      	ldr	r2, [pc, #180]	@ (8004410 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 800435a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800435e:	61d3      	str	r3, [r2, #28]
 8004360:	4b2b      	ldr	r3, [pc, #172]	@ (8004410 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8004362:	69d9      	ldr	r1, [r3, #28]
 8004364:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004368:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800436c:	4a28      	ldr	r2, [pc, #160]	@ (8004410 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 800436e:	430b      	orrs	r3, r1
 8004370:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004372:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004376:	e9d3 2300 	ldrd	r2, r3, [r3]
 800437a:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800437e:	653b      	str	r3, [r7, #80]	@ 0x50
 8004380:	2300      	movs	r3, #0
 8004382:	657b      	str	r3, [r7, #84]	@ 0x54
 8004384:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8004388:	460b      	mov	r3, r1
 800438a:	4313      	orrs	r3, r2
 800438c:	d046      	beq.n	800441c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));

    switch (pPeriphClkInit->Lptim1ClockSelection)
 800438e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004392:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004394:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8004398:	d021      	beq.n	80043de <HAL_RCCEx_PeriphCLKConfig+0x582>
 800439a:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 800439e:	d81a      	bhi.n	80043d6 <HAL_RCCEx_PeriphCLKConfig+0x57a>
 80043a0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80043a4:	d01d      	beq.n	80043e2 <HAL_RCCEx_PeriphCLKConfig+0x586>
 80043a6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80043aa:	d814      	bhi.n	80043d6 <HAL_RCCEx_PeriphCLKConfig+0x57a>
 80043ac:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80043b0:	d019      	beq.n	80043e6 <HAL_RCCEx_PeriphCLKConfig+0x58a>
 80043b2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80043b6:	d80e      	bhi.n	80043d6 <HAL_RCCEx_PeriphCLKConfig+0x57a>
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d016      	beq.n	80043ea <HAL_RCCEx_PeriphCLKConfig+0x58e>
 80043bc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80043c0:	d109      	bne.n	80043d6 <HAL_RCCEx_PeriphCLKConfig+0x57a>
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80043c2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80043c6:	3308      	adds	r3, #8
 80043c8:	4618      	mov	r0, r3
 80043ca:	f001 fd7d 	bl	8005ec8 <RCCEx_PLL2_Config>
 80043ce:	4603      	mov	r3, r0
 80043d0:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 80043d4:	e00a      	b.n	80043ec <HAL_RCCEx_PeriphCLKConfig+0x590>
      case RCC_LPTIM1CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM1 clock*/
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80043d6:	2301      	movs	r3, #1
 80043d8:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 80043dc:	e006      	b.n	80043ec <HAL_RCCEx_PeriphCLKConfig+0x590>
        break;
 80043de:	bf00      	nop
 80043e0:	e004      	b.n	80043ec <HAL_RCCEx_PeriphCLKConfig+0x590>
        break;
 80043e2:	bf00      	nop
 80043e4:	e002      	b.n	80043ec <HAL_RCCEx_PeriphCLKConfig+0x590>
        break;
 80043e6:	bf00      	nop
 80043e8:	e000      	b.n	80043ec <HAL_RCCEx_PeriphCLKConfig+0x590>
        break;
 80043ea:	bf00      	nop
    }

    if (ret == HAL_OK)
 80043ec:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d10f      	bne.n	8004414 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 80043f4:	4b06      	ldr	r3, [pc, #24]	@ (8004410 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 80043f6:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80043fa:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 80043fe:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004402:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004404:	4a02      	ldr	r2, [pc, #8]	@ (8004410 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8004406:	430b      	orrs	r3, r1
 8004408:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 800440c:	e006      	b.n	800441c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800440e:	bf00      	nop
 8004410:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004414:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8004418:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }

  /*-------------------------- LPTIM2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800441c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004420:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004424:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8004428:	64bb      	str	r3, [r7, #72]	@ 0x48
 800442a:	2300      	movs	r3, #0
 800442c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800442e:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8004432:	460b      	mov	r3, r1
 8004434:	4313      	orrs	r3, r2
 8004436:	d043      	beq.n	80044c0 <HAL_RCCEx_PeriphCLKConfig+0x664>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));

    switch (pPeriphClkInit->Lptim2ClockSelection)
 8004438:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800443c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800443e:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8004442:	d021      	beq.n	8004488 <HAL_RCCEx_PeriphCLKConfig+0x62c>
 8004444:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8004448:	d81a      	bhi.n	8004480 <HAL_RCCEx_PeriphCLKConfig+0x624>
 800444a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800444e:	d01d      	beq.n	800448c <HAL_RCCEx_PeriphCLKConfig+0x630>
 8004450:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004454:	d814      	bhi.n	8004480 <HAL_RCCEx_PeriphCLKConfig+0x624>
 8004456:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800445a:	d019      	beq.n	8004490 <HAL_RCCEx_PeriphCLKConfig+0x634>
 800445c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004460:	d80e      	bhi.n	8004480 <HAL_RCCEx_PeriphCLKConfig+0x624>
 8004462:	2b00      	cmp	r3, #0
 8004464:	d016      	beq.n	8004494 <HAL_RCCEx_PeriphCLKConfig+0x638>
 8004466:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800446a:	d109      	bne.n	8004480 <HAL_RCCEx_PeriphCLKConfig+0x624>
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800446c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004470:	3308      	adds	r3, #8
 8004472:	4618      	mov	r0, r3
 8004474:	f001 fd28 	bl	8005ec8 <RCCEx_PLL2_Config>
 8004478:	4603      	mov	r3, r0
 800447a:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 800447e:	e00a      	b.n	8004496 <HAL_RCCEx_PeriphCLKConfig+0x63a>
      case RCC_LPTIM2CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM2 clock*/
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004480:	2301      	movs	r3, #1
 8004482:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8004486:	e006      	b.n	8004496 <HAL_RCCEx_PeriphCLKConfig+0x63a>
        break;
 8004488:	bf00      	nop
 800448a:	e004      	b.n	8004496 <HAL_RCCEx_PeriphCLKConfig+0x63a>
        break;
 800448c:	bf00      	nop
 800448e:	e002      	b.n	8004496 <HAL_RCCEx_PeriphCLKConfig+0x63a>
        break;
 8004490:	bf00      	nop
 8004492:	e000      	b.n	8004496 <HAL_RCCEx_PeriphCLKConfig+0x63a>
        break;
 8004494:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004496:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 800449a:	2b00      	cmp	r3, #0
 800449c:	d10c      	bne.n	80044b8 <HAL_RCCEx_PeriphCLKConfig+0x65c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 800449e:	4bb6      	ldr	r3, [pc, #728]	@ (8004778 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 80044a0:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80044a4:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80044a8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80044ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80044ae:	4ab2      	ldr	r2, [pc, #712]	@ (8004778 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 80044b0:	430b      	orrs	r3, r1
 80044b2:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 80044b6:	e003      	b.n	80044c0 <HAL_RCCEx_PeriphCLKConfig+0x664>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044b8:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80044bc:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }
#endif /* SAI2*/

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 80044c0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80044c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044c8:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80044cc:	643b      	str	r3, [r7, #64]	@ 0x40
 80044ce:	2300      	movs	r3, #0
 80044d0:	647b      	str	r3, [r7, #68]	@ 0x44
 80044d2:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80044d6:	460b      	mov	r3, r1
 80044d8:	4313      	orrs	r3, r2
 80044da:	d030      	beq.n	800453e <HAL_RCCEx_PeriphCLKConfig+0x6e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 80044dc:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80044e0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80044e2:	2b05      	cmp	r3, #5
 80044e4:	d80f      	bhi.n	8004506 <HAL_RCCEx_PeriphCLKConfig+0x6aa>
 80044e6:	2b03      	cmp	r3, #3
 80044e8:	d211      	bcs.n	800450e <HAL_RCCEx_PeriphCLKConfig+0x6b2>
 80044ea:	2b01      	cmp	r3, #1
 80044ec:	d911      	bls.n	8004512 <HAL_RCCEx_PeriphCLKConfig+0x6b6>
 80044ee:	2b02      	cmp	r3, #2
 80044f0:	d109      	bne.n	8004506 <HAL_RCCEx_PeriphCLKConfig+0x6aa>
        /* ADCDAC clock source config set later after clock selection check */
        break;

      case RCC_ADCDACCLKSOURCE_PLL2R:
        /* PLL2 input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80044f2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80044f6:	3308      	adds	r3, #8
 80044f8:	4618      	mov	r0, r3
 80044fa:	f001 fce5 	bl	8005ec8 <RCCEx_PLL2_Config>
 80044fe:	4603      	mov	r3, r0
 8004500:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8004504:	e006      	b.n	8004514 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
        /* ADCDAC clock source configuration done later after clock selection check */
        break;


      default:
        ret = HAL_ERROR;
 8004506:	2301      	movs	r3, #1
 8004508:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 800450c:	e002      	b.n	8004514 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
        break;
 800450e:	bf00      	nop
 8004510:	e000      	b.n	8004514 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
        break;
 8004512:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004514:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8004518:	2b00      	cmp	r3, #0
 800451a:	d10c      	bne.n	8004536 <HAL_RCCEx_PeriphCLKConfig+0x6da>
    {
      /* Configure the ADCDAC interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 800451c:	4b96      	ldr	r3, [pc, #600]	@ (8004778 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 800451e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004522:	f023 0107 	bic.w	r1, r3, #7
 8004526:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800452a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800452c:	4a92      	ldr	r2, [pc, #584]	@ (8004778 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 800452e:	430b      	orrs	r3, r1
 8004530:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8004534:	e003      	b.n	800453e <HAL_RCCEx_PeriphCLKConfig+0x6e2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004536:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 800453a:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }

  }

  /*-------------------------- DAC low-power clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC_LP) == RCC_PERIPHCLK_DAC_LP)
 800453e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004542:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004546:	2100      	movs	r1, #0
 8004548:	63b9      	str	r1, [r7, #56]	@ 0x38
 800454a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800454e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004550:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8004554:	460b      	mov	r3, r1
 8004556:	4313      	orrs	r3, r2
 8004558:	d022      	beq.n	80045a0 <HAL_RCCEx_PeriphCLKConfig+0x744>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DACLPCLKSOURCE(pPeriphClkInit->DacLowPowerClockSelection));

    switch (pPeriphClkInit->DacLowPowerClockSelection)
 800455a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800455e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004560:	2b00      	cmp	r3, #0
 8004562:	d005      	beq.n	8004570 <HAL_RCCEx_PeriphCLKConfig+0x714>
 8004564:	2b08      	cmp	r3, #8
 8004566:	d005      	beq.n	8004574 <HAL_RCCEx_PeriphCLKConfig+0x718>
        /* LSI is used as clock source for DAC low-power clock */
        /* DAC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004568:	2301      	movs	r3, #1
 800456a:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 800456e:	e002      	b.n	8004576 <HAL_RCCEx_PeriphCLKConfig+0x71a>
        break;
 8004570:	bf00      	nop
 8004572:	e000      	b.n	8004576 <HAL_RCCEx_PeriphCLKConfig+0x71a>
        break;
 8004574:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004576:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 800457a:	2b00      	cmp	r3, #0
 800457c:	d10c      	bne.n	8004598 <HAL_RCCEx_PeriphCLKConfig+0x73c>
    {
      /* Configure the DAC low-power interface clock source */
      __HAL_RCC_DAC_LP_CONFIG(pPeriphClkInit->DacLowPowerClockSelection);
 800457e:	4b7e      	ldr	r3, [pc, #504]	@ (8004778 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8004580:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004584:	f023 0108 	bic.w	r1, r3, #8
 8004588:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800458c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800458e:	4a7a      	ldr	r2, [pc, #488]	@ (8004778 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8004590:	430b      	orrs	r3, r1
 8004592:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8004596:	e003      	b.n	80045a0 <HAL_RCCEx_PeriphCLKConfig+0x744>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004598:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 800459c:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }

  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80045a0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80045a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045a8:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80045ac:	633b      	str	r3, [r7, #48]	@ 0x30
 80045ae:	2300      	movs	r3, #0
 80045b0:	637b      	str	r3, [r7, #52]	@ 0x34
 80045b2:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 80045b6:	460b      	mov	r3, r1
 80045b8:	4313      	orrs	r3, r2
 80045ba:	f000 80b0 	beq.w	800471e <HAL_RCCEx_PeriphCLKConfig+0x8c2>

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 80045be:	4b6f      	ldr	r3, [pc, #444]	@ (800477c <HAL_RCCEx_PeriphCLKConfig+0x920>)
 80045c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045c2:	4a6e      	ldr	r2, [pc, #440]	@ (800477c <HAL_RCCEx_PeriphCLKConfig+0x920>)
 80045c4:	f043 0301 	orr.w	r3, r3, #1
 80045c8:	6253      	str	r3, [r2, #36]	@ 0x24

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80045ca:	f7fd fd67 	bl	800209c <HAL_GetTick>
 80045ce:	f8c7 009c 	str.w	r0, [r7, #156]	@ 0x9c

    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 80045d2:	e00b      	b.n	80045ec <HAL_RCCEx_PeriphCLKConfig+0x790>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80045d4:	f7fd fd62 	bl	800209c <HAL_GetTick>
 80045d8:	4602      	mov	r2, r0
 80045da:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80045de:	1ad3      	subs	r3, r2, r3
 80045e0:	2b02      	cmp	r3, #2
 80045e2:	d903      	bls.n	80045ec <HAL_RCCEx_PeriphCLKConfig+0x790>
      {
        ret = HAL_TIMEOUT;
 80045e4:	2303      	movs	r3, #3
 80045e6:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 80045ea:	e005      	b.n	80045f8 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 80045ec:	4b63      	ldr	r3, [pc, #396]	@ (800477c <HAL_RCCEx_PeriphCLKConfig+0x920>)
 80045ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045f0:	f003 0301 	and.w	r3, r3, #1
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d0ed      	beq.n	80045d4 <HAL_RCCEx_PeriphCLKConfig+0x778>
      }
    }

    if (ret == HAL_OK)
 80045f8:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	f040 808a 	bne.w	8004716 <HAL_RCCEx_PeriphCLKConfig+0x8ba>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004602:	4b5d      	ldr	r3, [pc, #372]	@ (8004778 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8004604:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004608:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800460c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 8004610:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8004614:	2b00      	cmp	r3, #0
 8004616:	d022      	beq.n	800465e <HAL_RCCEx_PeriphCLKConfig+0x802>
 8004618:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800461c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800461e:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 8004622:	429a      	cmp	r2, r3
 8004624:	d01b      	beq.n	800465e <HAL_RCCEx_PeriphCLKConfig+0x802>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004626:	4b54      	ldr	r3, [pc, #336]	@ (8004778 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8004628:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800462c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004630:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004634:	4b50      	ldr	r3, [pc, #320]	@ (8004778 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8004636:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800463a:	4a4f      	ldr	r2, [pc, #316]	@ (8004778 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 800463c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004640:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004644:	4b4c      	ldr	r3, [pc, #304]	@ (8004778 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8004646:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800464a:	4a4b      	ldr	r2, [pc, #300]	@ (8004778 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 800464c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004650:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004654:	4a48      	ldr	r2, [pc, #288]	@ (8004778 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8004656:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800465a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800465e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8004662:	f003 0301 	and.w	r3, r3, #1
 8004666:	2b00      	cmp	r3, #0
 8004668:	d019      	beq.n	800469e <HAL_RCCEx_PeriphCLKConfig+0x842>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800466a:	f7fd fd17 	bl	800209c <HAL_GetTick>
 800466e:	f8c7 009c 	str.w	r0, [r7, #156]	@ 0x9c

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004672:	e00d      	b.n	8004690 <HAL_RCCEx_PeriphCLKConfig+0x834>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004674:	f7fd fd12 	bl	800209c <HAL_GetTick>
 8004678:	4602      	mov	r2, r0
 800467a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800467e:	1ad3      	subs	r3, r2, r3
 8004680:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004684:	4293      	cmp	r3, r2
 8004686:	d903      	bls.n	8004690 <HAL_RCCEx_PeriphCLKConfig+0x834>
          {
            ret = HAL_TIMEOUT;
 8004688:	2303      	movs	r3, #3
 800468a:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
            break;
 800468e:	e006      	b.n	800469e <HAL_RCCEx_PeriphCLKConfig+0x842>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004690:	4b39      	ldr	r3, [pc, #228]	@ (8004778 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8004692:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004696:	f003 0302 	and.w	r3, r3, #2
 800469a:	2b00      	cmp	r3, #0
 800469c:	d0ea      	beq.n	8004674 <HAL_RCCEx_PeriphCLKConfig+0x818>
          }
        }
      }

      if (ret == HAL_OK)
 800469e:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d132      	bne.n	800470c <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 80046a6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80046aa:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80046ac:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80046b0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80046b4:	d10f      	bne.n	80046d6 <HAL_RCCEx_PeriphCLKConfig+0x87a>
 80046b6:	4b30      	ldr	r3, [pc, #192]	@ (8004778 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 80046b8:	69db      	ldr	r3, [r3, #28]
 80046ba:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 80046be:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80046c2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80046c4:	091b      	lsrs	r3, r3, #4
 80046c6:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80046ca:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80046ce:	4a2a      	ldr	r2, [pc, #168]	@ (8004778 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 80046d0:	430b      	orrs	r3, r1
 80046d2:	61d3      	str	r3, [r2, #28]
 80046d4:	e005      	b.n	80046e2 <HAL_RCCEx_PeriphCLKConfig+0x886>
 80046d6:	4b28      	ldr	r3, [pc, #160]	@ (8004778 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 80046d8:	69db      	ldr	r3, [r3, #28]
 80046da:	4a27      	ldr	r2, [pc, #156]	@ (8004778 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 80046dc:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80046e0:	61d3      	str	r3, [r2, #28]
 80046e2:	4b25      	ldr	r3, [pc, #148]	@ (8004778 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 80046e4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80046e8:	4a23      	ldr	r2, [pc, #140]	@ (8004778 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 80046ea:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80046ee:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80046f2:	4b21      	ldr	r3, [pc, #132]	@ (8004778 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 80046f4:	f8d3 10f0 	ldr.w	r1, [r3, #240]	@ 0xf0
 80046f8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80046fc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80046fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004702:	4a1d      	ldr	r2, [pc, #116]	@ (8004778 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8004704:	430b      	orrs	r3, r1
 8004706:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800470a:	e008      	b.n	800471e <HAL_RCCEx_PeriphCLKConfig+0x8c2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800470c:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8004710:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
 8004714:	e003      	b.n	800471e <HAL_RCCEx_PeriphCLKConfig+0x8c2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004716:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 800471a:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }

  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800471e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004722:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004726:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 800472a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800472c:	2300      	movs	r3, #0
 800472e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004730:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8004734:	460b      	mov	r3, r1
 8004736:	4313      	orrs	r3, r2
 8004738:	d038      	beq.n	80047ac <HAL_RCCEx_PeriphCLKConfig+0x950>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 800473a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800473e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004740:	2b30      	cmp	r3, #48	@ 0x30
 8004742:	d014      	beq.n	800476e <HAL_RCCEx_PeriphCLKConfig+0x912>
 8004744:	2b30      	cmp	r3, #48	@ 0x30
 8004746:	d80e      	bhi.n	8004766 <HAL_RCCEx_PeriphCLKConfig+0x90a>
 8004748:	2b20      	cmp	r3, #32
 800474a:	d012      	beq.n	8004772 <HAL_RCCEx_PeriphCLKConfig+0x916>
 800474c:	2b20      	cmp	r3, #32
 800474e:	d80a      	bhi.n	8004766 <HAL_RCCEx_PeriphCLKConfig+0x90a>
 8004750:	2b00      	cmp	r3, #0
 8004752:	d015      	beq.n	8004780 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8004754:	2b10      	cmp	r3, #16
 8004756:	d106      	bne.n	8004766 <HAL_RCCEx_PeriphCLKConfig+0x90a>
        /* RNG clock source configuration done later after clock selection check */
        break;

      case RCC_RNGCLKSOURCE_PLL1Q: /* PLL1 is used as clock source for RNG*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004758:	4b07      	ldr	r3, [pc, #28]	@ (8004778 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 800475a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800475c:	4a06      	ldr	r2, [pc, #24]	@ (8004778 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 800475e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004762:	6293      	str	r3, [r2, #40]	@ 0x28
        /* RNG clock source configuration done later after clock selection check */
        break;
 8004764:	e00d      	b.n	8004782 <HAL_RCCEx_PeriphCLKConfig+0x926>

        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004766:	2301      	movs	r3, #1
 8004768:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 800476c:	e009      	b.n	8004782 <HAL_RCCEx_PeriphCLKConfig+0x926>
        break;
 800476e:	bf00      	nop
 8004770:	e007      	b.n	8004782 <HAL_RCCEx_PeriphCLKConfig+0x926>
        break;
 8004772:	bf00      	nop
 8004774:	e005      	b.n	8004782 <HAL_RCCEx_PeriphCLKConfig+0x926>
 8004776:	bf00      	nop
 8004778:	44020c00 	.word	0x44020c00
 800477c:	44020800 	.word	0x44020800
        break;
 8004780:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004782:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8004786:	2b00      	cmp	r3, #0
 8004788:	d10c      	bne.n	80047a4 <HAL_RCCEx_PeriphCLKConfig+0x948>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 800478a:	4bb5      	ldr	r3, [pc, #724]	@ (8004a60 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 800478c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004790:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004794:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004798:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800479a:	49b1      	ldr	r1, [pc, #708]	@ (8004a60 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 800479c:	4313      	orrs	r3, r2
 800479e:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
 80047a2:	e003      	b.n	80047ac <HAL_RCCEx_PeriphCLKConfig+0x950>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047a4:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80047a8:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2

  }
#endif /* SDMMC2 */

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 80047ac:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80047b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047b4:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 80047b8:	623b      	str	r3, [r7, #32]
 80047ba:	2300      	movs	r3, #0
 80047bc:	627b      	str	r3, [r7, #36]	@ 0x24
 80047be:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80047c2:	460b      	mov	r3, r1
 80047c4:	4313      	orrs	r3, r2
 80047c6:	d03c      	beq.n	8004842 <HAL_RCCEx_PeriphCLKConfig+0x9e6>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    switch (pPeriphClkInit->Spi1ClockSelection)
 80047c8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80047cc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80047ce:	2b04      	cmp	r3, #4
 80047d0:	d81d      	bhi.n	800480e <HAL_RCCEx_PeriphCLKConfig+0x9b2>
 80047d2:	a201      	add	r2, pc, #4	@ (adr r2, 80047d8 <HAL_RCCEx_PeriphCLKConfig+0x97c>)
 80047d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047d8:	080047ed 	.word	0x080047ed
 80047dc:	080047fb 	.word	0x080047fb
 80047e0:	0800480f 	.word	0x0800480f
 80047e4:	08004817 	.word	0x08004817
 80047e8:	08004817 	.word	0x08004817
    {
      case RCC_SPI1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI1 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80047ec:	4b9c      	ldr	r3, [pc, #624]	@ (8004a60 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 80047ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047f0:	4a9b      	ldr	r2, [pc, #620]	@ (8004a60 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 80047f2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80047f6:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 80047f8:	e00e      	b.n	8004818 <HAL_RCCEx_PeriphCLKConfig+0x9bc>

      case RCC_SPI1CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80047fa:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80047fe:	3308      	adds	r3, #8
 8004800:	4618      	mov	r0, r3
 8004802:	f001 fb61 	bl	8005ec8 <RCCEx_PLL2_Config>
 8004806:	4603      	mov	r3, r0
 8004808:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 800480c:	e004      	b.n	8004818 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1 clock */
        /* SPI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800480e:	2301      	movs	r3, #1
 8004810:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8004814:	e000      	b.n	8004818 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
        break;
 8004816:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004818:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 800481c:	2b00      	cmp	r3, #0
 800481e:	d10c      	bne.n	800483a <HAL_RCCEx_PeriphCLKConfig+0x9de>
    {
      /* Configure the SPI1 clock source */
      __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 8004820:	4b8f      	ldr	r3, [pc, #572]	@ (8004a60 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8004822:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004826:	f023 0207 	bic.w	r2, r3, #7
 800482a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800482e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004830:	498b      	ldr	r1, [pc, #556]	@ (8004a60 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8004832:	4313      	orrs	r3, r2
 8004834:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8004838:	e003      	b.n	8004842 <HAL_RCCEx_PeriphCLKConfig+0x9e6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800483a:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 800483e:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }

  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 8004842:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004846:	e9d3 2300 	ldrd	r2, r3, [r3]
 800484a:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 800484e:	61bb      	str	r3, [r7, #24]
 8004850:	2300      	movs	r3, #0
 8004852:	61fb      	str	r3, [r7, #28]
 8004854:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8004858:	460b      	mov	r3, r1
 800485a:	4313      	orrs	r3, r2
 800485c:	d03c      	beq.n	80048d8 <HAL_RCCEx_PeriphCLKConfig+0xa7c>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    switch (pPeriphClkInit->Spi2ClockSelection)
 800485e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004862:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004864:	2b20      	cmp	r3, #32
 8004866:	d01f      	beq.n	80048a8 <HAL_RCCEx_PeriphCLKConfig+0xa4c>
 8004868:	2b20      	cmp	r3, #32
 800486a:	d819      	bhi.n	80048a0 <HAL_RCCEx_PeriphCLKConfig+0xa44>
 800486c:	2b18      	cmp	r3, #24
 800486e:	d01d      	beq.n	80048ac <HAL_RCCEx_PeriphCLKConfig+0xa50>
 8004870:	2b18      	cmp	r3, #24
 8004872:	d815      	bhi.n	80048a0 <HAL_RCCEx_PeriphCLKConfig+0xa44>
 8004874:	2b00      	cmp	r3, #0
 8004876:	d002      	beq.n	800487e <HAL_RCCEx_PeriphCLKConfig+0xa22>
 8004878:	2b08      	cmp	r3, #8
 800487a:	d007      	beq.n	800488c <HAL_RCCEx_PeriphCLKConfig+0xa30>
 800487c:	e010      	b.n	80048a0 <HAL_RCCEx_PeriphCLKConfig+0xa44>
    {
      case RCC_SPI2CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI2 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800487e:	4b78      	ldr	r3, [pc, #480]	@ (8004a60 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8004880:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004882:	4a77      	ldr	r2, [pc, #476]	@ (8004a60 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8004884:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004888:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 800488a:	e010      	b.n	80048ae <HAL_RCCEx_PeriphCLKConfig+0xa52>

      case RCC_SPI2CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800488c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004890:	3308      	adds	r3, #8
 8004892:	4618      	mov	r0, r3
 8004894:	f001 fb18 	bl	8005ec8 <RCCEx_PLL2_Config>
 8004898:	4603      	mov	r3, r0
 800489a:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 800489e:	e006      	b.n	80048ae <HAL_RCCEx_PeriphCLKConfig+0xa52>
        /* HSI, HSE, or CSI oscillator is used as source of SPI2 clock */
        /* SPI2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80048a0:	2301      	movs	r3, #1
 80048a2:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 80048a6:	e002      	b.n	80048ae <HAL_RCCEx_PeriphCLKConfig+0xa52>
        break;
 80048a8:	bf00      	nop
 80048aa:	e000      	b.n	80048ae <HAL_RCCEx_PeriphCLKConfig+0xa52>
        break;
 80048ac:	bf00      	nop
    }

    if (ret == HAL_OK)
 80048ae:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d10c      	bne.n	80048d0 <HAL_RCCEx_PeriphCLKConfig+0xa74>
    {
      /* Configure the SPI2 clock source */
      __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 80048b6:	4b6a      	ldr	r3, [pc, #424]	@ (8004a60 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 80048b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80048bc:	f023 0238 	bic.w	r2, r3, #56	@ 0x38
 80048c0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80048c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80048c6:	4966      	ldr	r1, [pc, #408]	@ (8004a60 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 80048c8:	4313      	orrs	r3, r2
 80048ca:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 80048ce:	e003      	b.n	80048d8 <HAL_RCCEx_PeriphCLKConfig+0xa7c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048d0:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80048d4:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }

  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 80048d8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80048dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048e0:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 80048e4:	613b      	str	r3, [r7, #16]
 80048e6:	2300      	movs	r3, #0
 80048e8:	617b      	str	r3, [r7, #20]
 80048ea:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80048ee:	460b      	mov	r3, r1
 80048f0:	4313      	orrs	r3, r2
 80048f2:	d03e      	beq.n	8004972 <HAL_RCCEx_PeriphCLKConfig+0xb16>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    switch (pPeriphClkInit->Spi3ClockSelection)
 80048f4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80048f8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80048fa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80048fe:	d020      	beq.n	8004942 <HAL_RCCEx_PeriphCLKConfig+0xae6>
 8004900:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004904:	d819      	bhi.n	800493a <HAL_RCCEx_PeriphCLKConfig+0xade>
 8004906:	2bc0      	cmp	r3, #192	@ 0xc0
 8004908:	d01d      	beq.n	8004946 <HAL_RCCEx_PeriphCLKConfig+0xaea>
 800490a:	2bc0      	cmp	r3, #192	@ 0xc0
 800490c:	d815      	bhi.n	800493a <HAL_RCCEx_PeriphCLKConfig+0xade>
 800490e:	2b00      	cmp	r3, #0
 8004910:	d002      	beq.n	8004918 <HAL_RCCEx_PeriphCLKConfig+0xabc>
 8004912:	2b40      	cmp	r3, #64	@ 0x40
 8004914:	d007      	beq.n	8004926 <HAL_RCCEx_PeriphCLKConfig+0xaca>
 8004916:	e010      	b.n	800493a <HAL_RCCEx_PeriphCLKConfig+0xade>
    {
      case RCC_SPI3CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI3 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004918:	4b51      	ldr	r3, [pc, #324]	@ (8004a60 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 800491a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800491c:	4a50      	ldr	r2, [pc, #320]	@ (8004a60 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 800491e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004922:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 8004924:	e010      	b.n	8004948 <HAL_RCCEx_PeriphCLKConfig+0xaec>

      case RCC_SPI3CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI3*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004926:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800492a:	3308      	adds	r3, #8
 800492c:	4618      	mov	r0, r3
 800492e:	f001 facb 	bl	8005ec8 <RCCEx_PLL2_Config>
 8004932:	4603      	mov	r3, r0
 8004934:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 8004938:	e006      	b.n	8004948 <HAL_RCCEx_PeriphCLKConfig+0xaec>
        /* HSI, HSE, or CSI oscillator is used as source of SPI3 clock */
        /* SPI3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800493a:	2301      	movs	r3, #1
 800493c:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8004940:	e002      	b.n	8004948 <HAL_RCCEx_PeriphCLKConfig+0xaec>
        break;
 8004942:	bf00      	nop
 8004944:	e000      	b.n	8004948 <HAL_RCCEx_PeriphCLKConfig+0xaec>
        break;
 8004946:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004948:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 800494c:	2b00      	cmp	r3, #0
 800494e:	d10c      	bne.n	800496a <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    {
      /* Configure the SPI3 clock source */
      __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 8004950:	4b43      	ldr	r3, [pc, #268]	@ (8004a60 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8004952:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004956:	f423 72e0 	bic.w	r2, r3, #448	@ 0x1c0
 800495a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800495e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004960:	493f      	ldr	r1, [pc, #252]	@ (8004a60 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8004962:	4313      	orrs	r3, r2
 8004964:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8004968:	e003      	b.n	8004972 <HAL_RCCEx_PeriphCLKConfig+0xb16>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800496a:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 800496e:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }
#endif /* OCTOSPI1*/

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004972:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004976:	e9d3 2300 	ldrd	r2, r3, [r3]
 800497a:	2100      	movs	r1, #0
 800497c:	60b9      	str	r1, [r7, #8]
 800497e:	f003 0304 	and.w	r3, r3, #4
 8004982:	60fb      	str	r3, [r7, #12]
 8004984:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004988:	460b      	mov	r3, r1
 800498a:	4313      	orrs	r3, r2
 800498c:	d038      	beq.n	8004a00 <HAL_RCCEx_PeriphCLKConfig+0xba4>
  {
    assert_param(IS_RCC_FDCANCLK(pPeriphClkInit->FdcanClockSelection));

    switch (pPeriphClkInit->FdcanClockSelection)
 800498e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004992:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004994:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004998:	d00e      	beq.n	80049b8 <HAL_RCCEx_PeriphCLKConfig+0xb5c>
 800499a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800499e:	d815      	bhi.n	80049cc <HAL_RCCEx_PeriphCLKConfig+0xb70>
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d017      	beq.n	80049d4 <HAL_RCCEx_PeriphCLKConfig+0xb78>
 80049a4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80049a8:	d110      	bne.n	80049cc <HAL_RCCEx_PeriphCLKConfig+0xb70>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for FDCAN kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80049aa:	4b2d      	ldr	r3, [pc, #180]	@ (8004a60 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 80049ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049ae:	4a2c      	ldr	r2, [pc, #176]	@ (8004a60 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 80049b0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80049b4:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 80049b6:	e00e      	b.n	80049d6 <HAL_RCCEx_PeriphCLKConfig+0xb7a>

      case RCC_FDCANCLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for FDCAN kernel clock*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80049b8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80049bc:	3308      	adds	r3, #8
 80049be:	4618      	mov	r0, r3
 80049c0:	f001 fa82 	bl	8005ec8 <RCCEx_PLL2_Config>
 80049c4:	4603      	mov	r3, r0
 80049c6:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 80049ca:	e004      	b.n	80049d6 <HAL_RCCEx_PeriphCLKConfig+0xb7a>

      default:
        ret = HAL_ERROR;
 80049cc:	2301      	movs	r3, #1
 80049ce:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 80049d2:	e000      	b.n	80049d6 <HAL_RCCEx_PeriphCLKConfig+0xb7a>
        break;
 80049d4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80049d6:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d10c      	bne.n	80049f8 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(pPeriphClkInit->FdcanClockSelection);
 80049de:	4b20      	ldr	r3, [pc, #128]	@ (8004a60 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 80049e0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80049e4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80049e8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80049ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80049ee:	491c      	ldr	r1, [pc, #112]	@ (8004a60 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 80049f0:	4313      	orrs	r3, r2
 80049f2:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
 80049f6:	e003      	b.n	8004a00 <HAL_RCCEx_PeriphCLKConfig+0xba4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049f8:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80049fc:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }

#if defined(USB_DRD_FS)
  /*------------------------------ USB Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004a00:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004a04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a08:	2100      	movs	r1, #0
 8004a0a:	6039      	str	r1, [r7, #0]
 8004a0c:	f003 0310 	and.w	r3, r3, #16
 8004a10:	607b      	str	r3, [r7, #4]
 8004a12:	e9d7 1200 	ldrd	r1, r2, [r7]
 8004a16:	460b      	mov	r3, r1
 8004a18:	4313      	orrs	r3, r2
 8004a1a:	d039      	beq.n	8004a90 <HAL_RCCEx_PeriphCLKConfig+0xc34>
  {

    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(pPeriphClkInit->UsbClockSelection));

    switch (pPeriphClkInit->UsbClockSelection)
 8004a1c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004a20:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004a22:	2b30      	cmp	r3, #48	@ 0x30
 8004a24:	d01e      	beq.n	8004a64 <HAL_RCCEx_PeriphCLKConfig+0xc08>
 8004a26:	2b30      	cmp	r3, #48	@ 0x30
 8004a28:	d815      	bhi.n	8004a56 <HAL_RCCEx_PeriphCLKConfig+0xbfa>
 8004a2a:	2b10      	cmp	r3, #16
 8004a2c:	d002      	beq.n	8004a34 <HAL_RCCEx_PeriphCLKConfig+0xbd8>
 8004a2e:	2b20      	cmp	r3, #32
 8004a30:	d007      	beq.n	8004a42 <HAL_RCCEx_PeriphCLKConfig+0xbe6>
 8004a32:	e010      	b.n	8004a56 <HAL_RCCEx_PeriphCLKConfig+0xbfa>
    {
      case RCC_USBCLKSOURCE_PLL1Q:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004a34:	4b0a      	ldr	r3, [pc, #40]	@ (8004a60 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8004a36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a38:	4a09      	ldr	r2, [pc, #36]	@ (8004a60 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8004a3a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004a3e:	6293      	str	r3, [r2, #40]	@ 0x28

        /* USB clock source configuration done later after clock selection check */
        break;
 8004a40:	e011      	b.n	8004a66 <HAL_RCCEx_PeriphCLKConfig+0xc0a>
        /* PLL3Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
#else
      case RCC_USBCLKSOURCE_PLL2Q: /* PLL2 is used as clock source for USB*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004a42:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004a46:	3308      	adds	r3, #8
 8004a48:	4618      	mov	r0, r3
 8004a4a:	f001 fa3d 	bl	8005ec8 <RCCEx_PLL2_Config>
 8004a4e:	4603      	mov	r3, r0
 8004a50:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
#endif /* RCC_USBCLKSOURCE_PLL3Q */
        /* USB clock source configuration done later after clock selection check */
        break;
 8004a54:	e007      	b.n	8004a66 <HAL_RCCEx_PeriphCLKConfig+0xc0a>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004a56:	2301      	movs	r3, #1
 8004a58:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8004a5c:	e003      	b.n	8004a66 <HAL_RCCEx_PeriphCLKConfig+0xc0a>
 8004a5e:	bf00      	nop
 8004a60:	44020c00 	.word	0x44020c00
        break;
 8004a64:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004a66:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d10c      	bne.n	8004a88 <HAL_RCCEx_PeriphCLKConfig+0xc2c>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(pPeriphClkInit->UsbClockSelection);
 8004a6e:	4b0c      	ldr	r3, [pc, #48]	@ (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8004a70:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004a74:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004a78:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004a7c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004a7e:	4908      	ldr	r1, [pc, #32]	@ (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8004a80:	4313      	orrs	r3, r2
 8004a82:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 8004a86:	e003      	b.n	8004a90 <HAL_RCCEx_PeriphCLKConfig+0xc34>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a88:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8004a8c:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    __HAL_RCC_CEC_CONFIG(pPeriphClkInit->CecClockSelection);

  }
#endif /* CEC */

  return status;
 8004a90:	f897 30a2 	ldrb.w	r3, [r7, #162]	@ 0xa2
}
 8004a94:	4618      	mov	r0, r3
 8004a96:	37a8      	adds	r7, #168	@ 0xa8
 8004a98:	46bd      	mov	sp, r7
 8004a9a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004a9e:	bf00      	nop
 8004aa0:	44020c00 	.word	0x44020c00

08004aa4 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL1_Clocks pointer to PLL1_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *pPLL1_Clocks)
{
 8004aa4:	b480      	push	{r7}
 8004aa6:	b08b      	sub	sp, #44	@ 0x2c
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	6078      	str	r0, [r7, #4]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL1M) * PLL1N
  PLL1xCLK = PLL1_VCO / PLL1x
  */

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 8004aac:	4bad      	ldr	r3, [pc, #692]	@ (8004d64 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8004aae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ab0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ab4:	623b      	str	r3, [r7, #32]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8004ab6:	4bab      	ldr	r3, [pc, #684]	@ (8004d64 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8004ab8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004aba:	f003 0303 	and.w	r3, r3, #3
 8004abe:	61fb      	str	r3, [r7, #28]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 8004ac0:	4ba8      	ldr	r3, [pc, #672]	@ (8004d64 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8004ac2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ac4:	0a1b      	lsrs	r3, r3, #8
 8004ac6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004aca:	61bb      	str	r3, [r7, #24]
  pll1fracen = RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN;
 8004acc:	4ba5      	ldr	r3, [pc, #660]	@ (8004d64 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8004ace:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ad0:	f003 0310 	and.w	r3, r3, #16
 8004ad4:	617b      	str	r3, [r7, #20]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8004ad6:	4ba3      	ldr	r3, [pc, #652]	@ (8004d64 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8004ad8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ada:	08db      	lsrs	r3, r3, #3
 8004adc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004ae0:	697a      	ldr	r2, [r7, #20]
 8004ae2:	fb02 f303 	mul.w	r3, r2, r3
 8004ae6:	ee07 3a90 	vmov	s15, r3
 8004aea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004aee:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  if (pll1m != 0U)
 8004af2:	69bb      	ldr	r3, [r7, #24]
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	f000 8126 	beq.w	8004d46 <HAL_RCCEx_GetPLL1ClockFreq+0x2a2>
  {
    switch (pll1source)
 8004afa:	69fb      	ldr	r3, [r7, #28]
 8004afc:	2b03      	cmp	r3, #3
 8004afe:	d053      	beq.n	8004ba8 <HAL_RCCEx_GetPLL1ClockFreq+0x104>
 8004b00:	69fb      	ldr	r3, [r7, #28]
 8004b02:	2b03      	cmp	r3, #3
 8004b04:	d86f      	bhi.n	8004be6 <HAL_RCCEx_GetPLL1ClockFreq+0x142>
 8004b06:	69fb      	ldr	r3, [r7, #28]
 8004b08:	2b01      	cmp	r3, #1
 8004b0a:	d003      	beq.n	8004b14 <HAL_RCCEx_GetPLL1ClockFreq+0x70>
 8004b0c:	69fb      	ldr	r3, [r7, #28]
 8004b0e:	2b02      	cmp	r3, #2
 8004b10:	d02b      	beq.n	8004b6a <HAL_RCCEx_GetPLL1ClockFreq+0xc6>
 8004b12:	e068      	b.n	8004be6 <HAL_RCCEx_GetPLL1ClockFreq+0x142>
    {

      case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004b14:	4b93      	ldr	r3, [pc, #588]	@ (8004d64 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	08db      	lsrs	r3, r3, #3
 8004b1a:	f003 0303 	and.w	r3, r3, #3
 8004b1e:	4a92      	ldr	r2, [pc, #584]	@ (8004d68 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8004b20:	fa22 f303 	lsr.w	r3, r2, r3
 8004b24:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	ee07 3a90 	vmov	s15, r3
 8004b2c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b30:	69bb      	ldr	r3, [r7, #24]
 8004b32:	ee07 3a90 	vmov	s15, r3
 8004b36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b3e:	6a3b      	ldr	r3, [r7, #32]
 8004b40:	ee07 3a90 	vmov	s15, r3
 8004b44:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b48:	ed97 6a04 	vldr	s12, [r7, #16]
 8004b4c:	eddf 5a87 	vldr	s11, [pc, #540]	@ 8004d6c <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 8004b50:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b54:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b58:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004b5c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b60:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b64:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8004b68:	e068      	b.n	8004c3c <HAL_RCCEx_GetPLL1ClockFreq+0x198>

      case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8004b6a:	69bb      	ldr	r3, [r7, #24]
 8004b6c:	ee07 3a90 	vmov	s15, r3
 8004b70:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b74:	eddf 6a7e 	vldr	s13, [pc, #504]	@ 8004d70 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 8004b78:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b7c:	6a3b      	ldr	r3, [r7, #32]
 8004b7e:	ee07 3a90 	vmov	s15, r3
 8004b82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b86:	ed97 6a04 	vldr	s12, [r7, #16]
 8004b8a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8004d6c <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 8004b8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b96:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004b9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ba2:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8004ba6:	e049      	b.n	8004c3c <HAL_RCCEx_GetPLL1ClockFreq+0x198>

      case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8004ba8:	69bb      	ldr	r3, [r7, #24]
 8004baa:	ee07 3a90 	vmov	s15, r3
 8004bae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004bb2:	eddf 6a70 	vldr	s13, [pc, #448]	@ 8004d74 <HAL_RCCEx_GetPLL1ClockFreq+0x2d0>
 8004bb6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004bba:	6a3b      	ldr	r3, [r7, #32]
 8004bbc:	ee07 3a90 	vmov	s15, r3
 8004bc0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004bc4:	ed97 6a04 	vldr	s12, [r7, #16]
 8004bc8:	eddf 5a68 	vldr	s11, [pc, #416]	@ 8004d6c <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 8004bcc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004bd0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004bd4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004bd8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004bdc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004be0:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8004be4:	e02a      	b.n	8004c3c <HAL_RCCEx_GetPLL1ClockFreq+0x198>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004be6:	4b5f      	ldr	r3, [pc, #380]	@ (8004d64 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	08db      	lsrs	r3, r3, #3
 8004bec:	f003 0303 	and.w	r3, r3, #3
 8004bf0:	4a5d      	ldr	r2, [pc, #372]	@ (8004d68 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8004bf2:	fa22 f303 	lsr.w	r3, r2, r3
 8004bf6:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	ee07 3a90 	vmov	s15, r3
 8004bfe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c02:	69bb      	ldr	r3, [r7, #24]
 8004c04:	ee07 3a90 	vmov	s15, r3
 8004c08:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c0c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004c10:	6a3b      	ldr	r3, [r7, #32]
 8004c12:	ee07 3a90 	vmov	s15, r3
 8004c16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c1a:	ed97 6a04 	vldr	s12, [r7, #16]
 8004c1e:	eddf 5a53 	vldr	s11, [pc, #332]	@ 8004d6c <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 8004c22:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004c26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004c2a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004c2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004c32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c36:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8004c3a:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004c3c:	4b49      	ldr	r3, [pc, #292]	@ (8004d64 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004c44:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004c48:	d121      	bne.n	8004c8e <HAL_RCCEx_GetPLL1ClockFreq+0x1ea>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 8004c4a:	4b46      	ldr	r3, [pc, #280]	@ (8004d64 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8004c4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c4e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d017      	beq.n	8004c86 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      {
        pPLL1_Clocks->PLL1_P_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8004c56:	4b43      	ldr	r3, [pc, #268]	@ (8004d64 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8004c58:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004c5a:	0a5b      	lsrs	r3, r3, #9
 8004c5c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004c60:	ee07 3a90 	vmov	s15, r3
 8004c64:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1P) >> \
                                                                                  RCC_PLL1DIVR_PLL1P_Pos) + \
 8004c68:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004c6c:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 8004c70:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8004c74:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004c78:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004c7c:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_P_Frequency = \
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	601a      	str	r2, [r3, #0]
 8004c84:	e006      	b.n	8004c94 <HAL_RCCEx_GetPLL1ClockFreq+0x1f0>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_P_Frequency = 0U;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	2200      	movs	r2, #0
 8004c8a:	601a      	str	r2, [r3, #0]
 8004c8c:	e002      	b.n	8004c94 <HAL_RCCEx_GetPLL1ClockFreq+0x1f0>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_P_Frequency = 0U;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	2200      	movs	r2, #0
 8004c92:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004c94:	4b33      	ldr	r3, [pc, #204]	@ (8004d64 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004c9c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004ca0:	d121      	bne.n	8004ce6 <HAL_RCCEx_GetPLL1ClockFreq+0x242>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 8004ca2:	4b30      	ldr	r3, [pc, #192]	@ (8004d64 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8004ca4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ca6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d017      	beq.n	8004cde <HAL_RCCEx_GetPLL1ClockFreq+0x23a>
      {
        pPLL1_Clocks->PLL1_Q_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8004cae:	4b2d      	ldr	r3, [pc, #180]	@ (8004d64 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8004cb0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004cb2:	0c1b      	lsrs	r3, r3, #16
 8004cb4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004cb8:	ee07 3a90 	vmov	s15, r3
 8004cbc:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1Q) >> \
                                                                                  RCC_PLL1DIVR_PLL1Q_Pos) + \
 8004cc0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004cc4:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 8004cc8:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8004ccc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004cd0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004cd4:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_Q_Frequency = \
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	605a      	str	r2, [r3, #4]
 8004cdc:	e006      	b.n	8004cec <HAL_RCCEx_GetPLL1ClockFreq+0x248>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	2200      	movs	r2, #0
 8004ce2:	605a      	str	r2, [r3, #4]
 8004ce4:	e002      	b.n	8004cec <HAL_RCCEx_GetPLL1ClockFreq+0x248>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	2200      	movs	r2, #0
 8004cea:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004cec:	4b1d      	ldr	r3, [pc, #116]	@ (8004d64 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004cf4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004cf8:	d121      	bne.n	8004d3e <HAL_RCCEx_GetPLL1ClockFreq+0x29a>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 8004cfa:	4b1a      	ldr	r3, [pc, #104]	@ (8004d64 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8004cfc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cfe:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d017      	beq.n	8004d36 <HAL_RCCEx_GetPLL1ClockFreq+0x292>
      {
        pPLL1_Clocks->PLL1_R_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8004d06:	4b17      	ldr	r3, [pc, #92]	@ (8004d64 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8004d08:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004d0a:	0e1b      	lsrs	r3, r3, #24
 8004d0c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004d10:	ee07 3a90 	vmov	s15, r3
 8004d14:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1R) >> \
                                                                                  RCC_PLL1DIVR_PLL1R_Pos) + \
 8004d18:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004d1c:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 8004d20:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8004d24:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004d28:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004d2c:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_R_Frequency = \
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	609a      	str	r2, [r3, #8]
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8004d34:	e010      	b.n	8004d58 <HAL_RCCEx_GetPLL1ClockFreq+0x2b4>
        pPLL1_Clocks->PLL1_R_Frequency = 0U;
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	2200      	movs	r2, #0
 8004d3a:	609a      	str	r2, [r3, #8]
}
 8004d3c:	e00c      	b.n	8004d58 <HAL_RCCEx_GetPLL1ClockFreq+0x2b4>
      pPLL1_Clocks->PLL1_R_Frequency = 0U;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	2200      	movs	r2, #0
 8004d42:	609a      	str	r2, [r3, #8]
}
 8004d44:	e008      	b.n	8004d58 <HAL_RCCEx_GetPLL1ClockFreq+0x2b4>
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	2200      	movs	r2, #0
 8004d4a:	601a      	str	r2, [r3, #0]
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	2200      	movs	r2, #0
 8004d50:	605a      	str	r2, [r3, #4]
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	2200      	movs	r2, #0
 8004d56:	609a      	str	r2, [r3, #8]
}
 8004d58:	bf00      	nop
 8004d5a:	372c      	adds	r7, #44	@ 0x2c
 8004d5c:	46bd      	mov	sp, r7
 8004d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d62:	4770      	bx	lr
 8004d64:	44020c00 	.word	0x44020c00
 8004d68:	03d09000 	.word	0x03d09000
 8004d6c:	46000000 	.word	0x46000000
 8004d70:	4a742400 	.word	0x4a742400
 8004d74:	4bbebc20 	.word	0x4bbebc20

08004d78 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL2_Clocks pointer to PLL2_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *pPLL2_Clocks)
{
 8004d78:	b480      	push	{r7}
 8004d7a:	b08b      	sub	sp, #44	@ 0x2c
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	6078      	str	r0, [r7, #4]
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
  PLL2xCLK = PLL2_VCO / PLL2x
  */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 8004d80:	4bad      	ldr	r3, [pc, #692]	@ (8005038 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8004d82:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d84:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d88:	623b      	str	r3, [r7, #32]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 8004d8a:	4bab      	ldr	r3, [pc, #684]	@ (8005038 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8004d8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d8e:	f003 0303 	and.w	r3, r3, #3
 8004d92:	61fb      	str	r3, [r7, #28]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos);
 8004d94:	4ba8      	ldr	r3, [pc, #672]	@ (8005038 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8004d96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d98:	0a1b      	lsrs	r3, r3, #8
 8004d9a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004d9e:	61bb      	str	r3, [r7, #24]
  pll2fracen = RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN;
 8004da0:	4ba5      	ldr	r3, [pc, #660]	@ (8005038 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8004da2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004da4:	f003 0310 	and.w	r3, r3, #16
 8004da8:	617b      	str	r3, [r7, #20]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 8004daa:	4ba3      	ldr	r3, [pc, #652]	@ (8005038 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8004dac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004dae:	08db      	lsrs	r3, r3, #3
 8004db0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004db4:	697a      	ldr	r2, [r7, #20]
 8004db6:	fb02 f303 	mul.w	r3, r2, r3
 8004dba:	ee07 3a90 	vmov	s15, r3
 8004dbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004dc2:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  if (pll2m != 0U)
 8004dc6:	69bb      	ldr	r3, [r7, #24]
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	f000 8126 	beq.w	800501a <HAL_RCCEx_GetPLL2ClockFreq+0x2a2>
  {
    switch (pll2source)
 8004dce:	69fb      	ldr	r3, [r7, #28]
 8004dd0:	2b03      	cmp	r3, #3
 8004dd2:	d053      	beq.n	8004e7c <HAL_RCCEx_GetPLL2ClockFreq+0x104>
 8004dd4:	69fb      	ldr	r3, [r7, #28]
 8004dd6:	2b03      	cmp	r3, #3
 8004dd8:	d86f      	bhi.n	8004eba <HAL_RCCEx_GetPLL2ClockFreq+0x142>
 8004dda:	69fb      	ldr	r3, [r7, #28]
 8004ddc:	2b01      	cmp	r3, #1
 8004dde:	d003      	beq.n	8004de8 <HAL_RCCEx_GetPLL2ClockFreq+0x70>
 8004de0:	69fb      	ldr	r3, [r7, #28]
 8004de2:	2b02      	cmp	r3, #2
 8004de4:	d02b      	beq.n	8004e3e <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
 8004de6:	e068      	b.n	8004eba <HAL_RCCEx_GetPLL2ClockFreq+0x142>
    {
      case RCC_PLL2_SOURCE_HSI:  /* HSI used as PLL clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004de8:	4b93      	ldr	r3, [pc, #588]	@ (8005038 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	08db      	lsrs	r3, r3, #3
 8004dee:	f003 0303 	and.w	r3, r3, #3
 8004df2:	4a92      	ldr	r2, [pc, #584]	@ (800503c <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8004df4:	fa22 f303 	lsr.w	r3, r2, r3
 8004df8:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	ee07 3a90 	vmov	s15, r3
 8004e00:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e04:	69bb      	ldr	r3, [r7, #24]
 8004e06:	ee07 3a90 	vmov	s15, r3
 8004e0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004e12:	6a3b      	ldr	r3, [r7, #32]
 8004e14:	ee07 3a90 	vmov	s15, r3
 8004e18:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e1c:	ed97 6a04 	vldr	s12, [r7, #16]
 8004e20:	eddf 5a87 	vldr	s11, [pc, #540]	@ 8005040 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 8004e24:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004e28:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004e2c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004e30:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004e34:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e38:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8004e3c:	e068      	b.n	8004f10 <HAL_RCCEx_GetPLL2ClockFreq+0x198>

      case RCC_PLL2_SOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8004e3e:	69bb      	ldr	r3, [r7, #24]
 8004e40:	ee07 3a90 	vmov	s15, r3
 8004e44:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e48:	eddf 6a7e 	vldr	s13, [pc, #504]	@ 8005044 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 8004e4c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004e50:	6a3b      	ldr	r3, [r7, #32]
 8004e52:	ee07 3a90 	vmov	s15, r3
 8004e56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e5a:	ed97 6a04 	vldr	s12, [r7, #16]
 8004e5e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8005040 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 8004e62:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004e66:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004e6a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004e6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004e72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e76:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8004e7a:	e049      	b.n	8004f10 <HAL_RCCEx_GetPLL2ClockFreq+0x198>

      case RCC_PLL2_SOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8004e7c:	69bb      	ldr	r3, [r7, #24]
 8004e7e:	ee07 3a90 	vmov	s15, r3
 8004e82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e86:	eddf 6a70 	vldr	s13, [pc, #448]	@ 8005048 <HAL_RCCEx_GetPLL2ClockFreq+0x2d0>
 8004e8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004e8e:	6a3b      	ldr	r3, [r7, #32]
 8004e90:	ee07 3a90 	vmov	s15, r3
 8004e94:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e98:	ed97 6a04 	vldr	s12, [r7, #16]
 8004e9c:	eddf 5a68 	vldr	s11, [pc, #416]	@ 8005040 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 8004ea0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004ea4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004ea8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004eac:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004eb0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004eb4:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8004eb8:	e02a      	b.n	8004f10 <HAL_RCCEx_GetPLL2ClockFreq+0x198>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004eba:	4b5f      	ldr	r3, [pc, #380]	@ (8005038 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	08db      	lsrs	r3, r3, #3
 8004ec0:	f003 0303 	and.w	r3, r3, #3
 8004ec4:	4a5d      	ldr	r2, [pc, #372]	@ (800503c <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8004ec6:	fa22 f303 	lsr.w	r3, r2, r3
 8004eca:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	ee07 3a90 	vmov	s15, r3
 8004ed2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ed6:	69bb      	ldr	r3, [r7, #24]
 8004ed8:	ee07 3a90 	vmov	s15, r3
 8004edc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ee0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004ee4:	6a3b      	ldr	r3, [r7, #32]
 8004ee6:	ee07 3a90 	vmov	s15, r3
 8004eea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004eee:	ed97 6a04 	vldr	s12, [r7, #16]
 8004ef2:	eddf 5a53 	vldr	s11, [pc, #332]	@ 8005040 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 8004ef6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004efa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004efe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004f02:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004f06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f0a:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8004f0e:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004f10:	4b49      	ldr	r3, [pc, #292]	@ (8005038 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004f18:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004f1c:	d121      	bne.n	8004f62 <HAL_RCCEx_GetPLL2ClockFreq+0x1ea>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 8004f1e:	4b46      	ldr	r3, [pc, #280]	@ (8005038 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8004f20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f22:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d017      	beq.n	8004f5a <HAL_RCCEx_GetPLL2ClockFreq+0x1e2>
      {
        pPLL2_Clocks->PLL2_P_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8004f2a:	4b43      	ldr	r3, [pc, #268]	@ (8005038 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8004f2c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f2e:	0a5b      	lsrs	r3, r3, #9
 8004f30:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004f34:	ee07 3a90 	vmov	s15, r3
 8004f38:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2P) >> \
                                                                                  RCC_PLL2DIVR_PLL2P_Pos) + \
 8004f3c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004f40:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 8004f44:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8004f48:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004f4c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004f50:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_P_Frequency = \
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	601a      	str	r2, [r3, #0]
 8004f58:	e006      	b.n	8004f68 <HAL_RCCEx_GetPLL2ClockFreq+0x1f0>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_P_Frequency = 0U;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	2200      	movs	r2, #0
 8004f5e:	601a      	str	r2, [r3, #0]
 8004f60:	e002      	b.n	8004f68 <HAL_RCCEx_GetPLL2ClockFreq+0x1f0>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_P_Frequency = 0U;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	2200      	movs	r2, #0
 8004f66:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004f68:	4b33      	ldr	r3, [pc, #204]	@ (8005038 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004f70:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004f74:	d121      	bne.n	8004fba <HAL_RCCEx_GetPLL2ClockFreq+0x242>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 8004f76:	4b30      	ldr	r3, [pc, #192]	@ (8005038 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8004f78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d017      	beq.n	8004fb2 <HAL_RCCEx_GetPLL2ClockFreq+0x23a>
      {
        pPLL2_Clocks->PLL2_Q_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8004f82:	4b2d      	ldr	r3, [pc, #180]	@ (8005038 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8004f84:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f86:	0c1b      	lsrs	r3, r3, #16
 8004f88:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004f8c:	ee07 3a90 	vmov	s15, r3
 8004f90:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2Q) >> \
                                                                                  RCC_PLL2DIVR_PLL2Q_Pos) + \
 8004f94:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004f98:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 8004f9c:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8004fa0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004fa4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004fa8:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_Q_Frequency = \
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	605a      	str	r2, [r3, #4]
 8004fb0:	e006      	b.n	8004fc0 <HAL_RCCEx_GetPLL2ClockFreq+0x248>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	2200      	movs	r2, #0
 8004fb6:	605a      	str	r2, [r3, #4]
 8004fb8:	e002      	b.n	8004fc0 <HAL_RCCEx_GetPLL2ClockFreq+0x248>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	2200      	movs	r2, #0
 8004fbe:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004fc0:	4b1d      	ldr	r3, [pc, #116]	@ (8005038 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004fc8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004fcc:	d121      	bne.n	8005012 <HAL_RCCEx_GetPLL2ClockFreq+0x29a>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 8004fce:	4b1a      	ldr	r3, [pc, #104]	@ (8005038 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8004fd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fd2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d017      	beq.n	800500a <HAL_RCCEx_GetPLL2ClockFreq+0x292>
      {
        pPLL2_Clocks->PLL2_R_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8004fda:	4b17      	ldr	r3, [pc, #92]	@ (8005038 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8004fdc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004fde:	0e1b      	lsrs	r3, r3, #24
 8004fe0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004fe4:	ee07 3a90 	vmov	s15, r3
 8004fe8:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2R) >> \
                                                                                  RCC_PLL2DIVR_PLL2R_Pos) + \
 8004fec:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004ff0:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 8004ff4:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8004ff8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004ffc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005000:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_R_Frequency = \
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	609a      	str	r2, [r3, #8]
  {
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8005008:	e010      	b.n	800502c <HAL_RCCEx_GetPLL2ClockFreq+0x2b4>
        pPLL2_Clocks->PLL2_R_Frequency = 0U;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	2200      	movs	r2, #0
 800500e:	609a      	str	r2, [r3, #8]
}
 8005010:	e00c      	b.n	800502c <HAL_RCCEx_GetPLL2ClockFreq+0x2b4>
      pPLL2_Clocks->PLL2_R_Frequency = 0U;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	2200      	movs	r2, #0
 8005016:	609a      	str	r2, [r3, #8]
}
 8005018:	e008      	b.n	800502c <HAL_RCCEx_GetPLL2ClockFreq+0x2b4>
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	2200      	movs	r2, #0
 800501e:	601a      	str	r2, [r3, #0]
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	2200      	movs	r2, #0
 8005024:	605a      	str	r2, [r3, #4]
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	2200      	movs	r2, #0
 800502a:	609a      	str	r2, [r3, #8]
}
 800502c:	bf00      	nop
 800502e:	372c      	adds	r7, #44	@ 0x2c
 8005030:	46bd      	mov	sp, r7
 8005032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005036:	4770      	bx	lr
 8005038:	44020c00 	.word	0x44020c00
 800503c:	03d09000 	.word	0x03d09000
 8005040:	46000000 	.word	0x46000000
 8005044:	4a742400 	.word	0x4a742400
 8005048:	4bbebc20 	.word	0x4bbebc20

0800504c <HAL_RCCEx_GetPeriphCLKFreq>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800504c:	b580      	push	{r7, lr}
 800504e:	b08c      	sub	sp, #48	@ 0x30
 8005050:	af00      	add	r7, sp, #0
 8005052:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 8005056:	e9d7 2300 	ldrd	r2, r3, [r7]
 800505a:	f102 417e 	add.w	r1, r2, #4261412864	@ 0xfe000000
 800505e:	430b      	orrs	r3, r1
 8005060:	d14b      	bne.n	80050fa <HAL_RCCEx_GetPeriphCLKFreq+0xae>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8005062:	4bc4      	ldr	r3, [pc, #784]	@ (8005374 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 8005064:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005068:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800506c:	62bb      	str	r3, [r7, #40]	@ 0x28

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 800506e:	4bc1      	ldr	r3, [pc, #772]	@ (8005374 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 8005070:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005074:	f003 0302 	and.w	r3, r3, #2
 8005078:	2b02      	cmp	r3, #2
 800507a:	d108      	bne.n	800508e <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 800507c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800507e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005082:	d104      	bne.n	800508e <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 8005084:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005088:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800508a:	f000 bf14 	b.w	8005eb6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 800508e:	4bb9      	ldr	r3, [pc, #740]	@ (8005374 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 8005090:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005094:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005098:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800509c:	d108      	bne.n	80050b0 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
 800509e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050a0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80050a4:	d104      	bne.n	80050b0 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
    {
      frequency = LSI_VALUE;
 80050a6:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80050aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80050ac:	f000 bf03 	b.w	8005eb6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
    }
    /* Check if HSE is ready and if RTC clock selection is HSE_DIVx*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIVx))
 80050b0:	4bb0      	ldr	r3, [pc, #704]	@ (8005374 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80050b8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80050bc:	d119      	bne.n	80050f2 <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
 80050be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050c0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80050c4:	d115      	bne.n	80050f2 <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
    {
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 80050c6:	4bab      	ldr	r3, [pc, #684]	@ (8005374 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 80050c8:	69db      	ldr	r3, [r3, #28]
 80050ca:	f403 537c 	and.w	r3, r3, #16128	@ 0x3f00
 80050ce:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80050d2:	d30a      	bcc.n	80050ea <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
      {
        frequency = (HSE_VALUE / ((uint32_t)(__HAL_RCC_GET_RTC_HSE_PRESCALER() >> RCC_CFGR1_RTCPRE_Pos)));
 80050d4:	4ba7      	ldr	r3, [pc, #668]	@ (8005374 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 80050d6:	69db      	ldr	r3, [r3, #28]
 80050d8:	0a1b      	lsrs	r3, r3, #8
 80050da:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80050de:	4aa6      	ldr	r2, [pc, #664]	@ (8005378 <HAL_RCCEx_GetPeriphCLKFreq+0x32c>)
 80050e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80050e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 80050e6:	f000 bee6 	b.w	8005eb6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
      }
      else
      {
        frequency = 0U;
 80050ea:	2300      	movs	r3, #0
 80050ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 80050ee:	f000 bee2 	b.w	8005eb6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 80050f2:	2300      	movs	r3, #0
 80050f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80050f6:	f000 bede 	b.w	8005eb6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    switch (PeriphClk)
 80050fa:	e9d7 2300 	ldrd	r2, r3, [r7]
 80050fe:	f5a3 5180 	sub.w	r1, r3, #4096	@ 0x1000
 8005102:	ea52 0301 	orrs.w	r3, r2, r1
 8005106:	f000 838e 	beq.w	8005826 <HAL_RCCEx_GetPeriphCLKFreq+0x7da>
 800510a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800510e:	2a01      	cmp	r2, #1
 8005110:	f573 5380 	sbcs.w	r3, r3, #4096	@ 0x1000
 8005114:	f080 86cc 	bcs.w	8005eb0 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8005118:	e9d7 2300 	ldrd	r2, r3, [r7]
 800511c:	f5a3 7100 	sub.w	r1, r3, #512	@ 0x200
 8005120:	ea52 0301 	orrs.w	r3, r2, r1
 8005124:	f000 82aa 	beq.w	800567c <HAL_RCCEx_GetPeriphCLKFreq+0x630>
 8005128:	e9d7 2300 	ldrd	r2, r3, [r7]
 800512c:	2a01      	cmp	r2, #1
 800512e:	f573 7300 	sbcs.w	r3, r3, #512	@ 0x200
 8005132:	f080 86bd 	bcs.w	8005eb0 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8005136:	e9d7 2300 	ldrd	r2, r3, [r7]
 800513a:	f1a3 0110 	sub.w	r1, r3, #16
 800513e:	ea52 0301 	orrs.w	r3, r2, r1
 8005142:	f000 8681 	beq.w	8005e48 <HAL_RCCEx_GetPeriphCLKFreq+0xdfc>
 8005146:	e9d7 2300 	ldrd	r2, r3, [r7]
 800514a:	2a01      	cmp	r2, #1
 800514c:	f173 0310 	sbcs.w	r3, r3, #16
 8005150:	f080 86ae 	bcs.w	8005eb0 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8005154:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005158:	1f19      	subs	r1, r3, #4
 800515a:	ea52 0301 	orrs.w	r3, r2, r1
 800515e:	f000 84b1 	beq.w	8005ac4 <HAL_RCCEx_GetPeriphCLKFreq+0xa78>
 8005162:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005166:	2a01      	cmp	r2, #1
 8005168:	f173 0304 	sbcs.w	r3, r3, #4
 800516c:	f080 86a0 	bcs.w	8005eb0 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8005170:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005174:	f102 4160 	add.w	r1, r2, #3758096384	@ 0xe0000000
 8005178:	430b      	orrs	r3, r1
 800517a:	f000 85aa 	beq.w	8005cd2 <HAL_RCCEx_GetPeriphCLKFreq+0xc86>
 800517e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005182:	497e      	ldr	r1, [pc, #504]	@ (800537c <HAL_RCCEx_GetPeriphCLKFreq+0x330>)
 8005184:	428a      	cmp	r2, r1
 8005186:	f173 0300 	sbcs.w	r3, r3, #0
 800518a:	f080 8691 	bcs.w	8005eb0 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 800518e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005192:	f102 4170 	add.w	r1, r2, #4026531840	@ 0xf0000000
 8005196:	430b      	orrs	r3, r1
 8005198:	f000 8532 	beq.w	8005c00 <HAL_RCCEx_GetPeriphCLKFreq+0xbb4>
 800519c:	e9d7 2300 	ldrd	r2, r3, [r7]
 80051a0:	4977      	ldr	r1, [pc, #476]	@ (8005380 <HAL_RCCEx_GetPeriphCLKFreq+0x334>)
 80051a2:	428a      	cmp	r2, r1
 80051a4:	f173 0300 	sbcs.w	r3, r3, #0
 80051a8:	f080 8682 	bcs.w	8005eb0 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 80051ac:	e9d7 2300 	ldrd	r2, r3, [r7]
 80051b0:	f102 4178 	add.w	r1, r2, #4160749568	@ 0xf8000000
 80051b4:	430b      	orrs	r3, r1
 80051b6:	f000 84bc 	beq.w	8005b32 <HAL_RCCEx_GetPeriphCLKFreq+0xae6>
 80051ba:	e9d7 2300 	ldrd	r2, r3, [r7]
 80051be:	4971      	ldr	r1, [pc, #452]	@ (8005384 <HAL_RCCEx_GetPeriphCLKFreq+0x338>)
 80051c0:	428a      	cmp	r2, r1
 80051c2:	f173 0300 	sbcs.w	r3, r3, #0
 80051c6:	f080 8673 	bcs.w	8005eb0 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 80051ca:	e9d7 2300 	ldrd	r2, r3, [r7]
 80051ce:	f102 417c 	add.w	r1, r2, #4227858432	@ 0xfc000000
 80051d2:	430b      	orrs	r3, r1
 80051d4:	f000 85f2 	beq.w	8005dbc <HAL_RCCEx_GetPeriphCLKFreq+0xd70>
 80051d8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80051dc:	496a      	ldr	r1, [pc, #424]	@ (8005388 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>)
 80051de:	428a      	cmp	r2, r1
 80051e0:	f173 0300 	sbcs.w	r3, r3, #0
 80051e4:	f080 8664 	bcs.w	8005eb0 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 80051e8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80051ec:	f5a2 1100 	sub.w	r1, r2, #2097152	@ 0x200000
 80051f0:	430b      	orrs	r3, r1
 80051f2:	f000 81e5 	beq.w	80055c0 <HAL_RCCEx_GetPeriphCLKFreq+0x574>
 80051f6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80051fa:	4964      	ldr	r1, [pc, #400]	@ (800538c <HAL_RCCEx_GetPeriphCLKFreq+0x340>)
 80051fc:	428a      	cmp	r2, r1
 80051fe:	f173 0300 	sbcs.w	r3, r3, #0
 8005202:	f080 8655 	bcs.w	8005eb0 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8005206:	e9d7 2300 	ldrd	r2, r3, [r7]
 800520a:	f5a2 2180 	sub.w	r1, r2, #262144	@ 0x40000
 800520e:	430b      	orrs	r3, r1
 8005210:	f000 83cc 	beq.w	80059ac <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 8005214:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005218:	495d      	ldr	r1, [pc, #372]	@ (8005390 <HAL_RCCEx_GetPeriphCLKFreq+0x344>)
 800521a:	428a      	cmp	r2, r1
 800521c:	f173 0300 	sbcs.w	r3, r3, #0
 8005220:	f080 8646 	bcs.w	8005eb0 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8005224:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005228:	f5a2 3100 	sub.w	r1, r2, #131072	@ 0x20000
 800522c:	430b      	orrs	r3, r1
 800522e:	f000 8331 	beq.w	8005894 <HAL_RCCEx_GetPeriphCLKFreq+0x848>
 8005232:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005236:	4957      	ldr	r1, [pc, #348]	@ (8005394 <HAL_RCCEx_GetPeriphCLKFreq+0x348>)
 8005238:	428a      	cmp	r2, r1
 800523a:	f173 0300 	sbcs.w	r3, r3, #0
 800523e:	f080 8637 	bcs.w	8005eb0 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8005242:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005246:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 800524a:	430b      	orrs	r3, r1
 800524c:	f000 82bb 	beq.w	80057c6 <HAL_RCCEx_GetPeriphCLKFreq+0x77a>
 8005250:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005254:	f1b2 1f01 	cmp.w	r2, #65537	@ 0x10001
 8005258:	f173 0300 	sbcs.w	r3, r3, #0
 800525c:	f080 8628 	bcs.w	8005eb0 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8005260:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005264:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 8005268:	430b      	orrs	r3, r1
 800526a:	f000 826d 	beq.w	8005748 <HAL_RCCEx_GetPeriphCLKFreq+0x6fc>
 800526e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005272:	f244 0101 	movw	r1, #16385	@ 0x4001
 8005276:	428a      	cmp	r2, r1
 8005278:	f173 0300 	sbcs.w	r3, r3, #0
 800527c:	f080 8618 	bcs.w	8005eb0 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8005280:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005284:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 8005288:	430b      	orrs	r3, r1
 800528a:	f000 821e 	beq.w	80056ca <HAL_RCCEx_GetPeriphCLKFreq+0x67e>
 800528e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005292:	f242 0101 	movw	r1, #8193	@ 0x2001
 8005296:	428a      	cmp	r2, r1
 8005298:	f173 0300 	sbcs.w	r3, r3, #0
 800529c:	f080 8608 	bcs.w	8005eb0 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 80052a0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80052a4:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 80052a8:	430b      	orrs	r3, r1
 80052aa:	f000 8137 	beq.w	800551c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 80052ae:	e9d7 2300 	ldrd	r2, r3, [r7]
 80052b2:	f241 0101 	movw	r1, #4097	@ 0x1001
 80052b6:	428a      	cmp	r2, r1
 80052b8:	f173 0300 	sbcs.w	r3, r3, #0
 80052bc:	f080 85f8 	bcs.w	8005eb0 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 80052c0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80052c4:	1f11      	subs	r1, r2, #4
 80052c6:	430b      	orrs	r3, r1
 80052c8:	f000 80d2 	beq.w	8005470 <HAL_RCCEx_GetPeriphCLKFreq+0x424>
 80052cc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80052d0:	2a05      	cmp	r2, #5
 80052d2:	f173 0300 	sbcs.w	r3, r3, #0
 80052d6:	f080 85eb 	bcs.w	8005eb0 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 80052da:	e9d7 2300 	ldrd	r2, r3, [r7]
 80052de:	1e51      	subs	r1, r2, #1
 80052e0:	430b      	orrs	r3, r1
 80052e2:	d006      	beq.n	80052f2 <HAL_RCCEx_GetPeriphCLKFreq+0x2a6>
 80052e4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80052e8:	1e91      	subs	r1, r2, #2
 80052ea:	430b      	orrs	r3, r1
 80052ec:	d06c      	beq.n	80053c8 <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
 80052ee:	f000 bddf 	b.w	8005eb0 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
        break;
#endif /* SDMMC2 */

      case RCC_PERIPHCLK_USART1:
        /* Get the current USART1 source */
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 80052f2:	4b20      	ldr	r3, [pc, #128]	@ (8005374 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 80052f4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80052f8:	f003 0307 	and.w	r3, r3, #7
 80052fc:	62bb      	str	r3, [r7, #40]	@ 0x28

        if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 80052fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005300:	2b00      	cmp	r3, #0
 8005302:	d104      	bne.n	800530e <HAL_RCCEx_GetPeriphCLKFreq+0x2c2>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 8005304:	f7fe fd7e 	bl	8003e04 <HAL_RCC_GetPCLK2Freq>
 8005308:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* Clock not enabled for USART1 */
        else
        {
          frequency = 0U;
        }
        break;
 800530a:	f000 bdd4 	b.w	8005eb6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART1CLKSOURCE_PLL2Q))
 800530e:	4b19      	ldr	r3, [pc, #100]	@ (8005374 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005316:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800531a:	d10a      	bne.n	8005332 <HAL_RCCEx_GetPeriphCLKFreq+0x2e6>
 800531c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800531e:	2b01      	cmp	r3, #1
 8005320:	d107      	bne.n	8005332 <HAL_RCCEx_GetPeriphCLKFreq+0x2e6>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005322:	f107 030c 	add.w	r3, r7, #12
 8005326:	4618      	mov	r0, r3
 8005328:	f7ff fd26 	bl	8004d78 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800532c:	693b      	ldr	r3, [r7, #16]
 800532e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005330:	e048      	b.n	80053c4 <HAL_RCCEx_GetPeriphCLKFreq+0x378>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 8005332:	4b10      	ldr	r3, [pc, #64]	@ (8005374 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	f003 0302 	and.w	r3, r3, #2
 800533a:	2b02      	cmp	r3, #2
 800533c:	d10c      	bne.n	8005358 <HAL_RCCEx_GetPeriphCLKFreq+0x30c>
 800533e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005340:	2b03      	cmp	r3, #3
 8005342:	d109      	bne.n	8005358 <HAL_RCCEx_GetPeriphCLKFreq+0x30c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005344:	4b0b      	ldr	r3, [pc, #44]	@ (8005374 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	08db      	lsrs	r3, r3, #3
 800534a:	f003 0303 	and.w	r3, r3, #3
 800534e:	4a12      	ldr	r2, [pc, #72]	@ (8005398 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8005350:	fa22 f303 	lsr.w	r3, r2, r3
 8005354:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005356:	e035      	b.n	80053c4 <HAL_RCCEx_GetPeriphCLKFreq+0x378>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_CSI))
 8005358:	4b06      	ldr	r3, [pc, #24]	@ (8005374 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005360:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005364:	d11c      	bne.n	80053a0 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
 8005366:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005368:	2b04      	cmp	r3, #4
 800536a:	d119      	bne.n	80053a0 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
          frequency = CSI_VALUE;
 800536c:	4b0b      	ldr	r3, [pc, #44]	@ (800539c <HAL_RCCEx_GetPeriphCLKFreq+0x350>)
 800536e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005370:	e028      	b.n	80053c4 <HAL_RCCEx_GetPeriphCLKFreq+0x378>
 8005372:	bf00      	nop
 8005374:	44020c00 	.word	0x44020c00
 8005378:	017d7840 	.word	0x017d7840
 800537c:	20000001 	.word	0x20000001
 8005380:	10000001 	.word	0x10000001
 8005384:	08000001 	.word	0x08000001
 8005388:	04000001 	.word	0x04000001
 800538c:	00200001 	.word	0x00200001
 8005390:	00040001 	.word	0x00040001
 8005394:	00020001 	.word	0x00020001
 8005398:	03d09000 	.word	0x03d09000
 800539c:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 80053a0:	4b9f      	ldr	r3, [pc, #636]	@ (8005620 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 80053a2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80053a6:	f003 0302 	and.w	r3, r3, #2
 80053aa:	2b02      	cmp	r3, #2
 80053ac:	d106      	bne.n	80053bc <HAL_RCCEx_GetPeriphCLKFreq+0x370>
 80053ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053b0:	2b05      	cmp	r3, #5
 80053b2:	d103      	bne.n	80053bc <HAL_RCCEx_GetPeriphCLKFreq+0x370>
          frequency = LSE_VALUE;
 80053b4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80053b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80053ba:	e003      	b.n	80053c4 <HAL_RCCEx_GetPeriphCLKFreq+0x378>
          frequency = 0U;
 80053bc:	2300      	movs	r3, #0
 80053be:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80053c0:	f000 bd79 	b.w	8005eb6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 80053c4:	f000 bd77 	b.w	8005eb6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_USART2:
        /* Get the current USART2 source */
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 80053c8:	4b95      	ldr	r3, [pc, #596]	@ (8005620 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 80053ca:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80053ce:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80053d2:	62bb      	str	r3, [r7, #40]	@ 0x28

        if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 80053d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d104      	bne.n	80053e4 <HAL_RCCEx_GetPeriphCLKFreq+0x398>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80053da:	f7fe fcfd 	bl	8003dd8 <HAL_RCC_GetPCLK1Freq>
 80053de:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* Clock not enabled for USART2 */
        else
        {
          frequency = 0U;
        }
        break;
 80053e0:	f000 bd69 	b.w	8005eb6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART2CLKSOURCE_PLL2Q))
 80053e4:	4b8e      	ldr	r3, [pc, #568]	@ (8005620 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80053ec:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80053f0:	d10a      	bne.n	8005408 <HAL_RCCEx_GetPeriphCLKFreq+0x3bc>
 80053f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053f4:	2b08      	cmp	r3, #8
 80053f6:	d107      	bne.n	8005408 <HAL_RCCEx_GetPeriphCLKFreq+0x3bc>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80053f8:	f107 030c 	add.w	r3, r7, #12
 80053fc:	4618      	mov	r0, r3
 80053fe:	f7ff fcbb 	bl	8004d78 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005402:	693b      	ldr	r3, [r7, #16]
 8005404:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005406:	e031      	b.n	800546c <HAL_RCCEx_GetPeriphCLKFreq+0x420>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 8005408:	4b85      	ldr	r3, [pc, #532]	@ (8005620 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f003 0302 	and.w	r3, r3, #2
 8005410:	2b02      	cmp	r3, #2
 8005412:	d10c      	bne.n	800542e <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 8005414:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005416:	2b18      	cmp	r3, #24
 8005418:	d109      	bne.n	800542e <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800541a:	4b81      	ldr	r3, [pc, #516]	@ (8005620 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	08db      	lsrs	r3, r3, #3
 8005420:	f003 0303 	and.w	r3, r3, #3
 8005424:	4a7f      	ldr	r2, [pc, #508]	@ (8005624 <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>)
 8005426:	fa22 f303 	lsr.w	r3, r2, r3
 800542a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800542c:	e01e      	b.n	800546c <HAL_RCCEx_GetPeriphCLKFreq+0x420>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_CSI))
 800542e:	4b7c      	ldr	r3, [pc, #496]	@ (8005620 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005436:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800543a:	d105      	bne.n	8005448 <HAL_RCCEx_GetPeriphCLKFreq+0x3fc>
 800543c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800543e:	2b20      	cmp	r3, #32
 8005440:	d102      	bne.n	8005448 <HAL_RCCEx_GetPeriphCLKFreq+0x3fc>
          frequency = CSI_VALUE;
 8005442:	4b79      	ldr	r3, [pc, #484]	@ (8005628 <HAL_RCCEx_GetPeriphCLKFreq+0x5dc>)
 8005444:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005446:	e011      	b.n	800546c <HAL_RCCEx_GetPeriphCLKFreq+0x420>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 8005448:	4b75      	ldr	r3, [pc, #468]	@ (8005620 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 800544a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800544e:	f003 0302 	and.w	r3, r3, #2
 8005452:	2b02      	cmp	r3, #2
 8005454:	d106      	bne.n	8005464 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
 8005456:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005458:	2b28      	cmp	r3, #40	@ 0x28
 800545a:	d103      	bne.n	8005464 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
          frequency = LSE_VALUE;
 800545c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005460:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005462:	e003      	b.n	800546c <HAL_RCCEx_GetPeriphCLKFreq+0x420>
          frequency = 0U;
 8005464:	2300      	movs	r3, #0
 8005466:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8005468:	f000 bd25 	b.w	8005eb6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 800546c:	f000 bd23 	b.w	8005eb6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_USART3:
        /* Get the current USART3 source */
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8005470:	4b6b      	ldr	r3, [pc, #428]	@ (8005620 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8005472:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8005476:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 800547a:	62bb      	str	r3, [r7, #40]	@ 0x28

        if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 800547c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800547e:	2b00      	cmp	r3, #0
 8005480:	d104      	bne.n	800548c <HAL_RCCEx_GetPeriphCLKFreq+0x440>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8005482:	f7fe fca9 	bl	8003dd8 <HAL_RCC_GetPCLK1Freq>
 8005486:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* Clock not enabled for USART3 */
        else
        {
          frequency = 0U;
        }
        break;
 8005488:	f000 bd15 	b.w	8005eb6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART3CLKSOURCE_PLL2Q))
 800548c:	4b64      	ldr	r3, [pc, #400]	@ (8005620 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005494:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005498:	d10a      	bne.n	80054b0 <HAL_RCCEx_GetPeriphCLKFreq+0x464>
 800549a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800549c:	2b40      	cmp	r3, #64	@ 0x40
 800549e:	d107      	bne.n	80054b0 <HAL_RCCEx_GetPeriphCLKFreq+0x464>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80054a0:	f107 030c 	add.w	r3, r7, #12
 80054a4:	4618      	mov	r0, r3
 80054a6:	f7ff fc67 	bl	8004d78 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80054aa:	693b      	ldr	r3, [r7, #16]
 80054ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80054ae:	e033      	b.n	8005518 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 80054b0:	4b5b      	ldr	r3, [pc, #364]	@ (8005620 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	f003 0302 	and.w	r3, r3, #2
 80054b8:	2b02      	cmp	r3, #2
 80054ba:	d10c      	bne.n	80054d6 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 80054bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054be:	2bc0      	cmp	r3, #192	@ 0xc0
 80054c0:	d109      	bne.n	80054d6 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80054c2:	4b57      	ldr	r3, [pc, #348]	@ (8005620 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	08db      	lsrs	r3, r3, #3
 80054c8:	f003 0303 	and.w	r3, r3, #3
 80054cc:	4a55      	ldr	r2, [pc, #340]	@ (8005624 <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>)
 80054ce:	fa22 f303 	lsr.w	r3, r2, r3
 80054d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80054d4:	e020      	b.n	8005518 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_CSI))
 80054d6:	4b52      	ldr	r3, [pc, #328]	@ (8005620 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80054de:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80054e2:	d106      	bne.n	80054f2 <HAL_RCCEx_GetPeriphCLKFreq+0x4a6>
 80054e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054e6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80054ea:	d102      	bne.n	80054f2 <HAL_RCCEx_GetPeriphCLKFreq+0x4a6>
          frequency = CSI_VALUE;
 80054ec:	4b4e      	ldr	r3, [pc, #312]	@ (8005628 <HAL_RCCEx_GetPeriphCLKFreq+0x5dc>)
 80054ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80054f0:	e012      	b.n	8005518 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 80054f2:	4b4b      	ldr	r3, [pc, #300]	@ (8005620 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 80054f4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80054f8:	f003 0302 	and.w	r3, r3, #2
 80054fc:	2b02      	cmp	r3, #2
 80054fe:	d107      	bne.n	8005510 <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>
 8005500:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005502:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8005506:	d103      	bne.n	8005510 <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>
          frequency = LSE_VALUE;
 8005508:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800550c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800550e:	e003      	b.n	8005518 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
          frequency = 0U;
 8005510:	2300      	movs	r3, #0
 8005512:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8005514:	f000 bccf 	b.w	8005eb6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8005518:	f000 bccd 	b.w	8005eb6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        break;
#endif /* UART12 */

      case RCC_PERIPHCLK_LPUART1:
        /* Get the current LPUART1 source */
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 800551c:	4b40      	ldr	r3, [pc, #256]	@ (8005620 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 800551e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005522:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8005526:	62bb      	str	r3, [r7, #40]	@ 0x28

        if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 8005528:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800552a:	2b00      	cmp	r3, #0
 800552c:	d104      	bne.n	8005538 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 800552e:	f7fe fc7f 	bl	8003e30 <HAL_RCC_GetPCLK3Freq>
 8005532:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* Clock not enabled for LPUART1 */
        else
        {
          frequency = 0U;
        }
        break;
 8005534:	f000 bcbf 	b.w	8005eb6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if (srcclk == RCC_LPUART1CLKSOURCE_PLL2Q)
 8005538:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800553a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800553e:	d108      	bne.n	8005552 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005540:	f107 030c 	add.w	r3, r7, #12
 8005544:	4618      	mov	r0, r3
 8005546:	f7ff fc17 	bl	8004d78 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800554a:	693b      	ldr	r3, [r7, #16]
 800554c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800554e:	f000 bcb2 	b.w	8005eb6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 8005552:	4b33      	ldr	r3, [pc, #204]	@ (8005620 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	f003 0302 	and.w	r3, r3, #2
 800555a:	2b02      	cmp	r3, #2
 800555c:	d10d      	bne.n	800557a <HAL_RCCEx_GetPeriphCLKFreq+0x52e>
 800555e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005560:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005564:	d109      	bne.n	800557a <HAL_RCCEx_GetPeriphCLKFreq+0x52e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005566:	4b2e      	ldr	r3, [pc, #184]	@ (8005620 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	08db      	lsrs	r3, r3, #3
 800556c:	f003 0303 	and.w	r3, r3, #3
 8005570:	4a2c      	ldr	r2, [pc, #176]	@ (8005624 <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>)
 8005572:	fa22 f303 	lsr.w	r3, r2, r3
 8005576:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005578:	e020      	b.n	80055bc <HAL_RCCEx_GetPeriphCLKFreq+0x570>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_CSI))
 800557a:	4b29      	ldr	r3, [pc, #164]	@ (8005620 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005582:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005586:	d106      	bne.n	8005596 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
 8005588:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800558a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800558e:	d102      	bne.n	8005596 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
          frequency = CSI_VALUE;
 8005590:	4b25      	ldr	r3, [pc, #148]	@ (8005628 <HAL_RCCEx_GetPeriphCLKFreq+0x5dc>)
 8005592:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005594:	e012      	b.n	80055bc <HAL_RCCEx_GetPeriphCLKFreq+0x570>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 8005596:	4b22      	ldr	r3, [pc, #136]	@ (8005620 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8005598:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800559c:	f003 0302 	and.w	r3, r3, #2
 80055a0:	2b02      	cmp	r3, #2
 80055a2:	d107      	bne.n	80055b4 <HAL_RCCEx_GetPeriphCLKFreq+0x568>
 80055a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055a6:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 80055aa:	d103      	bne.n	80055b4 <HAL_RCCEx_GetPeriphCLKFreq+0x568>
          frequency = LSE_VALUE;
 80055ac:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80055b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80055b2:	e003      	b.n	80055bc <HAL_RCCEx_GetPeriphCLKFreq+0x570>
          frequency = 0U;
 80055b4:	2300      	movs	r3, #0
 80055b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80055b8:	f000 bc7d 	b.w	8005eb6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 80055bc:	f000 bc7b 	b.w	8005eb6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_ADCDAC:
        /* Get the current ADCDAC source */
        srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 80055c0:	4b17      	ldr	r3, [pc, #92]	@ (8005620 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 80055c2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80055c6:	f003 0307 	and.w	r3, r3, #7
 80055ca:	62bb      	str	r3, [r7, #40]	@ 0x28

        if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 80055cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d104      	bne.n	80055dc <HAL_RCCEx_GetPeriphCLKFreq+0x590>
        {
          frequency = HAL_RCC_GetHCLKFreq();
 80055d2:	f7fe fbe5 	bl	8003da0 <HAL_RCC_GetHCLKFreq>
 80055d6:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* Clock not enabled for ADCDAC */
        else
        {
          frequency = 0U;
        }
        break;
 80055d8:	f000 bc6d 	b.w	8005eb6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 80055dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055de:	2b01      	cmp	r3, #1
 80055e0:	d104      	bne.n	80055ec <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>
          frequency = HAL_RCC_GetSysClockFreq();
 80055e2:	f7fe fab1 	bl	8003b48 <HAL_RCC_GetSysClockFreq>
 80055e6:	62f8      	str	r0, [r7, #44]	@ 0x2c
        break;
 80055e8:	f000 bc65 	b.w	8005eb6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2R)
 80055ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055ee:	2b02      	cmp	r3, #2
 80055f0:	d108      	bne.n	8005604 <HAL_RCCEx_GetPeriphCLKFreq+0x5b8>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80055f2:	f107 030c 	add.w	r3, r7, #12
 80055f6:	4618      	mov	r0, r3
 80055f8:	f7ff fbbe 	bl	8004d78 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 80055fc:	697b      	ldr	r3, [r7, #20]
 80055fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8005600:	f000 bc59 	b.w	8005eb6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 8005604:	4b06      	ldr	r3, [pc, #24]	@ (8005620 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800560c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005610:	d10e      	bne.n	8005630 <HAL_RCCEx_GetPeriphCLKFreq+0x5e4>
 8005612:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005614:	2b03      	cmp	r3, #3
 8005616:	d10b      	bne.n	8005630 <HAL_RCCEx_GetPeriphCLKFreq+0x5e4>
          frequency = HSE_VALUE;
 8005618:	4b04      	ldr	r3, [pc, #16]	@ (800562c <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 800561a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800561c:	e02c      	b.n	8005678 <HAL_RCCEx_GetPeriphCLKFreq+0x62c>
 800561e:	bf00      	nop
 8005620:	44020c00 	.word	0x44020c00
 8005624:	03d09000 	.word	0x03d09000
 8005628:	003d0900 	.word	0x003d0900
 800562c:	017d7840 	.word	0x017d7840
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 8005630:	4b95      	ldr	r3, [pc, #596]	@ (8005888 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	f003 0302 	and.w	r3, r3, #2
 8005638:	2b02      	cmp	r3, #2
 800563a:	d10c      	bne.n	8005656 <HAL_RCCEx_GetPeriphCLKFreq+0x60a>
 800563c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800563e:	2b04      	cmp	r3, #4
 8005640:	d109      	bne.n	8005656 <HAL_RCCEx_GetPeriphCLKFreq+0x60a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005642:	4b91      	ldr	r3, [pc, #580]	@ (8005888 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	08db      	lsrs	r3, r3, #3
 8005648:	f003 0303 	and.w	r3, r3, #3
 800564c:	4a8f      	ldr	r2, [pc, #572]	@ (800588c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800564e:	fa22 f303 	lsr.w	r3, r2, r3
 8005652:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005654:	e010      	b.n	8005678 <HAL_RCCEx_GetPeriphCLKFreq+0x62c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_CSI))
 8005656:	4b8c      	ldr	r3, [pc, #560]	@ (8005888 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800565e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005662:	d105      	bne.n	8005670 <HAL_RCCEx_GetPeriphCLKFreq+0x624>
 8005664:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005666:	2b05      	cmp	r3, #5
 8005668:	d102      	bne.n	8005670 <HAL_RCCEx_GetPeriphCLKFreq+0x624>
          frequency = CSI_VALUE;
 800566a:	4b89      	ldr	r3, [pc, #548]	@ (8005890 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 800566c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800566e:	e003      	b.n	8005678 <HAL_RCCEx_GetPeriphCLKFreq+0x62c>
          frequency = 0U;
 8005670:	2300      	movs	r3, #0
 8005672:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8005674:	f000 bc1f 	b.w	8005eb6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8005678:	f000 bc1d 	b.w	8005eb6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>


      case RCC_PERIPHCLK_DAC_LP:
        /* Get the current DAC low-power source */
        srcclk = __HAL_RCC_GET_DAC_LP_SOURCE();
 800567c:	4b82      	ldr	r3, [pc, #520]	@ (8005888 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800567e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005682:	f003 0308 	and.w	r3, r3, #8
 8005686:	62bb      	str	r3, [r7, #40]	@ 0x28

        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSE))
 8005688:	4b7f      	ldr	r3, [pc, #508]	@ (8005888 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800568a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800568e:	f003 0302 	and.w	r3, r3, #2
 8005692:	2b02      	cmp	r3, #2
 8005694:	d106      	bne.n	80056a4 <HAL_RCCEx_GetPeriphCLKFreq+0x658>
 8005696:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005698:	2b00      	cmp	r3, #0
 800569a:	d103      	bne.n	80056a4 <HAL_RCCEx_GetPeriphCLKFreq+0x658>
        {
          frequency = LSE_VALUE;
 800569c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80056a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80056a2:	e011      	b.n	80056c8 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSI))
 80056a4:	4b78      	ldr	r3, [pc, #480]	@ (8005888 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80056a6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80056aa:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80056ae:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80056b2:	d106      	bne.n	80056c2 <HAL_RCCEx_GetPeriphCLKFreq+0x676>
 80056b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056b6:	2b08      	cmp	r3, #8
 80056b8:	d103      	bne.n	80056c2 <HAL_RCCEx_GetPeriphCLKFreq+0x676>
        {
          frequency = LSI_VALUE;
 80056ba:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80056be:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80056c0:	e002      	b.n	80056c8 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        }

        /* Clock not enabled for DAC */
        else
        {
          frequency = 0U;
 80056c2:	2300      	movs	r3, #0
 80056c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        break;
 80056c6:	e3f6      	b.n	8005eb6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 80056c8:	e3f5      	b.n	8005eb6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_I2C1:
        /* Get the current I2C1 source */
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 80056ca:	4b6f      	ldr	r3, [pc, #444]	@ (8005888 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80056cc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80056d0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80056d4:	62bb      	str	r3, [r7, #40]	@ 0x28

        if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 80056d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d103      	bne.n	80056e4 <HAL_RCCEx_GetPeriphCLKFreq+0x698>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80056dc:	f7fe fb7c 	bl	8003dd8 <HAL_RCC_GetPCLK1Freq>
 80056e0:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* Clock not enabled for I2C1 */
        else
        {
          frequency = 0U;
        }
        break;
 80056e2:	e3e8      	b.n	8005eb6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if (srcclk ==  RCC_I2C1CLKSOURCE_PLL2R)
 80056e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056e6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80056ea:	d107      	bne.n	80056fc <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80056ec:	f107 030c 	add.w	r3, r7, #12
 80056f0:	4618      	mov	r0, r3
 80056f2:	f7ff fb41 	bl	8004d78 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 80056f6:	697b      	ldr	r3, [r7, #20]
 80056f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80056fa:	e3dc      	b.n	8005eb6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 80056fc:	4b62      	ldr	r3, [pc, #392]	@ (8005888 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	f003 0302 	and.w	r3, r3, #2
 8005704:	2b02      	cmp	r3, #2
 8005706:	d10d      	bne.n	8005724 <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
 8005708:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800570a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800570e:	d109      	bne.n	8005724 <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005710:	4b5d      	ldr	r3, [pc, #372]	@ (8005888 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	08db      	lsrs	r3, r3, #3
 8005716:	f003 0303 	and.w	r3, r3, #3
 800571a:	4a5c      	ldr	r2, [pc, #368]	@ (800588c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800571c:	fa22 f303 	lsr.w	r3, r2, r3
 8005720:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005722:	e010      	b.n	8005746 <HAL_RCCEx_GetPeriphCLKFreq+0x6fa>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C1CLKSOURCE_CSI))
 8005724:	4b58      	ldr	r3, [pc, #352]	@ (8005888 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800572c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005730:	d106      	bne.n	8005740 <HAL_RCCEx_GetPeriphCLKFreq+0x6f4>
 8005732:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005734:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005738:	d102      	bne.n	8005740 <HAL_RCCEx_GetPeriphCLKFreq+0x6f4>
          frequency = CSI_VALUE;
 800573a:	4b55      	ldr	r3, [pc, #340]	@ (8005890 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 800573c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800573e:	e002      	b.n	8005746 <HAL_RCCEx_GetPeriphCLKFreq+0x6fa>
          frequency = 0U;
 8005740:	2300      	movs	r3, #0
 8005742:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8005744:	e3b7      	b.n	8005eb6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8005746:	e3b6      	b.n	8005eb6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_I2C2:
        /* Get the current I2C2 source */
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8005748:	4b4f      	ldr	r3, [pc, #316]	@ (8005888 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800574a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800574e:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8005752:	62bb      	str	r3, [r7, #40]	@ 0x28

        if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 8005754:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005756:	2b00      	cmp	r3, #0
 8005758:	d103      	bne.n	8005762 <HAL_RCCEx_GetPeriphCLKFreq+0x716>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800575a:	f7fe fb3d 	bl	8003dd8 <HAL_RCC_GetPCLK1Freq>
 800575e:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* Clock not enabled for I2C2 */
        else
        {
          frequency = 0U;
        }
        break;
 8005760:	e3a9      	b.n	8005eb6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if (srcclk ==  RCC_I2C2CLKSOURCE_PLL2R)
 8005762:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005764:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005768:	d107      	bne.n	800577a <HAL_RCCEx_GetPeriphCLKFreq+0x72e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800576a:	f107 030c 	add.w	r3, r7, #12
 800576e:	4618      	mov	r0, r3
 8005770:	f7ff fb02 	bl	8004d78 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8005774:	697b      	ldr	r3, [r7, #20]
 8005776:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8005778:	e39d      	b.n	8005eb6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 800577a:	4b43      	ldr	r3, [pc, #268]	@ (8005888 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	f003 0302 	and.w	r3, r3, #2
 8005782:	2b02      	cmp	r3, #2
 8005784:	d10d      	bne.n	80057a2 <HAL_RCCEx_GetPeriphCLKFreq+0x756>
 8005786:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005788:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800578c:	d109      	bne.n	80057a2 <HAL_RCCEx_GetPeriphCLKFreq+0x756>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800578e:	4b3e      	ldr	r3, [pc, #248]	@ (8005888 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	08db      	lsrs	r3, r3, #3
 8005794:	f003 0303 	and.w	r3, r3, #3
 8005798:	4a3c      	ldr	r2, [pc, #240]	@ (800588c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800579a:	fa22 f303 	lsr.w	r3, r2, r3
 800579e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80057a0:	e010      	b.n	80057c4 <HAL_RCCEx_GetPeriphCLKFreq+0x778>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C2CLKSOURCE_CSI))
 80057a2:	4b39      	ldr	r3, [pc, #228]	@ (8005888 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80057aa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80057ae:	d106      	bne.n	80057be <HAL_RCCEx_GetPeriphCLKFreq+0x772>
 80057b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057b2:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80057b6:	d102      	bne.n	80057be <HAL_RCCEx_GetPeriphCLKFreq+0x772>
          frequency = CSI_VALUE;
 80057b8:	4b35      	ldr	r3, [pc, #212]	@ (8005890 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 80057ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80057bc:	e002      	b.n	80057c4 <HAL_RCCEx_GetPeriphCLKFreq+0x778>
          frequency = 0U;
 80057be:	2300      	movs	r3, #0
 80057c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80057c2:	e378      	b.n	8005eb6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 80057c4:	e377      	b.n	8005eb6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        break;
#endif /* I2C4 */

      case RCC_PERIPHCLK_I3C1:
        /* Get the current I3C1 source */
        srcclk = __HAL_RCC_GET_I3C1_SOURCE();
 80057c6:	4b30      	ldr	r3, [pc, #192]	@ (8005888 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80057c8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80057cc:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 80057d0:	62bb      	str	r3, [r7, #40]	@ 0x28

        if (srcclk == RCC_I3C1CLKSOURCE_PCLK1)
 80057d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d103      	bne.n	80057e0 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80057d8:	f7fe fafe 	bl	8003dd8 <HAL_RCC_GetPCLK1Freq>
 80057dc:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* Clock not enabled for I3C1 */
        else
        {
          frequency = 0U;
        }
        break;
 80057de:	e36a      	b.n	8005eb6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if (srcclk ==  RCC_I3C1CLKSOURCE_PLL2R)
 80057e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057e2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80057e6:	d107      	bne.n	80057f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80057e8:	f107 030c 	add.w	r3, r7, #12
 80057ec:	4618      	mov	r0, r3
 80057ee:	f7ff fac3 	bl	8004d78 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 80057f2:	697b      	ldr	r3, [r7, #20]
 80057f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80057f6:	e35e      	b.n	8005eb6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I3C1CLKSOURCE_HSI))
 80057f8:	4b23      	ldr	r3, [pc, #140]	@ (8005888 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	f003 0302 	and.w	r3, r3, #2
 8005800:	2b02      	cmp	r3, #2
 8005802:	d10d      	bne.n	8005820 <HAL_RCCEx_GetPeriphCLKFreq+0x7d4>
 8005804:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005806:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800580a:	d109      	bne.n	8005820 <HAL_RCCEx_GetPeriphCLKFreq+0x7d4>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800580c:	4b1e      	ldr	r3, [pc, #120]	@ (8005888 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	08db      	lsrs	r3, r3, #3
 8005812:	f003 0303 	and.w	r3, r3, #3
 8005816:	4a1d      	ldr	r2, [pc, #116]	@ (800588c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8005818:	fa22 f303 	lsr.w	r3, r2, r3
 800581c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800581e:	e34a      	b.n	8005eb6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
          frequency = 0U;
 8005820:	2300      	movs	r3, #0
 8005822:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8005824:	e347      	b.n	8005eb6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

#if defined(I3C2)
      case RCC_PERIPHCLK_I3C2:
        /* Get the current I3C2 source */
        srcclk = __HAL_RCC_GET_I3C2_SOURCE();
 8005826:	4b18      	ldr	r3, [pc, #96]	@ (8005888 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8005828:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800582c:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 8005830:	62bb      	str	r3, [r7, #40]	@ 0x28
        if (srcclk == RCC_I3C2CLKSOURCE_PCLK3)
 8005832:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005834:	2b00      	cmp	r3, #0
 8005836:	d103      	bne.n	8005840 <HAL_RCCEx_GetPeriphCLKFreq+0x7f4>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 8005838:	f7fe fafa 	bl	8003e30 <HAL_RCC_GetPCLK3Freq>
 800583c:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* Clock not enabled for I3C2 */
        else
        {
          frequency = 0U;
        }
        break;
 800583e:	e33a      	b.n	8005eb6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if (srcclk ==  RCC_I3C2CLKSOURCE_PLL2R)
 8005840:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005842:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005846:	d107      	bne.n	8005858 <HAL_RCCEx_GetPeriphCLKFreq+0x80c>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005848:	f107 030c 	add.w	r3, r7, #12
 800584c:	4618      	mov	r0, r3
 800584e:	f7ff fa93 	bl	8004d78 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8005852:	697b      	ldr	r3, [r7, #20]
 8005854:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8005856:	e32e      	b.n	8005eb6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I3C2CLKSOURCE_HSI))
 8005858:	4b0b      	ldr	r3, [pc, #44]	@ (8005888 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	f003 0302 	and.w	r3, r3, #2
 8005860:	2b02      	cmp	r3, #2
 8005862:	d10d      	bne.n	8005880 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
 8005864:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005866:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800586a:	d109      	bne.n	8005880 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800586c:	4b06      	ldr	r3, [pc, #24]	@ (8005888 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	08db      	lsrs	r3, r3, #3
 8005872:	f003 0303 	and.w	r3, r3, #3
 8005876:	4a05      	ldr	r2, [pc, #20]	@ (800588c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8005878:	fa22 f303 	lsr.w	r3, r2, r3
 800587c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800587e:	e31a      	b.n	8005eb6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
          frequency = 0U;
 8005880:	2300      	movs	r3, #0
 8005882:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8005884:	e317      	b.n	8005eb6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8005886:	bf00      	nop
 8005888:	44020c00 	.word	0x44020c00
 800588c:	03d09000 	.word	0x03d09000
 8005890:	003d0900 	.word	0x003d0900
#endif /* I3C2*/

      case RCC_PERIPHCLK_LPTIM1:
        /* Get the current LPTIM1 source */
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8005894:	4b9b      	ldr	r3, [pc, #620]	@ (8005b04 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8005896:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800589a:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800589e:	62bb      	str	r3, [r7, #40]	@ 0x28
 80058a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058a2:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 80058a6:	d044      	beq.n	8005932 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 80058a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058aa:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 80058ae:	d879      	bhi.n	80059a4 <HAL_RCCEx_GetPeriphCLKFreq+0x958>
 80058b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058b2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80058b6:	d02d      	beq.n	8005914 <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 80058b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058ba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80058be:	d871      	bhi.n	80059a4 <HAL_RCCEx_GetPeriphCLKFreq+0x958>
 80058c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058c2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80058c6:	d017      	beq.n	80058f8 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>
 80058c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058ca:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80058ce:	d869      	bhi.n	80059a4 <HAL_RCCEx_GetPeriphCLKFreq+0x958>
 80058d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d004      	beq.n	80058e0 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
 80058d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058d8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80058dc:	d004      	beq.n	80058e8 <HAL_RCCEx_GetPeriphCLKFreq+0x89c>
 80058de:	e061      	b.n	80059a4 <HAL_RCCEx_GetPeriphCLKFreq+0x958>

        switch (srcclk)
        {
          case RCC_LPTIM1CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 80058e0:	f7fe faa6 	bl	8003e30 <HAL_RCC_GetPCLK3Freq>
 80058e4:	62f8      	str	r0, [r7, #44]	@ 0x2c
            break;
 80058e6:	e060      	b.n	80059aa <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
          }
          case RCC_LPTIM1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80058e8:	f107 030c 	add.w	r3, r7, #12
 80058ec:	4618      	mov	r0, r3
 80058ee:	f7ff fa43 	bl	8004d78 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 80058f6:	e058      	b.n	80059aa <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
            break;
          }
#endif /* RCC_LPTIM1CLKSOURCE_PLL3R */
          case RCC_LPTIM1CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80058f8:	4b82      	ldr	r3, [pc, #520]	@ (8005b04 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 80058fa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80058fe:	f003 0302 	and.w	r3, r3, #2
 8005902:	2b02      	cmp	r3, #2
 8005904:	d103      	bne.n	800590e <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
            {
              frequency = LSE_VALUE;
 8005906:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800590a:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }
            else
            {
              frequency = 0;
            }
            break;
 800590c:	e04d      	b.n	80059aa <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
              frequency = 0;
 800590e:	2300      	movs	r3, #0
 8005910:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8005912:	e04a      	b.n	80059aa <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
          }
          case RCC_LPTIM1CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8005914:	4b7b      	ldr	r3, [pc, #492]	@ (8005b04 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8005916:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800591a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800591e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005922:	d103      	bne.n	800592c <HAL_RCCEx_GetPeriphCLKFreq+0x8e0>
            {
              frequency = LSI_VALUE;
 8005924:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8005928:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }
            else
            {
              frequency = 0;
            }
            break;
 800592a:	e03e      	b.n	80059aa <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
              frequency = 0;
 800592c:	2300      	movs	r3, #0
 800592e:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8005930:	e03b      	b.n	80059aa <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
          }
          case RCC_LPTIM1CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM1 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005932:	4b74      	ldr	r3, [pc, #464]	@ (8005b04 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8005934:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005938:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800593c:	627b      	str	r3, [r7, #36]	@ 0x24

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800593e:	4b71      	ldr	r3, [pc, #452]	@ (8005b04 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	f003 0302 	and.w	r3, r3, #2
 8005946:	2b02      	cmp	r3, #2
 8005948:	d10c      	bne.n	8005964 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
 800594a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800594c:	2b00      	cmp	r3, #0
 800594e:	d109      	bne.n	8005964 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005950:	4b6c      	ldr	r3, [pc, #432]	@ (8005b04 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	08db      	lsrs	r3, r3, #3
 8005956:	f003 0303 	and.w	r3, r3, #3
 800595a:	4a6b      	ldr	r2, [pc, #428]	@ (8005b08 <HAL_RCCEx_GetPeriphCLKFreq+0xabc>)
 800595c:	fa22 f303 	lsr.w	r3, r2, r3
 8005960:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005962:	e01e      	b.n	80059a2 <HAL_RCCEx_GetPeriphCLKFreq+0x956>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005964:	4b67      	ldr	r3, [pc, #412]	@ (8005b04 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800596c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005970:	d106      	bne.n	8005980 <HAL_RCCEx_GetPeriphCLKFreq+0x934>
 8005972:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005974:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005978:	d102      	bne.n	8005980 <HAL_RCCEx_GetPeriphCLKFreq+0x934>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800597a:	4b64      	ldr	r3, [pc, #400]	@ (8005b0c <HAL_RCCEx_GetPeriphCLKFreq+0xac0>)
 800597c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800597e:	e010      	b.n	80059a2 <HAL_RCCEx_GetPeriphCLKFreq+0x956>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005980:	4b60      	ldr	r3, [pc, #384]	@ (8005b04 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005988:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800598c:	d106      	bne.n	800599c <HAL_RCCEx_GetPeriphCLKFreq+0x950>
 800598e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005990:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005994:	d102      	bne.n	800599c <HAL_RCCEx_GetPeriphCLKFreq+0x950>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8005996:	4b5e      	ldr	r3, [pc, #376]	@ (8005b10 <HAL_RCCEx_GetPeriphCLKFreq+0xac4>)
 8005998:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800599a:	e002      	b.n	80059a2 <HAL_RCCEx_GetPeriphCLKFreq+0x956>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800599c:	2300      	movs	r3, #0
 800599e:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }

            break;
 80059a0:	e003      	b.n	80059aa <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
 80059a2:	e002      	b.n	80059aa <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
          }
          default :
          {
            frequency = 0U;
 80059a4:	2300      	movs	r3, #0
 80059a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 80059a8:	bf00      	nop
          }
        }
        break;
 80059aa:	e284      	b.n	8005eb6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_LPTIM2:
        /* Get the current LPTIM2 source */
        srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 80059ac:	4b55      	ldr	r3, [pc, #340]	@ (8005b04 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 80059ae:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80059b2:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 80059b6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80059b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059ba:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80059be:	d044      	beq.n	8005a4a <HAL_RCCEx_GetPeriphCLKFreq+0x9fe>
 80059c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059c2:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80059c6:	d879      	bhi.n	8005abc <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
 80059c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059ca:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80059ce:	d02d      	beq.n	8005a2c <HAL_RCCEx_GetPeriphCLKFreq+0x9e0>
 80059d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059d2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80059d6:	d871      	bhi.n	8005abc <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
 80059d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059da:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80059de:	d017      	beq.n	8005a10 <HAL_RCCEx_GetPeriphCLKFreq+0x9c4>
 80059e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059e2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80059e6:	d869      	bhi.n	8005abc <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
 80059e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d004      	beq.n	80059f8 <HAL_RCCEx_GetPeriphCLKFreq+0x9ac>
 80059ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059f0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80059f4:	d004      	beq.n	8005a00 <HAL_RCCEx_GetPeriphCLKFreq+0x9b4>
 80059f6:	e061      	b.n	8005abc <HAL_RCCEx_GetPeriphCLKFreq+0xa70>

        switch (srcclk)
        {
          case RCC_LPTIM2CLKSOURCE_PCLK1:
          {
            frequency = HAL_RCC_GetPCLK1Freq();
 80059f8:	f7fe f9ee 	bl	8003dd8 <HAL_RCC_GetPCLK1Freq>
 80059fc:	62f8      	str	r0, [r7, #44]	@ 0x2c
            break;
 80059fe:	e060      	b.n	8005ac2 <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
          }
          case RCC_LPTIM2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005a00:	f107 030c 	add.w	r3, r7, #12
 8005a04:	4618      	mov	r0, r3
 8005a06:	f7ff f9b7 	bl	8004d78 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8005a0e:	e058      	b.n	8005ac2 <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
            break;
          }
#endif /* RCC_LPTIM2CLKSOURCE_PLL3R */
          case RCC_LPTIM2CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005a10:	4b3c      	ldr	r3, [pc, #240]	@ (8005b04 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8005a12:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005a16:	f003 0302 	and.w	r3, r3, #2
 8005a1a:	2b02      	cmp	r3, #2
 8005a1c:	d103      	bne.n	8005a26 <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
            {
              frequency = LSE_VALUE;
 8005a1e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005a22:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }
            else
            {
              frequency = 0;
            }
            break;
 8005a24:	e04d      	b.n	8005ac2 <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
              frequency = 0;
 8005a26:	2300      	movs	r3, #0
 8005a28:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8005a2a:	e04a      	b.n	8005ac2 <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
          }
          case RCC_LPTIM2CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8005a2c:	4b35      	ldr	r3, [pc, #212]	@ (8005b04 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8005a2e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005a32:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005a36:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005a3a:	d103      	bne.n	8005a44 <HAL_RCCEx_GetPeriphCLKFreq+0x9f8>
            {
              frequency = LSI_VALUE;
 8005a3c:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8005a40:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }
            else
            {
              frequency = 0;
            }
            break;
 8005a42:	e03e      	b.n	8005ac2 <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
              frequency = 0;
 8005a44:	2300      	movs	r3, #0
 8005a46:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8005a48:	e03b      	b.n	8005ac2 <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
          }
          case RCC_LPTIM2CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM2 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005a4a:	4b2e      	ldr	r3, [pc, #184]	@ (8005b04 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8005a4c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005a50:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8005a54:	627b      	str	r3, [r7, #36]	@ 0x24

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005a56:	4b2b      	ldr	r3, [pc, #172]	@ (8005b04 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	f003 0302 	and.w	r3, r3, #2
 8005a5e:	2b02      	cmp	r3, #2
 8005a60:	d10c      	bne.n	8005a7c <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
 8005a62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d109      	bne.n	8005a7c <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005a68:	4b26      	ldr	r3, [pc, #152]	@ (8005b04 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	08db      	lsrs	r3, r3, #3
 8005a6e:	f003 0303 	and.w	r3, r3, #3
 8005a72:	4a25      	ldr	r2, [pc, #148]	@ (8005b08 <HAL_RCCEx_GetPeriphCLKFreq+0xabc>)
 8005a74:	fa22 f303 	lsr.w	r3, r2, r3
 8005a78:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005a7a:	e01e      	b.n	8005aba <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005a7c:	4b21      	ldr	r3, [pc, #132]	@ (8005b04 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005a84:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005a88:	d106      	bne.n	8005a98 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
 8005a8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a8c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005a90:	d102      	bne.n	8005a98 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8005a92:	4b1e      	ldr	r3, [pc, #120]	@ (8005b0c <HAL_RCCEx_GetPeriphCLKFreq+0xac0>)
 8005a94:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005a96:	e010      	b.n	8005aba <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005a98:	4b1a      	ldr	r3, [pc, #104]	@ (8005b04 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005aa0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005aa4:	d106      	bne.n	8005ab4 <HAL_RCCEx_GetPeriphCLKFreq+0xa68>
 8005aa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005aa8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005aac:	d102      	bne.n	8005ab4 <HAL_RCCEx_GetPeriphCLKFreq+0xa68>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8005aae:	4b18      	ldr	r3, [pc, #96]	@ (8005b10 <HAL_RCCEx_GetPeriphCLKFreq+0xac4>)
 8005ab0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005ab2:	e002      	b.n	8005aba <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8005ab4:	2300      	movs	r3, #0
 8005ab6:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }

            break;
 8005ab8:	e003      	b.n	8005ac2 <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
 8005aba:	e002      	b.n	8005ac2 <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
          }
          default :
          {
            frequency = 0U;
 8005abc:	2300      	movs	r3, #0
 8005abe:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8005ac0:	bf00      	nop
          }
        }
        break;
 8005ac2:	e1f8      	b.n	8005eb6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        break;
#endif /* LPTIM6 */

      case RCC_PERIPHCLK_FDCAN:
        /* Get the current FDCAN kernel source */
        srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8005ac4:	4b0f      	ldr	r3, [pc, #60]	@ (8005b04 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8005ac6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005aca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005ace:	62bb      	str	r3, [r7, #40]	@ 0x28

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCANCLKSOURCE_HSE))
 8005ad0:	4b0c      	ldr	r3, [pc, #48]	@ (8005b04 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005ad8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005adc:	d105      	bne.n	8005aea <HAL_RCCEx_GetPeriphCLKFreq+0xa9e>
 8005ade:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d102      	bne.n	8005aea <HAL_RCCEx_GetPeriphCLKFreq+0xa9e>
        {
          frequency = HSE_VALUE;
 8005ae4:	4b0a      	ldr	r3, [pc, #40]	@ (8005b10 <HAL_RCCEx_GetPeriphCLKFreq+0xac4>)
 8005ae6:	62fb      	str	r3, [r7, #44]	@ 0x2c
        /* Clock not enabled for FDCAN */
        else
        {
          frequency = 0U;
        }
        break;
 8005ae8:	e1e5      	b.n	8005eb6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL1Q)
 8005aea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005aec:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005af0:	d110      	bne.n	8005b14 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005af2:	f107 0318 	add.w	r3, r7, #24
 8005af6:	4618      	mov	r0, r3
 8005af8:	f7fe ffd4 	bl	8004aa4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005afc:	69fb      	ldr	r3, [r7, #28]
 8005afe:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8005b00:	e1d9      	b.n	8005eb6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8005b02:	bf00      	nop
 8005b04:	44020c00 	.word	0x44020c00
 8005b08:	03d09000 	.word	0x03d09000
 8005b0c:	003d0900 	.word	0x003d0900
 8005b10:	017d7840 	.word	0x017d7840
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL2Q)
 8005b14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b16:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005b1a:	d107      	bne.n	8005b2c <HAL_RCCEx_GetPeriphCLKFreq+0xae0>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005b1c:	f107 030c 	add.w	r3, r7, #12
 8005b20:	4618      	mov	r0, r3
 8005b22:	f7ff f929 	bl	8004d78 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005b26:	693b      	ldr	r3, [r7, #16]
 8005b28:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8005b2a:	e1c4      	b.n	8005eb6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
          frequency = 0U;
 8005b2c:	2300      	movs	r3, #0
 8005b2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8005b30:	e1c1      	b.n	8005eb6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_SPI1:
        /* Get the current SPI1 kernel source */
        srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 8005b32:	4b9d      	ldr	r3, [pc, #628]	@ (8005da8 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8005b34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005b38:	f003 0307 	and.w	r3, r3, #7
 8005b3c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005b3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b40:	2b04      	cmp	r3, #4
 8005b42:	d859      	bhi.n	8005bf8 <HAL_RCCEx_GetPeriphCLKFreq+0xbac>
 8005b44:	a201      	add	r2, pc, #4	@ (adr r2, 8005b4c <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8005b46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b4a:	bf00      	nop
 8005b4c:	08005b61 	.word	0x08005b61
 8005b50:	08005b71 	.word	0x08005b71
 8005b54:	08005bf9 	.word	0x08005bf9
 8005b58:	08005b81 	.word	0x08005b81
 8005b5c:	08005b87 	.word	0x08005b87
        switch (srcclk)
        {
          case RCC_SPI1CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005b60:	f107 0318 	add.w	r3, r7, #24
 8005b64:	4618      	mov	r0, r3
 8005b66:	f7fe ff9d 	bl	8004aa4 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8005b6a:	69fb      	ldr	r3, [r7, #28]
 8005b6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8005b6e:	e046      	b.n	8005bfe <HAL_RCCEx_GetPeriphCLKFreq+0xbb2>
          }
          case RCC_SPI1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005b70:	f107 030c 	add.w	r3, r7, #12
 8005b74:	4618      	mov	r0, r3
 8005b76:	f7ff f8ff 	bl	8004d78 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8005b7e:	e03e      	b.n	8005bfe <HAL_RCCEx_GetPeriphCLKFreq+0xbb2>
            break;
          }
#endif /* RCC_SPI1CLKSOURCE_PLL3P */
          case RCC_SPI1CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8005b80:	4b8a      	ldr	r3, [pc, #552]	@ (8005dac <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 8005b82:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8005b84:	e03b      	b.n	8005bfe <HAL_RCCEx_GetPeriphCLKFreq+0xbb2>
          }
          case RCC_SPI1CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005b86:	4b88      	ldr	r3, [pc, #544]	@ (8005da8 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8005b88:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005b8c:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8005b90:	627b      	str	r3, [r7, #36]	@ 0x24

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005b92:	4b85      	ldr	r3, [pc, #532]	@ (8005da8 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	f003 0302 	and.w	r3, r3, #2
 8005b9a:	2b02      	cmp	r3, #2
 8005b9c:	d10c      	bne.n	8005bb8 <HAL_RCCEx_GetPeriphCLKFreq+0xb6c>
 8005b9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d109      	bne.n	8005bb8 <HAL_RCCEx_GetPeriphCLKFreq+0xb6c>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005ba4:	4b80      	ldr	r3, [pc, #512]	@ (8005da8 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	08db      	lsrs	r3, r3, #3
 8005baa:	f003 0303 	and.w	r3, r3, #3
 8005bae:	4a80      	ldr	r2, [pc, #512]	@ (8005db0 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 8005bb0:	fa22 f303 	lsr.w	r3, r2, r3
 8005bb4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005bb6:	e01e      	b.n	8005bf6 <HAL_RCCEx_GetPeriphCLKFreq+0xbaa>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005bb8:	4b7b      	ldr	r3, [pc, #492]	@ (8005da8 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005bc0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005bc4:	d106      	bne.n	8005bd4 <HAL_RCCEx_GetPeriphCLKFreq+0xb88>
 8005bc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bc8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005bcc:	d102      	bne.n	8005bd4 <HAL_RCCEx_GetPeriphCLKFreq+0xb88>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8005bce:	4b79      	ldr	r3, [pc, #484]	@ (8005db4 <HAL_RCCEx_GetPeriphCLKFreq+0xd68>)
 8005bd0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005bd2:	e010      	b.n	8005bf6 <HAL_RCCEx_GetPeriphCLKFreq+0xbaa>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005bd4:	4b74      	ldr	r3, [pc, #464]	@ (8005da8 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005bdc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005be0:	d106      	bne.n	8005bf0 <HAL_RCCEx_GetPeriphCLKFreq+0xba4>
 8005be2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005be4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005be8:	d102      	bne.n	8005bf0 <HAL_RCCEx_GetPeriphCLKFreq+0xba4>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8005bea:	4b73      	ldr	r3, [pc, #460]	@ (8005db8 <HAL_RCCEx_GetPeriphCLKFreq+0xd6c>)
 8005bec:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005bee:	e002      	b.n	8005bf6 <HAL_RCCEx_GetPeriphCLKFreq+0xbaa>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8005bf0:	2300      	movs	r3, #0
 8005bf2:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }

            break;
 8005bf4:	e003      	b.n	8005bfe <HAL_RCCEx_GetPeriphCLKFreq+0xbb2>
 8005bf6:	e002      	b.n	8005bfe <HAL_RCCEx_GetPeriphCLKFreq+0xbb2>
          }
          default:
          {
            frequency = 0;
 8005bf8:	2300      	movs	r3, #0
 8005bfa:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8005bfc:	bf00      	nop
          }
        }
        break;
 8005bfe:	e15a      	b.n	8005eb6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_SPI2:
        /* Get the current SPI2 kernel source */
        srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 8005c00:	4b69      	ldr	r3, [pc, #420]	@ (8005da8 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8005c02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005c06:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005c0a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005c0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c0e:	2b20      	cmp	r3, #32
 8005c10:	d022      	beq.n	8005c58 <HAL_RCCEx_GetPeriphCLKFreq+0xc0c>
 8005c12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c14:	2b20      	cmp	r3, #32
 8005c16:	d858      	bhi.n	8005cca <HAL_RCCEx_GetPeriphCLKFreq+0xc7e>
 8005c18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c1a:	2b18      	cmp	r3, #24
 8005c1c:	d019      	beq.n	8005c52 <HAL_RCCEx_GetPeriphCLKFreq+0xc06>
 8005c1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c20:	2b18      	cmp	r3, #24
 8005c22:	d852      	bhi.n	8005cca <HAL_RCCEx_GetPeriphCLKFreq+0xc7e>
 8005c24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d003      	beq.n	8005c32 <HAL_RCCEx_GetPeriphCLKFreq+0xbe6>
 8005c2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c2c:	2b08      	cmp	r3, #8
 8005c2e:	d008      	beq.n	8005c42 <HAL_RCCEx_GetPeriphCLKFreq+0xbf6>
 8005c30:	e04b      	b.n	8005cca <HAL_RCCEx_GetPeriphCLKFreq+0xc7e>
        switch (srcclk)
        {
          case RCC_SPI2CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005c32:	f107 0318 	add.w	r3, r7, #24
 8005c36:	4618      	mov	r0, r3
 8005c38:	f7fe ff34 	bl	8004aa4 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8005c3c:	69fb      	ldr	r3, [r7, #28]
 8005c3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8005c40:	e046      	b.n	8005cd0 <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
          }
          case RCC_SPI2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005c42:	f107 030c 	add.w	r3, r7, #12
 8005c46:	4618      	mov	r0, r3
 8005c48:	f7ff f896 	bl	8004d78 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8005c50:	e03e      	b.n	8005cd0 <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
            break;
          }
#endif /* RCC_SPI2CLKSOURCE_PLL3P */
          case RCC_SPI2CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8005c52:	4b56      	ldr	r3, [pc, #344]	@ (8005dac <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 8005c54:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8005c56:	e03b      	b.n	8005cd0 <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
          }
          case RCC_SPI2CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005c58:	4b53      	ldr	r3, [pc, #332]	@ (8005da8 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8005c5a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005c5e:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8005c62:	627b      	str	r3, [r7, #36]	@ 0x24

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005c64:	4b50      	ldr	r3, [pc, #320]	@ (8005da8 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	f003 0302 	and.w	r3, r3, #2
 8005c6c:	2b02      	cmp	r3, #2
 8005c6e:	d10c      	bne.n	8005c8a <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
 8005c70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d109      	bne.n	8005c8a <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005c76:	4b4c      	ldr	r3, [pc, #304]	@ (8005da8 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	08db      	lsrs	r3, r3, #3
 8005c7c:	f003 0303 	and.w	r3, r3, #3
 8005c80:	4a4b      	ldr	r2, [pc, #300]	@ (8005db0 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 8005c82:	fa22 f303 	lsr.w	r3, r2, r3
 8005c86:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005c88:	e01e      	b.n	8005cc8 <HAL_RCCEx_GetPeriphCLKFreq+0xc7c>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005c8a:	4b47      	ldr	r3, [pc, #284]	@ (8005da8 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005c92:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005c96:	d106      	bne.n	8005ca6 <HAL_RCCEx_GetPeriphCLKFreq+0xc5a>
 8005c98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c9a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005c9e:	d102      	bne.n	8005ca6 <HAL_RCCEx_GetPeriphCLKFreq+0xc5a>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8005ca0:	4b44      	ldr	r3, [pc, #272]	@ (8005db4 <HAL_RCCEx_GetPeriphCLKFreq+0xd68>)
 8005ca2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005ca4:	e010      	b.n	8005cc8 <HAL_RCCEx_GetPeriphCLKFreq+0xc7c>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005ca6:	4b40      	ldr	r3, [pc, #256]	@ (8005da8 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005cae:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005cb2:	d106      	bne.n	8005cc2 <HAL_RCCEx_GetPeriphCLKFreq+0xc76>
 8005cb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cb6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005cba:	d102      	bne.n	8005cc2 <HAL_RCCEx_GetPeriphCLKFreq+0xc76>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8005cbc:	4b3e      	ldr	r3, [pc, #248]	@ (8005db8 <HAL_RCCEx_GetPeriphCLKFreq+0xd6c>)
 8005cbe:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005cc0:	e002      	b.n	8005cc8 <HAL_RCCEx_GetPeriphCLKFreq+0xc7c>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8005cc2:	2300      	movs	r3, #0
 8005cc4:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }

            break;
 8005cc6:	e003      	b.n	8005cd0 <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
 8005cc8:	e002      	b.n	8005cd0 <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
          }
          default:
          {
            frequency = 0;
 8005cca:	2300      	movs	r3, #0
 8005ccc:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8005cce:	bf00      	nop
          }
        }
        break;
 8005cd0:	e0f1      	b.n	8005eb6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_SPI3:
        /* Get the current SPI3 kernel source */
        srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 8005cd2:	4b35      	ldr	r3, [pc, #212]	@ (8005da8 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8005cd4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005cd8:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 8005cdc:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005cde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ce0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005ce4:	d023      	beq.n	8005d2e <HAL_RCCEx_GetPeriphCLKFreq+0xce2>
 8005ce6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ce8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005cec:	d858      	bhi.n	8005da0 <HAL_RCCEx_GetPeriphCLKFreq+0xd54>
 8005cee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005cf0:	2bc0      	cmp	r3, #192	@ 0xc0
 8005cf2:	d019      	beq.n	8005d28 <HAL_RCCEx_GetPeriphCLKFreq+0xcdc>
 8005cf4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005cf6:	2bc0      	cmp	r3, #192	@ 0xc0
 8005cf8:	d852      	bhi.n	8005da0 <HAL_RCCEx_GetPeriphCLKFreq+0xd54>
 8005cfa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d003      	beq.n	8005d08 <HAL_RCCEx_GetPeriphCLKFreq+0xcbc>
 8005d00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d02:	2b40      	cmp	r3, #64	@ 0x40
 8005d04:	d008      	beq.n	8005d18 <HAL_RCCEx_GetPeriphCLKFreq+0xccc>
 8005d06:	e04b      	b.n	8005da0 <HAL_RCCEx_GetPeriphCLKFreq+0xd54>
        switch (srcclk)
        {
          case RCC_SPI3CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005d08:	f107 0318 	add.w	r3, r7, #24
 8005d0c:	4618      	mov	r0, r3
 8005d0e:	f7fe fec9 	bl	8004aa4 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8005d12:	69fb      	ldr	r3, [r7, #28]
 8005d14:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8005d16:	e046      	b.n	8005da6 <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
          }
          case RCC_SPI3CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005d18:	f107 030c 	add.w	r3, r7, #12
 8005d1c:	4618      	mov	r0, r3
 8005d1e:	f7ff f82b 	bl	8004d78 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8005d26:	e03e      	b.n	8005da6 <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
            break;
          }
#endif /* RCC_SPI3CLKSOURCE_PLL3P */
          case RCC_SPI3CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8005d28:	4b20      	ldr	r3, [pc, #128]	@ (8005dac <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 8005d2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8005d2c:	e03b      	b.n	8005da6 <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
          }
          case RCC_SPI3CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005d2e:	4b1e      	ldr	r3, [pc, #120]	@ (8005da8 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8005d30:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005d34:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8005d38:	627b      	str	r3, [r7, #36]	@ 0x24

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005d3a:	4b1b      	ldr	r3, [pc, #108]	@ (8005da8 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	f003 0302 	and.w	r3, r3, #2
 8005d42:	2b02      	cmp	r3, #2
 8005d44:	d10c      	bne.n	8005d60 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>
 8005d46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d109      	bne.n	8005d60 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005d4c:	4b16      	ldr	r3, [pc, #88]	@ (8005da8 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	08db      	lsrs	r3, r3, #3
 8005d52:	f003 0303 	and.w	r3, r3, #3
 8005d56:	4a16      	ldr	r2, [pc, #88]	@ (8005db0 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 8005d58:	fa22 f303 	lsr.w	r3, r2, r3
 8005d5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005d5e:	e01e      	b.n	8005d9e <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005d60:	4b11      	ldr	r3, [pc, #68]	@ (8005da8 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005d68:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005d6c:	d106      	bne.n	8005d7c <HAL_RCCEx_GetPeriphCLKFreq+0xd30>
 8005d6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d70:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005d74:	d102      	bne.n	8005d7c <HAL_RCCEx_GetPeriphCLKFreq+0xd30>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8005d76:	4b0f      	ldr	r3, [pc, #60]	@ (8005db4 <HAL_RCCEx_GetPeriphCLKFreq+0xd68>)
 8005d78:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005d7a:	e010      	b.n	8005d9e <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005d7c:	4b0a      	ldr	r3, [pc, #40]	@ (8005da8 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005d84:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005d88:	d106      	bne.n	8005d98 <HAL_RCCEx_GetPeriphCLKFreq+0xd4c>
 8005d8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d8c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005d90:	d102      	bne.n	8005d98 <HAL_RCCEx_GetPeriphCLKFreq+0xd4c>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8005d92:	4b09      	ldr	r3, [pc, #36]	@ (8005db8 <HAL_RCCEx_GetPeriphCLKFreq+0xd6c>)
 8005d94:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005d96:	e002      	b.n	8005d9e <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8005d98:	2300      	movs	r3, #0
 8005d9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }

            break;
 8005d9c:	e003      	b.n	8005da6 <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
 8005d9e:	e002      	b.n	8005da6 <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
          }
          default:
          {
            frequency = 0;
 8005da0:	2300      	movs	r3, #0
 8005da2:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8005da4:	bf00      	nop
          }
        }
        break;
 8005da6:	e086      	b.n	8005eb6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8005da8:	44020c00 	.word	0x44020c00
 8005dac:	00bb8000 	.word	0x00bb8000
 8005db0:	03d09000 	.word	0x03d09000
 8005db4:	003d0900 	.word	0x003d0900
 8005db8:	017d7840 	.word	0x017d7840
        break;
#endif /* CEC */

      case RCC_PERIPHCLK_RNG:
        /* Get the current RNG source */
        srcclk = __HAL_RCC_GET_RNG_SOURCE();
 8005dbc:	4b40      	ldr	r3, [pc, #256]	@ (8005ec0 <HAL_RCCEx_GetPeriphCLKFreq+0xe74>)
 8005dbe:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005dc2:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005dc6:	62bb      	str	r3, [r7, #40]	@ 0x28

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 8005dc8:	4b3d      	ldr	r3, [pc, #244]	@ (8005ec0 <HAL_RCCEx_GetPeriphCLKFreq+0xe74>)
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005dd0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005dd4:	d105      	bne.n	8005de2 <HAL_RCCEx_GetPeriphCLKFreq+0xd96>
 8005dd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d102      	bne.n	8005de2 <HAL_RCCEx_GetPeriphCLKFreq+0xd96>
        {
          frequency = HSI48_VALUE;
 8005ddc:	4b39      	ldr	r3, [pc, #228]	@ (8005ec4 <HAL_RCCEx_GetPeriphCLKFreq+0xe78>)
 8005dde:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005de0:	e031      	b.n	8005e46 <HAL_RCCEx_GetPeriphCLKFreq+0xdfa>
        }
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY)) && (srcclk == RCC_RNGCLKSOURCE_PLL1Q))
 8005de2:	4b37      	ldr	r3, [pc, #220]	@ (8005ec0 <HAL_RCCEx_GetPeriphCLKFreq+0xe74>)
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005dea:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005dee:	d10a      	bne.n	8005e06 <HAL_RCCEx_GetPeriphCLKFreq+0xdba>
 8005df0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005df2:	2b10      	cmp	r3, #16
 8005df4:	d107      	bne.n	8005e06 <HAL_RCCEx_GetPeriphCLKFreq+0xdba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005df6:	f107 0318 	add.w	r3, r7, #24
 8005dfa:	4618      	mov	r0, r3
 8005dfc:	f7fe fe52 	bl	8004aa4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005e00:	69fb      	ldr	r3, [r7, #28]
 8005e02:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005e04:	e01f      	b.n	8005e46 <HAL_RCCEx_GetPeriphCLKFreq+0xdfa>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RNGCLKSOURCE_LSE))
 8005e06:	4b2e      	ldr	r3, [pc, #184]	@ (8005ec0 <HAL_RCCEx_GetPeriphCLKFreq+0xe74>)
 8005e08:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005e0c:	f003 0302 	and.w	r3, r3, #2
 8005e10:	2b02      	cmp	r3, #2
 8005e12:	d106      	bne.n	8005e22 <HAL_RCCEx_GetPeriphCLKFreq+0xdd6>
 8005e14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e16:	2b20      	cmp	r3, #32
 8005e18:	d103      	bne.n	8005e22 <HAL_RCCEx_GetPeriphCLKFreq+0xdd6>
        {
          frequency = LSE_VALUE;
 8005e1a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005e1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005e20:	e011      	b.n	8005e46 <HAL_RCCEx_GetPeriphCLKFreq+0xdfa>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_LSI))
 8005e22:	4b27      	ldr	r3, [pc, #156]	@ (8005ec0 <HAL_RCCEx_GetPeriphCLKFreq+0xe74>)
 8005e24:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005e28:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005e2c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005e30:	d106      	bne.n	8005e40 <HAL_RCCEx_GetPeriphCLKFreq+0xdf4>
 8005e32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e34:	2b30      	cmp	r3, #48	@ 0x30
 8005e36:	d103      	bne.n	8005e40 <HAL_RCCEx_GetPeriphCLKFreq+0xdf4>
        {
          frequency = LSI_VALUE;
 8005e38:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8005e3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005e3e:	e002      	b.n	8005e46 <HAL_RCCEx_GetPeriphCLKFreq+0xdfa>
        }

        /* Clock not enabled for RNG */
        else
        {
          frequency = 0U;
 8005e40:	2300      	movs	r3, #0
 8005e42:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        break;
 8005e44:	e037      	b.n	8005eb6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8005e46:	e036      	b.n	8005eb6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

#if defined(USB_DRD_FS)
      case RCC_PERIPHCLK_USB:
        /* Get the current USB kernel source */
        srcclk = __HAL_RCC_GET_USB_SOURCE();
 8005e48:	4b1d      	ldr	r3, [pc, #116]	@ (8005ec0 <HAL_RCCEx_GetPeriphCLKFreq+0xe74>)
 8005e4a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005e4e:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005e52:	62bb      	str	r3, [r7, #40]	@ 0x28

        if (srcclk == RCC_USBCLKSOURCE_PLL1Q)
 8005e54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e56:	2b10      	cmp	r3, #16
 8005e58:	d107      	bne.n	8005e6a <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005e5a:	f107 0318 	add.w	r3, r7, #24
 8005e5e:	4618      	mov	r0, r3
 8005e60:	f7fe fe20 	bl	8004aa4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005e64:	69fb      	ldr	r3, [r7, #28]
 8005e66:	62fb      	str	r3, [r7, #44]	@ 0x2c
          break;
 8005e68:	e025      	b.n	8005eb6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
          frequency = pll3_clocks.PLL3_Q_Frequency;
        }
#else
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USBCLKSOURCE_PLL2Q))
 8005e6a:	4b15      	ldr	r3, [pc, #84]	@ (8005ec0 <HAL_RCCEx_GetPeriphCLKFreq+0xe74>)
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005e72:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005e76:	d10a      	bne.n	8005e8e <HAL_RCCEx_GetPeriphCLKFreq+0xe42>
 8005e78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e7a:	2b20      	cmp	r3, #32
 8005e7c:	d107      	bne.n	8005e8e <HAL_RCCEx_GetPeriphCLKFreq+0xe42>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005e7e:	f107 030c 	add.w	r3, r7, #12
 8005e82:	4618      	mov	r0, r3
 8005e84:	f7fe ff78 	bl	8004d78 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005e88:	693b      	ldr	r3, [r7, #16]
 8005e8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005e8c:	e00f      	b.n	8005eae <HAL_RCCEx_GetPeriphCLKFreq+0xe62>
        }
#endif /* RCC_USBCLKSOURCE_PLL3 */
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_USBCLKSOURCE_HSI48))
 8005e8e:	4b0c      	ldr	r3, [pc, #48]	@ (8005ec0 <HAL_RCCEx_GetPeriphCLKFreq+0xe74>)
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005e96:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005e9a:	d105      	bne.n	8005ea8 <HAL_RCCEx_GetPeriphCLKFreq+0xe5c>
 8005e9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e9e:	2b30      	cmp	r3, #48	@ 0x30
 8005ea0:	d102      	bne.n	8005ea8 <HAL_RCCEx_GetPeriphCLKFreq+0xe5c>
        {
          frequency = HSI48_VALUE;
 8005ea2:	4b08      	ldr	r3, [pc, #32]	@ (8005ec4 <HAL_RCCEx_GetPeriphCLKFreq+0xe78>)
 8005ea4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005ea6:	e002      	b.n	8005eae <HAL_RCCEx_GetPeriphCLKFreq+0xe62>
        }
        /* Clock not enabled for USB */
        else
        {
          frequency = 0U;
 8005ea8:	2300      	movs	r3, #0
 8005eaa:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }

        break;
 8005eac:	e003      	b.n	8005eb6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8005eae:	e002      	b.n	8005eb6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>


      default:
        frequency = 0U;
 8005eb0:	2300      	movs	r3, #0
 8005eb2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8005eb4:	bf00      	nop
        }
        break;
#endif /* RCC_CCIPR4_ETHCLKSEL */
    }
  }
  return (frequency);
 8005eb6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8005eb8:	4618      	mov	r0, r3
 8005eba:	3730      	adds	r7, #48	@ 0x30
 8005ebc:	46bd      	mov	sp, r7
 8005ebe:	bd80      	pop	{r7, pc}
 8005ec0:	44020c00 	.word	0x44020c00
 8005ec4:	02dc6c00 	.word	0x02dc6c00

08005ec8 <RCCEx_PLL2_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL2 output clocks dividers
  * @note   PLL2 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 8005ec8:	b580      	push	{r7, lr}
 8005eca:	b084      	sub	sp, #16
 8005ecc:	af00      	add	r7, sp, #0
 8005ece:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL2_VCIRGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2_VCORGE_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLL2_FRACN_VALUE(pll2->PLL2FRACN));

  /* Disable  PLL2. */
  __HAL_RCC_PLL2_DISABLE();
 8005ed0:	4b48      	ldr	r3, [pc, #288]	@ (8005ff4 <RCCEx_PLL2_Config+0x12c>)
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	4a47      	ldr	r2, [pc, #284]	@ (8005ff4 <RCCEx_PLL2_Config+0x12c>)
 8005ed6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005eda:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005edc:	f7fc f8de 	bl	800209c <HAL_GetTick>
 8005ee0:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005ee2:	e008      	b.n	8005ef6 <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005ee4:	f7fc f8da 	bl	800209c <HAL_GetTick>
 8005ee8:	4602      	mov	r2, r0
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	1ad3      	subs	r3, r2, r3
 8005eee:	2b02      	cmp	r3, #2
 8005ef0:	d901      	bls.n	8005ef6 <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8005ef2:	2303      	movs	r3, #3
 8005ef4:	e07a      	b.n	8005fec <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005ef6:	4b3f      	ldr	r3, [pc, #252]	@ (8005ff4 <RCCEx_PLL2_Config+0x12c>)
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d1f0      	bne.n	8005ee4 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors. */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 8005f02:	4b3c      	ldr	r3, [pc, #240]	@ (8005ff4 <RCCEx_PLL2_Config+0x12c>)
 8005f04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f06:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8005f0a:	f023 0303 	bic.w	r3, r3, #3
 8005f0e:	687a      	ldr	r2, [r7, #4]
 8005f10:	6811      	ldr	r1, [r2, #0]
 8005f12:	687a      	ldr	r2, [r7, #4]
 8005f14:	6852      	ldr	r2, [r2, #4]
 8005f16:	0212      	lsls	r2, r2, #8
 8005f18:	430a      	orrs	r2, r1
 8005f1a:	4936      	ldr	r1, [pc, #216]	@ (8005ff4 <RCCEx_PLL2_Config+0x12c>)
 8005f1c:	4313      	orrs	r3, r2
 8005f1e:	62cb      	str	r3, [r1, #44]	@ 0x2c
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	689b      	ldr	r3, [r3, #8]
 8005f24:	3b01      	subs	r3, #1
 8005f26:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	68db      	ldr	r3, [r3, #12]
 8005f2e:	3b01      	subs	r3, #1
 8005f30:	025b      	lsls	r3, r3, #9
 8005f32:	b29b      	uxth	r3, r3
 8005f34:	431a      	orrs	r2, r3
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	691b      	ldr	r3, [r3, #16]
 8005f3a:	3b01      	subs	r3, #1
 8005f3c:	041b      	lsls	r3, r3, #16
 8005f3e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8005f42:	431a      	orrs	r2, r3
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	695b      	ldr	r3, [r3, #20]
 8005f48:	3b01      	subs	r3, #1
 8005f4a:	061b      	lsls	r3, r3, #24
 8005f4c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8005f50:	4928      	ldr	r1, [pc, #160]	@ (8005ff4 <RCCEx_PLL2_Config+0x12c>)
 8005f52:	4313      	orrs	r3, r2
 8005f54:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 8005f56:	4b27      	ldr	r3, [pc, #156]	@ (8005ff4 <RCCEx_PLL2_Config+0x12c>)
 8005f58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f5a:	f023 020c 	bic.w	r2, r3, #12
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	699b      	ldr	r3, [r3, #24]
 8005f62:	4924      	ldr	r1, [pc, #144]	@ (8005ff4 <RCCEx_PLL2_Config+0x12c>)
 8005f64:	4313      	orrs	r3, r2
 8005f66:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Select PLL2 output frequency range : VCO */
  __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL);
 8005f68:	4b22      	ldr	r3, [pc, #136]	@ (8005ff4 <RCCEx_PLL2_Config+0x12c>)
 8005f6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f6c:	f023 0220 	bic.w	r2, r3, #32
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	69db      	ldr	r3, [r3, #28]
 8005f74:	491f      	ldr	r1, [pc, #124]	@ (8005ff4 <RCCEx_PLL2_Config+0x12c>)
 8005f76:	4313      	orrs	r3, r2
 8005f78:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2_CLKOUT_ENABLE(pll2->PLL2ClockOut);
 8005f7a:	4b1e      	ldr	r3, [pc, #120]	@ (8005ff4 <RCCEx_PLL2_Config+0x12c>)
 8005f7c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f82:	491c      	ldr	r1, [pc, #112]	@ (8005ff4 <RCCEx_PLL2_Config+0x12c>)
 8005f84:	4313      	orrs	r3, r2
 8005f86:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_DISABLE();
 8005f88:	4b1a      	ldr	r3, [pc, #104]	@ (8005ff4 <RCCEx_PLL2_Config+0x12c>)
 8005f8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f8c:	4a19      	ldr	r2, [pc, #100]	@ (8005ff4 <RCCEx_PLL2_Config+0x12c>)
 8005f8e:	f023 0310 	bic.w	r3, r3, #16
 8005f92:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2_FRACN_CONFIG(pll2->PLL2FRACN);
 8005f94:	4b17      	ldr	r3, [pc, #92]	@ (8005ff4 <RCCEx_PLL2_Config+0x12c>)
 8005f96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f98:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005f9c:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8005fa0:	687a      	ldr	r2, [r7, #4]
 8005fa2:	6a12      	ldr	r2, [r2, #32]
 8005fa4:	00d2      	lsls	r2, r2, #3
 8005fa6:	4913      	ldr	r1, [pc, #76]	@ (8005ff4 <RCCEx_PLL2_Config+0x12c>)
 8005fa8:	4313      	orrs	r3, r2
 8005faa:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_ENABLE();
 8005fac:	4b11      	ldr	r3, [pc, #68]	@ (8005ff4 <RCCEx_PLL2_Config+0x12c>)
 8005fae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005fb0:	4a10      	ldr	r2, [pc, #64]	@ (8005ff4 <RCCEx_PLL2_Config+0x12c>)
 8005fb2:	f043 0310 	orr.w	r3, r3, #16
 8005fb6:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2. */
  __HAL_RCC_PLL2_ENABLE();
 8005fb8:	4b0e      	ldr	r3, [pc, #56]	@ (8005ff4 <RCCEx_PLL2_Config+0x12c>)
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	4a0d      	ldr	r2, [pc, #52]	@ (8005ff4 <RCCEx_PLL2_Config+0x12c>)
 8005fbe:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005fc2:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005fc4:	f7fc f86a 	bl	800209c <HAL_GetTick>
 8005fc8:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005fca:	e008      	b.n	8005fde <RCCEx_PLL2_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005fcc:	f7fc f866 	bl	800209c <HAL_GetTick>
 8005fd0:	4602      	mov	r2, r0
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	1ad3      	subs	r3, r2, r3
 8005fd6:	2b02      	cmp	r3, #2
 8005fd8:	d901      	bls.n	8005fde <RCCEx_PLL2_Config+0x116>
    {
      return HAL_TIMEOUT;
 8005fda:	2303      	movs	r3, #3
 8005fdc:	e006      	b.n	8005fec <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005fde:	4b05      	ldr	r3, [pc, #20]	@ (8005ff4 <RCCEx_PLL2_Config+0x12c>)
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d0f0      	beq.n	8005fcc <RCCEx_PLL2_Config+0x104>
    }
  }
  return HAL_OK;
 8005fea:	2300      	movs	r3, #0

}
 8005fec:	4618      	mov	r0, r3
 8005fee:	3710      	adds	r7, #16
 8005ff0:	46bd      	mov	sp, r7
 8005ff2:	bd80      	pop	{r7, pc}
 8005ff4:	44020c00 	.word	0x44020c00

08005ff8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005ff8:	b580      	push	{r7, lr}
 8005ffa:	b082      	sub	sp, #8
 8005ffc:	af00      	add	r7, sp, #0
 8005ffe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	2b00      	cmp	r3, #0
 8006004:	d101      	bne.n	800600a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006006:	2301      	movs	r3, #1
 8006008:	e049      	b.n	800609e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006010:	b2db      	uxtb	r3, r3
 8006012:	2b00      	cmp	r3, #0
 8006014:	d106      	bne.n	8006024 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	2200      	movs	r2, #0
 800601a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800601e:	6878      	ldr	r0, [r7, #4]
 8006020:	f7fb fc5e 	bl	80018e0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	2202      	movs	r2, #2
 8006028:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681a      	ldr	r2, [r3, #0]
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	3304      	adds	r3, #4
 8006034:	4619      	mov	r1, r3
 8006036:	4610      	mov	r0, r2
 8006038:	f000 fa18 	bl	800646c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	2201      	movs	r2, #1
 8006040:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	2201      	movs	r2, #1
 8006048:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	2201      	movs	r2, #1
 8006050:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	2201      	movs	r2, #1
 8006058:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	2201      	movs	r2, #1
 8006060:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	2201      	movs	r2, #1
 8006068:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	2201      	movs	r2, #1
 8006070:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	2201      	movs	r2, #1
 8006078:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	2201      	movs	r2, #1
 8006080:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	2201      	movs	r2, #1
 8006088:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	2201      	movs	r2, #1
 8006090:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	2201      	movs	r2, #1
 8006098:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800609c:	2300      	movs	r3, #0
}
 800609e:	4618      	mov	r0, r3
 80060a0:	3708      	adds	r7, #8
 80060a2:	46bd      	mov	sp, r7
 80060a4:	bd80      	pop	{r7, pc}
	...

080060a8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80060a8:	b580      	push	{r7, lr}
 80060aa:	b084      	sub	sp, #16
 80060ac:	af00      	add	r7, sp, #0
 80060ae:	6078      	str	r0, [r7, #4]
 80060b0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80060b2:	683b      	ldr	r3, [r7, #0]
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d109      	bne.n	80060cc <HAL_TIM_PWM_Start+0x24>
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80060be:	b2db      	uxtb	r3, r3
 80060c0:	2b01      	cmp	r3, #1
 80060c2:	bf14      	ite	ne
 80060c4:	2301      	movne	r3, #1
 80060c6:	2300      	moveq	r3, #0
 80060c8:	b2db      	uxtb	r3, r3
 80060ca:	e03c      	b.n	8006146 <HAL_TIM_PWM_Start+0x9e>
 80060cc:	683b      	ldr	r3, [r7, #0]
 80060ce:	2b04      	cmp	r3, #4
 80060d0:	d109      	bne.n	80060e6 <HAL_TIM_PWM_Start+0x3e>
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80060d8:	b2db      	uxtb	r3, r3
 80060da:	2b01      	cmp	r3, #1
 80060dc:	bf14      	ite	ne
 80060de:	2301      	movne	r3, #1
 80060e0:	2300      	moveq	r3, #0
 80060e2:	b2db      	uxtb	r3, r3
 80060e4:	e02f      	b.n	8006146 <HAL_TIM_PWM_Start+0x9e>
 80060e6:	683b      	ldr	r3, [r7, #0]
 80060e8:	2b08      	cmp	r3, #8
 80060ea:	d109      	bne.n	8006100 <HAL_TIM_PWM_Start+0x58>
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80060f2:	b2db      	uxtb	r3, r3
 80060f4:	2b01      	cmp	r3, #1
 80060f6:	bf14      	ite	ne
 80060f8:	2301      	movne	r3, #1
 80060fa:	2300      	moveq	r3, #0
 80060fc:	b2db      	uxtb	r3, r3
 80060fe:	e022      	b.n	8006146 <HAL_TIM_PWM_Start+0x9e>
 8006100:	683b      	ldr	r3, [r7, #0]
 8006102:	2b0c      	cmp	r3, #12
 8006104:	d109      	bne.n	800611a <HAL_TIM_PWM_Start+0x72>
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800610c:	b2db      	uxtb	r3, r3
 800610e:	2b01      	cmp	r3, #1
 8006110:	bf14      	ite	ne
 8006112:	2301      	movne	r3, #1
 8006114:	2300      	moveq	r3, #0
 8006116:	b2db      	uxtb	r3, r3
 8006118:	e015      	b.n	8006146 <HAL_TIM_PWM_Start+0x9e>
 800611a:	683b      	ldr	r3, [r7, #0]
 800611c:	2b10      	cmp	r3, #16
 800611e:	d109      	bne.n	8006134 <HAL_TIM_PWM_Start+0x8c>
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006126:	b2db      	uxtb	r3, r3
 8006128:	2b01      	cmp	r3, #1
 800612a:	bf14      	ite	ne
 800612c:	2301      	movne	r3, #1
 800612e:	2300      	moveq	r3, #0
 8006130:	b2db      	uxtb	r3, r3
 8006132:	e008      	b.n	8006146 <HAL_TIM_PWM_Start+0x9e>
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800613a:	b2db      	uxtb	r3, r3
 800613c:	2b01      	cmp	r3, #1
 800613e:	bf14      	ite	ne
 8006140:	2301      	movne	r3, #1
 8006142:	2300      	moveq	r3, #0
 8006144:	b2db      	uxtb	r3, r3
 8006146:	2b00      	cmp	r3, #0
 8006148:	d001      	beq.n	800614e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800614a:	2301      	movs	r3, #1
 800614c:	e06f      	b.n	800622e <HAL_TIM_PWM_Start+0x186>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800614e:	683b      	ldr	r3, [r7, #0]
 8006150:	2b00      	cmp	r3, #0
 8006152:	d104      	bne.n	800615e <HAL_TIM_PWM_Start+0xb6>
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	2202      	movs	r2, #2
 8006158:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800615c:	e023      	b.n	80061a6 <HAL_TIM_PWM_Start+0xfe>
 800615e:	683b      	ldr	r3, [r7, #0]
 8006160:	2b04      	cmp	r3, #4
 8006162:	d104      	bne.n	800616e <HAL_TIM_PWM_Start+0xc6>
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	2202      	movs	r2, #2
 8006168:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800616c:	e01b      	b.n	80061a6 <HAL_TIM_PWM_Start+0xfe>
 800616e:	683b      	ldr	r3, [r7, #0]
 8006170:	2b08      	cmp	r3, #8
 8006172:	d104      	bne.n	800617e <HAL_TIM_PWM_Start+0xd6>
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	2202      	movs	r2, #2
 8006178:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800617c:	e013      	b.n	80061a6 <HAL_TIM_PWM_Start+0xfe>
 800617e:	683b      	ldr	r3, [r7, #0]
 8006180:	2b0c      	cmp	r3, #12
 8006182:	d104      	bne.n	800618e <HAL_TIM_PWM_Start+0xe6>
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	2202      	movs	r2, #2
 8006188:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800618c:	e00b      	b.n	80061a6 <HAL_TIM_PWM_Start+0xfe>
 800618e:	683b      	ldr	r3, [r7, #0]
 8006190:	2b10      	cmp	r3, #16
 8006192:	d104      	bne.n	800619e <HAL_TIM_PWM_Start+0xf6>
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	2202      	movs	r2, #2
 8006198:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800619c:	e003      	b.n	80061a6 <HAL_TIM_PWM_Start+0xfe>
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	2202      	movs	r2, #2
 80061a2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	2201      	movs	r2, #1
 80061ac:	6839      	ldr	r1, [r7, #0]
 80061ae:	4618      	mov	r0, r3
 80061b0:	f000 fc0c 	bl	80069cc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	4a1f      	ldr	r2, [pc, #124]	@ (8006238 <HAL_TIM_PWM_Start+0x190>)
 80061ba:	4293      	cmp	r3, r2
 80061bc:	d107      	bne.n	80061ce <HAL_TIM_PWM_Start+0x126>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80061cc:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	4a19      	ldr	r2, [pc, #100]	@ (8006238 <HAL_TIM_PWM_Start+0x190>)
 80061d4:	4293      	cmp	r3, r2
 80061d6:	d009      	beq.n	80061ec <HAL_TIM_PWM_Start+0x144>
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80061e0:	d004      	beq.n	80061ec <HAL_TIM_PWM_Start+0x144>
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	4a15      	ldr	r2, [pc, #84]	@ (800623c <HAL_TIM_PWM_Start+0x194>)
 80061e8:	4293      	cmp	r3, r2
 80061ea:	d115      	bne.n	8006218 <HAL_TIM_PWM_Start+0x170>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	689a      	ldr	r2, [r3, #8]
 80061f2:	4b13      	ldr	r3, [pc, #76]	@ (8006240 <HAL_TIM_PWM_Start+0x198>)
 80061f4:	4013      	ands	r3, r2
 80061f6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	2b06      	cmp	r3, #6
 80061fc:	d015      	beq.n	800622a <HAL_TIM_PWM_Start+0x182>
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006204:	d011      	beq.n	800622a <HAL_TIM_PWM_Start+0x182>
    {
      __HAL_TIM_ENABLE(htim);
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	681a      	ldr	r2, [r3, #0]
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	f042 0201 	orr.w	r2, r2, #1
 8006214:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006216:	e008      	b.n	800622a <HAL_TIM_PWM_Start+0x182>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	681a      	ldr	r2, [r3, #0]
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	f042 0201 	orr.w	r2, r2, #1
 8006226:	601a      	str	r2, [r3, #0]
 8006228:	e000      	b.n	800622c <HAL_TIM_PWM_Start+0x184>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800622a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800622c:	2300      	movs	r3, #0
}
 800622e:	4618      	mov	r0, r3
 8006230:	3710      	adds	r7, #16
 8006232:	46bd      	mov	sp, r7
 8006234:	bd80      	pop	{r7, pc}
 8006236:	bf00      	nop
 8006238:	40012c00 	.word	0x40012c00
 800623c:	40000400 	.word	0x40000400
 8006240:	00010007 	.word	0x00010007

08006244 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006244:	b580      	push	{r7, lr}
 8006246:	b086      	sub	sp, #24
 8006248:	af00      	add	r7, sp, #0
 800624a:	60f8      	str	r0, [r7, #12]
 800624c:	60b9      	str	r1, [r7, #8]
 800624e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006250:	2300      	movs	r3, #0
 8006252:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800625a:	2b01      	cmp	r3, #1
 800625c:	d101      	bne.n	8006262 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800625e:	2302      	movs	r3, #2
 8006260:	e0ff      	b.n	8006462 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	2201      	movs	r2, #1
 8006266:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	2b14      	cmp	r3, #20
 800626e:	f200 80f0 	bhi.w	8006452 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8006272:	a201      	add	r2, pc, #4	@ (adr r2, 8006278 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006274:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006278:	080062cd 	.word	0x080062cd
 800627c:	08006453 	.word	0x08006453
 8006280:	08006453 	.word	0x08006453
 8006284:	08006453 	.word	0x08006453
 8006288:	0800630d 	.word	0x0800630d
 800628c:	08006453 	.word	0x08006453
 8006290:	08006453 	.word	0x08006453
 8006294:	08006453 	.word	0x08006453
 8006298:	0800634f 	.word	0x0800634f
 800629c:	08006453 	.word	0x08006453
 80062a0:	08006453 	.word	0x08006453
 80062a4:	08006453 	.word	0x08006453
 80062a8:	0800638f 	.word	0x0800638f
 80062ac:	08006453 	.word	0x08006453
 80062b0:	08006453 	.word	0x08006453
 80062b4:	08006453 	.word	0x08006453
 80062b8:	080063d1 	.word	0x080063d1
 80062bc:	08006453 	.word	0x08006453
 80062c0:	08006453 	.word	0x08006453
 80062c4:	08006453 	.word	0x08006453
 80062c8:	08006411 	.word	0x08006411
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	68b9      	ldr	r1, [r7, #8]
 80062d2:	4618      	mov	r0, r3
 80062d4:	f000 f930 	bl	8006538 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	699a      	ldr	r2, [r3, #24]
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	f042 0208 	orr.w	r2, r2, #8
 80062e6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	699a      	ldr	r2, [r3, #24]
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	f022 0204 	bic.w	r2, r2, #4
 80062f6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	6999      	ldr	r1, [r3, #24]
 80062fe:	68bb      	ldr	r3, [r7, #8]
 8006300:	691a      	ldr	r2, [r3, #16]
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	430a      	orrs	r2, r1
 8006308:	619a      	str	r2, [r3, #24]
      break;
 800630a:	e0a5      	b.n	8006458 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	68b9      	ldr	r1, [r7, #8]
 8006312:	4618      	mov	r0, r3
 8006314:	f000 f978 	bl	8006608 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	699a      	ldr	r2, [r3, #24]
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006326:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	699a      	ldr	r2, [r3, #24]
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006336:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	6999      	ldr	r1, [r3, #24]
 800633e:	68bb      	ldr	r3, [r7, #8]
 8006340:	691b      	ldr	r3, [r3, #16]
 8006342:	021a      	lsls	r2, r3, #8
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	430a      	orrs	r2, r1
 800634a:	619a      	str	r2, [r3, #24]
      break;
 800634c:	e084      	b.n	8006458 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	68b9      	ldr	r1, [r7, #8]
 8006354:	4618      	mov	r0, r3
 8006356:	f000 f9c5 	bl	80066e4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	69da      	ldr	r2, [r3, #28]
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	f042 0208 	orr.w	r2, r2, #8
 8006368:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	69da      	ldr	r2, [r3, #28]
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	f022 0204 	bic.w	r2, r2, #4
 8006378:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	69d9      	ldr	r1, [r3, #28]
 8006380:	68bb      	ldr	r3, [r7, #8]
 8006382:	691a      	ldr	r2, [r3, #16]
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	430a      	orrs	r2, r1
 800638a:	61da      	str	r2, [r3, #28]
      break;
 800638c:	e064      	b.n	8006458 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	68b9      	ldr	r1, [r7, #8]
 8006394:	4618      	mov	r0, r3
 8006396:	f000 fa11 	bl	80067bc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	69da      	ldr	r2, [r3, #28]
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80063a8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	69da      	ldr	r2, [r3, #28]
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80063b8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	69d9      	ldr	r1, [r3, #28]
 80063c0:	68bb      	ldr	r3, [r7, #8]
 80063c2:	691b      	ldr	r3, [r3, #16]
 80063c4:	021a      	lsls	r2, r3, #8
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	430a      	orrs	r2, r1
 80063cc:	61da      	str	r2, [r3, #28]
      break;
 80063ce:	e043      	b.n	8006458 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	68b9      	ldr	r1, [r7, #8]
 80063d6:	4618      	mov	r0, r3
 80063d8:	f000 fa5e 	bl	8006898 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	f042 0208 	orr.w	r2, r2, #8
 80063ea:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	f022 0204 	bic.w	r2, r2, #4
 80063fa:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8006402:	68bb      	ldr	r3, [r7, #8]
 8006404:	691a      	ldr	r2, [r3, #16]
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	430a      	orrs	r2, r1
 800640c:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800640e:	e023      	b.n	8006458 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	68b9      	ldr	r1, [r7, #8]
 8006416:	4618      	mov	r0, r3
 8006418:	f000 fa8a 	bl	8006930 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800642a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800643a:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8006442:	68bb      	ldr	r3, [r7, #8]
 8006444:	691b      	ldr	r3, [r3, #16]
 8006446:	021a      	lsls	r2, r3, #8
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	430a      	orrs	r2, r1
 800644e:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8006450:	e002      	b.n	8006458 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8006452:	2301      	movs	r3, #1
 8006454:	75fb      	strb	r3, [r7, #23]
      break;
 8006456:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	2200      	movs	r2, #0
 800645c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006460:	7dfb      	ldrb	r3, [r7, #23]
}
 8006462:	4618      	mov	r0, r3
 8006464:	3718      	adds	r7, #24
 8006466:	46bd      	mov	sp, r7
 8006468:	bd80      	pop	{r7, pc}
 800646a:	bf00      	nop

0800646c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800646c:	b480      	push	{r7}
 800646e:	b085      	sub	sp, #20
 8006470:	af00      	add	r7, sp, #0
 8006472:	6078      	str	r0, [r7, #4]
 8006474:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	4a2c      	ldr	r2, [pc, #176]	@ (8006530 <TIM_Base_SetConfig+0xc4>)
 8006480:	4293      	cmp	r3, r2
 8006482:	d007      	beq.n	8006494 <TIM_Base_SetConfig+0x28>
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800648a:	d003      	beq.n	8006494 <TIM_Base_SetConfig+0x28>
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	4a29      	ldr	r2, [pc, #164]	@ (8006534 <TIM_Base_SetConfig+0xc8>)
 8006490:	4293      	cmp	r3, r2
 8006492:	d108      	bne.n	80064a6 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800649a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800649c:	683b      	ldr	r3, [r7, #0]
 800649e:	685b      	ldr	r3, [r3, #4]
 80064a0:	68fa      	ldr	r2, [r7, #12]
 80064a2:	4313      	orrs	r3, r2
 80064a4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	4a21      	ldr	r2, [pc, #132]	@ (8006530 <TIM_Base_SetConfig+0xc4>)
 80064aa:	4293      	cmp	r3, r2
 80064ac:	d007      	beq.n	80064be <TIM_Base_SetConfig+0x52>
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80064b4:	d003      	beq.n	80064be <TIM_Base_SetConfig+0x52>
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	4a1e      	ldr	r2, [pc, #120]	@ (8006534 <TIM_Base_SetConfig+0xc8>)
 80064ba:	4293      	cmp	r3, r2
 80064bc:	d108      	bne.n	80064d0 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80064c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80064c6:	683b      	ldr	r3, [r7, #0]
 80064c8:	68db      	ldr	r3, [r3, #12]
 80064ca:	68fa      	ldr	r2, [r7, #12]
 80064cc:	4313      	orrs	r3, r2
 80064ce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80064d6:	683b      	ldr	r3, [r7, #0]
 80064d8:	695b      	ldr	r3, [r3, #20]
 80064da:	4313      	orrs	r3, r2
 80064dc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	68fa      	ldr	r2, [r7, #12]
 80064e2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80064e4:	683b      	ldr	r3, [r7, #0]
 80064e6:	689a      	ldr	r2, [r3, #8]
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80064ec:	683b      	ldr	r3, [r7, #0]
 80064ee:	681a      	ldr	r2, [r3, #0]
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	4a0e      	ldr	r2, [pc, #56]	@ (8006530 <TIM_Base_SetConfig+0xc4>)
 80064f8:	4293      	cmp	r3, r2
 80064fa:	d103      	bne.n	8006504 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80064fc:	683b      	ldr	r3, [r7, #0]
 80064fe:	691a      	ldr	r2, [r3, #16]
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	2201      	movs	r2, #1
 8006508:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	691b      	ldr	r3, [r3, #16]
 800650e:	f003 0301 	and.w	r3, r3, #1
 8006512:	2b01      	cmp	r3, #1
 8006514:	d105      	bne.n	8006522 <TIM_Base_SetConfig+0xb6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	691b      	ldr	r3, [r3, #16]
 800651a:	f023 0201 	bic.w	r2, r3, #1
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	611a      	str	r2, [r3, #16]
  }
}
 8006522:	bf00      	nop
 8006524:	3714      	adds	r7, #20
 8006526:	46bd      	mov	sp, r7
 8006528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800652c:	4770      	bx	lr
 800652e:	bf00      	nop
 8006530:	40012c00 	.word	0x40012c00
 8006534:	40000400 	.word	0x40000400

08006538 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006538:	b480      	push	{r7}
 800653a:	b087      	sub	sp, #28
 800653c:	af00      	add	r7, sp, #0
 800653e:	6078      	str	r0, [r7, #4]
 8006540:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	6a1b      	ldr	r3, [r3, #32]
 8006546:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	6a1b      	ldr	r3, [r3, #32]
 800654c:	f023 0201 	bic.w	r2, r3, #1
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	685b      	ldr	r3, [r3, #4]
 8006558:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	699b      	ldr	r3, [r3, #24]
 800655e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006566:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800656a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	f023 0303 	bic.w	r3, r3, #3
 8006572:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006574:	683b      	ldr	r3, [r7, #0]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	68fa      	ldr	r2, [r7, #12]
 800657a:	4313      	orrs	r3, r2
 800657c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800657e:	697b      	ldr	r3, [r7, #20]
 8006580:	f023 0302 	bic.w	r3, r3, #2
 8006584:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006586:	683b      	ldr	r3, [r7, #0]
 8006588:	689b      	ldr	r3, [r3, #8]
 800658a:	697a      	ldr	r2, [r7, #20]
 800658c:	4313      	orrs	r3, r2
 800658e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	4a1c      	ldr	r2, [pc, #112]	@ (8006604 <TIM_OC1_SetConfig+0xcc>)
 8006594:	4293      	cmp	r3, r2
 8006596:	d10c      	bne.n	80065b2 <TIM_OC1_SetConfig+0x7a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006598:	697b      	ldr	r3, [r7, #20]
 800659a:	f023 0308 	bic.w	r3, r3, #8
 800659e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80065a0:	683b      	ldr	r3, [r7, #0]
 80065a2:	68db      	ldr	r3, [r3, #12]
 80065a4:	697a      	ldr	r2, [r7, #20]
 80065a6:	4313      	orrs	r3, r2
 80065a8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80065aa:	697b      	ldr	r3, [r7, #20]
 80065ac:	f023 0304 	bic.w	r3, r3, #4
 80065b0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	4a13      	ldr	r2, [pc, #76]	@ (8006604 <TIM_OC1_SetConfig+0xcc>)
 80065b6:	4293      	cmp	r3, r2
 80065b8:	d111      	bne.n	80065de <TIM_OC1_SetConfig+0xa6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80065ba:	693b      	ldr	r3, [r7, #16]
 80065bc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80065c0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80065c2:	693b      	ldr	r3, [r7, #16]
 80065c4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80065c8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80065ca:	683b      	ldr	r3, [r7, #0]
 80065cc:	695b      	ldr	r3, [r3, #20]
 80065ce:	693a      	ldr	r2, [r7, #16]
 80065d0:	4313      	orrs	r3, r2
 80065d2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80065d4:	683b      	ldr	r3, [r7, #0]
 80065d6:	699b      	ldr	r3, [r3, #24]
 80065d8:	693a      	ldr	r2, [r7, #16]
 80065da:	4313      	orrs	r3, r2
 80065dc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	693a      	ldr	r2, [r7, #16]
 80065e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	68fa      	ldr	r2, [r7, #12]
 80065e8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80065ea:	683b      	ldr	r3, [r7, #0]
 80065ec:	685a      	ldr	r2, [r3, #4]
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	697a      	ldr	r2, [r7, #20]
 80065f6:	621a      	str	r2, [r3, #32]
}
 80065f8:	bf00      	nop
 80065fa:	371c      	adds	r7, #28
 80065fc:	46bd      	mov	sp, r7
 80065fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006602:	4770      	bx	lr
 8006604:	40012c00 	.word	0x40012c00

08006608 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006608:	b480      	push	{r7}
 800660a:	b087      	sub	sp, #28
 800660c:	af00      	add	r7, sp, #0
 800660e:	6078      	str	r0, [r7, #4]
 8006610:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	6a1b      	ldr	r3, [r3, #32]
 8006616:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	6a1b      	ldr	r3, [r3, #32]
 800661c:	f023 0210 	bic.w	r2, r3, #16
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	685b      	ldr	r3, [r3, #4]
 8006628:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	699b      	ldr	r3, [r3, #24]
 800662e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006636:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800663a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006642:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006644:	683b      	ldr	r3, [r7, #0]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	021b      	lsls	r3, r3, #8
 800664a:	68fa      	ldr	r2, [r7, #12]
 800664c:	4313      	orrs	r3, r2
 800664e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006650:	697b      	ldr	r3, [r7, #20]
 8006652:	f023 0320 	bic.w	r3, r3, #32
 8006656:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006658:	683b      	ldr	r3, [r7, #0]
 800665a:	689b      	ldr	r3, [r3, #8]
 800665c:	011b      	lsls	r3, r3, #4
 800665e:	697a      	ldr	r2, [r7, #20]
 8006660:	4313      	orrs	r3, r2
 8006662:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	4a1e      	ldr	r2, [pc, #120]	@ (80066e0 <TIM_OC2_SetConfig+0xd8>)
 8006668:	4293      	cmp	r3, r2
 800666a:	d10d      	bne.n	8006688 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800666c:	697b      	ldr	r3, [r7, #20]
 800666e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006672:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006674:	683b      	ldr	r3, [r7, #0]
 8006676:	68db      	ldr	r3, [r3, #12]
 8006678:	011b      	lsls	r3, r3, #4
 800667a:	697a      	ldr	r2, [r7, #20]
 800667c:	4313      	orrs	r3, r2
 800667e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006680:	697b      	ldr	r3, [r7, #20]
 8006682:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006686:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	4a15      	ldr	r2, [pc, #84]	@ (80066e0 <TIM_OC2_SetConfig+0xd8>)
 800668c:	4293      	cmp	r3, r2
 800668e:	d113      	bne.n	80066b8 <TIM_OC2_SetConfig+0xb0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006690:	693b      	ldr	r3, [r7, #16]
 8006692:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006696:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006698:	693b      	ldr	r3, [r7, #16]
 800669a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800669e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80066a0:	683b      	ldr	r3, [r7, #0]
 80066a2:	695b      	ldr	r3, [r3, #20]
 80066a4:	009b      	lsls	r3, r3, #2
 80066a6:	693a      	ldr	r2, [r7, #16]
 80066a8:	4313      	orrs	r3, r2
 80066aa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80066ac:	683b      	ldr	r3, [r7, #0]
 80066ae:	699b      	ldr	r3, [r3, #24]
 80066b0:	009b      	lsls	r3, r3, #2
 80066b2:	693a      	ldr	r2, [r7, #16]
 80066b4:	4313      	orrs	r3, r2
 80066b6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	693a      	ldr	r2, [r7, #16]
 80066bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	68fa      	ldr	r2, [r7, #12]
 80066c2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80066c4:	683b      	ldr	r3, [r7, #0]
 80066c6:	685a      	ldr	r2, [r3, #4]
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	697a      	ldr	r2, [r7, #20]
 80066d0:	621a      	str	r2, [r3, #32]
}
 80066d2:	bf00      	nop
 80066d4:	371c      	adds	r7, #28
 80066d6:	46bd      	mov	sp, r7
 80066d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066dc:	4770      	bx	lr
 80066de:	bf00      	nop
 80066e0:	40012c00 	.word	0x40012c00

080066e4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80066e4:	b480      	push	{r7}
 80066e6:	b087      	sub	sp, #28
 80066e8:	af00      	add	r7, sp, #0
 80066ea:	6078      	str	r0, [r7, #4]
 80066ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	6a1b      	ldr	r3, [r3, #32]
 80066f2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	6a1b      	ldr	r3, [r3, #32]
 80066f8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	685b      	ldr	r3, [r3, #4]
 8006704:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	69db      	ldr	r3, [r3, #28]
 800670a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006712:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006716:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	f023 0303 	bic.w	r3, r3, #3
 800671e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006720:	683b      	ldr	r3, [r7, #0]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	68fa      	ldr	r2, [r7, #12]
 8006726:	4313      	orrs	r3, r2
 8006728:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800672a:	697b      	ldr	r3, [r7, #20]
 800672c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006730:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006732:	683b      	ldr	r3, [r7, #0]
 8006734:	689b      	ldr	r3, [r3, #8]
 8006736:	021b      	lsls	r3, r3, #8
 8006738:	697a      	ldr	r2, [r7, #20]
 800673a:	4313      	orrs	r3, r2
 800673c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	4a1d      	ldr	r2, [pc, #116]	@ (80067b8 <TIM_OC3_SetConfig+0xd4>)
 8006742:	4293      	cmp	r3, r2
 8006744:	d10d      	bne.n	8006762 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006746:	697b      	ldr	r3, [r7, #20]
 8006748:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800674c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800674e:	683b      	ldr	r3, [r7, #0]
 8006750:	68db      	ldr	r3, [r3, #12]
 8006752:	021b      	lsls	r3, r3, #8
 8006754:	697a      	ldr	r2, [r7, #20]
 8006756:	4313      	orrs	r3, r2
 8006758:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800675a:	697b      	ldr	r3, [r7, #20]
 800675c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006760:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	4a14      	ldr	r2, [pc, #80]	@ (80067b8 <TIM_OC3_SetConfig+0xd4>)
 8006766:	4293      	cmp	r3, r2
 8006768:	d113      	bne.n	8006792 <TIM_OC3_SetConfig+0xae>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800676a:	693b      	ldr	r3, [r7, #16]
 800676c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006770:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006772:	693b      	ldr	r3, [r7, #16]
 8006774:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006778:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800677a:	683b      	ldr	r3, [r7, #0]
 800677c:	695b      	ldr	r3, [r3, #20]
 800677e:	011b      	lsls	r3, r3, #4
 8006780:	693a      	ldr	r2, [r7, #16]
 8006782:	4313      	orrs	r3, r2
 8006784:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006786:	683b      	ldr	r3, [r7, #0]
 8006788:	699b      	ldr	r3, [r3, #24]
 800678a:	011b      	lsls	r3, r3, #4
 800678c:	693a      	ldr	r2, [r7, #16]
 800678e:	4313      	orrs	r3, r2
 8006790:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	693a      	ldr	r2, [r7, #16]
 8006796:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	68fa      	ldr	r2, [r7, #12]
 800679c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800679e:	683b      	ldr	r3, [r7, #0]
 80067a0:	685a      	ldr	r2, [r3, #4]
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	697a      	ldr	r2, [r7, #20]
 80067aa:	621a      	str	r2, [r3, #32]
}
 80067ac:	bf00      	nop
 80067ae:	371c      	adds	r7, #28
 80067b0:	46bd      	mov	sp, r7
 80067b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b6:	4770      	bx	lr
 80067b8:	40012c00 	.word	0x40012c00

080067bc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80067bc:	b480      	push	{r7}
 80067be:	b087      	sub	sp, #28
 80067c0:	af00      	add	r7, sp, #0
 80067c2:	6078      	str	r0, [r7, #4]
 80067c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	6a1b      	ldr	r3, [r3, #32]
 80067ca:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	6a1b      	ldr	r3, [r3, #32]
 80067d0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	685b      	ldr	r3, [r3, #4]
 80067dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	69db      	ldr	r3, [r3, #28]
 80067e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80067ea:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80067ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80067f6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80067f8:	683b      	ldr	r3, [r7, #0]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	021b      	lsls	r3, r3, #8
 80067fe:	68fa      	ldr	r2, [r7, #12]
 8006800:	4313      	orrs	r3, r2
 8006802:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006804:	697b      	ldr	r3, [r7, #20]
 8006806:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800680a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800680c:	683b      	ldr	r3, [r7, #0]
 800680e:	689b      	ldr	r3, [r3, #8]
 8006810:	031b      	lsls	r3, r3, #12
 8006812:	697a      	ldr	r2, [r7, #20]
 8006814:	4313      	orrs	r3, r2
 8006816:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	4a1e      	ldr	r2, [pc, #120]	@ (8006894 <TIM_OC4_SetConfig+0xd8>)
 800681c:	4293      	cmp	r3, r2
 800681e:	d10d      	bne.n	800683c <TIM_OC4_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8006820:	697b      	ldr	r3, [r7, #20]
 8006822:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006826:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8006828:	683b      	ldr	r3, [r7, #0]
 800682a:	68db      	ldr	r3, [r3, #12]
 800682c:	031b      	lsls	r3, r3, #12
 800682e:	697a      	ldr	r2, [r7, #20]
 8006830:	4313      	orrs	r3, r2
 8006832:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8006834:	697b      	ldr	r3, [r7, #20]
 8006836:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800683a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	4a15      	ldr	r2, [pc, #84]	@ (8006894 <TIM_OC4_SetConfig+0xd8>)
 8006840:	4293      	cmp	r3, r2
 8006842:	d113      	bne.n	800686c <TIM_OC4_SetConfig+0xb0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006844:	693b      	ldr	r3, [r7, #16]
 8006846:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800684a:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800684c:	693b      	ldr	r3, [r7, #16]
 800684e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006852:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006854:	683b      	ldr	r3, [r7, #0]
 8006856:	695b      	ldr	r3, [r3, #20]
 8006858:	019b      	lsls	r3, r3, #6
 800685a:	693a      	ldr	r2, [r7, #16]
 800685c:	4313      	orrs	r3, r2
 800685e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8006860:	683b      	ldr	r3, [r7, #0]
 8006862:	699b      	ldr	r3, [r3, #24]
 8006864:	019b      	lsls	r3, r3, #6
 8006866:	693a      	ldr	r2, [r7, #16]
 8006868:	4313      	orrs	r3, r2
 800686a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	693a      	ldr	r2, [r7, #16]
 8006870:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	68fa      	ldr	r2, [r7, #12]
 8006876:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006878:	683b      	ldr	r3, [r7, #0]
 800687a:	685a      	ldr	r2, [r3, #4]
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	697a      	ldr	r2, [r7, #20]
 8006884:	621a      	str	r2, [r3, #32]
}
 8006886:	bf00      	nop
 8006888:	371c      	adds	r7, #28
 800688a:	46bd      	mov	sp, r7
 800688c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006890:	4770      	bx	lr
 8006892:	bf00      	nop
 8006894:	40012c00 	.word	0x40012c00

08006898 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006898:	b480      	push	{r7}
 800689a:	b087      	sub	sp, #28
 800689c:	af00      	add	r7, sp, #0
 800689e:	6078      	str	r0, [r7, #4]
 80068a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	6a1b      	ldr	r3, [r3, #32]
 80068a6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	6a1b      	ldr	r3, [r3, #32]
 80068ac:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	685b      	ldr	r3, [r3, #4]
 80068b8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80068be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80068c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80068ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80068cc:	683b      	ldr	r3, [r7, #0]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	68fa      	ldr	r2, [r7, #12]
 80068d2:	4313      	orrs	r3, r2
 80068d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80068d6:	693b      	ldr	r3, [r7, #16]
 80068d8:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80068dc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80068de:	683b      	ldr	r3, [r7, #0]
 80068e0:	689b      	ldr	r3, [r3, #8]
 80068e2:	041b      	lsls	r3, r3, #16
 80068e4:	693a      	ldr	r2, [r7, #16]
 80068e6:	4313      	orrs	r3, r2
 80068e8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	4a0f      	ldr	r2, [pc, #60]	@ (800692c <TIM_OC5_SetConfig+0x94>)
 80068ee:	4293      	cmp	r3, r2
 80068f0:	d109      	bne.n	8006906 <TIM_OC5_SetConfig+0x6e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80068f2:	697b      	ldr	r3, [r7, #20]
 80068f4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80068f8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80068fa:	683b      	ldr	r3, [r7, #0]
 80068fc:	695b      	ldr	r3, [r3, #20]
 80068fe:	021b      	lsls	r3, r3, #8
 8006900:	697a      	ldr	r2, [r7, #20]
 8006902:	4313      	orrs	r3, r2
 8006904:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	697a      	ldr	r2, [r7, #20]
 800690a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	68fa      	ldr	r2, [r7, #12]
 8006910:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006912:	683b      	ldr	r3, [r7, #0]
 8006914:	685a      	ldr	r2, [r3, #4]
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	693a      	ldr	r2, [r7, #16]
 800691e:	621a      	str	r2, [r3, #32]
}
 8006920:	bf00      	nop
 8006922:	371c      	adds	r7, #28
 8006924:	46bd      	mov	sp, r7
 8006926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800692a:	4770      	bx	lr
 800692c:	40012c00 	.word	0x40012c00

08006930 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006930:	b480      	push	{r7}
 8006932:	b087      	sub	sp, #28
 8006934:	af00      	add	r7, sp, #0
 8006936:	6078      	str	r0, [r7, #4]
 8006938:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	6a1b      	ldr	r3, [r3, #32]
 800693e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	6a1b      	ldr	r3, [r3, #32]
 8006944:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	685b      	ldr	r3, [r3, #4]
 8006950:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006956:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800695e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006962:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006964:	683b      	ldr	r3, [r7, #0]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	021b      	lsls	r3, r3, #8
 800696a:	68fa      	ldr	r2, [r7, #12]
 800696c:	4313      	orrs	r3, r2
 800696e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006970:	693b      	ldr	r3, [r7, #16]
 8006972:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006976:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006978:	683b      	ldr	r3, [r7, #0]
 800697a:	689b      	ldr	r3, [r3, #8]
 800697c:	051b      	lsls	r3, r3, #20
 800697e:	693a      	ldr	r2, [r7, #16]
 8006980:	4313      	orrs	r3, r2
 8006982:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	4a10      	ldr	r2, [pc, #64]	@ (80069c8 <TIM_OC6_SetConfig+0x98>)
 8006988:	4293      	cmp	r3, r2
 800698a:	d109      	bne.n	80069a0 <TIM_OC6_SetConfig+0x70>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800698c:	697b      	ldr	r3, [r7, #20]
 800698e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006992:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006994:	683b      	ldr	r3, [r7, #0]
 8006996:	695b      	ldr	r3, [r3, #20]
 8006998:	029b      	lsls	r3, r3, #10
 800699a:	697a      	ldr	r2, [r7, #20]
 800699c:	4313      	orrs	r3, r2
 800699e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	697a      	ldr	r2, [r7, #20]
 80069a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	68fa      	ldr	r2, [r7, #12]
 80069aa:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80069ac:	683b      	ldr	r3, [r7, #0]
 80069ae:	685a      	ldr	r2, [r3, #4]
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	693a      	ldr	r2, [r7, #16]
 80069b8:	621a      	str	r2, [r3, #32]
}
 80069ba:	bf00      	nop
 80069bc:	371c      	adds	r7, #28
 80069be:	46bd      	mov	sp, r7
 80069c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c4:	4770      	bx	lr
 80069c6:	bf00      	nop
 80069c8:	40012c00 	.word	0x40012c00

080069cc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80069cc:	b480      	push	{r7}
 80069ce:	b087      	sub	sp, #28
 80069d0:	af00      	add	r7, sp, #0
 80069d2:	60f8      	str	r0, [r7, #12]
 80069d4:	60b9      	str	r1, [r7, #8]
 80069d6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80069d8:	68bb      	ldr	r3, [r7, #8]
 80069da:	f003 031f 	and.w	r3, r3, #31
 80069de:	2201      	movs	r2, #1
 80069e0:	fa02 f303 	lsl.w	r3, r2, r3
 80069e4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	6a1a      	ldr	r2, [r3, #32]
 80069ea:	697b      	ldr	r3, [r7, #20]
 80069ec:	43db      	mvns	r3, r3
 80069ee:	401a      	ands	r2, r3
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	6a1a      	ldr	r2, [r3, #32]
 80069f8:	68bb      	ldr	r3, [r7, #8]
 80069fa:	f003 031f 	and.w	r3, r3, #31
 80069fe:	6879      	ldr	r1, [r7, #4]
 8006a00:	fa01 f303 	lsl.w	r3, r1, r3
 8006a04:	431a      	orrs	r2, r3
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	621a      	str	r2, [r3, #32]
}
 8006a0a:	bf00      	nop
 8006a0c:	371c      	adds	r7, #28
 8006a0e:	46bd      	mov	sp, r7
 8006a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a14:	4770      	bx	lr
	...

08006a18 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006a18:	b480      	push	{r7}
 8006a1a:	b085      	sub	sp, #20
 8006a1c:	af00      	add	r7, sp, #0
 8006a1e:	6078      	str	r0, [r7, #4]
 8006a20:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006a28:	2b01      	cmp	r3, #1
 8006a2a:	d101      	bne.n	8006a30 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006a2c:	2302      	movs	r3, #2
 8006a2e:	e051      	b.n	8006ad4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	2201      	movs	r2, #1
 8006a34:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	2202      	movs	r2, #2
 8006a3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	685b      	ldr	r3, [r3, #4]
 8006a46:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	689b      	ldr	r3, [r3, #8]
 8006a4e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	4a22      	ldr	r2, [pc, #136]	@ (8006ae0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006a56:	4293      	cmp	r3, r2
 8006a58:	d108      	bne.n	8006a6c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8006a60:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006a62:	683b      	ldr	r3, [r7, #0]
 8006a64:	685b      	ldr	r3, [r3, #4]
 8006a66:	68fa      	ldr	r2, [r7, #12]
 8006a68:	4313      	orrs	r3, r2
 8006a6a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8006a72:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006a76:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006a78:	683b      	ldr	r3, [r7, #0]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	68fa      	ldr	r2, [r7, #12]
 8006a7e:	4313      	orrs	r3, r2
 8006a80:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	68fa      	ldr	r2, [r7, #12]
 8006a88:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	4a14      	ldr	r2, [pc, #80]	@ (8006ae0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006a90:	4293      	cmp	r3, r2
 8006a92:	d009      	beq.n	8006aa8 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006a9c:	d004      	beq.n	8006aa8 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	4a10      	ldr	r2, [pc, #64]	@ (8006ae4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8006aa4:	4293      	cmp	r3, r2
 8006aa6:	d10c      	bne.n	8006ac2 <HAL_TIMEx_MasterConfigSynchronization+0xaa>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006aa8:	68bb      	ldr	r3, [r7, #8]
 8006aaa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006aae:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006ab0:	683b      	ldr	r3, [r7, #0]
 8006ab2:	689b      	ldr	r3, [r3, #8]
 8006ab4:	68ba      	ldr	r2, [r7, #8]
 8006ab6:	4313      	orrs	r3, r2
 8006ab8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	68ba      	ldr	r2, [r7, #8]
 8006ac0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	2201      	movs	r2, #1
 8006ac6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	2200      	movs	r2, #0
 8006ace:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006ad2:	2300      	movs	r3, #0
}
 8006ad4:	4618      	mov	r0, r3
 8006ad6:	3714      	adds	r7, #20
 8006ad8:	46bd      	mov	sp, r7
 8006ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ade:	4770      	bx	lr
 8006ae0:	40012c00 	.word	0x40012c00
 8006ae4:	40000400 	.word	0x40000400

08006ae8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006ae8:	b480      	push	{r7}
 8006aea:	b085      	sub	sp, #20
 8006aec:	af00      	add	r7, sp, #0
 8006aee:	6078      	str	r0, [r7, #4]
 8006af0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006af2:	2300      	movs	r3, #0
 8006af4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006afc:	2b01      	cmp	r3, #1
 8006afe:	d101      	bne.n	8006b04 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006b00:	2302      	movs	r3, #2
 8006b02:	e06e      	b.n	8006be2 <HAL_TIMEx_ConfigBreakDeadTime+0xfa>
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	2201      	movs	r2, #1
 8006b08:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8006b12:	683b      	ldr	r3, [r7, #0]
 8006b14:	68db      	ldr	r3, [r3, #12]
 8006b16:	4313      	orrs	r3, r2
 8006b18:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006b20:	683b      	ldr	r3, [r7, #0]
 8006b22:	689b      	ldr	r3, [r3, #8]
 8006b24:	4313      	orrs	r3, r2
 8006b26:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8006b2e:	683b      	ldr	r3, [r7, #0]
 8006b30:	685b      	ldr	r3, [r3, #4]
 8006b32:	4313      	orrs	r3, r2
 8006b34:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8006b3c:	683b      	ldr	r3, [r7, #0]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	4313      	orrs	r3, r2
 8006b42:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006b4a:	683b      	ldr	r3, [r7, #0]
 8006b4c:	691b      	ldr	r3, [r3, #16]
 8006b4e:	4313      	orrs	r3, r2
 8006b50:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8006b58:	683b      	ldr	r3, [r7, #0]
 8006b5a:	695b      	ldr	r3, [r3, #20]
 8006b5c:	4313      	orrs	r3, r2
 8006b5e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8006b66:	683b      	ldr	r3, [r7, #0]
 8006b68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b6a:	4313      	orrs	r3, r2
 8006b6c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8006b74:	683b      	ldr	r3, [r7, #0]
 8006b76:	699b      	ldr	r3, [r3, #24]
 8006b78:	041b      	lsls	r3, r3, #16
 8006b7a:	4313      	orrs	r3, r2
 8006b7c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8006b84:	683b      	ldr	r3, [r7, #0]
 8006b86:	69db      	ldr	r3, [r3, #28]
 8006b88:	4313      	orrs	r3, r2
 8006b8a:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	4a17      	ldr	r2, [pc, #92]	@ (8006bf0 <HAL_TIMEx_ConfigBreakDeadTime+0x108>)
 8006b92:	4293      	cmp	r3, r2
 8006b94:	d11c      	bne.n	8006bd0 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8006b9c:	683b      	ldr	r3, [r7, #0]
 8006b9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ba0:	051b      	lsls	r3, r3, #20
 8006ba2:	4313      	orrs	r3, r2
 8006ba4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8006bac:	683b      	ldr	r3, [r7, #0]
 8006bae:	6a1b      	ldr	r3, [r3, #32]
 8006bb0:	4313      	orrs	r3, r2
 8006bb2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8006bba:	683b      	ldr	r3, [r7, #0]
 8006bbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006bbe:	4313      	orrs	r3, r2
 8006bc0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8006bc8:	683b      	ldr	r3, [r7, #0]
 8006bca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006bcc:	4313      	orrs	r3, r2
 8006bce:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	68fa      	ldr	r2, [r7, #12]
 8006bd6:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	2200      	movs	r2, #0
 8006bdc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006be0:	2300      	movs	r3, #0
}
 8006be2:	4618      	mov	r0, r3
 8006be4:	3714      	adds	r7, #20
 8006be6:	46bd      	mov	sp, r7
 8006be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bec:	4770      	bx	lr
 8006bee:	bf00      	nop
 8006bf0:	40012c00 	.word	0x40012c00

08006bf4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006bf4:	b580      	push	{r7, lr}
 8006bf6:	b082      	sub	sp, #8
 8006bf8:	af00      	add	r7, sp, #0
 8006bfa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d101      	bne.n	8006c06 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006c02:	2301      	movs	r3, #1
 8006c04:	e042      	b.n	8006c8c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d106      	bne.n	8006c1e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	2200      	movs	r2, #0
 8006c14:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006c18:	6878      	ldr	r0, [r7, #4]
 8006c1a:	f7fa fedf 	bl	80019dc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	2224      	movs	r2, #36	@ 0x24
 8006c22:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	681a      	ldr	r2, [r3, #0]
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	f022 0201 	bic.w	r2, r2, #1
 8006c34:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d002      	beq.n	8006c44 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8006c3e:	6878      	ldr	r0, [r7, #4]
 8006c40:	f000 ff2a 	bl	8007a98 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006c44:	6878      	ldr	r0, [r7, #4]
 8006c46:	f000 fda9 	bl	800779c <UART_SetConfig>
 8006c4a:	4603      	mov	r3, r0
 8006c4c:	2b01      	cmp	r3, #1
 8006c4e:	d101      	bne.n	8006c54 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8006c50:	2301      	movs	r3, #1
 8006c52:	e01b      	b.n	8006c8c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	685a      	ldr	r2, [r3, #4]
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006c62:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	689a      	ldr	r2, [r3, #8]
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006c72:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	681a      	ldr	r2, [r3, #0]
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	f042 0201 	orr.w	r2, r2, #1
 8006c82:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006c84:	6878      	ldr	r0, [r7, #4]
 8006c86:	f000 ffa9 	bl	8007bdc <UART_CheckIdleState>
 8006c8a:	4603      	mov	r3, r0
}
 8006c8c:	4618      	mov	r0, r3
 8006c8e:	3708      	adds	r7, #8
 8006c90:	46bd      	mov	sp, r7
 8006c92:	bd80      	pop	{r7, pc}

08006c94 <HAL_HalfDuplex_Init>:
  *        parameters in the UART_InitTypeDef and creates the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 8006c94:	b580      	push	{r7, lr}
 8006c96:	b082      	sub	sp, #8
 8006c98:	af00      	add	r7, sp, #0
 8006c9a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d101      	bne.n	8006ca6 <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 8006ca2:	2301      	movs	r3, #1
 8006ca4:	e04a      	b.n	8006d3c <HAL_HalfDuplex_Init+0xa8>
  }

  /* Check UART instance */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d106      	bne.n	8006cbe <HAL_HalfDuplex_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	2200      	movs	r2, #0
 8006cb4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006cb8:	6878      	ldr	r0, [r7, #4]
 8006cba:	f7fa fe8f 	bl	80019dc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	2224      	movs	r2, #36	@ 0x24
 8006cc2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	681a      	ldr	r2, [r3, #0]
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	f022 0201 	bic.w	r2, r2, #1
 8006cd4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d002      	beq.n	8006ce4 <HAL_HalfDuplex_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8006cde:	6878      	ldr	r0, [r7, #4]
 8006ce0:	f000 feda 	bl	8007a98 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006ce4:	6878      	ldr	r0, [r7, #4]
 8006ce6:	f000 fd59 	bl	800779c <UART_SetConfig>
 8006cea:	4603      	mov	r3, r0
 8006cec:	2b01      	cmp	r3, #1
 8006cee:	d101      	bne.n	8006cf4 <HAL_HalfDuplex_Init+0x60>
  {
    return HAL_ERROR;
 8006cf0:	2301      	movs	r3, #1
 8006cf2:	e023      	b.n	8006d3c <HAL_HalfDuplex_Init+0xa8>
  }

  /* In half-duplex mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	685a      	ldr	r2, [r3, #4]
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006d02:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	689a      	ldr	r2, [r3, #8]
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	f022 0222 	bic.w	r2, r2, #34	@ 0x22
 8006d12:	609a      	str	r2, [r3, #8]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	689a      	ldr	r2, [r3, #8]
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	f042 0208 	orr.w	r2, r2, #8
 8006d22:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	681a      	ldr	r2, [r3, #0]
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	f042 0201 	orr.w	r2, r2, #1
 8006d32:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006d34:	6878      	ldr	r0, [r7, #4]
 8006d36:	f000 ff51 	bl	8007bdc <UART_CheckIdleState>
 8006d3a:	4603      	mov	r3, r0
}
 8006d3c:	4618      	mov	r0, r3
 8006d3e:	3708      	adds	r7, #8
 8006d40:	46bd      	mov	sp, r7
 8006d42:	bd80      	pop	{r7, pc}

08006d44 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006d44:	b580      	push	{r7, lr}
 8006d46:	b08a      	sub	sp, #40	@ 0x28
 8006d48:	af02      	add	r7, sp, #8
 8006d4a:	60f8      	str	r0, [r7, #12]
 8006d4c:	60b9      	str	r1, [r7, #8]
 8006d4e:	603b      	str	r3, [r7, #0]
 8006d50:	4613      	mov	r3, r2
 8006d52:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006d5a:	2b20      	cmp	r3, #32
 8006d5c:	f040 808b 	bne.w	8006e76 <HAL_UART_Transmit+0x132>
  {
    if ((pData == NULL) || (Size == 0U))
 8006d60:	68bb      	ldr	r3, [r7, #8]
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d002      	beq.n	8006d6c <HAL_UART_Transmit+0x28>
 8006d66:	88fb      	ldrh	r3, [r7, #6]
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d101      	bne.n	8006d70 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8006d6c:	2301      	movs	r3, #1
 8006d6e:	e083      	b.n	8006e78 <HAL_UART_Transmit+0x134>
    }

#if defined(USART_DMAREQUESTS_SW_WA)
    /* Disable the UART DMA Tx request if enabled */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	689b      	ldr	r3, [r3, #8]
 8006d76:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006d7a:	2b80      	cmp	r3, #128	@ 0x80
 8006d7c:	d107      	bne.n	8006d8e <HAL_UART_Transmit+0x4a>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	689a      	ldr	r2, [r3, #8]
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006d8c:	609a      	str	r2, [r3, #8]
    }

#endif /* USART_DMAREQUESTS_SW_WA */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	2200      	movs	r2, #0
 8006d92:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	2221      	movs	r2, #33	@ 0x21
 8006d9a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006d9e:	f7fb f97d 	bl	800209c <HAL_GetTick>
 8006da2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	88fa      	ldrh	r2, [r7, #6]
 8006da8:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	88fa      	ldrh	r2, [r7, #6]
 8006db0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	689b      	ldr	r3, [r3, #8]
 8006db8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006dbc:	d108      	bne.n	8006dd0 <HAL_UART_Transmit+0x8c>
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	691b      	ldr	r3, [r3, #16]
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d104      	bne.n	8006dd0 <HAL_UART_Transmit+0x8c>
    {
      pdata8bits  = NULL;
 8006dc6:	2300      	movs	r3, #0
 8006dc8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006dca:	68bb      	ldr	r3, [r7, #8]
 8006dcc:	61bb      	str	r3, [r7, #24]
 8006dce:	e003      	b.n	8006dd8 <HAL_UART_Transmit+0x94>
    }
    else
    {
      pdata8bits  = pData;
 8006dd0:	68bb      	ldr	r3, [r7, #8]
 8006dd2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006dd4:	2300      	movs	r3, #0
 8006dd6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006dd8:	e030      	b.n	8006e3c <HAL_UART_Transmit+0xf8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006dda:	683b      	ldr	r3, [r7, #0]
 8006ddc:	9300      	str	r3, [sp, #0]
 8006dde:	697b      	ldr	r3, [r7, #20]
 8006de0:	2200      	movs	r2, #0
 8006de2:	2180      	movs	r1, #128	@ 0x80
 8006de4:	68f8      	ldr	r0, [r7, #12]
 8006de6:	f000 ffa3 	bl	8007d30 <UART_WaitOnFlagUntilTimeout>
 8006dea:	4603      	mov	r3, r0
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d005      	beq.n	8006dfc <HAL_UART_Transmit+0xb8>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	2220      	movs	r2, #32
 8006df4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8006df8:	2303      	movs	r3, #3
 8006dfa:	e03d      	b.n	8006e78 <HAL_UART_Transmit+0x134>
      }
      if (pdata8bits == NULL)
 8006dfc:	69fb      	ldr	r3, [r7, #28]
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d10b      	bne.n	8006e1a <HAL_UART_Transmit+0xd6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006e02:	69bb      	ldr	r3, [r7, #24]
 8006e04:	881b      	ldrh	r3, [r3, #0]
 8006e06:	461a      	mov	r2, r3
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006e10:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8006e12:	69bb      	ldr	r3, [r7, #24]
 8006e14:	3302      	adds	r3, #2
 8006e16:	61bb      	str	r3, [r7, #24]
 8006e18:	e007      	b.n	8006e2a <HAL_UART_Transmit+0xe6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006e1a:	69fb      	ldr	r3, [r7, #28]
 8006e1c:	781a      	ldrb	r2, [r3, #0]
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8006e24:	69fb      	ldr	r3, [r7, #28]
 8006e26:	3301      	adds	r3, #1
 8006e28:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8006e30:	b29b      	uxth	r3, r3
 8006e32:	3b01      	subs	r3, #1
 8006e34:	b29a      	uxth	r2, r3
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8006e42:	b29b      	uxth	r3, r3
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d1c8      	bne.n	8006dda <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006e48:	683b      	ldr	r3, [r7, #0]
 8006e4a:	9300      	str	r3, [sp, #0]
 8006e4c:	697b      	ldr	r3, [r7, #20]
 8006e4e:	2200      	movs	r2, #0
 8006e50:	2140      	movs	r1, #64	@ 0x40
 8006e52:	68f8      	ldr	r0, [r7, #12]
 8006e54:	f000 ff6c 	bl	8007d30 <UART_WaitOnFlagUntilTimeout>
 8006e58:	4603      	mov	r3, r0
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d005      	beq.n	8006e6a <HAL_UART_Transmit+0x126>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	2220      	movs	r2, #32
 8006e62:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8006e66:	2303      	movs	r3, #3
 8006e68:	e006      	b.n	8006e78 <HAL_UART_Transmit+0x134>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	2220      	movs	r2, #32
 8006e6e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8006e72:	2300      	movs	r3, #0
 8006e74:	e000      	b.n	8006e78 <HAL_UART_Transmit+0x134>
  }
  else
  {
    return HAL_BUSY;
 8006e76:	2302      	movs	r3, #2
  }
}
 8006e78:	4618      	mov	r0, r3
 8006e7a:	3720      	adds	r7, #32
 8006e7c:	46bd      	mov	sp, r7
 8006e7e:	bd80      	pop	{r7, pc}

08006e80 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006e80:	b580      	push	{r7, lr}
 8006e82:	b08a      	sub	sp, #40	@ 0x28
 8006e84:	af02      	add	r7, sp, #8
 8006e86:	60f8      	str	r0, [r7, #12]
 8006e88:	60b9      	str	r1, [r7, #8]
 8006e8a:	603b      	str	r3, [r7, #0]
 8006e8c:	4613      	mov	r3, r2
 8006e8e:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006e96:	2b20      	cmp	r3, #32
 8006e98:	f040 80c4 	bne.w	8007024 <HAL_UART_Receive+0x1a4>
  {
    if ((pData == NULL) || (Size == 0U))
 8006e9c:	68bb      	ldr	r3, [r7, #8]
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d002      	beq.n	8006ea8 <HAL_UART_Receive+0x28>
 8006ea2:	88fb      	ldrh	r3, [r7, #6]
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d101      	bne.n	8006eac <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8006ea8:	2301      	movs	r3, #1
 8006eaa:	e0bc      	b.n	8007026 <HAL_UART_Receive+0x1a6>
    }

#if defined(USART_DMAREQUESTS_SW_WA)
    /* Disable the UART DMA Rx request if enabled */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	689b      	ldr	r3, [r3, #8]
 8006eb2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006eb6:	2b40      	cmp	r3, #64	@ 0x40
 8006eb8:	d107      	bne.n	8006eca <HAL_UART_Receive+0x4a>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	689a      	ldr	r2, [r3, #8]
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006ec8:	609a      	str	r2, [r3, #8]
    }

#endif /* USART_DMAREQUESTS_SW_WA */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	2200      	movs	r2, #0
 8006ece:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	2222      	movs	r2, #34	@ 0x22
 8006ed6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	2200      	movs	r2, #0
 8006ede:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006ee0:	f7fb f8dc 	bl	800209c <HAL_GetTick>
 8006ee4:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	88fa      	ldrh	r2, [r7, #6]
 8006eea:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    huart->RxXferCount = Size;
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	88fa      	ldrh	r2, [r7, #6]
 8006ef2:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	689b      	ldr	r3, [r3, #8]
 8006efa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006efe:	d10e      	bne.n	8006f1e <HAL_UART_Receive+0x9e>
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	691b      	ldr	r3, [r3, #16]
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d105      	bne.n	8006f14 <HAL_UART_Receive+0x94>
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8006f0e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006f12:	e02d      	b.n	8006f70 <HAL_UART_Receive+0xf0>
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	22ff      	movs	r2, #255	@ 0xff
 8006f18:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006f1c:	e028      	b.n	8006f70 <HAL_UART_Receive+0xf0>
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	689b      	ldr	r3, [r3, #8]
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d10d      	bne.n	8006f42 <HAL_UART_Receive+0xc2>
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	691b      	ldr	r3, [r3, #16]
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d104      	bne.n	8006f38 <HAL_UART_Receive+0xb8>
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	22ff      	movs	r2, #255	@ 0xff
 8006f32:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006f36:	e01b      	b.n	8006f70 <HAL_UART_Receive+0xf0>
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	227f      	movs	r2, #127	@ 0x7f
 8006f3c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006f40:	e016      	b.n	8006f70 <HAL_UART_Receive+0xf0>
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	689b      	ldr	r3, [r3, #8]
 8006f46:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006f4a:	d10d      	bne.n	8006f68 <HAL_UART_Receive+0xe8>
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	691b      	ldr	r3, [r3, #16]
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d104      	bne.n	8006f5e <HAL_UART_Receive+0xde>
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	227f      	movs	r2, #127	@ 0x7f
 8006f58:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006f5c:	e008      	b.n	8006f70 <HAL_UART_Receive+0xf0>
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	223f      	movs	r2, #63	@ 0x3f
 8006f62:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006f66:	e003      	b.n	8006f70 <HAL_UART_Receive+0xf0>
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	2200      	movs	r2, #0
 8006f6c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    uhMask = huart->Mask;
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8006f76:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	689b      	ldr	r3, [r3, #8]
 8006f7c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006f80:	d108      	bne.n	8006f94 <HAL_UART_Receive+0x114>
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	691b      	ldr	r3, [r3, #16]
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d104      	bne.n	8006f94 <HAL_UART_Receive+0x114>
    {
      pdata8bits  = NULL;
 8006f8a:	2300      	movs	r3, #0
 8006f8c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006f8e:	68bb      	ldr	r3, [r7, #8]
 8006f90:	61bb      	str	r3, [r7, #24]
 8006f92:	e003      	b.n	8006f9c <HAL_UART_Receive+0x11c>
    }
    else
    {
      pdata8bits  = pData;
 8006f94:	68bb      	ldr	r3, [r7, #8]
 8006f96:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006f98:	2300      	movs	r3, #0
 8006f9a:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8006f9c:	e036      	b.n	800700c <HAL_UART_Receive+0x18c>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8006f9e:	683b      	ldr	r3, [r7, #0]
 8006fa0:	9300      	str	r3, [sp, #0]
 8006fa2:	697b      	ldr	r3, [r7, #20]
 8006fa4:	2200      	movs	r2, #0
 8006fa6:	2120      	movs	r1, #32
 8006fa8:	68f8      	ldr	r0, [r7, #12]
 8006faa:	f000 fec1 	bl	8007d30 <UART_WaitOnFlagUntilTimeout>
 8006fae:	4603      	mov	r3, r0
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d005      	beq.n	8006fc0 <HAL_UART_Receive+0x140>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	2220      	movs	r2, #32
 8006fb8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        return HAL_TIMEOUT;
 8006fbc:	2303      	movs	r3, #3
 8006fbe:	e032      	b.n	8007026 <HAL_UART_Receive+0x1a6>
      }
      if (pdata8bits == NULL)
 8006fc0:	69fb      	ldr	r3, [r7, #28]
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d10c      	bne.n	8006fe0 <HAL_UART_Receive+0x160>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006fcc:	b29a      	uxth	r2, r3
 8006fce:	8a7b      	ldrh	r3, [r7, #18]
 8006fd0:	4013      	ands	r3, r2
 8006fd2:	b29a      	uxth	r2, r3
 8006fd4:	69bb      	ldr	r3, [r7, #24]
 8006fd6:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8006fd8:	69bb      	ldr	r3, [r7, #24]
 8006fda:	3302      	adds	r3, #2
 8006fdc:	61bb      	str	r3, [r7, #24]
 8006fde:	e00c      	b.n	8006ffa <HAL_UART_Receive+0x17a>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006fe6:	b2da      	uxtb	r2, r3
 8006fe8:	8a7b      	ldrh	r3, [r7, #18]
 8006fea:	b2db      	uxtb	r3, r3
 8006fec:	4013      	ands	r3, r2
 8006fee:	b2da      	uxtb	r2, r3
 8006ff0:	69fb      	ldr	r3, [r7, #28]
 8006ff2:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8006ff4:	69fb      	ldr	r3, [r7, #28]
 8006ff6:	3301      	adds	r3, #1
 8006ff8:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007000:	b29b      	uxth	r3, r3
 8007002:	3b01      	subs	r3, #1
 8007004:	b29a      	uxth	r2, r3
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    while (huart->RxXferCount > 0U)
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007012:	b29b      	uxth	r3, r3
 8007014:	2b00      	cmp	r3, #0
 8007016:	d1c2      	bne.n	8006f9e <HAL_UART_Receive+0x11e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	2220      	movs	r2, #32
 800701c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    return HAL_OK;
 8007020:	2300      	movs	r3, #0
 8007022:	e000      	b.n	8007026 <HAL_UART_Receive+0x1a6>
  }
  else
  {
    return HAL_BUSY;
 8007024:	2302      	movs	r3, #2
  }
}
 8007026:	4618      	mov	r0, r3
 8007028:	3720      	adds	r7, #32
 800702a:	46bd      	mov	sp, r7
 800702c:	bd80      	pop	{r7, pc}
	...

08007030 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007030:	b580      	push	{r7, lr}
 8007032:	b0ae      	sub	sp, #184	@ 0xb8
 8007034:	af00      	add	r7, sp, #0
 8007036:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	69db      	ldr	r3, [r3, #28]
 800703e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	689b      	ldr	r3, [r3, #8]
 8007052:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007056:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800705a:	f640 030f 	movw	r3, #2063	@ 0x80f
 800705e:	4013      	ands	r3, r2
 8007060:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (errorflags == 0U)
 8007064:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007068:	2b00      	cmp	r3, #0
 800706a:	d11b      	bne.n	80070a4 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800706c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007070:	f003 0320 	and.w	r3, r3, #32
 8007074:	2b00      	cmp	r3, #0
 8007076:	d015      	beq.n	80070a4 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007078:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800707c:	f003 0320 	and.w	r3, r3, #32
 8007080:	2b00      	cmp	r3, #0
 8007082:	d105      	bne.n	8007090 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007084:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007088:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800708c:	2b00      	cmp	r3, #0
 800708e:	d009      	beq.n	80070a4 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007094:	2b00      	cmp	r3, #0
 8007096:	f000 82ac 	beq.w	80075f2 <HAL_UART_IRQHandler+0x5c2>
      {
        huart->RxISR(huart);
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800709e:	6878      	ldr	r0, [r7, #4]
 80070a0:	4798      	blx	r3
      }
      return;
 80070a2:	e2a6      	b.n	80075f2 <HAL_UART_IRQHandler+0x5c2>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80070a4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	f000 80fd 	beq.w	80072a8 <HAL_UART_IRQHandler+0x278>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80070ae:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80070b2:	4b7a      	ldr	r3, [pc, #488]	@ (800729c <HAL_UART_IRQHandler+0x26c>)
 80070b4:	4013      	ands	r3, r2
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d106      	bne.n	80070c8 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80070ba:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80070be:	4b78      	ldr	r3, [pc, #480]	@ (80072a0 <HAL_UART_IRQHandler+0x270>)
 80070c0:	4013      	ands	r3, r2
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	f000 80f0 	beq.w	80072a8 <HAL_UART_IRQHandler+0x278>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80070c8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80070cc:	f003 0301 	and.w	r3, r3, #1
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d011      	beq.n	80070f8 <HAL_UART_IRQHandler+0xc8>
 80070d4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80070d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d00b      	beq.n	80070f8 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	2201      	movs	r2, #1
 80070e6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80070ee:	f043 0201 	orr.w	r2, r3, #1
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80070f8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80070fc:	f003 0302 	and.w	r3, r3, #2
 8007100:	2b00      	cmp	r3, #0
 8007102:	d011      	beq.n	8007128 <HAL_UART_IRQHandler+0xf8>
 8007104:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007108:	f003 0301 	and.w	r3, r3, #1
 800710c:	2b00      	cmp	r3, #0
 800710e:	d00b      	beq.n	8007128 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	2202      	movs	r2, #2
 8007116:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800711e:	f043 0204 	orr.w	r2, r3, #4
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007128:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800712c:	f003 0304 	and.w	r3, r3, #4
 8007130:	2b00      	cmp	r3, #0
 8007132:	d011      	beq.n	8007158 <HAL_UART_IRQHandler+0x128>
 8007134:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007138:	f003 0301 	and.w	r3, r3, #1
 800713c:	2b00      	cmp	r3, #0
 800713e:	d00b      	beq.n	8007158 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	2204      	movs	r2, #4
 8007146:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800714e:	f043 0202 	orr.w	r2, r3, #2
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007158:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800715c:	f003 0308 	and.w	r3, r3, #8
 8007160:	2b00      	cmp	r3, #0
 8007162:	d017      	beq.n	8007194 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007164:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8007168:	f003 0320 	and.w	r3, r3, #32
 800716c:	2b00      	cmp	r3, #0
 800716e:	d105      	bne.n	800717c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8007170:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8007174:	4b49      	ldr	r3, [pc, #292]	@ (800729c <HAL_UART_IRQHandler+0x26c>)
 8007176:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007178:	2b00      	cmp	r3, #0
 800717a:	d00b      	beq.n	8007194 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	2208      	movs	r2, #8
 8007182:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800718a:	f043 0208 	orr.w	r2, r3, #8
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007194:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007198:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800719c:	2b00      	cmp	r3, #0
 800719e:	d012      	beq.n	80071c6 <HAL_UART_IRQHandler+0x196>
 80071a0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80071a4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d00c      	beq.n	80071c6 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80071b4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80071bc:	f043 0220 	orr.w	r2, r3, #32
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	f000 8212 	beq.w	80075f6 <HAL_UART_IRQHandler+0x5c6>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80071d2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80071d6:	f003 0320 	and.w	r3, r3, #32
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d013      	beq.n	8007206 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80071de:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80071e2:	f003 0320 	and.w	r3, r3, #32
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d105      	bne.n	80071f6 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80071ea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80071ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d007      	beq.n	8007206 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d003      	beq.n	8007206 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007202:	6878      	ldr	r0, [r7, #4]
 8007204:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800720c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	689b      	ldr	r3, [r3, #8]
 8007216:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800721a:	2b40      	cmp	r3, #64	@ 0x40
 800721c:	d005      	beq.n	800722a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800721e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8007222:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007226:	2b00      	cmp	r3, #0
 8007228:	d02e      	beq.n	8007288 <HAL_UART_IRQHandler+0x258>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800722a:	6878      	ldr	r0, [r7, #4]
 800722c:	f000 fded 	bl	8007e0a <UART_EndRxTransfer>

#if defined(HAL_DMA_MODULE_ENABLED)
        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	689b      	ldr	r3, [r3, #8]
 8007236:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800723a:	2b40      	cmp	r3, #64	@ 0x40
 800723c:	d120      	bne.n	8007280 <HAL_UART_IRQHandler+0x250>
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);

#endif /* !USART_DMAREQUESTS_SW_WA */
          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007244:	2b00      	cmp	r3, #0
 8007246:	d017      	beq.n	8007278 <HAL_UART_IRQHandler+0x248>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800724e:	4a15      	ldr	r2, [pc, #84]	@ (80072a4 <HAL_UART_IRQHandler+0x274>)
 8007250:	66da      	str	r2, [r3, #108]	@ 0x6c

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007258:	4618      	mov	r0, r3
 800725a:	f7fb fa11 	bl	8002680 <HAL_DMA_Abort_IT>
 800725e:	4603      	mov	r3, r0
 8007260:	2b00      	cmp	r3, #0
 8007262:	d019      	beq.n	8007298 <HAL_UART_IRQHandler+0x268>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800726a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800726c:	687a      	ldr	r2, [r7, #4]
 800726e:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8007272:	4610      	mov	r0, r2
 8007274:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007276:	e00f      	b.n	8007298 <HAL_UART_IRQHandler+0x268>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007278:	6878      	ldr	r0, [r7, #4]
 800727a:	f000 f9d1 	bl	8007620 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800727e:	e00b      	b.n	8007298 <HAL_UART_IRQHandler+0x268>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007280:	6878      	ldr	r0, [r7, #4]
 8007282:	f000 f9cd 	bl	8007620 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007286:	e007      	b.n	8007298 <HAL_UART_IRQHandler+0x268>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007288:	6878      	ldr	r0, [r7, #4]
 800728a:	f000 f9c9 	bl	8007620 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	2200      	movs	r2, #0
 8007292:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8007296:	e1ae      	b.n	80075f6 <HAL_UART_IRQHandler+0x5c6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007298:	bf00      	nop
    return;
 800729a:	e1ac      	b.n	80075f6 <HAL_UART_IRQHandler+0x5c6>
 800729c:	10000001 	.word	0x10000001
 80072a0:	04000120 	.word	0x04000120
 80072a4:	08007ed7 	.word	0x08007ed7

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80072ac:	2b01      	cmp	r3, #1
 80072ae:	f040 8142 	bne.w	8007536 <HAL_UART_IRQHandler+0x506>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80072b2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80072b6:	f003 0310 	and.w	r3, r3, #16
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	f000 813b 	beq.w	8007536 <HAL_UART_IRQHandler+0x506>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80072c0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80072c4:	f003 0310 	and.w	r3, r3, #16
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	f000 8134 	beq.w	8007536 <HAL_UART_IRQHandler+0x506>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	2210      	movs	r2, #16
 80072d4:	621a      	str	r2, [r3, #32]

#if defined(HAL_DMA_MODULE_ENABLED)
    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	689b      	ldr	r3, [r3, #8]
 80072dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80072e0:	2b40      	cmp	r3, #64	@ 0x40
 80072e2:	f040 80aa 	bne.w	800743a <HAL_UART_IRQHandler+0x40a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80072f0:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92
      if ((nb_remaining_rx_data > 0U)
 80072f4:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	f000 8084 	beq.w	8007406 <HAL_UART_IRQHandler+0x3d6>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007304:	f8b7 2092 	ldrh.w	r2, [r7, #146]	@ 0x92
 8007308:	429a      	cmp	r2, r3
 800730a:	d27c      	bcs.n	8007406 <HAL_UART_IRQHandler+0x3d6>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	f8b7 2092 	ldrh.w	r2, [r7, #146]	@ 0x92
 8007312:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Mode != DMA_LINKEDLIST_CIRCULAR)
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800731c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800731e:	2b81      	cmp	r3, #129	@ 0x81
 8007320:	d060      	beq.n	80073e4 <HAL_UART_IRQHandler+0x3b4>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007328:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800732a:	e853 3f00 	ldrex	r3, [r3]
 800732e:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8007330:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007332:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007336:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	461a      	mov	r2, r3
 8007340:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007344:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007348:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800734a:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800734c:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8007350:	e841 2300 	strex	r3, r2, [r1]
 8007354:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8007356:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007358:	2b00      	cmp	r3, #0
 800735a:	d1e2      	bne.n	8007322 <HAL_UART_IRQHandler+0x2f2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	3308      	adds	r3, #8
 8007362:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007364:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007366:	e853 3f00 	ldrex	r3, [r3]
 800736a:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800736c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800736e:	f023 0301 	bic.w	r3, r3, #1
 8007372:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	3308      	adds	r3, #8
 800737c:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8007380:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007382:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007384:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8007386:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8007388:	e841 2300 	strex	r3, r2, [r1]
 800738c:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800738e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007390:	2b00      	cmp	r3, #0
 8007392:	d1e3      	bne.n	800735c <HAL_UART_IRQHandler+0x32c>
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);

#endif /* !USART_DMAREQUESTS_SW_WA */
          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	2220      	movs	r2, #32
 8007398:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	2200      	movs	r2, #0
 80073a0:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073a8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80073aa:	e853 3f00 	ldrex	r3, [r3]
 80073ae:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80073b0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80073b2:	f023 0310 	bic.w	r3, r3, #16
 80073b6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	461a      	mov	r2, r3
 80073c0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80073c4:	65bb      	str	r3, [r7, #88]	@ 0x58
 80073c6:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073c8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80073ca:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80073cc:	e841 2300 	strex	r3, r2, [r1]
 80073d0:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80073d2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d1e4      	bne.n	80073a2 <HAL_UART_IRQHandler+0x372>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80073de:	4618      	mov	r0, r3
 80073e0:	f7fb f8d2 	bl	8002588 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	2202      	movs	r2, #2
 80073e8:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80073f6:	b29b      	uxth	r3, r3
 80073f8:	1ad3      	subs	r3, r2, r3
 80073fa:	b29b      	uxth	r3, r3
 80073fc:	4619      	mov	r1, r3
 80073fe:	6878      	ldr	r0, [r7, #4]
 8007400:	f000 f918 	bl	8007634 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8007404:	e0f9      	b.n	80075fa <HAL_UART_IRQHandler+0x5ca>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800740c:	f8b7 2092 	ldrh.w	r2, [r7, #146]	@ 0x92
 8007410:	429a      	cmp	r2, r3
 8007412:	f040 80f2 	bne.w	80075fa <HAL_UART_IRQHandler+0x5ca>
          if (huart->hdmarx->Mode == DMA_LINKEDLIST_CIRCULAR)
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800741c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800741e:	2b81      	cmp	r3, #129	@ 0x81
 8007420:	f040 80eb 	bne.w	80075fa <HAL_UART_IRQHandler+0x5ca>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	2202      	movs	r2, #2
 8007428:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007430:	4619      	mov	r1, r3
 8007432:	6878      	ldr	r0, [r7, #4]
 8007434:	f000 f8fe 	bl	8007634 <HAL_UARTEx_RxEventCallback>
      return;
 8007438:	e0df      	b.n	80075fa <HAL_UART_IRQHandler+0x5ca>
    {
#endif /* HAL_DMA_MODULE_ENABLED */
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007446:	b29b      	uxth	r3, r3
 8007448:	1ad3      	subs	r3, r2, r3
 800744a:	f8a7 30a2 	strh.w	r3, [r7, #162]	@ 0xa2
      if ((huart->RxXferCount > 0U)
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007454:	b29b      	uxth	r3, r3
 8007456:	2b00      	cmp	r3, #0
 8007458:	f000 80d1 	beq.w	80075fe <HAL_UART_IRQHandler+0x5ce>
          && (nb_rx_data > 0U))
 800745c:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	@ 0xa2
 8007460:	2b00      	cmp	r3, #0
 8007462:	f000 80cc 	beq.w	80075fe <HAL_UART_IRQHandler+0x5ce>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800746c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800746e:	e853 3f00 	ldrex	r3, [r3]
 8007472:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007474:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007476:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800747a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	461a      	mov	r2, r3
 8007484:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007488:	647b      	str	r3, [r7, #68]	@ 0x44
 800748a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800748c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800748e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007490:	e841 2300 	strex	r3, r2, [r1]
 8007494:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007496:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007498:	2b00      	cmp	r3, #0
 800749a:	d1e4      	bne.n	8007466 <HAL_UART_IRQHandler+0x436>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	3308      	adds	r3, #8
 80074a2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074a6:	e853 3f00 	ldrex	r3, [r3]
 80074aa:	623b      	str	r3, [r7, #32]
   return(result);
 80074ac:	6a3b      	ldr	r3, [r7, #32]
 80074ae:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80074b2:	f023 0301 	bic.w	r3, r3, #1
 80074b6:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	3308      	adds	r3, #8
 80074c0:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 80074c4:	633a      	str	r2, [r7, #48]	@ 0x30
 80074c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074c8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80074ca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80074cc:	e841 2300 	strex	r3, r2, [r1]
 80074d0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80074d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d1e1      	bne.n	800749c <HAL_UART_IRQHandler+0x46c>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	2220      	movs	r2, #32
 80074dc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	2200      	movs	r2, #0
 80074e4:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	2200      	movs	r2, #0
 80074ea:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074f2:	693b      	ldr	r3, [r7, #16]
 80074f4:	e853 3f00 	ldrex	r3, [r3]
 80074f8:	60fb      	str	r3, [r7, #12]
   return(result);
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	f023 0310 	bic.w	r3, r3, #16
 8007500:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	461a      	mov	r2, r3
 800750a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800750e:	61fb      	str	r3, [r7, #28]
 8007510:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007512:	69b9      	ldr	r1, [r7, #24]
 8007514:	69fa      	ldr	r2, [r7, #28]
 8007516:	e841 2300 	strex	r3, r2, [r1]
 800751a:	617b      	str	r3, [r7, #20]
   return(result);
 800751c:	697b      	ldr	r3, [r7, #20]
 800751e:	2b00      	cmp	r3, #0
 8007520:	d1e4      	bne.n	80074ec <HAL_UART_IRQHandler+0x4bc>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	2202      	movs	r2, #2
 8007526:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007528:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	@ 0xa2
 800752c:	4619      	mov	r1, r3
 800752e:	6878      	ldr	r0, [r7, #4]
 8007530:	f000 f880 	bl	8007634 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007534:	e063      	b.n	80075fe <HAL_UART_IRQHandler+0x5ce>
    }
#endif /* HAL_DMA_MODULE_ENABLED */
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007536:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800753a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800753e:	2b00      	cmp	r3, #0
 8007540:	d00e      	beq.n	8007560 <HAL_UART_IRQHandler+0x530>
 8007542:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007546:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800754a:	2b00      	cmp	r3, #0
 800754c:	d008      	beq.n	8007560 <HAL_UART_IRQHandler+0x530>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8007556:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007558:	6878      	ldr	r0, [r7, #4]
 800755a:	f000 fcfd 	bl	8007f58 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800755e:	e051      	b.n	8007604 <HAL_UART_IRQHandler+0x5d4>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8007560:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007564:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007568:	2b00      	cmp	r3, #0
 800756a:	d014      	beq.n	8007596 <HAL_UART_IRQHandler+0x566>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800756c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8007570:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007574:	2b00      	cmp	r3, #0
 8007576:	d105      	bne.n	8007584 <HAL_UART_IRQHandler+0x554>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8007578:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800757c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007580:	2b00      	cmp	r3, #0
 8007582:	d008      	beq.n	8007596 <HAL_UART_IRQHandler+0x566>
  {
    if (huart->TxISR != NULL)
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007588:	2b00      	cmp	r3, #0
 800758a:	d03a      	beq.n	8007602 <HAL_UART_IRQHandler+0x5d2>
    {
      huart->TxISR(huart);
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007590:	6878      	ldr	r0, [r7, #4]
 8007592:	4798      	blx	r3
    }
    return;
 8007594:	e035      	b.n	8007602 <HAL_UART_IRQHandler+0x5d2>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007596:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800759a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d009      	beq.n	80075b6 <HAL_UART_IRQHandler+0x586>
 80075a2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80075a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d003      	beq.n	80075b6 <HAL_UART_IRQHandler+0x586>
  {
    UART_EndTransmit_IT(huart);
 80075ae:	6878      	ldr	r0, [r7, #4]
 80075b0:	f000 fca7 	bl	8007f02 <UART_EndTransmit_IT>
    return;
 80075b4:	e026      	b.n	8007604 <HAL_UART_IRQHandler+0x5d4>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80075b6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80075ba:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d009      	beq.n	80075d6 <HAL_UART_IRQHandler+0x5a6>
 80075c2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80075c6:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d003      	beq.n	80075d6 <HAL_UART_IRQHandler+0x5a6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80075ce:	6878      	ldr	r0, [r7, #4]
 80075d0:	f000 fcd6 	bl	8007f80 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80075d4:	e016      	b.n	8007604 <HAL_UART_IRQHandler+0x5d4>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80075d6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80075da:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d010      	beq.n	8007604 <HAL_UART_IRQHandler+0x5d4>
 80075e2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	da0c      	bge.n	8007604 <HAL_UART_IRQHandler+0x5d4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80075ea:	6878      	ldr	r0, [r7, #4]
 80075ec:	f000 fcbe 	bl	8007f6c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80075f0:	e008      	b.n	8007604 <HAL_UART_IRQHandler+0x5d4>
      return;
 80075f2:	bf00      	nop
 80075f4:	e006      	b.n	8007604 <HAL_UART_IRQHandler+0x5d4>
    return;
 80075f6:	bf00      	nop
 80075f8:	e004      	b.n	8007604 <HAL_UART_IRQHandler+0x5d4>
      return;
 80075fa:	bf00      	nop
 80075fc:	e002      	b.n	8007604 <HAL_UART_IRQHandler+0x5d4>
      return;
 80075fe:	bf00      	nop
 8007600:	e000      	b.n	8007604 <HAL_UART_IRQHandler+0x5d4>
    return;
 8007602:	bf00      	nop
  }
}
 8007604:	37b8      	adds	r7, #184	@ 0xb8
 8007606:	46bd      	mov	sp, r7
 8007608:	bd80      	pop	{r7, pc}
 800760a:	bf00      	nop

0800760c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800760c:	b480      	push	{r7}
 800760e:	b083      	sub	sp, #12
 8007610:	af00      	add	r7, sp, #0
 8007612:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007614:	bf00      	nop
 8007616:	370c      	adds	r7, #12
 8007618:	46bd      	mov	sp, r7
 800761a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800761e:	4770      	bx	lr

08007620 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007620:	b480      	push	{r7}
 8007622:	b083      	sub	sp, #12
 8007624:	af00      	add	r7, sp, #0
 8007626:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007628:	bf00      	nop
 800762a:	370c      	adds	r7, #12
 800762c:	46bd      	mov	sp, r7
 800762e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007632:	4770      	bx	lr

08007634 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007634:	b480      	push	{r7}
 8007636:	b083      	sub	sp, #12
 8007638:	af00      	add	r7, sp, #0
 800763a:	6078      	str	r0, [r7, #4]
 800763c:	460b      	mov	r3, r1
 800763e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007640:	bf00      	nop
 8007642:	370c      	adds	r7, #12
 8007644:	46bd      	mov	sp, r7
 8007646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800764a:	4770      	bx	lr

0800764c <HAL_HalfDuplex_EnableTransmitter>:
  * @brief  Enable the UART transmitter and disable the UART receiver.
  * @param  huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_EnableTransmitter(UART_HandleTypeDef *huart)
{
 800764c:	b480      	push	{r7}
 800764e:	b08f      	sub	sp, #60	@ 0x3c
 8007650:	af00      	add	r7, sp, #0
 8007652:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(huart);
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800765a:	2b01      	cmp	r3, #1
 800765c:	d101      	bne.n	8007662 <HAL_HalfDuplex_EnableTransmitter+0x16>
 800765e:	2302      	movs	r3, #2
 8007660:	e042      	b.n	80076e8 <HAL_HalfDuplex_EnableTransmitter+0x9c>
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	2201      	movs	r2, #1
 8007666:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84
  huart->gState = HAL_UART_STATE_BUSY;
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	2224      	movs	r2, #36	@ 0x24
 800766e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Clear TE and RE bits */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TE | USART_CR1_RE));
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007678:	6a3b      	ldr	r3, [r7, #32]
 800767a:	e853 3f00 	ldrex	r3, [r3]
 800767e:	61fb      	str	r3, [r7, #28]
   return(result);
 8007680:	69fb      	ldr	r3, [r7, #28]
 8007682:	f023 030c 	bic.w	r3, r3, #12
 8007686:	637b      	str	r3, [r7, #52]	@ 0x34
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	461a      	mov	r2, r3
 800768e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007690:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007692:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007694:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007696:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007698:	e841 2300 	strex	r3, r2, [r1]
 800769c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800769e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d1e6      	bne.n	8007672 <HAL_HalfDuplex_EnableTransmitter+0x26>

  /* Enable the USART's transmit interface by setting the TE bit in the USART CR1 register */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TE);
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	e853 3f00 	ldrex	r3, [r3]
 80076b0:	60bb      	str	r3, [r7, #8]
   return(result);
 80076b2:	68bb      	ldr	r3, [r7, #8]
 80076b4:	f043 0308 	orr.w	r3, r3, #8
 80076b8:	633b      	str	r3, [r7, #48]	@ 0x30
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	461a      	mov	r2, r3
 80076c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076c2:	61bb      	str	r3, [r7, #24]
 80076c4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076c6:	6979      	ldr	r1, [r7, #20]
 80076c8:	69ba      	ldr	r2, [r7, #24]
 80076ca:	e841 2300 	strex	r3, r2, [r1]
 80076ce:	613b      	str	r3, [r7, #16]
   return(result);
 80076d0:	693b      	ldr	r3, [r7, #16]
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d1e6      	bne.n	80076a4 <HAL_HalfDuplex_EnableTransmitter+0x58>

  huart->gState = HAL_UART_STATE_READY;
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	2220      	movs	r2, #32
 80076da:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UNLOCK(huart);
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	2200      	movs	r2, #0
 80076e2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80076e6:	2300      	movs	r3, #0
}
 80076e8:	4618      	mov	r0, r3
 80076ea:	373c      	adds	r7, #60	@ 0x3c
 80076ec:	46bd      	mov	sp, r7
 80076ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f2:	4770      	bx	lr

080076f4 <HAL_HalfDuplex_EnableReceiver>:
  * @brief  Enable the UART receiver and disable the UART transmitter.
  * @param  huart UART handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_HalfDuplex_EnableReceiver(UART_HandleTypeDef *huart)
{
 80076f4:	b480      	push	{r7}
 80076f6:	b08f      	sub	sp, #60	@ 0x3c
 80076f8:	af00      	add	r7, sp, #0
 80076fa:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(huart);
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007702:	2b01      	cmp	r3, #1
 8007704:	d101      	bne.n	800770a <HAL_HalfDuplex_EnableReceiver+0x16>
 8007706:	2302      	movs	r3, #2
 8007708:	e042      	b.n	8007790 <HAL_HalfDuplex_EnableReceiver+0x9c>
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	2201      	movs	r2, #1
 800770e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84
  huart->gState = HAL_UART_STATE_BUSY;
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	2224      	movs	r2, #36	@ 0x24
 8007716:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Clear TE and RE bits */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TE | USART_CR1_RE));
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007720:	6a3b      	ldr	r3, [r7, #32]
 8007722:	e853 3f00 	ldrex	r3, [r3]
 8007726:	61fb      	str	r3, [r7, #28]
   return(result);
 8007728:	69fb      	ldr	r3, [r7, #28]
 800772a:	f023 030c 	bic.w	r3, r3, #12
 800772e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	461a      	mov	r2, r3
 8007736:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007738:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800773a:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800773c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800773e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007740:	e841 2300 	strex	r3, r2, [r1]
 8007744:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007746:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007748:	2b00      	cmp	r3, #0
 800774a:	d1e6      	bne.n	800771a <HAL_HalfDuplex_EnableReceiver+0x26>

  /* Enable the USART's receive interface by setting the RE bit in the USART CR1 register */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RE);
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	e853 3f00 	ldrex	r3, [r3]
 8007758:	60bb      	str	r3, [r7, #8]
   return(result);
 800775a:	68bb      	ldr	r3, [r7, #8]
 800775c:	f043 0304 	orr.w	r3, r3, #4
 8007760:	633b      	str	r3, [r7, #48]	@ 0x30
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	461a      	mov	r2, r3
 8007768:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800776a:	61bb      	str	r3, [r7, #24]
 800776c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800776e:	6979      	ldr	r1, [r7, #20]
 8007770:	69ba      	ldr	r2, [r7, #24]
 8007772:	e841 2300 	strex	r3, r2, [r1]
 8007776:	613b      	str	r3, [r7, #16]
   return(result);
 8007778:	693b      	ldr	r3, [r7, #16]
 800777a:	2b00      	cmp	r3, #0
 800777c:	d1e6      	bne.n	800774c <HAL_HalfDuplex_EnableReceiver+0x58>

  huart->gState = HAL_UART_STATE_READY;
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	2220      	movs	r2, #32
 8007782:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UNLOCK(huart);
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	2200      	movs	r2, #0
 800778a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800778e:	2300      	movs	r3, #0
}
 8007790:	4618      	mov	r0, r3
 8007792:	373c      	adds	r7, #60	@ 0x3c
 8007794:	46bd      	mov	sp, r7
 8007796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800779a:	4770      	bx	lr

0800779c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800779c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80077a0:	b094      	sub	sp, #80	@ 0x50
 80077a2:	af00      	add	r7, sp, #0
 80077a4:	62f8      	str	r0, [r7, #44]	@ 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80077a6:	2300      	movs	r3, #0
 80077a8:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80077ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80077ae:	689a      	ldr	r2, [r3, #8]
 80077b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80077b2:	691b      	ldr	r3, [r3, #16]
 80077b4:	431a      	orrs	r2, r3
 80077b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80077b8:	695b      	ldr	r3, [r3, #20]
 80077ba:	431a      	orrs	r2, r3
 80077bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80077be:	69db      	ldr	r3, [r3, #28]
 80077c0:	4313      	orrs	r3, r2
 80077c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80077c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	498a      	ldr	r1, [pc, #552]	@ (80079f4 <UART_SetConfig+0x258>)
 80077cc:	4019      	ands	r1, r3
 80077ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80077d0:	681a      	ldr	r2, [r3, #0]
 80077d2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80077d4:	430b      	orrs	r3, r1
 80077d6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80077d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	685b      	ldr	r3, [r3, #4]
 80077de:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80077e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80077e4:	68d9      	ldr	r1, [r3, #12]
 80077e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80077e8:	681a      	ldr	r2, [r3, #0]
 80077ea:	ea40 0301 	orr.w	r3, r0, r1
 80077ee:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80077f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80077f2:	699b      	ldr	r3, [r3, #24]
 80077f4:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80077f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80077f8:	681a      	ldr	r2, [r3, #0]
 80077fa:	4b7f      	ldr	r3, [pc, #508]	@ (80079f8 <UART_SetConfig+0x25c>)
 80077fc:	429a      	cmp	r2, r3
 80077fe:	d004      	beq.n	800780a <UART_SetConfig+0x6e>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007800:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007802:	6a1a      	ldr	r2, [r3, #32]
 8007804:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007806:	4313      	orrs	r3, r2
 8007808:	64fb      	str	r3, [r7, #76]	@ 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800780a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	689b      	ldr	r3, [r3, #8]
 8007810:	f023 416e 	bic.w	r1, r3, #3992977408	@ 0xee000000
 8007814:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
 8007818:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800781a:	681a      	ldr	r2, [r3, #0]
 800781c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800781e:	430b      	orrs	r3, r1
 8007820:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007822:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007828:	f023 000f 	bic.w	r0, r3, #15
 800782c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800782e:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8007830:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007832:	681a      	ldr	r2, [r3, #0]
 8007834:	ea40 0301 	orr.w	r3, r0, r1
 8007838:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800783a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800783c:	681a      	ldr	r2, [r3, #0]
 800783e:	4b6f      	ldr	r3, [pc, #444]	@ (80079fc <UART_SetConfig+0x260>)
 8007840:	429a      	cmp	r2, r3
 8007842:	d102      	bne.n	800784a <UART_SetConfig+0xae>
 8007844:	2301      	movs	r3, #1
 8007846:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007848:	e01a      	b.n	8007880 <UART_SetConfig+0xe4>
 800784a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800784c:	681a      	ldr	r2, [r3, #0]
 800784e:	4b6c      	ldr	r3, [pc, #432]	@ (8007a00 <UART_SetConfig+0x264>)
 8007850:	429a      	cmp	r2, r3
 8007852:	d102      	bne.n	800785a <UART_SetConfig+0xbe>
 8007854:	2302      	movs	r3, #2
 8007856:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007858:	e012      	b.n	8007880 <UART_SetConfig+0xe4>
 800785a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800785c:	681a      	ldr	r2, [r3, #0]
 800785e:	4b69      	ldr	r3, [pc, #420]	@ (8007a04 <UART_SetConfig+0x268>)
 8007860:	429a      	cmp	r2, r3
 8007862:	d102      	bne.n	800786a <UART_SetConfig+0xce>
 8007864:	2304      	movs	r3, #4
 8007866:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007868:	e00a      	b.n	8007880 <UART_SetConfig+0xe4>
 800786a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800786c:	681a      	ldr	r2, [r3, #0]
 800786e:	4b62      	ldr	r3, [pc, #392]	@ (80079f8 <UART_SetConfig+0x25c>)
 8007870:	429a      	cmp	r2, r3
 8007872:	d103      	bne.n	800787c <UART_SetConfig+0xe0>
 8007874:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8007878:	64bb      	str	r3, [r7, #72]	@ 0x48
 800787a:	e001      	b.n	8007880 <UART_SetConfig+0xe4>
 800787c:	2300      	movs	r3, #0
 800787e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007880:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007882:	681a      	ldr	r2, [r3, #0]
 8007884:	4b5c      	ldr	r3, [pc, #368]	@ (80079f8 <UART_SetConfig+0x25c>)
 8007886:	429a      	cmp	r2, r3
 8007888:	d171      	bne.n	800796e <UART_SetConfig+0x1d2>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800788a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800788c:	2200      	movs	r2, #0
 800788e:	623b      	str	r3, [r7, #32]
 8007890:	627a      	str	r2, [r7, #36]	@ 0x24
 8007892:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8007896:	f7fd fbd9 	bl	800504c <HAL_RCCEx_GetPeriphCLKFreq>
 800789a:	6438      	str	r0, [r7, #64]	@ 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 800789c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800789e:	2b00      	cmp	r3, #0
 80078a0:	f000 80e2 	beq.w	8007a68 <UART_SetConfig+0x2cc>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80078a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80078a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80078a8:	4a57      	ldr	r2, [pc, #348]	@ (8007a08 <UART_SetConfig+0x26c>)
 80078aa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80078ae:	461a      	mov	r2, r3
 80078b0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80078b2:	fbb3 f3f2 	udiv	r3, r3, r2
 80078b6:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80078b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80078ba:	685a      	ldr	r2, [r3, #4]
 80078bc:	4613      	mov	r3, r2
 80078be:	005b      	lsls	r3, r3, #1
 80078c0:	4413      	add	r3, r2
 80078c2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80078c4:	429a      	cmp	r2, r3
 80078c6:	d305      	bcc.n	80078d4 <UART_SetConfig+0x138>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80078c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80078ca:	685b      	ldr	r3, [r3, #4]
 80078cc:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80078ce:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80078d0:	429a      	cmp	r2, r3
 80078d2:	d903      	bls.n	80078dc <UART_SetConfig+0x140>
      {
        ret = HAL_ERROR;
 80078d4:	2301      	movs	r3, #1
 80078d6:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 80078da:	e0c5      	b.n	8007a68 <UART_SetConfig+0x2cc>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80078dc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80078de:	2200      	movs	r2, #0
 80078e0:	61bb      	str	r3, [r7, #24]
 80078e2:	61fa      	str	r2, [r7, #28]
 80078e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80078e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80078e8:	4a47      	ldr	r2, [pc, #284]	@ (8007a08 <UART_SetConfig+0x26c>)
 80078ea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80078ee:	b29b      	uxth	r3, r3
 80078f0:	2200      	movs	r2, #0
 80078f2:	613b      	str	r3, [r7, #16]
 80078f4:	617a      	str	r2, [r7, #20]
 80078f6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80078fa:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80078fe:	f7f9 f9e1 	bl	8000cc4 <__aeabi_uldivmod>
 8007902:	4602      	mov	r2, r0
 8007904:	460b      	mov	r3, r1
 8007906:	4610      	mov	r0, r2
 8007908:	4619      	mov	r1, r3
 800790a:	f04f 0200 	mov.w	r2, #0
 800790e:	f04f 0300 	mov.w	r3, #0
 8007912:	020b      	lsls	r3, r1, #8
 8007914:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007918:	0202      	lsls	r2, r0, #8
 800791a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800791c:	6849      	ldr	r1, [r1, #4]
 800791e:	0849      	lsrs	r1, r1, #1
 8007920:	2000      	movs	r0, #0
 8007922:	460c      	mov	r4, r1
 8007924:	4605      	mov	r5, r0
 8007926:	eb12 0804 	adds.w	r8, r2, r4
 800792a:	eb43 0905 	adc.w	r9, r3, r5
 800792e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007930:	685b      	ldr	r3, [r3, #4]
 8007932:	2200      	movs	r2, #0
 8007934:	60bb      	str	r3, [r7, #8]
 8007936:	60fa      	str	r2, [r7, #12]
 8007938:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800793c:	4640      	mov	r0, r8
 800793e:	4649      	mov	r1, r9
 8007940:	f7f9 f9c0 	bl	8000cc4 <__aeabi_uldivmod>
 8007944:	4602      	mov	r2, r0
 8007946:	460b      	mov	r3, r1
 8007948:	4613      	mov	r3, r2
 800794a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800794c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800794e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007952:	d308      	bcc.n	8007966 <UART_SetConfig+0x1ca>
 8007954:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007956:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800795a:	d204      	bcs.n	8007966 <UART_SetConfig+0x1ca>
        {
          huart->Instance->BRR = usartdiv;
 800795c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8007962:	60da      	str	r2, [r3, #12]
 8007964:	e080      	b.n	8007a68 <UART_SetConfig+0x2cc>
        }
        else
        {
          ret = HAL_ERROR;
 8007966:	2301      	movs	r3, #1
 8007968:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800796c:	e07c      	b.n	8007a68 <UART_SetConfig+0x2cc>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800796e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007970:	69db      	ldr	r3, [r3, #28]
 8007972:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007976:	d149      	bne.n	8007a0c <UART_SetConfig+0x270>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8007978:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800797a:	2200      	movs	r2, #0
 800797c:	603b      	str	r3, [r7, #0]
 800797e:	607a      	str	r2, [r7, #4]
 8007980:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007984:	f7fd fb62 	bl	800504c <HAL_RCCEx_GetPeriphCLKFreq>
 8007988:	6438      	str	r0, [r7, #64]	@ 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800798a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800798c:	2b00      	cmp	r3, #0
 800798e:	d06b      	beq.n	8007a68 <UART_SetConfig+0x2cc>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007990:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007992:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007994:	4a1c      	ldr	r2, [pc, #112]	@ (8007a08 <UART_SetConfig+0x26c>)
 8007996:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800799a:	461a      	mov	r2, r3
 800799c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800799e:	fbb3 f3f2 	udiv	r3, r3, r2
 80079a2:	005a      	lsls	r2, r3, #1
 80079a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80079a6:	685b      	ldr	r3, [r3, #4]
 80079a8:	085b      	lsrs	r3, r3, #1
 80079aa:	441a      	add	r2, r3
 80079ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80079ae:	685b      	ldr	r3, [r3, #4]
 80079b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80079b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80079b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80079b8:	2b0f      	cmp	r3, #15
 80079ba:	d916      	bls.n	80079ea <UART_SetConfig+0x24e>
 80079bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80079be:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80079c2:	d212      	bcs.n	80079ea <UART_SetConfig+0x24e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80079c4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80079c6:	b29b      	uxth	r3, r3
 80079c8:	f023 030f 	bic.w	r3, r3, #15
 80079cc:	877b      	strh	r3, [r7, #58]	@ 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80079ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80079d0:	085b      	lsrs	r3, r3, #1
 80079d2:	b29b      	uxth	r3, r3
 80079d4:	f003 0307 	and.w	r3, r3, #7
 80079d8:	b29a      	uxth	r2, r3
 80079da:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80079dc:	4313      	orrs	r3, r2
 80079de:	877b      	strh	r3, [r7, #58]	@ 0x3a
        huart->Instance->BRR = brrtemp;
 80079e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 80079e6:	60da      	str	r2, [r3, #12]
 80079e8:	e03e      	b.n	8007a68 <UART_SetConfig+0x2cc>
      }
      else
      {
        ret = HAL_ERROR;
 80079ea:	2301      	movs	r3, #1
 80079ec:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 80079f0:	e03a      	b.n	8007a68 <UART_SetConfig+0x2cc>
 80079f2:	bf00      	nop
 80079f4:	cfff69f3 	.word	0xcfff69f3
 80079f8:	44002400 	.word	0x44002400
 80079fc:	40013800 	.word	0x40013800
 8007a00:	40004400 	.word	0x40004400
 8007a04:	40004800 	.word	0x40004800
 8007a08:	0800ca80 	.word	0x0800ca80
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8007a0c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007a0e:	2200      	movs	r2, #0
 8007a10:	469a      	mov	sl, r3
 8007a12:	4693      	mov	fp, r2
 8007a14:	4650      	mov	r0, sl
 8007a16:	4659      	mov	r1, fp
 8007a18:	f7fd fb18 	bl	800504c <HAL_RCCEx_GetPeriphCLKFreq>
 8007a1c:	6438      	str	r0, [r7, #64]	@ 0x40

    if (pclk != 0U)
 8007a1e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d021      	beq.n	8007a68 <UART_SetConfig+0x2cc>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007a24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a28:	4a1a      	ldr	r2, [pc, #104]	@ (8007a94 <UART_SetConfig+0x2f8>)
 8007a2a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007a2e:	461a      	mov	r2, r3
 8007a30:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007a32:	fbb3 f2f2 	udiv	r2, r3, r2
 8007a36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a38:	685b      	ldr	r3, [r3, #4]
 8007a3a:	085b      	lsrs	r3, r3, #1
 8007a3c:	441a      	add	r2, r3
 8007a3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a40:	685b      	ldr	r3, [r3, #4]
 8007a42:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a46:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007a48:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007a4a:	2b0f      	cmp	r3, #15
 8007a4c:	d909      	bls.n	8007a62 <UART_SetConfig+0x2c6>
 8007a4e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007a50:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007a54:	d205      	bcs.n	8007a62 <UART_SetConfig+0x2c6>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007a56:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007a58:	b29a      	uxth	r2, r3
 8007a5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	60da      	str	r2, [r3, #12]
 8007a60:	e002      	b.n	8007a68 <UART_SetConfig+0x2cc>
      }
      else
      {
        ret = HAL_ERROR;
 8007a62:	2301      	movs	r3, #1
 8007a64:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007a68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a6a:	2201      	movs	r2, #1
 8007a6c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8007a70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a72:	2201      	movs	r2, #1
 8007a74:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007a78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a7a:	2200      	movs	r2, #0
 8007a7c:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8007a7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a80:	2200      	movs	r2, #0
 8007a82:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8007a84:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 8007a88:	4618      	mov	r0, r3
 8007a8a:	3750      	adds	r7, #80	@ 0x50
 8007a8c:	46bd      	mov	sp, r7
 8007a8e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007a92:	bf00      	nop
 8007a94:	0800ca80 	.word	0x0800ca80

08007a98 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007a98:	b480      	push	{r7}
 8007a9a:	b083      	sub	sp, #12
 8007a9c:	af00      	add	r7, sp, #0
 8007a9e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007aa4:	f003 0308 	and.w	r3, r3, #8
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d00a      	beq.n	8007ac2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	685b      	ldr	r3, [r3, #4]
 8007ab2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	430a      	orrs	r2, r1
 8007ac0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ac6:	f003 0301 	and.w	r3, r3, #1
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d00a      	beq.n	8007ae4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	685b      	ldr	r3, [r3, #4]
 8007ad4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	430a      	orrs	r2, r1
 8007ae2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ae8:	f003 0302 	and.w	r3, r3, #2
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d00a      	beq.n	8007b06 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	685b      	ldr	r3, [r3, #4]
 8007af6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	430a      	orrs	r2, r1
 8007b04:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b0a:	f003 0304 	and.w	r3, r3, #4
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d00a      	beq.n	8007b28 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	685b      	ldr	r3, [r3, #4]
 8007b18:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	430a      	orrs	r2, r1
 8007b26:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b2c:	f003 0310 	and.w	r3, r3, #16
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d00a      	beq.n	8007b4a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	689b      	ldr	r3, [r3, #8]
 8007b3a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	430a      	orrs	r2, r1
 8007b48:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b4e:	f003 0320 	and.w	r3, r3, #32
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d00a      	beq.n	8007b6c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	689b      	ldr	r3, [r3, #8]
 8007b5c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	430a      	orrs	r2, r1
 8007b6a:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b70:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d01a      	beq.n	8007bae <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	685b      	ldr	r3, [r3, #4]
 8007b7e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	430a      	orrs	r2, r1
 8007b8c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007b92:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007b96:	d10a      	bne.n	8007bae <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	685b      	ldr	r3, [r3, #4]
 8007b9e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	430a      	orrs	r2, r1
 8007bac:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007bb2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d00a      	beq.n	8007bd0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	685b      	ldr	r3, [r3, #4]
 8007bc0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	430a      	orrs	r2, r1
 8007bce:	605a      	str	r2, [r3, #4]
  }
}
 8007bd0:	bf00      	nop
 8007bd2:	370c      	adds	r7, #12
 8007bd4:	46bd      	mov	sp, r7
 8007bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bda:	4770      	bx	lr

08007bdc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007bdc:	b580      	push	{r7, lr}
 8007bde:	b098      	sub	sp, #96	@ 0x60
 8007be0:	af02      	add	r7, sp, #8
 8007be2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	2200      	movs	r2, #0
 8007be8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007bec:	f7fa fa56 	bl	800209c <HAL_GetTick>
 8007bf0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	f003 0308 	and.w	r3, r3, #8
 8007bfc:	2b08      	cmp	r3, #8
 8007bfe:	d12f      	bne.n	8007c60 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007c00:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007c04:	9300      	str	r3, [sp, #0]
 8007c06:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007c08:	2200      	movs	r2, #0
 8007c0a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8007c0e:	6878      	ldr	r0, [r7, #4]
 8007c10:	f000 f88e 	bl	8007d30 <UART_WaitOnFlagUntilTimeout>
 8007c14:	4603      	mov	r3, r0
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d022      	beq.n	8007c60 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c22:	e853 3f00 	ldrex	r3, [r3]
 8007c26:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007c28:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007c2a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007c2e:	653b      	str	r3, [r7, #80]	@ 0x50
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	461a      	mov	r2, r3
 8007c36:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007c38:	647b      	str	r3, [r7, #68]	@ 0x44
 8007c3a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c3c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007c3e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007c40:	e841 2300 	strex	r3, r2, [r1]
 8007c44:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007c46:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d1e6      	bne.n	8007c1a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	2220      	movs	r2, #32
 8007c50:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	2200      	movs	r2, #0
 8007c58:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007c5c:	2303      	movs	r3, #3
 8007c5e:	e063      	b.n	8007d28 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	f003 0304 	and.w	r3, r3, #4
 8007c6a:	2b04      	cmp	r3, #4
 8007c6c:	d149      	bne.n	8007d02 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007c6e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007c72:	9300      	str	r3, [sp, #0]
 8007c74:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007c76:	2200      	movs	r2, #0
 8007c78:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8007c7c:	6878      	ldr	r0, [r7, #4]
 8007c7e:	f000 f857 	bl	8007d30 <UART_WaitOnFlagUntilTimeout>
 8007c82:	4603      	mov	r3, r0
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d03c      	beq.n	8007d02 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c90:	e853 3f00 	ldrex	r3, [r3]
 8007c94:	623b      	str	r3, [r7, #32]
   return(result);
 8007c96:	6a3b      	ldr	r3, [r7, #32]
 8007c98:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007c9c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	461a      	mov	r2, r3
 8007ca4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007ca6:	633b      	str	r3, [r7, #48]	@ 0x30
 8007ca8:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007caa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007cac:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007cae:	e841 2300 	strex	r3, r2, [r1]
 8007cb2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007cb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d1e6      	bne.n	8007c88 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	3308      	adds	r3, #8
 8007cc0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cc2:	693b      	ldr	r3, [r7, #16]
 8007cc4:	e853 3f00 	ldrex	r3, [r3]
 8007cc8:	60fb      	str	r3, [r7, #12]
   return(result);
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	f023 0301 	bic.w	r3, r3, #1
 8007cd0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	3308      	adds	r3, #8
 8007cd8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007cda:	61fa      	str	r2, [r7, #28]
 8007cdc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cde:	69b9      	ldr	r1, [r7, #24]
 8007ce0:	69fa      	ldr	r2, [r7, #28]
 8007ce2:	e841 2300 	strex	r3, r2, [r1]
 8007ce6:	617b      	str	r3, [r7, #20]
   return(result);
 8007ce8:	697b      	ldr	r3, [r7, #20]
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d1e5      	bne.n	8007cba <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	2220      	movs	r2, #32
 8007cf2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	2200      	movs	r2, #0
 8007cfa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007cfe:	2303      	movs	r3, #3
 8007d00:	e012      	b.n	8007d28 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	2220      	movs	r2, #32
 8007d06:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	2220      	movs	r2, #32
 8007d0e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	2200      	movs	r2, #0
 8007d16:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	2200      	movs	r2, #0
 8007d1c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	2200      	movs	r2, #0
 8007d22:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007d26:	2300      	movs	r3, #0
}
 8007d28:	4618      	mov	r0, r3
 8007d2a:	3758      	adds	r7, #88	@ 0x58
 8007d2c:	46bd      	mov	sp, r7
 8007d2e:	bd80      	pop	{r7, pc}

08007d30 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007d30:	b580      	push	{r7, lr}
 8007d32:	b084      	sub	sp, #16
 8007d34:	af00      	add	r7, sp, #0
 8007d36:	60f8      	str	r0, [r7, #12]
 8007d38:	60b9      	str	r1, [r7, #8]
 8007d3a:	603b      	str	r3, [r7, #0]
 8007d3c:	4613      	mov	r3, r2
 8007d3e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007d40:	e04f      	b.n	8007de2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007d42:	69bb      	ldr	r3, [r7, #24]
 8007d44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d48:	d04b      	beq.n	8007de2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007d4a:	f7fa f9a7 	bl	800209c <HAL_GetTick>
 8007d4e:	4602      	mov	r2, r0
 8007d50:	683b      	ldr	r3, [r7, #0]
 8007d52:	1ad3      	subs	r3, r2, r3
 8007d54:	69ba      	ldr	r2, [r7, #24]
 8007d56:	429a      	cmp	r2, r3
 8007d58:	d302      	bcc.n	8007d60 <UART_WaitOnFlagUntilTimeout+0x30>
 8007d5a:	69bb      	ldr	r3, [r7, #24]
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d101      	bne.n	8007d64 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007d60:	2303      	movs	r3, #3
 8007d62:	e04e      	b.n	8007e02 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	f003 0304 	and.w	r3, r3, #4
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d037      	beq.n	8007de2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007d72:	68bb      	ldr	r3, [r7, #8]
 8007d74:	2b80      	cmp	r3, #128	@ 0x80
 8007d76:	d034      	beq.n	8007de2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007d78:	68bb      	ldr	r3, [r7, #8]
 8007d7a:	2b40      	cmp	r3, #64	@ 0x40
 8007d7c:	d031      	beq.n	8007de2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	69db      	ldr	r3, [r3, #28]
 8007d84:	f003 0308 	and.w	r3, r3, #8
 8007d88:	2b08      	cmp	r3, #8
 8007d8a:	d110      	bne.n	8007dae <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	2208      	movs	r2, #8
 8007d92:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007d94:	68f8      	ldr	r0, [r7, #12]
 8007d96:	f000 f838 	bl	8007e0a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	2208      	movs	r2, #8
 8007d9e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	2200      	movs	r2, #0
 8007da6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8007daa:	2301      	movs	r3, #1
 8007dac:	e029      	b.n	8007e02 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	69db      	ldr	r3, [r3, #28]
 8007db4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007db8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007dbc:	d111      	bne.n	8007de2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007dc6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007dc8:	68f8      	ldr	r0, [r7, #12]
 8007dca:	f000 f81e 	bl	8007e0a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	2220      	movs	r2, #32
 8007dd2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	2200      	movs	r2, #0
 8007dda:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8007dde:	2303      	movs	r3, #3
 8007de0:	e00f      	b.n	8007e02 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	69da      	ldr	r2, [r3, #28]
 8007de8:	68bb      	ldr	r3, [r7, #8]
 8007dea:	4013      	ands	r3, r2
 8007dec:	68ba      	ldr	r2, [r7, #8]
 8007dee:	429a      	cmp	r2, r3
 8007df0:	bf0c      	ite	eq
 8007df2:	2301      	moveq	r3, #1
 8007df4:	2300      	movne	r3, #0
 8007df6:	b2db      	uxtb	r3, r3
 8007df8:	461a      	mov	r2, r3
 8007dfa:	79fb      	ldrb	r3, [r7, #7]
 8007dfc:	429a      	cmp	r2, r3
 8007dfe:	d0a0      	beq.n	8007d42 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007e00:	2300      	movs	r3, #0
}
 8007e02:	4618      	mov	r0, r3
 8007e04:	3710      	adds	r7, #16
 8007e06:	46bd      	mov	sp, r7
 8007e08:	bd80      	pop	{r7, pc}

08007e0a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007e0a:	b480      	push	{r7}
 8007e0c:	b095      	sub	sp, #84	@ 0x54
 8007e0e:	af00      	add	r7, sp, #0
 8007e10:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e18:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007e1a:	e853 3f00 	ldrex	r3, [r3]
 8007e1e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007e20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e22:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007e26:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	461a      	mov	r2, r3
 8007e2e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007e30:	643b      	str	r3, [r7, #64]	@ 0x40
 8007e32:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e34:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007e36:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007e38:	e841 2300 	strex	r3, r2, [r1]
 8007e3c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007e3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d1e6      	bne.n	8007e12 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	3308      	adds	r3, #8
 8007e4a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e4c:	6a3b      	ldr	r3, [r7, #32]
 8007e4e:	e853 3f00 	ldrex	r3, [r3]
 8007e52:	61fb      	str	r3, [r7, #28]
   return(result);
 8007e54:	69fb      	ldr	r3, [r7, #28]
 8007e56:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007e5a:	f023 0301 	bic.w	r3, r3, #1
 8007e5e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	3308      	adds	r3, #8
 8007e66:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007e68:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007e6a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e6c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007e6e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007e70:	e841 2300 	strex	r3, r2, [r1]
 8007e74:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007e76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d1e3      	bne.n	8007e44 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007e80:	2b01      	cmp	r3, #1
 8007e82:	d118      	bne.n	8007eb6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	e853 3f00 	ldrex	r3, [r3]
 8007e90:	60bb      	str	r3, [r7, #8]
   return(result);
 8007e92:	68bb      	ldr	r3, [r7, #8]
 8007e94:	f023 0310 	bic.w	r3, r3, #16
 8007e98:	647b      	str	r3, [r7, #68]	@ 0x44
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	461a      	mov	r2, r3
 8007ea0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007ea2:	61bb      	str	r3, [r7, #24]
 8007ea4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ea6:	6979      	ldr	r1, [r7, #20]
 8007ea8:	69ba      	ldr	r2, [r7, #24]
 8007eaa:	e841 2300 	strex	r3, r2, [r1]
 8007eae:	613b      	str	r3, [r7, #16]
   return(result);
 8007eb0:	693b      	ldr	r3, [r7, #16]
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d1e6      	bne.n	8007e84 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	2220      	movs	r2, #32
 8007eba:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	2200      	movs	r2, #0
 8007ec2:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	2200      	movs	r2, #0
 8007ec8:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8007eca:	bf00      	nop
 8007ecc:	3754      	adds	r7, #84	@ 0x54
 8007ece:	46bd      	mov	sp, r7
 8007ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ed4:	4770      	bx	lr

08007ed6 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007ed6:	b580      	push	{r7, lr}
 8007ed8:	b084      	sub	sp, #16
 8007eda:	af00      	add	r7, sp, #0
 8007edc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007ee2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	2200      	movs	r2, #0
 8007ee8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	2200      	movs	r2, #0
 8007ef0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007ef4:	68f8      	ldr	r0, [r7, #12]
 8007ef6:	f7ff fb93 	bl	8007620 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007efa:	bf00      	nop
 8007efc:	3710      	adds	r7, #16
 8007efe:	46bd      	mov	sp, r7
 8007f00:	bd80      	pop	{r7, pc}

08007f02 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007f02:	b580      	push	{r7, lr}
 8007f04:	b088      	sub	sp, #32
 8007f06:	af00      	add	r7, sp, #0
 8007f08:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	e853 3f00 	ldrex	r3, [r3]
 8007f16:	60bb      	str	r3, [r7, #8]
   return(result);
 8007f18:	68bb      	ldr	r3, [r7, #8]
 8007f1a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007f1e:	61fb      	str	r3, [r7, #28]
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	461a      	mov	r2, r3
 8007f26:	69fb      	ldr	r3, [r7, #28]
 8007f28:	61bb      	str	r3, [r7, #24]
 8007f2a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f2c:	6979      	ldr	r1, [r7, #20]
 8007f2e:	69ba      	ldr	r2, [r7, #24]
 8007f30:	e841 2300 	strex	r3, r2, [r1]
 8007f34:	613b      	str	r3, [r7, #16]
   return(result);
 8007f36:	693b      	ldr	r3, [r7, #16]
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d1e6      	bne.n	8007f0a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	2220      	movs	r2, #32
 8007f40:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	2200      	movs	r2, #0
 8007f48:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007f4a:	6878      	ldr	r0, [r7, #4]
 8007f4c:	f7ff fb5e 	bl	800760c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007f50:	bf00      	nop
 8007f52:	3720      	adds	r7, #32
 8007f54:	46bd      	mov	sp, r7
 8007f56:	bd80      	pop	{r7, pc}

08007f58 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007f58:	b480      	push	{r7}
 8007f5a:	b083      	sub	sp, #12
 8007f5c:	af00      	add	r7, sp, #0
 8007f5e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007f60:	bf00      	nop
 8007f62:	370c      	adds	r7, #12
 8007f64:	46bd      	mov	sp, r7
 8007f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f6a:	4770      	bx	lr

08007f6c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8007f6c:	b480      	push	{r7}
 8007f6e:	b083      	sub	sp, #12
 8007f70:	af00      	add	r7, sp, #0
 8007f72:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8007f74:	bf00      	nop
 8007f76:	370c      	adds	r7, #12
 8007f78:	46bd      	mov	sp, r7
 8007f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f7e:	4770      	bx	lr

08007f80 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8007f80:	b480      	push	{r7}
 8007f82:	b083      	sub	sp, #12
 8007f84:	af00      	add	r7, sp, #0
 8007f86:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8007f88:	bf00      	nop
 8007f8a:	370c      	adds	r7, #12
 8007f8c:	46bd      	mov	sp, r7
 8007f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f92:	4770      	bx	lr

08007f94 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007f94:	b480      	push	{r7}
 8007f96:	b085      	sub	sp, #20
 8007f98:	af00      	add	r7, sp, #0
 8007f9a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007fa2:	2b01      	cmp	r3, #1
 8007fa4:	d101      	bne.n	8007faa <HAL_UARTEx_DisableFifoMode+0x16>
 8007fa6:	2302      	movs	r3, #2
 8007fa8:	e027      	b.n	8007ffa <HAL_UARTEx_DisableFifoMode+0x66>
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	2201      	movs	r2, #1
 8007fae:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	2224      	movs	r2, #36	@ 0x24
 8007fb6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	681a      	ldr	r2, [r3, #0]
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	f022 0201 	bic.w	r2, r2, #1
 8007fd0:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8007fd8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	2200      	movs	r2, #0
 8007fde:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	68fa      	ldr	r2, [r7, #12]
 8007fe6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	2220      	movs	r2, #32
 8007fec:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	2200      	movs	r2, #0
 8007ff4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007ff8:	2300      	movs	r3, #0
}
 8007ffa:	4618      	mov	r0, r3
 8007ffc:	3714      	adds	r7, #20
 8007ffe:	46bd      	mov	sp, r7
 8008000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008004:	4770      	bx	lr

08008006 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008006:	b580      	push	{r7, lr}
 8008008:	b084      	sub	sp, #16
 800800a:	af00      	add	r7, sp, #0
 800800c:	6078      	str	r0, [r7, #4]
 800800e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008016:	2b01      	cmp	r3, #1
 8008018:	d101      	bne.n	800801e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800801a:	2302      	movs	r3, #2
 800801c:	e02d      	b.n	800807a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	2201      	movs	r2, #1
 8008022:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	2224      	movs	r2, #36	@ 0x24
 800802a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	681a      	ldr	r2, [r3, #0]
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	f022 0201 	bic.w	r2, r2, #1
 8008044:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	689b      	ldr	r3, [r3, #8]
 800804c:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	683a      	ldr	r2, [r7, #0]
 8008056:	430a      	orrs	r2, r1
 8008058:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800805a:	6878      	ldr	r0, [r7, #4]
 800805c:	f000 f850 	bl	8008100 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	68fa      	ldr	r2, [r7, #12]
 8008066:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	2220      	movs	r2, #32
 800806c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	2200      	movs	r2, #0
 8008074:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008078:	2300      	movs	r3, #0
}
 800807a:	4618      	mov	r0, r3
 800807c:	3710      	adds	r7, #16
 800807e:	46bd      	mov	sp, r7
 8008080:	bd80      	pop	{r7, pc}

08008082 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008082:	b580      	push	{r7, lr}
 8008084:	b084      	sub	sp, #16
 8008086:	af00      	add	r7, sp, #0
 8008088:	6078      	str	r0, [r7, #4]
 800808a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008092:	2b01      	cmp	r3, #1
 8008094:	d101      	bne.n	800809a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008096:	2302      	movs	r3, #2
 8008098:	e02d      	b.n	80080f6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	2201      	movs	r2, #1
 800809e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	2224      	movs	r2, #36	@ 0x24
 80080a6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	681a      	ldr	r2, [r3, #0]
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	f022 0201 	bic.w	r2, r2, #1
 80080c0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	689b      	ldr	r3, [r3, #8]
 80080c8:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	683a      	ldr	r2, [r7, #0]
 80080d2:	430a      	orrs	r2, r1
 80080d4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80080d6:	6878      	ldr	r0, [r7, #4]
 80080d8:	f000 f812 	bl	8008100 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	68fa      	ldr	r2, [r7, #12]
 80080e2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	2220      	movs	r2, #32
 80080e8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	2200      	movs	r2, #0
 80080f0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80080f4:	2300      	movs	r3, #0
}
 80080f6:	4618      	mov	r0, r3
 80080f8:	3710      	adds	r7, #16
 80080fa:	46bd      	mov	sp, r7
 80080fc:	bd80      	pop	{r7, pc}
	...

08008100 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008100:	b480      	push	{r7}
 8008102:	b085      	sub	sp, #20
 8008104:	af00      	add	r7, sp, #0
 8008106:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800810c:	2b00      	cmp	r3, #0
 800810e:	d108      	bne.n	8008122 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	2201      	movs	r2, #1
 8008114:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	2201      	movs	r2, #1
 800811c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008120:	e031      	b.n	8008186 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008122:	2308      	movs	r3, #8
 8008124:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008126:	2308      	movs	r3, #8
 8008128:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	689b      	ldr	r3, [r3, #8]
 8008130:	0e5b      	lsrs	r3, r3, #25
 8008132:	b2db      	uxtb	r3, r3
 8008134:	f003 0307 	and.w	r3, r3, #7
 8008138:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	689b      	ldr	r3, [r3, #8]
 8008140:	0f5b      	lsrs	r3, r3, #29
 8008142:	b2db      	uxtb	r3, r3
 8008144:	f003 0307 	and.w	r3, r3, #7
 8008148:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800814a:	7bbb      	ldrb	r3, [r7, #14]
 800814c:	7b3a      	ldrb	r2, [r7, #12]
 800814e:	4911      	ldr	r1, [pc, #68]	@ (8008194 <UARTEx_SetNbDataToProcess+0x94>)
 8008150:	5c8a      	ldrb	r2, [r1, r2]
 8008152:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008156:	7b3a      	ldrb	r2, [r7, #12]
 8008158:	490f      	ldr	r1, [pc, #60]	@ (8008198 <UARTEx_SetNbDataToProcess+0x98>)
 800815a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800815c:	fb93 f3f2 	sdiv	r3, r3, r2
 8008160:	b29a      	uxth	r2, r3
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008168:	7bfb      	ldrb	r3, [r7, #15]
 800816a:	7b7a      	ldrb	r2, [r7, #13]
 800816c:	4909      	ldr	r1, [pc, #36]	@ (8008194 <UARTEx_SetNbDataToProcess+0x94>)
 800816e:	5c8a      	ldrb	r2, [r1, r2]
 8008170:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008174:	7b7a      	ldrb	r2, [r7, #13]
 8008176:	4908      	ldr	r1, [pc, #32]	@ (8008198 <UARTEx_SetNbDataToProcess+0x98>)
 8008178:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800817a:	fb93 f3f2 	sdiv	r3, r3, r2
 800817e:	b29a      	uxth	r2, r3
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8008186:	bf00      	nop
 8008188:	3714      	adds	r7, #20
 800818a:	46bd      	mov	sp, r7
 800818c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008190:	4770      	bx	lr
 8008192:	bf00      	nop
 8008194:	0800ca98 	.word	0x0800ca98
 8008198:	0800caa0 	.word	0x0800caa0

0800819c <__cvt>:
 800819c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80081a0:	ec57 6b10 	vmov	r6, r7, d0
 80081a4:	2f00      	cmp	r7, #0
 80081a6:	460c      	mov	r4, r1
 80081a8:	4619      	mov	r1, r3
 80081aa:	463b      	mov	r3, r7
 80081ac:	bfb4      	ite	lt
 80081ae:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80081b2:	2300      	movge	r3, #0
 80081b4:	4691      	mov	r9, r2
 80081b6:	bfbf      	itttt	lt
 80081b8:	4632      	movlt	r2, r6
 80081ba:	461f      	movlt	r7, r3
 80081bc:	232d      	movlt	r3, #45	@ 0x2d
 80081be:	4616      	movlt	r6, r2
 80081c0:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80081c4:	700b      	strb	r3, [r1, #0]
 80081c6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80081c8:	f023 0820 	bic.w	r8, r3, #32
 80081cc:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80081d0:	d005      	beq.n	80081de <__cvt+0x42>
 80081d2:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80081d6:	d100      	bne.n	80081da <__cvt+0x3e>
 80081d8:	3401      	adds	r4, #1
 80081da:	2102      	movs	r1, #2
 80081dc:	e000      	b.n	80081e0 <__cvt+0x44>
 80081de:	2103      	movs	r1, #3
 80081e0:	ab03      	add	r3, sp, #12
 80081e2:	4622      	mov	r2, r4
 80081e4:	9301      	str	r3, [sp, #4]
 80081e6:	ab02      	add	r3, sp, #8
 80081e8:	ec47 6b10 	vmov	d0, r6, r7
 80081ec:	9300      	str	r3, [sp, #0]
 80081ee:	4653      	mov	r3, sl
 80081f0:	f001 f8a6 	bl	8009340 <_dtoa_r>
 80081f4:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80081f8:	4605      	mov	r5, r0
 80081fa:	d119      	bne.n	8008230 <__cvt+0x94>
 80081fc:	f019 0f01 	tst.w	r9, #1
 8008200:	d00e      	beq.n	8008220 <__cvt+0x84>
 8008202:	eb00 0904 	add.w	r9, r0, r4
 8008206:	2200      	movs	r2, #0
 8008208:	2300      	movs	r3, #0
 800820a:	4630      	mov	r0, r6
 800820c:	4639      	mov	r1, r7
 800820e:	f7f8 fc79 	bl	8000b04 <__aeabi_dcmpeq>
 8008212:	b108      	cbz	r0, 8008218 <__cvt+0x7c>
 8008214:	f8cd 900c 	str.w	r9, [sp, #12]
 8008218:	2230      	movs	r2, #48	@ 0x30
 800821a:	9b03      	ldr	r3, [sp, #12]
 800821c:	454b      	cmp	r3, r9
 800821e:	d31e      	bcc.n	800825e <__cvt+0xc2>
 8008220:	9b03      	ldr	r3, [sp, #12]
 8008222:	4628      	mov	r0, r5
 8008224:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008226:	1b5b      	subs	r3, r3, r5
 8008228:	6013      	str	r3, [r2, #0]
 800822a:	b004      	add	sp, #16
 800822c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008230:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8008234:	eb00 0904 	add.w	r9, r0, r4
 8008238:	d1e5      	bne.n	8008206 <__cvt+0x6a>
 800823a:	7803      	ldrb	r3, [r0, #0]
 800823c:	2b30      	cmp	r3, #48	@ 0x30
 800823e:	d10a      	bne.n	8008256 <__cvt+0xba>
 8008240:	2200      	movs	r2, #0
 8008242:	2300      	movs	r3, #0
 8008244:	4630      	mov	r0, r6
 8008246:	4639      	mov	r1, r7
 8008248:	f7f8 fc5c 	bl	8000b04 <__aeabi_dcmpeq>
 800824c:	b918      	cbnz	r0, 8008256 <__cvt+0xba>
 800824e:	f1c4 0401 	rsb	r4, r4, #1
 8008252:	f8ca 4000 	str.w	r4, [sl]
 8008256:	f8da 3000 	ldr.w	r3, [sl]
 800825a:	4499      	add	r9, r3
 800825c:	e7d3      	b.n	8008206 <__cvt+0x6a>
 800825e:	1c59      	adds	r1, r3, #1
 8008260:	9103      	str	r1, [sp, #12]
 8008262:	701a      	strb	r2, [r3, #0]
 8008264:	e7d9      	b.n	800821a <__cvt+0x7e>

08008266 <__exponent>:
 8008266:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008268:	2900      	cmp	r1, #0
 800826a:	7002      	strb	r2, [r0, #0]
 800826c:	bfba      	itte	lt
 800826e:	4249      	neglt	r1, r1
 8008270:	232d      	movlt	r3, #45	@ 0x2d
 8008272:	232b      	movge	r3, #43	@ 0x2b
 8008274:	2909      	cmp	r1, #9
 8008276:	7043      	strb	r3, [r0, #1]
 8008278:	dd28      	ble.n	80082cc <__exponent+0x66>
 800827a:	f10d 0307 	add.w	r3, sp, #7
 800827e:	270a      	movs	r7, #10
 8008280:	461d      	mov	r5, r3
 8008282:	461a      	mov	r2, r3
 8008284:	3b01      	subs	r3, #1
 8008286:	fbb1 f6f7 	udiv	r6, r1, r7
 800828a:	fb07 1416 	mls	r4, r7, r6, r1
 800828e:	3430      	adds	r4, #48	@ 0x30
 8008290:	f802 4c01 	strb.w	r4, [r2, #-1]
 8008294:	460c      	mov	r4, r1
 8008296:	4631      	mov	r1, r6
 8008298:	2c63      	cmp	r4, #99	@ 0x63
 800829a:	dcf2      	bgt.n	8008282 <__exponent+0x1c>
 800829c:	3130      	adds	r1, #48	@ 0x30
 800829e:	1e94      	subs	r4, r2, #2
 80082a0:	f803 1c01 	strb.w	r1, [r3, #-1]
 80082a4:	1c41      	adds	r1, r0, #1
 80082a6:	4623      	mov	r3, r4
 80082a8:	42ab      	cmp	r3, r5
 80082aa:	d30a      	bcc.n	80082c2 <__exponent+0x5c>
 80082ac:	f10d 0309 	add.w	r3, sp, #9
 80082b0:	1a9b      	subs	r3, r3, r2
 80082b2:	42ac      	cmp	r4, r5
 80082b4:	bf88      	it	hi
 80082b6:	2300      	movhi	r3, #0
 80082b8:	3302      	adds	r3, #2
 80082ba:	4403      	add	r3, r0
 80082bc:	1a18      	subs	r0, r3, r0
 80082be:	b003      	add	sp, #12
 80082c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80082c2:	f813 6b01 	ldrb.w	r6, [r3], #1
 80082c6:	f801 6f01 	strb.w	r6, [r1, #1]!
 80082ca:	e7ed      	b.n	80082a8 <__exponent+0x42>
 80082cc:	2330      	movs	r3, #48	@ 0x30
 80082ce:	3130      	adds	r1, #48	@ 0x30
 80082d0:	7083      	strb	r3, [r0, #2]
 80082d2:	1d03      	adds	r3, r0, #4
 80082d4:	70c1      	strb	r1, [r0, #3]
 80082d6:	e7f1      	b.n	80082bc <__exponent+0x56>

080082d8 <_printf_float>:
 80082d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082dc:	b08d      	sub	sp, #52	@ 0x34
 80082de:	460c      	mov	r4, r1
 80082e0:	4616      	mov	r6, r2
 80082e2:	461f      	mov	r7, r3
 80082e4:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80082e8:	4605      	mov	r5, r0
 80082ea:	f000 ff03 	bl	80090f4 <_localeconv_r>
 80082ee:	6803      	ldr	r3, [r0, #0]
 80082f0:	4618      	mov	r0, r3
 80082f2:	9304      	str	r3, [sp, #16]
 80082f4:	f7f7 ffda 	bl	80002ac <strlen>
 80082f8:	2300      	movs	r3, #0
 80082fa:	9005      	str	r0, [sp, #20]
 80082fc:	930a      	str	r3, [sp, #40]	@ 0x28
 80082fe:	f8d8 3000 	ldr.w	r3, [r8]
 8008302:	f894 a018 	ldrb.w	sl, [r4, #24]
 8008306:	3307      	adds	r3, #7
 8008308:	f8d4 b000 	ldr.w	fp, [r4]
 800830c:	f023 0307 	bic.w	r3, r3, #7
 8008310:	f103 0208 	add.w	r2, r3, #8
 8008314:	f8c8 2000 	str.w	r2, [r8]
 8008318:	f04f 32ff 	mov.w	r2, #4294967295
 800831c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008320:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8008324:	f8cd 8018 	str.w	r8, [sp, #24]
 8008328:	9307      	str	r3, [sp, #28]
 800832a:	4b9d      	ldr	r3, [pc, #628]	@ (80085a0 <_printf_float+0x2c8>)
 800832c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008330:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8008334:	f7f8 fc18 	bl	8000b68 <__aeabi_dcmpun>
 8008338:	bb70      	cbnz	r0, 8008398 <_printf_float+0xc0>
 800833a:	f04f 32ff 	mov.w	r2, #4294967295
 800833e:	4b98      	ldr	r3, [pc, #608]	@ (80085a0 <_printf_float+0x2c8>)
 8008340:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008344:	f7f8 fbf2 	bl	8000b2c <__aeabi_dcmple>
 8008348:	bb30      	cbnz	r0, 8008398 <_printf_float+0xc0>
 800834a:	2200      	movs	r2, #0
 800834c:	2300      	movs	r3, #0
 800834e:	4640      	mov	r0, r8
 8008350:	4649      	mov	r1, r9
 8008352:	f7f8 fbe1 	bl	8000b18 <__aeabi_dcmplt>
 8008356:	b110      	cbz	r0, 800835e <_printf_float+0x86>
 8008358:	232d      	movs	r3, #45	@ 0x2d
 800835a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800835e:	4a91      	ldr	r2, [pc, #580]	@ (80085a4 <_printf_float+0x2cc>)
 8008360:	4b91      	ldr	r3, [pc, #580]	@ (80085a8 <_printf_float+0x2d0>)
 8008362:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8008366:	bf94      	ite	ls
 8008368:	4690      	movls	r8, r2
 800836a:	4698      	movhi	r8, r3
 800836c:	2303      	movs	r3, #3
 800836e:	f04f 0900 	mov.w	r9, #0
 8008372:	6123      	str	r3, [r4, #16]
 8008374:	f02b 0304 	bic.w	r3, fp, #4
 8008378:	6023      	str	r3, [r4, #0]
 800837a:	4633      	mov	r3, r6
 800837c:	aa0b      	add	r2, sp, #44	@ 0x2c
 800837e:	4621      	mov	r1, r4
 8008380:	4628      	mov	r0, r5
 8008382:	9700      	str	r7, [sp, #0]
 8008384:	f000 f9d2 	bl	800872c <_printf_common>
 8008388:	3001      	adds	r0, #1
 800838a:	f040 808d 	bne.w	80084a8 <_printf_float+0x1d0>
 800838e:	f04f 30ff 	mov.w	r0, #4294967295
 8008392:	b00d      	add	sp, #52	@ 0x34
 8008394:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008398:	4642      	mov	r2, r8
 800839a:	464b      	mov	r3, r9
 800839c:	4640      	mov	r0, r8
 800839e:	4649      	mov	r1, r9
 80083a0:	f7f8 fbe2 	bl	8000b68 <__aeabi_dcmpun>
 80083a4:	b140      	cbz	r0, 80083b8 <_printf_float+0xe0>
 80083a6:	464b      	mov	r3, r9
 80083a8:	4a80      	ldr	r2, [pc, #512]	@ (80085ac <_printf_float+0x2d4>)
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	bfbc      	itt	lt
 80083ae:	232d      	movlt	r3, #45	@ 0x2d
 80083b0:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80083b4:	4b7e      	ldr	r3, [pc, #504]	@ (80085b0 <_printf_float+0x2d8>)
 80083b6:	e7d4      	b.n	8008362 <_printf_float+0x8a>
 80083b8:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80083bc:	6863      	ldr	r3, [r4, #4]
 80083be:	9206      	str	r2, [sp, #24]
 80083c0:	1c5a      	adds	r2, r3, #1
 80083c2:	d13b      	bne.n	800843c <_printf_float+0x164>
 80083c4:	2306      	movs	r3, #6
 80083c6:	6063      	str	r3, [r4, #4]
 80083c8:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80083cc:	2300      	movs	r3, #0
 80083ce:	4628      	mov	r0, r5
 80083d0:	6022      	str	r2, [r4, #0]
 80083d2:	9303      	str	r3, [sp, #12]
 80083d4:	ab0a      	add	r3, sp, #40	@ 0x28
 80083d6:	e9cd a301 	strd	sl, r3, [sp, #4]
 80083da:	ab09      	add	r3, sp, #36	@ 0x24
 80083dc:	ec49 8b10 	vmov	d0, r8, r9
 80083e0:	9300      	str	r3, [sp, #0]
 80083e2:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80083e6:	6861      	ldr	r1, [r4, #4]
 80083e8:	f7ff fed8 	bl	800819c <__cvt>
 80083ec:	9b06      	ldr	r3, [sp, #24]
 80083ee:	4680      	mov	r8, r0
 80083f0:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80083f2:	2b47      	cmp	r3, #71	@ 0x47
 80083f4:	d129      	bne.n	800844a <_printf_float+0x172>
 80083f6:	1cc8      	adds	r0, r1, #3
 80083f8:	db02      	blt.n	8008400 <_printf_float+0x128>
 80083fa:	6863      	ldr	r3, [r4, #4]
 80083fc:	4299      	cmp	r1, r3
 80083fe:	dd41      	ble.n	8008484 <_printf_float+0x1ac>
 8008400:	f1aa 0a02 	sub.w	sl, sl, #2
 8008404:	fa5f fa8a 	uxtb.w	sl, sl
 8008408:	3901      	subs	r1, #1
 800840a:	4652      	mov	r2, sl
 800840c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8008410:	9109      	str	r1, [sp, #36]	@ 0x24
 8008412:	f7ff ff28 	bl	8008266 <__exponent>
 8008416:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008418:	4681      	mov	r9, r0
 800841a:	1813      	adds	r3, r2, r0
 800841c:	2a01      	cmp	r2, #1
 800841e:	6123      	str	r3, [r4, #16]
 8008420:	dc02      	bgt.n	8008428 <_printf_float+0x150>
 8008422:	6822      	ldr	r2, [r4, #0]
 8008424:	07d2      	lsls	r2, r2, #31
 8008426:	d501      	bpl.n	800842c <_printf_float+0x154>
 8008428:	3301      	adds	r3, #1
 800842a:	6123      	str	r3, [r4, #16]
 800842c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8008430:	2b00      	cmp	r3, #0
 8008432:	d0a2      	beq.n	800837a <_printf_float+0xa2>
 8008434:	232d      	movs	r3, #45	@ 0x2d
 8008436:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800843a:	e79e      	b.n	800837a <_printf_float+0xa2>
 800843c:	9a06      	ldr	r2, [sp, #24]
 800843e:	2a47      	cmp	r2, #71	@ 0x47
 8008440:	d1c2      	bne.n	80083c8 <_printf_float+0xf0>
 8008442:	2b00      	cmp	r3, #0
 8008444:	d1c0      	bne.n	80083c8 <_printf_float+0xf0>
 8008446:	2301      	movs	r3, #1
 8008448:	e7bd      	b.n	80083c6 <_printf_float+0xee>
 800844a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800844e:	d9db      	bls.n	8008408 <_printf_float+0x130>
 8008450:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8008454:	d118      	bne.n	8008488 <_printf_float+0x1b0>
 8008456:	2900      	cmp	r1, #0
 8008458:	6863      	ldr	r3, [r4, #4]
 800845a:	dd0b      	ble.n	8008474 <_printf_float+0x19c>
 800845c:	6121      	str	r1, [r4, #16]
 800845e:	b913      	cbnz	r3, 8008466 <_printf_float+0x18e>
 8008460:	6822      	ldr	r2, [r4, #0]
 8008462:	07d0      	lsls	r0, r2, #31
 8008464:	d502      	bpl.n	800846c <_printf_float+0x194>
 8008466:	3301      	adds	r3, #1
 8008468:	440b      	add	r3, r1
 800846a:	6123      	str	r3, [r4, #16]
 800846c:	f04f 0900 	mov.w	r9, #0
 8008470:	65a1      	str	r1, [r4, #88]	@ 0x58
 8008472:	e7db      	b.n	800842c <_printf_float+0x154>
 8008474:	b913      	cbnz	r3, 800847c <_printf_float+0x1a4>
 8008476:	6822      	ldr	r2, [r4, #0]
 8008478:	07d2      	lsls	r2, r2, #31
 800847a:	d501      	bpl.n	8008480 <_printf_float+0x1a8>
 800847c:	3302      	adds	r3, #2
 800847e:	e7f4      	b.n	800846a <_printf_float+0x192>
 8008480:	2301      	movs	r3, #1
 8008482:	e7f2      	b.n	800846a <_printf_float+0x192>
 8008484:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8008488:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800848a:	4299      	cmp	r1, r3
 800848c:	db05      	blt.n	800849a <_printf_float+0x1c2>
 800848e:	6823      	ldr	r3, [r4, #0]
 8008490:	6121      	str	r1, [r4, #16]
 8008492:	07d8      	lsls	r0, r3, #31
 8008494:	d5ea      	bpl.n	800846c <_printf_float+0x194>
 8008496:	1c4b      	adds	r3, r1, #1
 8008498:	e7e7      	b.n	800846a <_printf_float+0x192>
 800849a:	2900      	cmp	r1, #0
 800849c:	bfd4      	ite	le
 800849e:	f1c1 0202 	rsble	r2, r1, #2
 80084a2:	2201      	movgt	r2, #1
 80084a4:	4413      	add	r3, r2
 80084a6:	e7e0      	b.n	800846a <_printf_float+0x192>
 80084a8:	6823      	ldr	r3, [r4, #0]
 80084aa:	055a      	lsls	r2, r3, #21
 80084ac:	d407      	bmi.n	80084be <_printf_float+0x1e6>
 80084ae:	6923      	ldr	r3, [r4, #16]
 80084b0:	4642      	mov	r2, r8
 80084b2:	4631      	mov	r1, r6
 80084b4:	4628      	mov	r0, r5
 80084b6:	47b8      	blx	r7
 80084b8:	3001      	adds	r0, #1
 80084ba:	d12b      	bne.n	8008514 <_printf_float+0x23c>
 80084bc:	e767      	b.n	800838e <_printf_float+0xb6>
 80084be:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80084c2:	f240 80dd 	bls.w	8008680 <_printf_float+0x3a8>
 80084c6:	2200      	movs	r2, #0
 80084c8:	2300      	movs	r3, #0
 80084ca:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80084ce:	f7f8 fb19 	bl	8000b04 <__aeabi_dcmpeq>
 80084d2:	2800      	cmp	r0, #0
 80084d4:	d033      	beq.n	800853e <_printf_float+0x266>
 80084d6:	2301      	movs	r3, #1
 80084d8:	4a36      	ldr	r2, [pc, #216]	@ (80085b4 <_printf_float+0x2dc>)
 80084da:	4631      	mov	r1, r6
 80084dc:	4628      	mov	r0, r5
 80084de:	47b8      	blx	r7
 80084e0:	3001      	adds	r0, #1
 80084e2:	f43f af54 	beq.w	800838e <_printf_float+0xb6>
 80084e6:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80084ea:	4543      	cmp	r3, r8
 80084ec:	db02      	blt.n	80084f4 <_printf_float+0x21c>
 80084ee:	6823      	ldr	r3, [r4, #0]
 80084f0:	07d8      	lsls	r0, r3, #31
 80084f2:	d50f      	bpl.n	8008514 <_printf_float+0x23c>
 80084f4:	4631      	mov	r1, r6
 80084f6:	4628      	mov	r0, r5
 80084f8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80084fc:	47b8      	blx	r7
 80084fe:	3001      	adds	r0, #1
 8008500:	f43f af45 	beq.w	800838e <_printf_float+0xb6>
 8008504:	f04f 0900 	mov.w	r9, #0
 8008508:	f108 38ff 	add.w	r8, r8, #4294967295
 800850c:	f104 0a1a 	add.w	sl, r4, #26
 8008510:	45c8      	cmp	r8, r9
 8008512:	dc09      	bgt.n	8008528 <_printf_float+0x250>
 8008514:	6823      	ldr	r3, [r4, #0]
 8008516:	079b      	lsls	r3, r3, #30
 8008518:	f100 8103 	bmi.w	8008722 <_printf_float+0x44a>
 800851c:	68e0      	ldr	r0, [r4, #12]
 800851e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008520:	4298      	cmp	r0, r3
 8008522:	bfb8      	it	lt
 8008524:	4618      	movlt	r0, r3
 8008526:	e734      	b.n	8008392 <_printf_float+0xba>
 8008528:	2301      	movs	r3, #1
 800852a:	4652      	mov	r2, sl
 800852c:	4631      	mov	r1, r6
 800852e:	4628      	mov	r0, r5
 8008530:	47b8      	blx	r7
 8008532:	3001      	adds	r0, #1
 8008534:	f43f af2b 	beq.w	800838e <_printf_float+0xb6>
 8008538:	f109 0901 	add.w	r9, r9, #1
 800853c:	e7e8      	b.n	8008510 <_printf_float+0x238>
 800853e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008540:	2b00      	cmp	r3, #0
 8008542:	dc39      	bgt.n	80085b8 <_printf_float+0x2e0>
 8008544:	2301      	movs	r3, #1
 8008546:	4a1b      	ldr	r2, [pc, #108]	@ (80085b4 <_printf_float+0x2dc>)
 8008548:	4631      	mov	r1, r6
 800854a:	4628      	mov	r0, r5
 800854c:	47b8      	blx	r7
 800854e:	3001      	adds	r0, #1
 8008550:	f43f af1d 	beq.w	800838e <_printf_float+0xb6>
 8008554:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8008558:	ea59 0303 	orrs.w	r3, r9, r3
 800855c:	d102      	bne.n	8008564 <_printf_float+0x28c>
 800855e:	6823      	ldr	r3, [r4, #0]
 8008560:	07d9      	lsls	r1, r3, #31
 8008562:	d5d7      	bpl.n	8008514 <_printf_float+0x23c>
 8008564:	4631      	mov	r1, r6
 8008566:	4628      	mov	r0, r5
 8008568:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800856c:	47b8      	blx	r7
 800856e:	3001      	adds	r0, #1
 8008570:	f43f af0d 	beq.w	800838e <_printf_float+0xb6>
 8008574:	f04f 0a00 	mov.w	sl, #0
 8008578:	f104 0b1a 	add.w	fp, r4, #26
 800857c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800857e:	425b      	negs	r3, r3
 8008580:	4553      	cmp	r3, sl
 8008582:	dc01      	bgt.n	8008588 <_printf_float+0x2b0>
 8008584:	464b      	mov	r3, r9
 8008586:	e793      	b.n	80084b0 <_printf_float+0x1d8>
 8008588:	2301      	movs	r3, #1
 800858a:	465a      	mov	r2, fp
 800858c:	4631      	mov	r1, r6
 800858e:	4628      	mov	r0, r5
 8008590:	47b8      	blx	r7
 8008592:	3001      	adds	r0, #1
 8008594:	f43f aefb 	beq.w	800838e <_printf_float+0xb6>
 8008598:	f10a 0a01 	add.w	sl, sl, #1
 800859c:	e7ee      	b.n	800857c <_printf_float+0x2a4>
 800859e:	bf00      	nop
 80085a0:	7fefffff 	.word	0x7fefffff
 80085a4:	0800caa8 	.word	0x0800caa8
 80085a8:	0800caac 	.word	0x0800caac
 80085ac:	0800cab0 	.word	0x0800cab0
 80085b0:	0800cab4 	.word	0x0800cab4
 80085b4:	0800cab8 	.word	0x0800cab8
 80085b8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80085ba:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80085be:	4553      	cmp	r3, sl
 80085c0:	bfa8      	it	ge
 80085c2:	4653      	movge	r3, sl
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	4699      	mov	r9, r3
 80085c8:	dc36      	bgt.n	8008638 <_printf_float+0x360>
 80085ca:	f04f 0b00 	mov.w	fp, #0
 80085ce:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80085d2:	f104 021a 	add.w	r2, r4, #26
 80085d6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80085d8:	9306      	str	r3, [sp, #24]
 80085da:	eba3 0309 	sub.w	r3, r3, r9
 80085de:	455b      	cmp	r3, fp
 80085e0:	dc31      	bgt.n	8008646 <_printf_float+0x36e>
 80085e2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80085e4:	459a      	cmp	sl, r3
 80085e6:	dc3a      	bgt.n	800865e <_printf_float+0x386>
 80085e8:	6823      	ldr	r3, [r4, #0]
 80085ea:	07da      	lsls	r2, r3, #31
 80085ec:	d437      	bmi.n	800865e <_printf_float+0x386>
 80085ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80085f0:	ebaa 0903 	sub.w	r9, sl, r3
 80085f4:	9b06      	ldr	r3, [sp, #24]
 80085f6:	ebaa 0303 	sub.w	r3, sl, r3
 80085fa:	4599      	cmp	r9, r3
 80085fc:	bfa8      	it	ge
 80085fe:	4699      	movge	r9, r3
 8008600:	f1b9 0f00 	cmp.w	r9, #0
 8008604:	dc33      	bgt.n	800866e <_printf_float+0x396>
 8008606:	f04f 0800 	mov.w	r8, #0
 800860a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800860e:	f104 0b1a 	add.w	fp, r4, #26
 8008612:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008614:	ebaa 0303 	sub.w	r3, sl, r3
 8008618:	eba3 0309 	sub.w	r3, r3, r9
 800861c:	4543      	cmp	r3, r8
 800861e:	f77f af79 	ble.w	8008514 <_printf_float+0x23c>
 8008622:	2301      	movs	r3, #1
 8008624:	465a      	mov	r2, fp
 8008626:	4631      	mov	r1, r6
 8008628:	4628      	mov	r0, r5
 800862a:	47b8      	blx	r7
 800862c:	3001      	adds	r0, #1
 800862e:	f43f aeae 	beq.w	800838e <_printf_float+0xb6>
 8008632:	f108 0801 	add.w	r8, r8, #1
 8008636:	e7ec      	b.n	8008612 <_printf_float+0x33a>
 8008638:	4642      	mov	r2, r8
 800863a:	4631      	mov	r1, r6
 800863c:	4628      	mov	r0, r5
 800863e:	47b8      	blx	r7
 8008640:	3001      	adds	r0, #1
 8008642:	d1c2      	bne.n	80085ca <_printf_float+0x2f2>
 8008644:	e6a3      	b.n	800838e <_printf_float+0xb6>
 8008646:	2301      	movs	r3, #1
 8008648:	4631      	mov	r1, r6
 800864a:	4628      	mov	r0, r5
 800864c:	9206      	str	r2, [sp, #24]
 800864e:	47b8      	blx	r7
 8008650:	3001      	adds	r0, #1
 8008652:	f43f ae9c 	beq.w	800838e <_printf_float+0xb6>
 8008656:	f10b 0b01 	add.w	fp, fp, #1
 800865a:	9a06      	ldr	r2, [sp, #24]
 800865c:	e7bb      	b.n	80085d6 <_printf_float+0x2fe>
 800865e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008662:	4631      	mov	r1, r6
 8008664:	4628      	mov	r0, r5
 8008666:	47b8      	blx	r7
 8008668:	3001      	adds	r0, #1
 800866a:	d1c0      	bne.n	80085ee <_printf_float+0x316>
 800866c:	e68f      	b.n	800838e <_printf_float+0xb6>
 800866e:	9a06      	ldr	r2, [sp, #24]
 8008670:	464b      	mov	r3, r9
 8008672:	4631      	mov	r1, r6
 8008674:	4628      	mov	r0, r5
 8008676:	4442      	add	r2, r8
 8008678:	47b8      	blx	r7
 800867a:	3001      	adds	r0, #1
 800867c:	d1c3      	bne.n	8008606 <_printf_float+0x32e>
 800867e:	e686      	b.n	800838e <_printf_float+0xb6>
 8008680:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8008684:	f1ba 0f01 	cmp.w	sl, #1
 8008688:	dc01      	bgt.n	800868e <_printf_float+0x3b6>
 800868a:	07db      	lsls	r3, r3, #31
 800868c:	d536      	bpl.n	80086fc <_printf_float+0x424>
 800868e:	2301      	movs	r3, #1
 8008690:	4642      	mov	r2, r8
 8008692:	4631      	mov	r1, r6
 8008694:	4628      	mov	r0, r5
 8008696:	47b8      	blx	r7
 8008698:	3001      	adds	r0, #1
 800869a:	f43f ae78 	beq.w	800838e <_printf_float+0xb6>
 800869e:	4631      	mov	r1, r6
 80086a0:	4628      	mov	r0, r5
 80086a2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80086a6:	47b8      	blx	r7
 80086a8:	3001      	adds	r0, #1
 80086aa:	f43f ae70 	beq.w	800838e <_printf_float+0xb6>
 80086ae:	2200      	movs	r2, #0
 80086b0:	2300      	movs	r3, #0
 80086b2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80086b6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80086ba:	f7f8 fa23 	bl	8000b04 <__aeabi_dcmpeq>
 80086be:	b9c0      	cbnz	r0, 80086f2 <_printf_float+0x41a>
 80086c0:	4653      	mov	r3, sl
 80086c2:	f108 0201 	add.w	r2, r8, #1
 80086c6:	4631      	mov	r1, r6
 80086c8:	4628      	mov	r0, r5
 80086ca:	47b8      	blx	r7
 80086cc:	3001      	adds	r0, #1
 80086ce:	d10c      	bne.n	80086ea <_printf_float+0x412>
 80086d0:	e65d      	b.n	800838e <_printf_float+0xb6>
 80086d2:	2301      	movs	r3, #1
 80086d4:	465a      	mov	r2, fp
 80086d6:	4631      	mov	r1, r6
 80086d8:	4628      	mov	r0, r5
 80086da:	47b8      	blx	r7
 80086dc:	3001      	adds	r0, #1
 80086de:	f43f ae56 	beq.w	800838e <_printf_float+0xb6>
 80086e2:	f108 0801 	add.w	r8, r8, #1
 80086e6:	45d0      	cmp	r8, sl
 80086e8:	dbf3      	blt.n	80086d2 <_printf_float+0x3fa>
 80086ea:	464b      	mov	r3, r9
 80086ec:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80086f0:	e6df      	b.n	80084b2 <_printf_float+0x1da>
 80086f2:	f04f 0800 	mov.w	r8, #0
 80086f6:	f104 0b1a 	add.w	fp, r4, #26
 80086fa:	e7f4      	b.n	80086e6 <_printf_float+0x40e>
 80086fc:	2301      	movs	r3, #1
 80086fe:	4642      	mov	r2, r8
 8008700:	e7e1      	b.n	80086c6 <_printf_float+0x3ee>
 8008702:	2301      	movs	r3, #1
 8008704:	464a      	mov	r2, r9
 8008706:	4631      	mov	r1, r6
 8008708:	4628      	mov	r0, r5
 800870a:	47b8      	blx	r7
 800870c:	3001      	adds	r0, #1
 800870e:	f43f ae3e 	beq.w	800838e <_printf_float+0xb6>
 8008712:	f108 0801 	add.w	r8, r8, #1
 8008716:	68e3      	ldr	r3, [r4, #12]
 8008718:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800871a:	1a5b      	subs	r3, r3, r1
 800871c:	4543      	cmp	r3, r8
 800871e:	dcf0      	bgt.n	8008702 <_printf_float+0x42a>
 8008720:	e6fc      	b.n	800851c <_printf_float+0x244>
 8008722:	f04f 0800 	mov.w	r8, #0
 8008726:	f104 0919 	add.w	r9, r4, #25
 800872a:	e7f4      	b.n	8008716 <_printf_float+0x43e>

0800872c <_printf_common>:
 800872c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008730:	4616      	mov	r6, r2
 8008732:	4698      	mov	r8, r3
 8008734:	688a      	ldr	r2, [r1, #8]
 8008736:	4607      	mov	r7, r0
 8008738:	690b      	ldr	r3, [r1, #16]
 800873a:	460c      	mov	r4, r1
 800873c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008740:	4293      	cmp	r3, r2
 8008742:	bfb8      	it	lt
 8008744:	4613      	movlt	r3, r2
 8008746:	6033      	str	r3, [r6, #0]
 8008748:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800874c:	b10a      	cbz	r2, 8008752 <_printf_common+0x26>
 800874e:	3301      	adds	r3, #1
 8008750:	6033      	str	r3, [r6, #0]
 8008752:	6823      	ldr	r3, [r4, #0]
 8008754:	0699      	lsls	r1, r3, #26
 8008756:	bf42      	ittt	mi
 8008758:	6833      	ldrmi	r3, [r6, #0]
 800875a:	3302      	addmi	r3, #2
 800875c:	6033      	strmi	r3, [r6, #0]
 800875e:	6825      	ldr	r5, [r4, #0]
 8008760:	f015 0506 	ands.w	r5, r5, #6
 8008764:	d106      	bne.n	8008774 <_printf_common+0x48>
 8008766:	f104 0a19 	add.w	sl, r4, #25
 800876a:	68e3      	ldr	r3, [r4, #12]
 800876c:	6832      	ldr	r2, [r6, #0]
 800876e:	1a9b      	subs	r3, r3, r2
 8008770:	42ab      	cmp	r3, r5
 8008772:	dc2b      	bgt.n	80087cc <_printf_common+0xa0>
 8008774:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008778:	6822      	ldr	r2, [r4, #0]
 800877a:	3b00      	subs	r3, #0
 800877c:	bf18      	it	ne
 800877e:	2301      	movne	r3, #1
 8008780:	0692      	lsls	r2, r2, #26
 8008782:	d430      	bmi.n	80087e6 <_printf_common+0xba>
 8008784:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008788:	4641      	mov	r1, r8
 800878a:	4638      	mov	r0, r7
 800878c:	47c8      	blx	r9
 800878e:	3001      	adds	r0, #1
 8008790:	d023      	beq.n	80087da <_printf_common+0xae>
 8008792:	6823      	ldr	r3, [r4, #0]
 8008794:	341a      	adds	r4, #26
 8008796:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 800879a:	f003 0306 	and.w	r3, r3, #6
 800879e:	2b04      	cmp	r3, #4
 80087a0:	bf0a      	itet	eq
 80087a2:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
 80087a6:	2500      	movne	r5, #0
 80087a8:	6833      	ldreq	r3, [r6, #0]
 80087aa:	f04f 0600 	mov.w	r6, #0
 80087ae:	bf08      	it	eq
 80087b0:	1aed      	subeq	r5, r5, r3
 80087b2:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80087b6:	bf08      	it	eq
 80087b8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80087bc:	4293      	cmp	r3, r2
 80087be:	bfc4      	itt	gt
 80087c0:	1a9b      	subgt	r3, r3, r2
 80087c2:	18ed      	addgt	r5, r5, r3
 80087c4:	42b5      	cmp	r5, r6
 80087c6:	d11a      	bne.n	80087fe <_printf_common+0xd2>
 80087c8:	2000      	movs	r0, #0
 80087ca:	e008      	b.n	80087de <_printf_common+0xb2>
 80087cc:	2301      	movs	r3, #1
 80087ce:	4652      	mov	r2, sl
 80087d0:	4641      	mov	r1, r8
 80087d2:	4638      	mov	r0, r7
 80087d4:	47c8      	blx	r9
 80087d6:	3001      	adds	r0, #1
 80087d8:	d103      	bne.n	80087e2 <_printf_common+0xb6>
 80087da:	f04f 30ff 	mov.w	r0, #4294967295
 80087de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80087e2:	3501      	adds	r5, #1
 80087e4:	e7c1      	b.n	800876a <_printf_common+0x3e>
 80087e6:	18e1      	adds	r1, r4, r3
 80087e8:	1c5a      	adds	r2, r3, #1
 80087ea:	2030      	movs	r0, #48	@ 0x30
 80087ec:	3302      	adds	r3, #2
 80087ee:	4422      	add	r2, r4
 80087f0:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80087f4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80087f8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80087fc:	e7c2      	b.n	8008784 <_printf_common+0x58>
 80087fe:	2301      	movs	r3, #1
 8008800:	4622      	mov	r2, r4
 8008802:	4641      	mov	r1, r8
 8008804:	4638      	mov	r0, r7
 8008806:	47c8      	blx	r9
 8008808:	3001      	adds	r0, #1
 800880a:	d0e6      	beq.n	80087da <_printf_common+0xae>
 800880c:	3601      	adds	r6, #1
 800880e:	e7d9      	b.n	80087c4 <_printf_common+0x98>

08008810 <_printf_i>:
 8008810:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008814:	7e0f      	ldrb	r7, [r1, #24]
 8008816:	4691      	mov	r9, r2
 8008818:	4680      	mov	r8, r0
 800881a:	460c      	mov	r4, r1
 800881c:	2f78      	cmp	r7, #120	@ 0x78
 800881e:	469a      	mov	sl, r3
 8008820:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008822:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008826:	d807      	bhi.n	8008838 <_printf_i+0x28>
 8008828:	2f62      	cmp	r7, #98	@ 0x62
 800882a:	d80a      	bhi.n	8008842 <_printf_i+0x32>
 800882c:	2f00      	cmp	r7, #0
 800882e:	f000 80d2 	beq.w	80089d6 <_printf_i+0x1c6>
 8008832:	2f58      	cmp	r7, #88	@ 0x58
 8008834:	f000 80b9 	beq.w	80089aa <_printf_i+0x19a>
 8008838:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800883c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008840:	e03a      	b.n	80088b8 <_printf_i+0xa8>
 8008842:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008846:	2b15      	cmp	r3, #21
 8008848:	d8f6      	bhi.n	8008838 <_printf_i+0x28>
 800884a:	a101      	add	r1, pc, #4	@ (adr r1, 8008850 <_printf_i+0x40>)
 800884c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008850:	080088a9 	.word	0x080088a9
 8008854:	080088bd 	.word	0x080088bd
 8008858:	08008839 	.word	0x08008839
 800885c:	08008839 	.word	0x08008839
 8008860:	08008839 	.word	0x08008839
 8008864:	08008839 	.word	0x08008839
 8008868:	080088bd 	.word	0x080088bd
 800886c:	08008839 	.word	0x08008839
 8008870:	08008839 	.word	0x08008839
 8008874:	08008839 	.word	0x08008839
 8008878:	08008839 	.word	0x08008839
 800887c:	080089bd 	.word	0x080089bd
 8008880:	080088e7 	.word	0x080088e7
 8008884:	08008977 	.word	0x08008977
 8008888:	08008839 	.word	0x08008839
 800888c:	08008839 	.word	0x08008839
 8008890:	080089df 	.word	0x080089df
 8008894:	08008839 	.word	0x08008839
 8008898:	080088e7 	.word	0x080088e7
 800889c:	08008839 	.word	0x08008839
 80088a0:	08008839 	.word	0x08008839
 80088a4:	0800897f 	.word	0x0800897f
 80088a8:	6833      	ldr	r3, [r6, #0]
 80088aa:	1d1a      	adds	r2, r3, #4
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	6032      	str	r2, [r6, #0]
 80088b0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80088b4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80088b8:	2301      	movs	r3, #1
 80088ba:	e09d      	b.n	80089f8 <_printf_i+0x1e8>
 80088bc:	6833      	ldr	r3, [r6, #0]
 80088be:	6820      	ldr	r0, [r4, #0]
 80088c0:	1d19      	adds	r1, r3, #4
 80088c2:	6031      	str	r1, [r6, #0]
 80088c4:	0606      	lsls	r6, r0, #24
 80088c6:	d501      	bpl.n	80088cc <_printf_i+0xbc>
 80088c8:	681d      	ldr	r5, [r3, #0]
 80088ca:	e003      	b.n	80088d4 <_printf_i+0xc4>
 80088cc:	0645      	lsls	r5, r0, #25
 80088ce:	d5fb      	bpl.n	80088c8 <_printf_i+0xb8>
 80088d0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80088d4:	2d00      	cmp	r5, #0
 80088d6:	da03      	bge.n	80088e0 <_printf_i+0xd0>
 80088d8:	232d      	movs	r3, #45	@ 0x2d
 80088da:	426d      	negs	r5, r5
 80088dc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80088e0:	4859      	ldr	r0, [pc, #356]	@ (8008a48 <_printf_i+0x238>)
 80088e2:	230a      	movs	r3, #10
 80088e4:	e011      	b.n	800890a <_printf_i+0xfa>
 80088e6:	6821      	ldr	r1, [r4, #0]
 80088e8:	6833      	ldr	r3, [r6, #0]
 80088ea:	0608      	lsls	r0, r1, #24
 80088ec:	f853 5b04 	ldr.w	r5, [r3], #4
 80088f0:	d402      	bmi.n	80088f8 <_printf_i+0xe8>
 80088f2:	0649      	lsls	r1, r1, #25
 80088f4:	bf48      	it	mi
 80088f6:	b2ad      	uxthmi	r5, r5
 80088f8:	2f6f      	cmp	r7, #111	@ 0x6f
 80088fa:	6033      	str	r3, [r6, #0]
 80088fc:	4852      	ldr	r0, [pc, #328]	@ (8008a48 <_printf_i+0x238>)
 80088fe:	bf14      	ite	ne
 8008900:	230a      	movne	r3, #10
 8008902:	2308      	moveq	r3, #8
 8008904:	2100      	movs	r1, #0
 8008906:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800890a:	6866      	ldr	r6, [r4, #4]
 800890c:	2e00      	cmp	r6, #0
 800890e:	60a6      	str	r6, [r4, #8]
 8008910:	bfa2      	ittt	ge
 8008912:	6821      	ldrge	r1, [r4, #0]
 8008914:	f021 0104 	bicge.w	r1, r1, #4
 8008918:	6021      	strge	r1, [r4, #0]
 800891a:	b90d      	cbnz	r5, 8008920 <_printf_i+0x110>
 800891c:	2e00      	cmp	r6, #0
 800891e:	d04b      	beq.n	80089b8 <_printf_i+0x1a8>
 8008920:	4616      	mov	r6, r2
 8008922:	fbb5 f1f3 	udiv	r1, r5, r3
 8008926:	fb03 5711 	mls	r7, r3, r1, r5
 800892a:	5dc7      	ldrb	r7, [r0, r7]
 800892c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008930:	462f      	mov	r7, r5
 8008932:	460d      	mov	r5, r1
 8008934:	42bb      	cmp	r3, r7
 8008936:	d9f4      	bls.n	8008922 <_printf_i+0x112>
 8008938:	2b08      	cmp	r3, #8
 800893a:	d10b      	bne.n	8008954 <_printf_i+0x144>
 800893c:	6823      	ldr	r3, [r4, #0]
 800893e:	07df      	lsls	r7, r3, #31
 8008940:	d508      	bpl.n	8008954 <_printf_i+0x144>
 8008942:	6923      	ldr	r3, [r4, #16]
 8008944:	6861      	ldr	r1, [r4, #4]
 8008946:	4299      	cmp	r1, r3
 8008948:	bfde      	ittt	le
 800894a:	2330      	movle	r3, #48	@ 0x30
 800894c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008950:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008954:	1b92      	subs	r2, r2, r6
 8008956:	6122      	str	r2, [r4, #16]
 8008958:	464b      	mov	r3, r9
 800895a:	aa03      	add	r2, sp, #12
 800895c:	4621      	mov	r1, r4
 800895e:	4640      	mov	r0, r8
 8008960:	f8cd a000 	str.w	sl, [sp]
 8008964:	f7ff fee2 	bl	800872c <_printf_common>
 8008968:	3001      	adds	r0, #1
 800896a:	d14a      	bne.n	8008a02 <_printf_i+0x1f2>
 800896c:	f04f 30ff 	mov.w	r0, #4294967295
 8008970:	b004      	add	sp, #16
 8008972:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008976:	6823      	ldr	r3, [r4, #0]
 8008978:	f043 0320 	orr.w	r3, r3, #32
 800897c:	6023      	str	r3, [r4, #0]
 800897e:	2778      	movs	r7, #120	@ 0x78
 8008980:	4832      	ldr	r0, [pc, #200]	@ (8008a4c <_printf_i+0x23c>)
 8008982:	6823      	ldr	r3, [r4, #0]
 8008984:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008988:	061f      	lsls	r7, r3, #24
 800898a:	6831      	ldr	r1, [r6, #0]
 800898c:	f851 5b04 	ldr.w	r5, [r1], #4
 8008990:	d402      	bmi.n	8008998 <_printf_i+0x188>
 8008992:	065f      	lsls	r7, r3, #25
 8008994:	bf48      	it	mi
 8008996:	b2ad      	uxthmi	r5, r5
 8008998:	6031      	str	r1, [r6, #0]
 800899a:	07d9      	lsls	r1, r3, #31
 800899c:	bf44      	itt	mi
 800899e:	f043 0320 	orrmi.w	r3, r3, #32
 80089a2:	6023      	strmi	r3, [r4, #0]
 80089a4:	b11d      	cbz	r5, 80089ae <_printf_i+0x19e>
 80089a6:	2310      	movs	r3, #16
 80089a8:	e7ac      	b.n	8008904 <_printf_i+0xf4>
 80089aa:	4827      	ldr	r0, [pc, #156]	@ (8008a48 <_printf_i+0x238>)
 80089ac:	e7e9      	b.n	8008982 <_printf_i+0x172>
 80089ae:	6823      	ldr	r3, [r4, #0]
 80089b0:	f023 0320 	bic.w	r3, r3, #32
 80089b4:	6023      	str	r3, [r4, #0]
 80089b6:	e7f6      	b.n	80089a6 <_printf_i+0x196>
 80089b8:	4616      	mov	r6, r2
 80089ba:	e7bd      	b.n	8008938 <_printf_i+0x128>
 80089bc:	6833      	ldr	r3, [r6, #0]
 80089be:	6825      	ldr	r5, [r4, #0]
 80089c0:	1d18      	adds	r0, r3, #4
 80089c2:	6961      	ldr	r1, [r4, #20]
 80089c4:	6030      	str	r0, [r6, #0]
 80089c6:	062e      	lsls	r6, r5, #24
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	d501      	bpl.n	80089d0 <_printf_i+0x1c0>
 80089cc:	6019      	str	r1, [r3, #0]
 80089ce:	e002      	b.n	80089d6 <_printf_i+0x1c6>
 80089d0:	0668      	lsls	r0, r5, #25
 80089d2:	d5fb      	bpl.n	80089cc <_printf_i+0x1bc>
 80089d4:	8019      	strh	r1, [r3, #0]
 80089d6:	2300      	movs	r3, #0
 80089d8:	4616      	mov	r6, r2
 80089da:	6123      	str	r3, [r4, #16]
 80089dc:	e7bc      	b.n	8008958 <_printf_i+0x148>
 80089de:	6833      	ldr	r3, [r6, #0]
 80089e0:	2100      	movs	r1, #0
 80089e2:	1d1a      	adds	r2, r3, #4
 80089e4:	6032      	str	r2, [r6, #0]
 80089e6:	681e      	ldr	r6, [r3, #0]
 80089e8:	6862      	ldr	r2, [r4, #4]
 80089ea:	4630      	mov	r0, r6
 80089ec:	f000 fbf9 	bl	80091e2 <memchr>
 80089f0:	b108      	cbz	r0, 80089f6 <_printf_i+0x1e6>
 80089f2:	1b80      	subs	r0, r0, r6
 80089f4:	6060      	str	r0, [r4, #4]
 80089f6:	6863      	ldr	r3, [r4, #4]
 80089f8:	6123      	str	r3, [r4, #16]
 80089fa:	2300      	movs	r3, #0
 80089fc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008a00:	e7aa      	b.n	8008958 <_printf_i+0x148>
 8008a02:	6923      	ldr	r3, [r4, #16]
 8008a04:	4632      	mov	r2, r6
 8008a06:	4649      	mov	r1, r9
 8008a08:	4640      	mov	r0, r8
 8008a0a:	47d0      	blx	sl
 8008a0c:	3001      	adds	r0, #1
 8008a0e:	d0ad      	beq.n	800896c <_printf_i+0x15c>
 8008a10:	6823      	ldr	r3, [r4, #0]
 8008a12:	079b      	lsls	r3, r3, #30
 8008a14:	d413      	bmi.n	8008a3e <_printf_i+0x22e>
 8008a16:	68e0      	ldr	r0, [r4, #12]
 8008a18:	9b03      	ldr	r3, [sp, #12]
 8008a1a:	4298      	cmp	r0, r3
 8008a1c:	bfb8      	it	lt
 8008a1e:	4618      	movlt	r0, r3
 8008a20:	e7a6      	b.n	8008970 <_printf_i+0x160>
 8008a22:	2301      	movs	r3, #1
 8008a24:	4632      	mov	r2, r6
 8008a26:	4649      	mov	r1, r9
 8008a28:	4640      	mov	r0, r8
 8008a2a:	47d0      	blx	sl
 8008a2c:	3001      	adds	r0, #1
 8008a2e:	d09d      	beq.n	800896c <_printf_i+0x15c>
 8008a30:	3501      	adds	r5, #1
 8008a32:	68e3      	ldr	r3, [r4, #12]
 8008a34:	9903      	ldr	r1, [sp, #12]
 8008a36:	1a5b      	subs	r3, r3, r1
 8008a38:	42ab      	cmp	r3, r5
 8008a3a:	dcf2      	bgt.n	8008a22 <_printf_i+0x212>
 8008a3c:	e7eb      	b.n	8008a16 <_printf_i+0x206>
 8008a3e:	2500      	movs	r5, #0
 8008a40:	f104 0619 	add.w	r6, r4, #25
 8008a44:	e7f5      	b.n	8008a32 <_printf_i+0x222>
 8008a46:	bf00      	nop
 8008a48:	0800caba 	.word	0x0800caba
 8008a4c:	0800cacb 	.word	0x0800cacb

08008a50 <_scanf_float>:
 8008a50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a54:	b087      	sub	sp, #28
 8008a56:	4617      	mov	r7, r2
 8008a58:	4680      	mov	r8, r0
 8008a5a:	460c      	mov	r4, r1
 8008a5c:	9303      	str	r3, [sp, #12]
 8008a5e:	688b      	ldr	r3, [r1, #8]
 8008a60:	1e5a      	subs	r2, r3, #1
 8008a62:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8008a66:	460a      	mov	r2, r1
 8008a68:	bf89      	itett	hi
 8008a6a:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8008a6e:	f04f 0b00 	movls.w	fp, #0
 8008a72:	eb03 0b05 	addhi.w	fp, r3, r5
 8008a76:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8008a7a:	f04f 0500 	mov.w	r5, #0
 8008a7e:	bf88      	it	hi
 8008a80:	608b      	strhi	r3, [r1, #8]
 8008a82:	680b      	ldr	r3, [r1, #0]
 8008a84:	46aa      	mov	sl, r5
 8008a86:	46a9      	mov	r9, r5
 8008a88:	9502      	str	r5, [sp, #8]
 8008a8a:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8008a8e:	f842 3b1c 	str.w	r3, [r2], #28
 8008a92:	4616      	mov	r6, r2
 8008a94:	9201      	str	r2, [sp, #4]
 8008a96:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8008a9a:	68a2      	ldr	r2, [r4, #8]
 8008a9c:	b152      	cbz	r2, 8008ab4 <_scanf_float+0x64>
 8008a9e:	683b      	ldr	r3, [r7, #0]
 8008aa0:	781b      	ldrb	r3, [r3, #0]
 8008aa2:	2b4e      	cmp	r3, #78	@ 0x4e
 8008aa4:	d864      	bhi.n	8008b70 <_scanf_float+0x120>
 8008aa6:	2b40      	cmp	r3, #64	@ 0x40
 8008aa8:	d83c      	bhi.n	8008b24 <_scanf_float+0xd4>
 8008aaa:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8008aae:	b2c8      	uxtb	r0, r1
 8008ab0:	280e      	cmp	r0, #14
 8008ab2:	d93a      	bls.n	8008b2a <_scanf_float+0xda>
 8008ab4:	f1b9 0f00 	cmp.w	r9, #0
 8008ab8:	d003      	beq.n	8008ac2 <_scanf_float+0x72>
 8008aba:	6823      	ldr	r3, [r4, #0]
 8008abc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008ac0:	6023      	str	r3, [r4, #0]
 8008ac2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008ac6:	f1ba 0f01 	cmp.w	sl, #1
 8008aca:	f200 8117 	bhi.w	8008cfc <_scanf_float+0x2ac>
 8008ace:	9b01      	ldr	r3, [sp, #4]
 8008ad0:	429e      	cmp	r6, r3
 8008ad2:	f200 8108 	bhi.w	8008ce6 <_scanf_float+0x296>
 8008ad6:	2001      	movs	r0, #1
 8008ad8:	b007      	add	sp, #28
 8008ada:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ade:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8008ae2:	2a0d      	cmp	r2, #13
 8008ae4:	d8e6      	bhi.n	8008ab4 <_scanf_float+0x64>
 8008ae6:	a101      	add	r1, pc, #4	@ (adr r1, 8008aec <_scanf_float+0x9c>)
 8008ae8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8008aec:	08008c33 	.word	0x08008c33
 8008af0:	08008ab5 	.word	0x08008ab5
 8008af4:	08008ab5 	.word	0x08008ab5
 8008af8:	08008ab5 	.word	0x08008ab5
 8008afc:	08008c93 	.word	0x08008c93
 8008b00:	08008c6b 	.word	0x08008c6b
 8008b04:	08008ab5 	.word	0x08008ab5
 8008b08:	08008ab5 	.word	0x08008ab5
 8008b0c:	08008c41 	.word	0x08008c41
 8008b10:	08008ab5 	.word	0x08008ab5
 8008b14:	08008ab5 	.word	0x08008ab5
 8008b18:	08008ab5 	.word	0x08008ab5
 8008b1c:	08008ab5 	.word	0x08008ab5
 8008b20:	08008bf9 	.word	0x08008bf9
 8008b24:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8008b28:	e7db      	b.n	8008ae2 <_scanf_float+0x92>
 8008b2a:	290e      	cmp	r1, #14
 8008b2c:	d8c2      	bhi.n	8008ab4 <_scanf_float+0x64>
 8008b2e:	a001      	add	r0, pc, #4	@ (adr r0, 8008b34 <_scanf_float+0xe4>)
 8008b30:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8008b34:	08008be9 	.word	0x08008be9
 8008b38:	08008ab5 	.word	0x08008ab5
 8008b3c:	08008be9 	.word	0x08008be9
 8008b40:	08008c7f 	.word	0x08008c7f
 8008b44:	08008ab5 	.word	0x08008ab5
 8008b48:	08008b91 	.word	0x08008b91
 8008b4c:	08008bcf 	.word	0x08008bcf
 8008b50:	08008bcf 	.word	0x08008bcf
 8008b54:	08008bcf 	.word	0x08008bcf
 8008b58:	08008bcf 	.word	0x08008bcf
 8008b5c:	08008bcf 	.word	0x08008bcf
 8008b60:	08008bcf 	.word	0x08008bcf
 8008b64:	08008bcf 	.word	0x08008bcf
 8008b68:	08008bcf 	.word	0x08008bcf
 8008b6c:	08008bcf 	.word	0x08008bcf
 8008b70:	2b6e      	cmp	r3, #110	@ 0x6e
 8008b72:	d809      	bhi.n	8008b88 <_scanf_float+0x138>
 8008b74:	2b60      	cmp	r3, #96	@ 0x60
 8008b76:	d8b2      	bhi.n	8008ade <_scanf_float+0x8e>
 8008b78:	2b54      	cmp	r3, #84	@ 0x54
 8008b7a:	d07b      	beq.n	8008c74 <_scanf_float+0x224>
 8008b7c:	2b59      	cmp	r3, #89	@ 0x59
 8008b7e:	d199      	bne.n	8008ab4 <_scanf_float+0x64>
 8008b80:	2d07      	cmp	r5, #7
 8008b82:	d197      	bne.n	8008ab4 <_scanf_float+0x64>
 8008b84:	2508      	movs	r5, #8
 8008b86:	e02c      	b.n	8008be2 <_scanf_float+0x192>
 8008b88:	2b74      	cmp	r3, #116	@ 0x74
 8008b8a:	d073      	beq.n	8008c74 <_scanf_float+0x224>
 8008b8c:	2b79      	cmp	r3, #121	@ 0x79
 8008b8e:	e7f6      	b.n	8008b7e <_scanf_float+0x12e>
 8008b90:	6821      	ldr	r1, [r4, #0]
 8008b92:	05c8      	lsls	r0, r1, #23
 8008b94:	d51b      	bpl.n	8008bce <_scanf_float+0x17e>
 8008b96:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8008b9a:	f109 0901 	add.w	r9, r9, #1
 8008b9e:	6021      	str	r1, [r4, #0]
 8008ba0:	f1bb 0f00 	cmp.w	fp, #0
 8008ba4:	d003      	beq.n	8008bae <_scanf_float+0x15e>
 8008ba6:	3201      	adds	r2, #1
 8008ba8:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008bac:	60a2      	str	r2, [r4, #8]
 8008bae:	68a3      	ldr	r3, [r4, #8]
 8008bb0:	3b01      	subs	r3, #1
 8008bb2:	60a3      	str	r3, [r4, #8]
 8008bb4:	6923      	ldr	r3, [r4, #16]
 8008bb6:	3301      	adds	r3, #1
 8008bb8:	6123      	str	r3, [r4, #16]
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	3b01      	subs	r3, #1
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	607b      	str	r3, [r7, #4]
 8008bc2:	f340 8087 	ble.w	8008cd4 <_scanf_float+0x284>
 8008bc6:	683b      	ldr	r3, [r7, #0]
 8008bc8:	3301      	adds	r3, #1
 8008bca:	603b      	str	r3, [r7, #0]
 8008bcc:	e765      	b.n	8008a9a <_scanf_float+0x4a>
 8008bce:	eb1a 0105 	adds.w	r1, sl, r5
 8008bd2:	f47f af6f 	bne.w	8008ab4 <_scanf_float+0x64>
 8008bd6:	6822      	ldr	r2, [r4, #0]
 8008bd8:	460d      	mov	r5, r1
 8008bda:	468a      	mov	sl, r1
 8008bdc:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8008be0:	6022      	str	r2, [r4, #0]
 8008be2:	f806 3b01 	strb.w	r3, [r6], #1
 8008be6:	e7e2      	b.n	8008bae <_scanf_float+0x15e>
 8008be8:	6822      	ldr	r2, [r4, #0]
 8008bea:	0610      	lsls	r0, r2, #24
 8008bec:	f57f af62 	bpl.w	8008ab4 <_scanf_float+0x64>
 8008bf0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8008bf4:	6022      	str	r2, [r4, #0]
 8008bf6:	e7f4      	b.n	8008be2 <_scanf_float+0x192>
 8008bf8:	f1ba 0f00 	cmp.w	sl, #0
 8008bfc:	d10e      	bne.n	8008c1c <_scanf_float+0x1cc>
 8008bfe:	f1b9 0f00 	cmp.w	r9, #0
 8008c02:	d10e      	bne.n	8008c22 <_scanf_float+0x1d2>
 8008c04:	6822      	ldr	r2, [r4, #0]
 8008c06:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8008c0a:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8008c0e:	d108      	bne.n	8008c22 <_scanf_float+0x1d2>
 8008c10:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8008c14:	f04f 0a01 	mov.w	sl, #1
 8008c18:	6022      	str	r2, [r4, #0]
 8008c1a:	e7e2      	b.n	8008be2 <_scanf_float+0x192>
 8008c1c:	f1ba 0f02 	cmp.w	sl, #2
 8008c20:	d055      	beq.n	8008cce <_scanf_float+0x27e>
 8008c22:	2d01      	cmp	r5, #1
 8008c24:	d002      	beq.n	8008c2c <_scanf_float+0x1dc>
 8008c26:	2d04      	cmp	r5, #4
 8008c28:	f47f af44 	bne.w	8008ab4 <_scanf_float+0x64>
 8008c2c:	3501      	adds	r5, #1
 8008c2e:	b2ed      	uxtb	r5, r5
 8008c30:	e7d7      	b.n	8008be2 <_scanf_float+0x192>
 8008c32:	f1ba 0f01 	cmp.w	sl, #1
 8008c36:	f47f af3d 	bne.w	8008ab4 <_scanf_float+0x64>
 8008c3a:	f04f 0a02 	mov.w	sl, #2
 8008c3e:	e7d0      	b.n	8008be2 <_scanf_float+0x192>
 8008c40:	b97d      	cbnz	r5, 8008c62 <_scanf_float+0x212>
 8008c42:	f1b9 0f00 	cmp.w	r9, #0
 8008c46:	f47f af38 	bne.w	8008aba <_scanf_float+0x6a>
 8008c4a:	6822      	ldr	r2, [r4, #0]
 8008c4c:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8008c50:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8008c54:	f040 8107 	bne.w	8008e66 <_scanf_float+0x416>
 8008c58:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8008c5c:	2501      	movs	r5, #1
 8008c5e:	6022      	str	r2, [r4, #0]
 8008c60:	e7bf      	b.n	8008be2 <_scanf_float+0x192>
 8008c62:	2d03      	cmp	r5, #3
 8008c64:	d0e2      	beq.n	8008c2c <_scanf_float+0x1dc>
 8008c66:	2d05      	cmp	r5, #5
 8008c68:	e7de      	b.n	8008c28 <_scanf_float+0x1d8>
 8008c6a:	2d02      	cmp	r5, #2
 8008c6c:	f47f af22 	bne.w	8008ab4 <_scanf_float+0x64>
 8008c70:	2503      	movs	r5, #3
 8008c72:	e7b6      	b.n	8008be2 <_scanf_float+0x192>
 8008c74:	2d06      	cmp	r5, #6
 8008c76:	f47f af1d 	bne.w	8008ab4 <_scanf_float+0x64>
 8008c7a:	2507      	movs	r5, #7
 8008c7c:	e7b1      	b.n	8008be2 <_scanf_float+0x192>
 8008c7e:	6822      	ldr	r2, [r4, #0]
 8008c80:	0591      	lsls	r1, r2, #22
 8008c82:	f57f af17 	bpl.w	8008ab4 <_scanf_float+0x64>
 8008c86:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8008c8a:	f8cd 9008 	str.w	r9, [sp, #8]
 8008c8e:	6022      	str	r2, [r4, #0]
 8008c90:	e7a7      	b.n	8008be2 <_scanf_float+0x192>
 8008c92:	6822      	ldr	r2, [r4, #0]
 8008c94:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8008c98:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8008c9c:	d006      	beq.n	8008cac <_scanf_float+0x25c>
 8008c9e:	0550      	lsls	r0, r2, #21
 8008ca0:	f57f af08 	bpl.w	8008ab4 <_scanf_float+0x64>
 8008ca4:	f1b9 0f00 	cmp.w	r9, #0
 8008ca8:	f000 80dd 	beq.w	8008e66 <_scanf_float+0x416>
 8008cac:	0591      	lsls	r1, r2, #22
 8008cae:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8008cb2:	bf58      	it	pl
 8008cb4:	9902      	ldrpl	r1, [sp, #8]
 8008cb6:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8008cba:	bf58      	it	pl
 8008cbc:	eba9 0101 	subpl.w	r1, r9, r1
 8008cc0:	6022      	str	r2, [r4, #0]
 8008cc2:	f04f 0900 	mov.w	r9, #0
 8008cc6:	bf58      	it	pl
 8008cc8:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8008ccc:	e789      	b.n	8008be2 <_scanf_float+0x192>
 8008cce:	f04f 0a03 	mov.w	sl, #3
 8008cd2:	e786      	b.n	8008be2 <_scanf_float+0x192>
 8008cd4:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8008cd8:	4639      	mov	r1, r7
 8008cda:	4640      	mov	r0, r8
 8008cdc:	4798      	blx	r3
 8008cde:	2800      	cmp	r0, #0
 8008ce0:	f43f aedb 	beq.w	8008a9a <_scanf_float+0x4a>
 8008ce4:	e6e6      	b.n	8008ab4 <_scanf_float+0x64>
 8008ce6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008cea:	463a      	mov	r2, r7
 8008cec:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008cf0:	4640      	mov	r0, r8
 8008cf2:	4798      	blx	r3
 8008cf4:	6923      	ldr	r3, [r4, #16]
 8008cf6:	3b01      	subs	r3, #1
 8008cf8:	6123      	str	r3, [r4, #16]
 8008cfa:	e6e8      	b.n	8008ace <_scanf_float+0x7e>
 8008cfc:	1e6b      	subs	r3, r5, #1
 8008cfe:	2b06      	cmp	r3, #6
 8008d00:	d824      	bhi.n	8008d4c <_scanf_float+0x2fc>
 8008d02:	2d02      	cmp	r5, #2
 8008d04:	d836      	bhi.n	8008d74 <_scanf_float+0x324>
 8008d06:	9b01      	ldr	r3, [sp, #4]
 8008d08:	429e      	cmp	r6, r3
 8008d0a:	f67f aee4 	bls.w	8008ad6 <_scanf_float+0x86>
 8008d0e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008d12:	463a      	mov	r2, r7
 8008d14:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008d18:	4640      	mov	r0, r8
 8008d1a:	4798      	blx	r3
 8008d1c:	6923      	ldr	r3, [r4, #16]
 8008d1e:	3b01      	subs	r3, #1
 8008d20:	6123      	str	r3, [r4, #16]
 8008d22:	e7f0      	b.n	8008d06 <_scanf_float+0x2b6>
 8008d24:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008d28:	463a      	mov	r2, r7
 8008d2a:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8008d2e:	4640      	mov	r0, r8
 8008d30:	4798      	blx	r3
 8008d32:	6923      	ldr	r3, [r4, #16]
 8008d34:	3b01      	subs	r3, #1
 8008d36:	6123      	str	r3, [r4, #16]
 8008d38:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008d3c:	fa5f fa8a 	uxtb.w	sl, sl
 8008d40:	f1ba 0f02 	cmp.w	sl, #2
 8008d44:	d1ee      	bne.n	8008d24 <_scanf_float+0x2d4>
 8008d46:	3d03      	subs	r5, #3
 8008d48:	b2ed      	uxtb	r5, r5
 8008d4a:	1b76      	subs	r6, r6, r5
 8008d4c:	6823      	ldr	r3, [r4, #0]
 8008d4e:	05da      	lsls	r2, r3, #23
 8008d50:	d52f      	bpl.n	8008db2 <_scanf_float+0x362>
 8008d52:	055b      	lsls	r3, r3, #21
 8008d54:	d511      	bpl.n	8008d7a <_scanf_float+0x32a>
 8008d56:	9b01      	ldr	r3, [sp, #4]
 8008d58:	429e      	cmp	r6, r3
 8008d5a:	f67f aebc 	bls.w	8008ad6 <_scanf_float+0x86>
 8008d5e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008d62:	463a      	mov	r2, r7
 8008d64:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008d68:	4640      	mov	r0, r8
 8008d6a:	4798      	blx	r3
 8008d6c:	6923      	ldr	r3, [r4, #16]
 8008d6e:	3b01      	subs	r3, #1
 8008d70:	6123      	str	r3, [r4, #16]
 8008d72:	e7f0      	b.n	8008d56 <_scanf_float+0x306>
 8008d74:	46aa      	mov	sl, r5
 8008d76:	46b3      	mov	fp, r6
 8008d78:	e7de      	b.n	8008d38 <_scanf_float+0x2e8>
 8008d7a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8008d7e:	1e75      	subs	r5, r6, #1
 8008d80:	6923      	ldr	r3, [r4, #16]
 8008d82:	2965      	cmp	r1, #101	@ 0x65
 8008d84:	f103 33ff 	add.w	r3, r3, #4294967295
 8008d88:	6123      	str	r3, [r4, #16]
 8008d8a:	d00c      	beq.n	8008da6 <_scanf_float+0x356>
 8008d8c:	2945      	cmp	r1, #69	@ 0x45
 8008d8e:	d00a      	beq.n	8008da6 <_scanf_float+0x356>
 8008d90:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008d94:	463a      	mov	r2, r7
 8008d96:	4640      	mov	r0, r8
 8008d98:	1eb5      	subs	r5, r6, #2
 8008d9a:	4798      	blx	r3
 8008d9c:	6923      	ldr	r3, [r4, #16]
 8008d9e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8008da2:	3b01      	subs	r3, #1
 8008da4:	6123      	str	r3, [r4, #16]
 8008da6:	462e      	mov	r6, r5
 8008da8:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008dac:	463a      	mov	r2, r7
 8008dae:	4640      	mov	r0, r8
 8008db0:	4798      	blx	r3
 8008db2:	6822      	ldr	r2, [r4, #0]
 8008db4:	f012 0210 	ands.w	r2, r2, #16
 8008db8:	d001      	beq.n	8008dbe <_scanf_float+0x36e>
 8008dba:	2000      	movs	r0, #0
 8008dbc:	e68c      	b.n	8008ad8 <_scanf_float+0x88>
 8008dbe:	7032      	strb	r2, [r6, #0]
 8008dc0:	6823      	ldr	r3, [r4, #0]
 8008dc2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8008dc6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008dca:	d11c      	bne.n	8008e06 <_scanf_float+0x3b6>
 8008dcc:	9b02      	ldr	r3, [sp, #8]
 8008dce:	454b      	cmp	r3, r9
 8008dd0:	eba3 0209 	sub.w	r2, r3, r9
 8008dd4:	d123      	bne.n	8008e1e <_scanf_float+0x3ce>
 8008dd6:	2200      	movs	r2, #0
 8008dd8:	9901      	ldr	r1, [sp, #4]
 8008dda:	4640      	mov	r0, r8
 8008ddc:	f002 fc34 	bl	800b648 <_strtod_r>
 8008de0:	6821      	ldr	r1, [r4, #0]
 8008de2:	9b03      	ldr	r3, [sp, #12]
 8008de4:	f011 0f02 	tst.w	r1, #2
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	ec57 6b10 	vmov	r6, r7, d0
 8008dee:	f103 0204 	add.w	r2, r3, #4
 8008df2:	d01f      	beq.n	8008e34 <_scanf_float+0x3e4>
 8008df4:	9903      	ldr	r1, [sp, #12]
 8008df6:	600a      	str	r2, [r1, #0]
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	e9c3 6700 	strd	r6, r7, [r3]
 8008dfe:	68e3      	ldr	r3, [r4, #12]
 8008e00:	3301      	adds	r3, #1
 8008e02:	60e3      	str	r3, [r4, #12]
 8008e04:	e7d9      	b.n	8008dba <_scanf_float+0x36a>
 8008e06:	9b04      	ldr	r3, [sp, #16]
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	d0e4      	beq.n	8008dd6 <_scanf_float+0x386>
 8008e0c:	9905      	ldr	r1, [sp, #20]
 8008e0e:	230a      	movs	r3, #10
 8008e10:	4640      	mov	r0, r8
 8008e12:	3101      	adds	r1, #1
 8008e14:	f002 fc98 	bl	800b748 <_strtol_r>
 8008e18:	9b04      	ldr	r3, [sp, #16]
 8008e1a:	9e05      	ldr	r6, [sp, #20]
 8008e1c:	1ac2      	subs	r2, r0, r3
 8008e1e:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8008e22:	4912      	ldr	r1, [pc, #72]	@ (8008e6c <_scanf_float+0x41c>)
 8008e24:	429e      	cmp	r6, r3
 8008e26:	bf28      	it	cs
 8008e28:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8008e2c:	4630      	mov	r0, r6
 8008e2e:	f000 f8f5 	bl	800901c <siprintf>
 8008e32:	e7d0      	b.n	8008dd6 <_scanf_float+0x386>
 8008e34:	f011 0f04 	tst.w	r1, #4
 8008e38:	9903      	ldr	r1, [sp, #12]
 8008e3a:	600a      	str	r2, [r1, #0]
 8008e3c:	d1dc      	bne.n	8008df8 <_scanf_float+0x3a8>
 8008e3e:	681d      	ldr	r5, [r3, #0]
 8008e40:	4632      	mov	r2, r6
 8008e42:	463b      	mov	r3, r7
 8008e44:	4630      	mov	r0, r6
 8008e46:	4639      	mov	r1, r7
 8008e48:	f7f7 fe8e 	bl	8000b68 <__aeabi_dcmpun>
 8008e4c:	b128      	cbz	r0, 8008e5a <_scanf_float+0x40a>
 8008e4e:	4808      	ldr	r0, [pc, #32]	@ (8008e70 <_scanf_float+0x420>)
 8008e50:	f000 f9e2 	bl	8009218 <nanf>
 8008e54:	ed85 0a00 	vstr	s0, [r5]
 8008e58:	e7d1      	b.n	8008dfe <_scanf_float+0x3ae>
 8008e5a:	4630      	mov	r0, r6
 8008e5c:	4639      	mov	r1, r7
 8008e5e:	f7f7 fee1 	bl	8000c24 <__aeabi_d2f>
 8008e62:	6028      	str	r0, [r5, #0]
 8008e64:	e7cb      	b.n	8008dfe <_scanf_float+0x3ae>
 8008e66:	f04f 0900 	mov.w	r9, #0
 8008e6a:	e62a      	b.n	8008ac2 <_scanf_float+0x72>
 8008e6c:	0800cadc 	.word	0x0800cadc
 8008e70:	0800ce75 	.word	0x0800ce75

08008e74 <std>:
 8008e74:	2300      	movs	r3, #0
 8008e76:	b510      	push	{r4, lr}
 8008e78:	4604      	mov	r4, r0
 8008e7a:	6083      	str	r3, [r0, #8]
 8008e7c:	8181      	strh	r1, [r0, #12]
 8008e7e:	4619      	mov	r1, r3
 8008e80:	6643      	str	r3, [r0, #100]	@ 0x64
 8008e82:	81c2      	strh	r2, [r0, #14]
 8008e84:	2208      	movs	r2, #8
 8008e86:	6183      	str	r3, [r0, #24]
 8008e88:	e9c0 3300 	strd	r3, r3, [r0]
 8008e8c:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008e90:	305c      	adds	r0, #92	@ 0x5c
 8008e92:	f000 f926 	bl	80090e2 <memset>
 8008e96:	4b0d      	ldr	r3, [pc, #52]	@ (8008ecc <std+0x58>)
 8008e98:	6224      	str	r4, [r4, #32]
 8008e9a:	6263      	str	r3, [r4, #36]	@ 0x24
 8008e9c:	4b0c      	ldr	r3, [pc, #48]	@ (8008ed0 <std+0x5c>)
 8008e9e:	62a3      	str	r3, [r4, #40]	@ 0x28
 8008ea0:	4b0c      	ldr	r3, [pc, #48]	@ (8008ed4 <std+0x60>)
 8008ea2:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8008ea4:	4b0c      	ldr	r3, [pc, #48]	@ (8008ed8 <std+0x64>)
 8008ea6:	6323      	str	r3, [r4, #48]	@ 0x30
 8008ea8:	4b0c      	ldr	r3, [pc, #48]	@ (8008edc <std+0x68>)
 8008eaa:	429c      	cmp	r4, r3
 8008eac:	d006      	beq.n	8008ebc <std+0x48>
 8008eae:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8008eb2:	4294      	cmp	r4, r2
 8008eb4:	d002      	beq.n	8008ebc <std+0x48>
 8008eb6:	33d0      	adds	r3, #208	@ 0xd0
 8008eb8:	429c      	cmp	r4, r3
 8008eba:	d105      	bne.n	8008ec8 <std+0x54>
 8008ebc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8008ec0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008ec4:	f000 b98a 	b.w	80091dc <__retarget_lock_init_recursive>
 8008ec8:	bd10      	pop	{r4, pc}
 8008eca:	bf00      	nop
 8008ecc:	0800905d 	.word	0x0800905d
 8008ed0:	0800907f 	.word	0x0800907f
 8008ed4:	080090b7 	.word	0x080090b7
 8008ed8:	080090db 	.word	0x080090db
 8008edc:	200004a0 	.word	0x200004a0

08008ee0 <stdio_exit_handler>:
 8008ee0:	4a02      	ldr	r2, [pc, #8]	@ (8008eec <stdio_exit_handler+0xc>)
 8008ee2:	4903      	ldr	r1, [pc, #12]	@ (8008ef0 <stdio_exit_handler+0x10>)
 8008ee4:	4803      	ldr	r0, [pc, #12]	@ (8008ef4 <stdio_exit_handler+0x14>)
 8008ee6:	f000 b869 	b.w	8008fbc <_fwalk_sglue>
 8008eea:	bf00      	nop
 8008eec:	2000000c 	.word	0x2000000c
 8008ef0:	0800bd89 	.word	0x0800bd89
 8008ef4:	2000001c 	.word	0x2000001c

08008ef8 <cleanup_stdio>:
 8008ef8:	6841      	ldr	r1, [r0, #4]
 8008efa:	4b0c      	ldr	r3, [pc, #48]	@ (8008f2c <cleanup_stdio+0x34>)
 8008efc:	4299      	cmp	r1, r3
 8008efe:	b510      	push	{r4, lr}
 8008f00:	4604      	mov	r4, r0
 8008f02:	d001      	beq.n	8008f08 <cleanup_stdio+0x10>
 8008f04:	f002 ff40 	bl	800bd88 <_fflush_r>
 8008f08:	68a1      	ldr	r1, [r4, #8]
 8008f0a:	4b09      	ldr	r3, [pc, #36]	@ (8008f30 <cleanup_stdio+0x38>)
 8008f0c:	4299      	cmp	r1, r3
 8008f0e:	d002      	beq.n	8008f16 <cleanup_stdio+0x1e>
 8008f10:	4620      	mov	r0, r4
 8008f12:	f002 ff39 	bl	800bd88 <_fflush_r>
 8008f16:	68e1      	ldr	r1, [r4, #12]
 8008f18:	4b06      	ldr	r3, [pc, #24]	@ (8008f34 <cleanup_stdio+0x3c>)
 8008f1a:	4299      	cmp	r1, r3
 8008f1c:	d004      	beq.n	8008f28 <cleanup_stdio+0x30>
 8008f1e:	4620      	mov	r0, r4
 8008f20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008f24:	f002 bf30 	b.w	800bd88 <_fflush_r>
 8008f28:	bd10      	pop	{r4, pc}
 8008f2a:	bf00      	nop
 8008f2c:	200004a0 	.word	0x200004a0
 8008f30:	20000508 	.word	0x20000508
 8008f34:	20000570 	.word	0x20000570

08008f38 <global_stdio_init.part.0>:
 8008f38:	b510      	push	{r4, lr}
 8008f3a:	4b0b      	ldr	r3, [pc, #44]	@ (8008f68 <global_stdio_init.part.0+0x30>)
 8008f3c:	2104      	movs	r1, #4
 8008f3e:	4c0b      	ldr	r4, [pc, #44]	@ (8008f6c <global_stdio_init.part.0+0x34>)
 8008f40:	4a0b      	ldr	r2, [pc, #44]	@ (8008f70 <global_stdio_init.part.0+0x38>)
 8008f42:	4620      	mov	r0, r4
 8008f44:	601a      	str	r2, [r3, #0]
 8008f46:	2200      	movs	r2, #0
 8008f48:	f7ff ff94 	bl	8008e74 <std>
 8008f4c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008f50:	2201      	movs	r2, #1
 8008f52:	2109      	movs	r1, #9
 8008f54:	f7ff ff8e 	bl	8008e74 <std>
 8008f58:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8008f5c:	2202      	movs	r2, #2
 8008f5e:	2112      	movs	r1, #18
 8008f60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008f64:	f7ff bf86 	b.w	8008e74 <std>
 8008f68:	200005d8 	.word	0x200005d8
 8008f6c:	200004a0 	.word	0x200004a0
 8008f70:	08008ee1 	.word	0x08008ee1

08008f74 <__sfp_lock_acquire>:
 8008f74:	4801      	ldr	r0, [pc, #4]	@ (8008f7c <__sfp_lock_acquire+0x8>)
 8008f76:	f000 b932 	b.w	80091de <__retarget_lock_acquire_recursive>
 8008f7a:	bf00      	nop
 8008f7c:	200005e1 	.word	0x200005e1

08008f80 <__sfp_lock_release>:
 8008f80:	4801      	ldr	r0, [pc, #4]	@ (8008f88 <__sfp_lock_release+0x8>)
 8008f82:	f000 b92d 	b.w	80091e0 <__retarget_lock_release_recursive>
 8008f86:	bf00      	nop
 8008f88:	200005e1 	.word	0x200005e1

08008f8c <__sinit>:
 8008f8c:	b510      	push	{r4, lr}
 8008f8e:	4604      	mov	r4, r0
 8008f90:	f7ff fff0 	bl	8008f74 <__sfp_lock_acquire>
 8008f94:	6a23      	ldr	r3, [r4, #32]
 8008f96:	b11b      	cbz	r3, 8008fa0 <__sinit+0x14>
 8008f98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008f9c:	f7ff bff0 	b.w	8008f80 <__sfp_lock_release>
 8008fa0:	4b04      	ldr	r3, [pc, #16]	@ (8008fb4 <__sinit+0x28>)
 8008fa2:	6223      	str	r3, [r4, #32]
 8008fa4:	4b04      	ldr	r3, [pc, #16]	@ (8008fb8 <__sinit+0x2c>)
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d1f5      	bne.n	8008f98 <__sinit+0xc>
 8008fac:	f7ff ffc4 	bl	8008f38 <global_stdio_init.part.0>
 8008fb0:	e7f2      	b.n	8008f98 <__sinit+0xc>
 8008fb2:	bf00      	nop
 8008fb4:	08008ef9 	.word	0x08008ef9
 8008fb8:	200005d8 	.word	0x200005d8

08008fbc <_fwalk_sglue>:
 8008fbc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008fc0:	4607      	mov	r7, r0
 8008fc2:	4688      	mov	r8, r1
 8008fc4:	4614      	mov	r4, r2
 8008fc6:	2600      	movs	r6, #0
 8008fc8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008fcc:	f1b9 0901 	subs.w	r9, r9, #1
 8008fd0:	d505      	bpl.n	8008fde <_fwalk_sglue+0x22>
 8008fd2:	6824      	ldr	r4, [r4, #0]
 8008fd4:	2c00      	cmp	r4, #0
 8008fd6:	d1f7      	bne.n	8008fc8 <_fwalk_sglue+0xc>
 8008fd8:	4630      	mov	r0, r6
 8008fda:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008fde:	89ab      	ldrh	r3, [r5, #12]
 8008fe0:	2b01      	cmp	r3, #1
 8008fe2:	d907      	bls.n	8008ff4 <_fwalk_sglue+0x38>
 8008fe4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008fe8:	3301      	adds	r3, #1
 8008fea:	d003      	beq.n	8008ff4 <_fwalk_sglue+0x38>
 8008fec:	4629      	mov	r1, r5
 8008fee:	4638      	mov	r0, r7
 8008ff0:	47c0      	blx	r8
 8008ff2:	4306      	orrs	r6, r0
 8008ff4:	3568      	adds	r5, #104	@ 0x68
 8008ff6:	e7e9      	b.n	8008fcc <_fwalk_sglue+0x10>

08008ff8 <iprintf>:
 8008ff8:	b40f      	push	{r0, r1, r2, r3}
 8008ffa:	b507      	push	{r0, r1, r2, lr}
 8008ffc:	4906      	ldr	r1, [pc, #24]	@ (8009018 <iprintf+0x20>)
 8008ffe:	ab04      	add	r3, sp, #16
 8009000:	6808      	ldr	r0, [r1, #0]
 8009002:	f853 2b04 	ldr.w	r2, [r3], #4
 8009006:	6881      	ldr	r1, [r0, #8]
 8009008:	9301      	str	r3, [sp, #4]
 800900a:	f002 fd21 	bl	800ba50 <_vfiprintf_r>
 800900e:	b003      	add	sp, #12
 8009010:	f85d eb04 	ldr.w	lr, [sp], #4
 8009014:	b004      	add	sp, #16
 8009016:	4770      	bx	lr
 8009018:	20000018 	.word	0x20000018

0800901c <siprintf>:
 800901c:	b40e      	push	{r1, r2, r3}
 800901e:	b500      	push	{lr}
 8009020:	b09c      	sub	sp, #112	@ 0x70
 8009022:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8009026:	ab1d      	add	r3, sp, #116	@ 0x74
 8009028:	9002      	str	r0, [sp, #8]
 800902a:	9006      	str	r0, [sp, #24]
 800902c:	9107      	str	r1, [sp, #28]
 800902e:	9104      	str	r1, [sp, #16]
 8009030:	4808      	ldr	r0, [pc, #32]	@ (8009054 <siprintf+0x38>)
 8009032:	4909      	ldr	r1, [pc, #36]	@ (8009058 <siprintf+0x3c>)
 8009034:	f853 2b04 	ldr.w	r2, [r3], #4
 8009038:	9105      	str	r1, [sp, #20]
 800903a:	a902      	add	r1, sp, #8
 800903c:	6800      	ldr	r0, [r0, #0]
 800903e:	9301      	str	r3, [sp, #4]
 8009040:	f002 fbe0 	bl	800b804 <_svfiprintf_r>
 8009044:	9b02      	ldr	r3, [sp, #8]
 8009046:	2200      	movs	r2, #0
 8009048:	701a      	strb	r2, [r3, #0]
 800904a:	b01c      	add	sp, #112	@ 0x70
 800904c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009050:	b003      	add	sp, #12
 8009052:	4770      	bx	lr
 8009054:	20000018 	.word	0x20000018
 8009058:	ffff0208 	.word	0xffff0208

0800905c <__sread>:
 800905c:	b510      	push	{r4, lr}
 800905e:	460c      	mov	r4, r1
 8009060:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009064:	f000 f86c 	bl	8009140 <_read_r>
 8009068:	2800      	cmp	r0, #0
 800906a:	bfab      	itete	ge
 800906c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800906e:	89a3      	ldrhlt	r3, [r4, #12]
 8009070:	181b      	addge	r3, r3, r0
 8009072:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8009076:	bfac      	ite	ge
 8009078:	6563      	strge	r3, [r4, #84]	@ 0x54
 800907a:	81a3      	strhlt	r3, [r4, #12]
 800907c:	bd10      	pop	{r4, pc}

0800907e <__swrite>:
 800907e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009082:	461f      	mov	r7, r3
 8009084:	898b      	ldrh	r3, [r1, #12]
 8009086:	4605      	mov	r5, r0
 8009088:	460c      	mov	r4, r1
 800908a:	05db      	lsls	r3, r3, #23
 800908c:	4616      	mov	r6, r2
 800908e:	d505      	bpl.n	800909c <__swrite+0x1e>
 8009090:	2302      	movs	r3, #2
 8009092:	2200      	movs	r2, #0
 8009094:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009098:	f000 f840 	bl	800911c <_lseek_r>
 800909c:	89a3      	ldrh	r3, [r4, #12]
 800909e:	4632      	mov	r2, r6
 80090a0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80090a4:	4628      	mov	r0, r5
 80090a6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80090aa:	81a3      	strh	r3, [r4, #12]
 80090ac:	463b      	mov	r3, r7
 80090ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80090b2:	f000 b857 	b.w	8009164 <_write_r>

080090b6 <__sseek>:
 80090b6:	b510      	push	{r4, lr}
 80090b8:	460c      	mov	r4, r1
 80090ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80090be:	f000 f82d 	bl	800911c <_lseek_r>
 80090c2:	1c43      	adds	r3, r0, #1
 80090c4:	89a3      	ldrh	r3, [r4, #12]
 80090c6:	bf15      	itete	ne
 80090c8:	6560      	strne	r0, [r4, #84]	@ 0x54
 80090ca:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80090ce:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80090d2:	81a3      	strheq	r3, [r4, #12]
 80090d4:	bf18      	it	ne
 80090d6:	81a3      	strhne	r3, [r4, #12]
 80090d8:	bd10      	pop	{r4, pc}

080090da <__sclose>:
 80090da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80090de:	f000 b80d 	b.w	80090fc <_close_r>

080090e2 <memset>:
 80090e2:	4402      	add	r2, r0
 80090e4:	4603      	mov	r3, r0
 80090e6:	4293      	cmp	r3, r2
 80090e8:	d100      	bne.n	80090ec <memset+0xa>
 80090ea:	4770      	bx	lr
 80090ec:	f803 1b01 	strb.w	r1, [r3], #1
 80090f0:	e7f9      	b.n	80090e6 <memset+0x4>
	...

080090f4 <_localeconv_r>:
 80090f4:	4800      	ldr	r0, [pc, #0]	@ (80090f8 <_localeconv_r+0x4>)
 80090f6:	4770      	bx	lr
 80090f8:	20000158 	.word	0x20000158

080090fc <_close_r>:
 80090fc:	b538      	push	{r3, r4, r5, lr}
 80090fe:	2300      	movs	r3, #0
 8009100:	4d05      	ldr	r5, [pc, #20]	@ (8009118 <_close_r+0x1c>)
 8009102:	4604      	mov	r4, r0
 8009104:	4608      	mov	r0, r1
 8009106:	602b      	str	r3, [r5, #0]
 8009108:	f7f8 fe10 	bl	8001d2c <_close>
 800910c:	1c43      	adds	r3, r0, #1
 800910e:	d102      	bne.n	8009116 <_close_r+0x1a>
 8009110:	682b      	ldr	r3, [r5, #0]
 8009112:	b103      	cbz	r3, 8009116 <_close_r+0x1a>
 8009114:	6023      	str	r3, [r4, #0]
 8009116:	bd38      	pop	{r3, r4, r5, pc}
 8009118:	200005dc 	.word	0x200005dc

0800911c <_lseek_r>:
 800911c:	b538      	push	{r3, r4, r5, lr}
 800911e:	4604      	mov	r4, r0
 8009120:	4d06      	ldr	r5, [pc, #24]	@ (800913c <_lseek_r+0x20>)
 8009122:	4608      	mov	r0, r1
 8009124:	4611      	mov	r1, r2
 8009126:	2200      	movs	r2, #0
 8009128:	602a      	str	r2, [r5, #0]
 800912a:	461a      	mov	r2, r3
 800912c:	f7f8 fe25 	bl	8001d7a <_lseek>
 8009130:	1c43      	adds	r3, r0, #1
 8009132:	d102      	bne.n	800913a <_lseek_r+0x1e>
 8009134:	682b      	ldr	r3, [r5, #0]
 8009136:	b103      	cbz	r3, 800913a <_lseek_r+0x1e>
 8009138:	6023      	str	r3, [r4, #0]
 800913a:	bd38      	pop	{r3, r4, r5, pc}
 800913c:	200005dc 	.word	0x200005dc

08009140 <_read_r>:
 8009140:	b538      	push	{r3, r4, r5, lr}
 8009142:	4604      	mov	r4, r0
 8009144:	4d06      	ldr	r5, [pc, #24]	@ (8009160 <_read_r+0x20>)
 8009146:	4608      	mov	r0, r1
 8009148:	4611      	mov	r1, r2
 800914a:	2200      	movs	r2, #0
 800914c:	602a      	str	r2, [r5, #0]
 800914e:	461a      	mov	r2, r3
 8009150:	f7f8 fdb3 	bl	8001cba <_read>
 8009154:	1c43      	adds	r3, r0, #1
 8009156:	d102      	bne.n	800915e <_read_r+0x1e>
 8009158:	682b      	ldr	r3, [r5, #0]
 800915a:	b103      	cbz	r3, 800915e <_read_r+0x1e>
 800915c:	6023      	str	r3, [r4, #0]
 800915e:	bd38      	pop	{r3, r4, r5, pc}
 8009160:	200005dc 	.word	0x200005dc

08009164 <_write_r>:
 8009164:	b538      	push	{r3, r4, r5, lr}
 8009166:	4604      	mov	r4, r0
 8009168:	4d06      	ldr	r5, [pc, #24]	@ (8009184 <_write_r+0x20>)
 800916a:	4608      	mov	r0, r1
 800916c:	4611      	mov	r1, r2
 800916e:	2200      	movs	r2, #0
 8009170:	602a      	str	r2, [r5, #0]
 8009172:	461a      	mov	r2, r3
 8009174:	f7f8 fdbe 	bl	8001cf4 <_write>
 8009178:	1c43      	adds	r3, r0, #1
 800917a:	d102      	bne.n	8009182 <_write_r+0x1e>
 800917c:	682b      	ldr	r3, [r5, #0]
 800917e:	b103      	cbz	r3, 8009182 <_write_r+0x1e>
 8009180:	6023      	str	r3, [r4, #0]
 8009182:	bd38      	pop	{r3, r4, r5, pc}
 8009184:	200005dc 	.word	0x200005dc

08009188 <__errno>:
 8009188:	4b01      	ldr	r3, [pc, #4]	@ (8009190 <__errno+0x8>)
 800918a:	6818      	ldr	r0, [r3, #0]
 800918c:	4770      	bx	lr
 800918e:	bf00      	nop
 8009190:	20000018 	.word	0x20000018

08009194 <__libc_init_array>:
 8009194:	b570      	push	{r4, r5, r6, lr}
 8009196:	4d0d      	ldr	r5, [pc, #52]	@ (80091cc <__libc_init_array+0x38>)
 8009198:	2600      	movs	r6, #0
 800919a:	4c0d      	ldr	r4, [pc, #52]	@ (80091d0 <__libc_init_array+0x3c>)
 800919c:	1b64      	subs	r4, r4, r5
 800919e:	10a4      	asrs	r4, r4, #2
 80091a0:	42a6      	cmp	r6, r4
 80091a2:	d109      	bne.n	80091b8 <__libc_init_array+0x24>
 80091a4:	4d0b      	ldr	r5, [pc, #44]	@ (80091d4 <__libc_init_array+0x40>)
 80091a6:	2600      	movs	r6, #0
 80091a8:	4c0b      	ldr	r4, [pc, #44]	@ (80091d8 <__libc_init_array+0x44>)
 80091aa:	f003 fb8b 	bl	800c8c4 <_init>
 80091ae:	1b64      	subs	r4, r4, r5
 80091b0:	10a4      	asrs	r4, r4, #2
 80091b2:	42a6      	cmp	r6, r4
 80091b4:	d105      	bne.n	80091c2 <__libc_init_array+0x2e>
 80091b6:	bd70      	pop	{r4, r5, r6, pc}
 80091b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80091bc:	3601      	adds	r6, #1
 80091be:	4798      	blx	r3
 80091c0:	e7ee      	b.n	80091a0 <__libc_init_array+0xc>
 80091c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80091c6:	3601      	adds	r6, #1
 80091c8:	4798      	blx	r3
 80091ca:	e7f2      	b.n	80091b2 <__libc_init_array+0x1e>
 80091cc:	0800cee0 	.word	0x0800cee0
 80091d0:	0800cee0 	.word	0x0800cee0
 80091d4:	0800cee0 	.word	0x0800cee0
 80091d8:	0800cee4 	.word	0x0800cee4

080091dc <__retarget_lock_init_recursive>:
 80091dc:	4770      	bx	lr

080091de <__retarget_lock_acquire_recursive>:
 80091de:	4770      	bx	lr

080091e0 <__retarget_lock_release_recursive>:
 80091e0:	4770      	bx	lr

080091e2 <memchr>:
 80091e2:	b2c9      	uxtb	r1, r1
 80091e4:	4603      	mov	r3, r0
 80091e6:	4402      	add	r2, r0
 80091e8:	b510      	push	{r4, lr}
 80091ea:	4293      	cmp	r3, r2
 80091ec:	4618      	mov	r0, r3
 80091ee:	d101      	bne.n	80091f4 <memchr+0x12>
 80091f0:	2000      	movs	r0, #0
 80091f2:	e003      	b.n	80091fc <memchr+0x1a>
 80091f4:	7804      	ldrb	r4, [r0, #0]
 80091f6:	3301      	adds	r3, #1
 80091f8:	428c      	cmp	r4, r1
 80091fa:	d1f6      	bne.n	80091ea <memchr+0x8>
 80091fc:	bd10      	pop	{r4, pc}

080091fe <memcpy>:
 80091fe:	440a      	add	r2, r1
 8009200:	1e43      	subs	r3, r0, #1
 8009202:	4291      	cmp	r1, r2
 8009204:	d100      	bne.n	8009208 <memcpy+0xa>
 8009206:	4770      	bx	lr
 8009208:	b510      	push	{r4, lr}
 800920a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800920e:	4291      	cmp	r1, r2
 8009210:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009214:	d1f9      	bne.n	800920a <memcpy+0xc>
 8009216:	bd10      	pop	{r4, pc}

08009218 <nanf>:
 8009218:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8009220 <nanf+0x8>
 800921c:	4770      	bx	lr
 800921e:	bf00      	nop
 8009220:	7fc00000 	.word	0x7fc00000

08009224 <quorem>:
 8009224:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009228:	6903      	ldr	r3, [r0, #16]
 800922a:	4607      	mov	r7, r0
 800922c:	690c      	ldr	r4, [r1, #16]
 800922e:	42a3      	cmp	r3, r4
 8009230:	f2c0 8083 	blt.w	800933a <quorem+0x116>
 8009234:	3c01      	subs	r4, #1
 8009236:	f100 0514 	add.w	r5, r0, #20
 800923a:	f101 0814 	add.w	r8, r1, #20
 800923e:	00a3      	lsls	r3, r4, #2
 8009240:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009244:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009248:	9300      	str	r3, [sp, #0]
 800924a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800924e:	9301      	str	r3, [sp, #4]
 8009250:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009254:	3301      	adds	r3, #1
 8009256:	429a      	cmp	r2, r3
 8009258:	fbb2 f6f3 	udiv	r6, r2, r3
 800925c:	d331      	bcc.n	80092c2 <quorem+0x9e>
 800925e:	f04f 0a00 	mov.w	sl, #0
 8009262:	46c4      	mov	ip, r8
 8009264:	46ae      	mov	lr, r5
 8009266:	46d3      	mov	fp, sl
 8009268:	f85c 3b04 	ldr.w	r3, [ip], #4
 800926c:	b298      	uxth	r0, r3
 800926e:	45e1      	cmp	r9, ip
 8009270:	ea4f 4313 	mov.w	r3, r3, lsr #16
 8009274:	fb06 a000 	mla	r0, r6, r0, sl
 8009278:	ea4f 4210 	mov.w	r2, r0, lsr #16
 800927c:	b280      	uxth	r0, r0
 800927e:	fb06 2303 	mla	r3, r6, r3, r2
 8009282:	f8de 2000 	ldr.w	r2, [lr]
 8009286:	b292      	uxth	r2, r2
 8009288:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800928c:	eba2 0200 	sub.w	r2, r2, r0
 8009290:	b29b      	uxth	r3, r3
 8009292:	f8de 0000 	ldr.w	r0, [lr]
 8009296:	445a      	add	r2, fp
 8009298:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800929c:	b292      	uxth	r2, r2
 800929e:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80092a2:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80092a6:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80092aa:	f84e 2b04 	str.w	r2, [lr], #4
 80092ae:	d2db      	bcs.n	8009268 <quorem+0x44>
 80092b0:	9b00      	ldr	r3, [sp, #0]
 80092b2:	58eb      	ldr	r3, [r5, r3]
 80092b4:	b92b      	cbnz	r3, 80092c2 <quorem+0x9e>
 80092b6:	9b01      	ldr	r3, [sp, #4]
 80092b8:	3b04      	subs	r3, #4
 80092ba:	429d      	cmp	r5, r3
 80092bc:	461a      	mov	r2, r3
 80092be:	d330      	bcc.n	8009322 <quorem+0xfe>
 80092c0:	613c      	str	r4, [r7, #16]
 80092c2:	4638      	mov	r0, r7
 80092c4:	f001 f9c6 	bl	800a654 <__mcmp>
 80092c8:	2800      	cmp	r0, #0
 80092ca:	db26      	blt.n	800931a <quorem+0xf6>
 80092cc:	4629      	mov	r1, r5
 80092ce:	2000      	movs	r0, #0
 80092d0:	f858 2b04 	ldr.w	r2, [r8], #4
 80092d4:	f8d1 c000 	ldr.w	ip, [r1]
 80092d8:	fa1f fe82 	uxth.w	lr, r2
 80092dc:	45c1      	cmp	r9, r8
 80092de:	fa1f f38c 	uxth.w	r3, ip
 80092e2:	ea4f 4212 	mov.w	r2, r2, lsr #16
 80092e6:	eba3 030e 	sub.w	r3, r3, lr
 80092ea:	4403      	add	r3, r0
 80092ec:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80092f0:	b29b      	uxth	r3, r3
 80092f2:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80092f6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80092fa:	ea4f 4022 	mov.w	r0, r2, asr #16
 80092fe:	f841 3b04 	str.w	r3, [r1], #4
 8009302:	d2e5      	bcs.n	80092d0 <quorem+0xac>
 8009304:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009308:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800930c:	b922      	cbnz	r2, 8009318 <quorem+0xf4>
 800930e:	3b04      	subs	r3, #4
 8009310:	429d      	cmp	r5, r3
 8009312:	461a      	mov	r2, r3
 8009314:	d30b      	bcc.n	800932e <quorem+0x10a>
 8009316:	613c      	str	r4, [r7, #16]
 8009318:	3601      	adds	r6, #1
 800931a:	4630      	mov	r0, r6
 800931c:	b003      	add	sp, #12
 800931e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009322:	6812      	ldr	r2, [r2, #0]
 8009324:	3b04      	subs	r3, #4
 8009326:	2a00      	cmp	r2, #0
 8009328:	d1ca      	bne.n	80092c0 <quorem+0x9c>
 800932a:	3c01      	subs	r4, #1
 800932c:	e7c5      	b.n	80092ba <quorem+0x96>
 800932e:	6812      	ldr	r2, [r2, #0]
 8009330:	3b04      	subs	r3, #4
 8009332:	2a00      	cmp	r2, #0
 8009334:	d1ef      	bne.n	8009316 <quorem+0xf2>
 8009336:	3c01      	subs	r4, #1
 8009338:	e7ea      	b.n	8009310 <quorem+0xec>
 800933a:	2000      	movs	r0, #0
 800933c:	e7ee      	b.n	800931c <quorem+0xf8>
	...

08009340 <_dtoa_r>:
 8009340:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009344:	69c7      	ldr	r7, [r0, #28]
 8009346:	b099      	sub	sp, #100	@ 0x64
 8009348:	4683      	mov	fp, r0
 800934a:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800934c:	9109      	str	r1, [sp, #36]	@ 0x24
 800934e:	920e      	str	r2, [sp, #56]	@ 0x38
 8009350:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009352:	ec55 4b10 	vmov	r4, r5, d0
 8009356:	ed8d 0b02 	vstr	d0, [sp, #8]
 800935a:	b97f      	cbnz	r7, 800937c <_dtoa_r+0x3c>
 800935c:	2010      	movs	r0, #16
 800935e:	f000 fdfd 	bl	8009f5c <malloc>
 8009362:	4602      	mov	r2, r0
 8009364:	f8cb 001c 	str.w	r0, [fp, #28]
 8009368:	b920      	cbnz	r0, 8009374 <_dtoa_r+0x34>
 800936a:	4ba7      	ldr	r3, [pc, #668]	@ (8009608 <_dtoa_r+0x2c8>)
 800936c:	21ef      	movs	r1, #239	@ 0xef
 800936e:	48a7      	ldr	r0, [pc, #668]	@ (800960c <_dtoa_r+0x2cc>)
 8009370:	f002 fe0a 	bl	800bf88 <__assert_func>
 8009374:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8009378:	6007      	str	r7, [r0, #0]
 800937a:	60c7      	str	r7, [r0, #12]
 800937c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009380:	6819      	ldr	r1, [r3, #0]
 8009382:	b159      	cbz	r1, 800939c <_dtoa_r+0x5c>
 8009384:	685a      	ldr	r2, [r3, #4]
 8009386:	2301      	movs	r3, #1
 8009388:	4658      	mov	r0, fp
 800938a:	4093      	lsls	r3, r2
 800938c:	604a      	str	r2, [r1, #4]
 800938e:	608b      	str	r3, [r1, #8]
 8009390:	f000 feda 	bl	800a148 <_Bfree>
 8009394:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009398:	2200      	movs	r2, #0
 800939a:	601a      	str	r2, [r3, #0]
 800939c:	1e2b      	subs	r3, r5, #0
 800939e:	bfb7      	itett	lt
 80093a0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80093a4:	2300      	movge	r3, #0
 80093a6:	2201      	movlt	r2, #1
 80093a8:	9303      	strlt	r3, [sp, #12]
 80093aa:	bfa8      	it	ge
 80093ac:	6033      	strge	r3, [r6, #0]
 80093ae:	9f03      	ldr	r7, [sp, #12]
 80093b0:	4b97      	ldr	r3, [pc, #604]	@ (8009610 <_dtoa_r+0x2d0>)
 80093b2:	bfb8      	it	lt
 80093b4:	6032      	strlt	r2, [r6, #0]
 80093b6:	43bb      	bics	r3, r7
 80093b8:	d112      	bne.n	80093e0 <_dtoa_r+0xa0>
 80093ba:	f242 730f 	movw	r3, #9999	@ 0x270f
 80093be:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80093c0:	6013      	str	r3, [r2, #0]
 80093c2:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80093c6:	4323      	orrs	r3, r4
 80093c8:	f000 854c 	beq.w	8009e64 <_dtoa_r+0xb24>
 80093cc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80093ce:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8009624 <_dtoa_r+0x2e4>
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	f000 854e 	beq.w	8009e74 <_dtoa_r+0xb34>
 80093d8:	f10a 0303 	add.w	r3, sl, #3
 80093dc:	f000 bd48 	b.w	8009e70 <_dtoa_r+0xb30>
 80093e0:	ed9d 7b02 	vldr	d7, [sp, #8]
 80093e4:	2200      	movs	r2, #0
 80093e6:	2300      	movs	r3, #0
 80093e8:	ec51 0b17 	vmov	r0, r1, d7
 80093ec:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 80093f0:	f7f7 fb88 	bl	8000b04 <__aeabi_dcmpeq>
 80093f4:	4680      	mov	r8, r0
 80093f6:	b158      	cbz	r0, 8009410 <_dtoa_r+0xd0>
 80093f8:	2301      	movs	r3, #1
 80093fa:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80093fc:	6013      	str	r3, [r2, #0]
 80093fe:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009400:	b113      	cbz	r3, 8009408 <_dtoa_r+0xc8>
 8009402:	4b84      	ldr	r3, [pc, #528]	@ (8009614 <_dtoa_r+0x2d4>)
 8009404:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8009406:	6013      	str	r3, [r2, #0]
 8009408:	f8df a21c 	ldr.w	sl, [pc, #540]	@ 8009628 <_dtoa_r+0x2e8>
 800940c:	f000 bd32 	b.w	8009e74 <_dtoa_r+0xb34>
 8009410:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8009414:	aa16      	add	r2, sp, #88	@ 0x58
 8009416:	a917      	add	r1, sp, #92	@ 0x5c
 8009418:	4658      	mov	r0, fp
 800941a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800941e:	f001 fa41 	bl	800a8a4 <__d2b>
 8009422:	4681      	mov	r9, r0
 8009424:	2e00      	cmp	r6, #0
 8009426:	d075      	beq.n	8009514 <_dtoa_r+0x1d4>
 8009428:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800942a:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800942e:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8009432:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009436:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800943a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800943e:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8009442:	4619      	mov	r1, r3
 8009444:	2200      	movs	r2, #0
 8009446:	4b74      	ldr	r3, [pc, #464]	@ (8009618 <_dtoa_r+0x2d8>)
 8009448:	f7f6 ff3c 	bl	80002c4 <__aeabi_dsub>
 800944c:	a368      	add	r3, pc, #416	@ (adr r3, 80095f0 <_dtoa_r+0x2b0>)
 800944e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009452:	f7f7 f8ef 	bl	8000634 <__aeabi_dmul>
 8009456:	a368      	add	r3, pc, #416	@ (adr r3, 80095f8 <_dtoa_r+0x2b8>)
 8009458:	e9d3 2300 	ldrd	r2, r3, [r3]
 800945c:	f7f6 ff34 	bl	80002c8 <__adddf3>
 8009460:	4604      	mov	r4, r0
 8009462:	460d      	mov	r5, r1
 8009464:	4630      	mov	r0, r6
 8009466:	f7f7 f87b 	bl	8000560 <__aeabi_i2d>
 800946a:	a365      	add	r3, pc, #404	@ (adr r3, 8009600 <_dtoa_r+0x2c0>)
 800946c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009470:	f7f7 f8e0 	bl	8000634 <__aeabi_dmul>
 8009474:	4602      	mov	r2, r0
 8009476:	460b      	mov	r3, r1
 8009478:	4620      	mov	r0, r4
 800947a:	4629      	mov	r1, r5
 800947c:	f7f6 ff24 	bl	80002c8 <__adddf3>
 8009480:	4604      	mov	r4, r0
 8009482:	460d      	mov	r5, r1
 8009484:	f7f7 fb86 	bl	8000b94 <__aeabi_d2iz>
 8009488:	2200      	movs	r2, #0
 800948a:	4607      	mov	r7, r0
 800948c:	2300      	movs	r3, #0
 800948e:	4620      	mov	r0, r4
 8009490:	4629      	mov	r1, r5
 8009492:	f7f7 fb41 	bl	8000b18 <__aeabi_dcmplt>
 8009496:	b140      	cbz	r0, 80094aa <_dtoa_r+0x16a>
 8009498:	4638      	mov	r0, r7
 800949a:	f7f7 f861 	bl	8000560 <__aeabi_i2d>
 800949e:	4622      	mov	r2, r4
 80094a0:	462b      	mov	r3, r5
 80094a2:	f7f7 fb2f 	bl	8000b04 <__aeabi_dcmpeq>
 80094a6:	b900      	cbnz	r0, 80094aa <_dtoa_r+0x16a>
 80094a8:	3f01      	subs	r7, #1
 80094aa:	2f16      	cmp	r7, #22
 80094ac:	d851      	bhi.n	8009552 <_dtoa_r+0x212>
 80094ae:	4b5b      	ldr	r3, [pc, #364]	@ (800961c <_dtoa_r+0x2dc>)
 80094b0:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80094b4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80094b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094bc:	f7f7 fb2c 	bl	8000b18 <__aeabi_dcmplt>
 80094c0:	2800      	cmp	r0, #0
 80094c2:	d048      	beq.n	8009556 <_dtoa_r+0x216>
 80094c4:	3f01      	subs	r7, #1
 80094c6:	2300      	movs	r3, #0
 80094c8:	9312      	str	r3, [sp, #72]	@ 0x48
 80094ca:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80094cc:	1b9b      	subs	r3, r3, r6
 80094ce:	1e5a      	subs	r2, r3, #1
 80094d0:	bf46      	itte	mi
 80094d2:	f1c3 0801 	rsbmi	r8, r3, #1
 80094d6:	2300      	movmi	r3, #0
 80094d8:	f04f 0800 	movpl.w	r8, #0
 80094dc:	9208      	str	r2, [sp, #32]
 80094de:	bf48      	it	mi
 80094e0:	9308      	strmi	r3, [sp, #32]
 80094e2:	2f00      	cmp	r7, #0
 80094e4:	db39      	blt.n	800955a <_dtoa_r+0x21a>
 80094e6:	9b08      	ldr	r3, [sp, #32]
 80094e8:	970f      	str	r7, [sp, #60]	@ 0x3c
 80094ea:	443b      	add	r3, r7
 80094ec:	9308      	str	r3, [sp, #32]
 80094ee:	2300      	movs	r3, #0
 80094f0:	930a      	str	r3, [sp, #40]	@ 0x28
 80094f2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80094f4:	2b09      	cmp	r3, #9
 80094f6:	d864      	bhi.n	80095c2 <_dtoa_r+0x282>
 80094f8:	2b05      	cmp	r3, #5
 80094fa:	bfc5      	ittet	gt
 80094fc:	3b04      	subgt	r3, #4
 80094fe:	2400      	movgt	r4, #0
 8009500:	2401      	movle	r4, #1
 8009502:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8009504:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009506:	3b02      	subs	r3, #2
 8009508:	2b03      	cmp	r3, #3
 800950a:	d865      	bhi.n	80095d8 <_dtoa_r+0x298>
 800950c:	e8df f003 	tbb	[pc, r3]
 8009510:	5737392c 	.word	0x5737392c
 8009514:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8009518:	441e      	add	r6, r3
 800951a:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800951e:	2b20      	cmp	r3, #32
 8009520:	bfc9      	itett	gt
 8009522:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8009526:	f1c3 0320 	rsble	r3, r3, #32
 800952a:	409f      	lslgt	r7, r3
 800952c:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8009530:	bfd8      	it	le
 8009532:	fa04 f003 	lslle.w	r0, r4, r3
 8009536:	f106 36ff 	add.w	r6, r6, #4294967295
 800953a:	bfc4      	itt	gt
 800953c:	fa24 f303 	lsrgt.w	r3, r4, r3
 8009540:	ea47 0003 	orrgt.w	r0, r7, r3
 8009544:	f7f6 fffc 	bl	8000540 <__aeabi_ui2d>
 8009548:	2201      	movs	r2, #1
 800954a:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800954e:	9214      	str	r2, [sp, #80]	@ 0x50
 8009550:	e777      	b.n	8009442 <_dtoa_r+0x102>
 8009552:	2301      	movs	r3, #1
 8009554:	e7b8      	b.n	80094c8 <_dtoa_r+0x188>
 8009556:	9012      	str	r0, [sp, #72]	@ 0x48
 8009558:	e7b7      	b.n	80094ca <_dtoa_r+0x18a>
 800955a:	427b      	negs	r3, r7
 800955c:	eba8 0807 	sub.w	r8, r8, r7
 8009560:	930a      	str	r3, [sp, #40]	@ 0x28
 8009562:	2300      	movs	r3, #0
 8009564:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009566:	e7c4      	b.n	80094f2 <_dtoa_r+0x1b2>
 8009568:	2300      	movs	r3, #0
 800956a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800956c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800956e:	2b00      	cmp	r3, #0
 8009570:	dc35      	bgt.n	80095de <_dtoa_r+0x29e>
 8009572:	2301      	movs	r3, #1
 8009574:	461a      	mov	r2, r3
 8009576:	9300      	str	r3, [sp, #0]
 8009578:	9307      	str	r3, [sp, #28]
 800957a:	920e      	str	r2, [sp, #56]	@ 0x38
 800957c:	e00b      	b.n	8009596 <_dtoa_r+0x256>
 800957e:	2301      	movs	r3, #1
 8009580:	e7f3      	b.n	800956a <_dtoa_r+0x22a>
 8009582:	2300      	movs	r3, #0
 8009584:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009586:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009588:	18fb      	adds	r3, r7, r3
 800958a:	9300      	str	r3, [sp, #0]
 800958c:	3301      	adds	r3, #1
 800958e:	2b01      	cmp	r3, #1
 8009590:	9307      	str	r3, [sp, #28]
 8009592:	bfb8      	it	lt
 8009594:	2301      	movlt	r3, #1
 8009596:	f8db 001c 	ldr.w	r0, [fp, #28]
 800959a:	2100      	movs	r1, #0
 800959c:	2204      	movs	r2, #4
 800959e:	f102 0514 	add.w	r5, r2, #20
 80095a2:	429d      	cmp	r5, r3
 80095a4:	d91f      	bls.n	80095e6 <_dtoa_r+0x2a6>
 80095a6:	6041      	str	r1, [r0, #4]
 80095a8:	4658      	mov	r0, fp
 80095aa:	f000 fd8d 	bl	800a0c8 <_Balloc>
 80095ae:	4682      	mov	sl, r0
 80095b0:	2800      	cmp	r0, #0
 80095b2:	d13b      	bne.n	800962c <_dtoa_r+0x2ec>
 80095b4:	4b1a      	ldr	r3, [pc, #104]	@ (8009620 <_dtoa_r+0x2e0>)
 80095b6:	4602      	mov	r2, r0
 80095b8:	f240 11af 	movw	r1, #431	@ 0x1af
 80095bc:	e6d7      	b.n	800936e <_dtoa_r+0x2e>
 80095be:	2301      	movs	r3, #1
 80095c0:	e7e0      	b.n	8009584 <_dtoa_r+0x244>
 80095c2:	2401      	movs	r4, #1
 80095c4:	2300      	movs	r3, #0
 80095c6:	940b      	str	r4, [sp, #44]	@ 0x2c
 80095c8:	9309      	str	r3, [sp, #36]	@ 0x24
 80095ca:	f04f 33ff 	mov.w	r3, #4294967295
 80095ce:	2200      	movs	r2, #0
 80095d0:	9300      	str	r3, [sp, #0]
 80095d2:	9307      	str	r3, [sp, #28]
 80095d4:	2312      	movs	r3, #18
 80095d6:	e7d0      	b.n	800957a <_dtoa_r+0x23a>
 80095d8:	2301      	movs	r3, #1
 80095da:	930b      	str	r3, [sp, #44]	@ 0x2c
 80095dc:	e7f5      	b.n	80095ca <_dtoa_r+0x28a>
 80095de:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80095e0:	9300      	str	r3, [sp, #0]
 80095e2:	9307      	str	r3, [sp, #28]
 80095e4:	e7d7      	b.n	8009596 <_dtoa_r+0x256>
 80095e6:	3101      	adds	r1, #1
 80095e8:	0052      	lsls	r2, r2, #1
 80095ea:	e7d8      	b.n	800959e <_dtoa_r+0x25e>
 80095ec:	f3af 8000 	nop.w
 80095f0:	636f4361 	.word	0x636f4361
 80095f4:	3fd287a7 	.word	0x3fd287a7
 80095f8:	8b60c8b3 	.word	0x8b60c8b3
 80095fc:	3fc68a28 	.word	0x3fc68a28
 8009600:	509f79fb 	.word	0x509f79fb
 8009604:	3fd34413 	.word	0x3fd34413
 8009608:	0800caee 	.word	0x0800caee
 800960c:	0800cb05 	.word	0x0800cb05
 8009610:	7ff00000 	.word	0x7ff00000
 8009614:	0800cab9 	.word	0x0800cab9
 8009618:	3ff80000 	.word	0x3ff80000
 800961c:	0800cc00 	.word	0x0800cc00
 8009620:	0800cb5d 	.word	0x0800cb5d
 8009624:	0800caea 	.word	0x0800caea
 8009628:	0800cab8 	.word	0x0800cab8
 800962c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009630:	6018      	str	r0, [r3, #0]
 8009632:	9b07      	ldr	r3, [sp, #28]
 8009634:	2b0e      	cmp	r3, #14
 8009636:	f200 80a4 	bhi.w	8009782 <_dtoa_r+0x442>
 800963a:	2c00      	cmp	r4, #0
 800963c:	f000 80a1 	beq.w	8009782 <_dtoa_r+0x442>
 8009640:	2f00      	cmp	r7, #0
 8009642:	dd33      	ble.n	80096ac <_dtoa_r+0x36c>
 8009644:	f007 020f 	and.w	r2, r7, #15
 8009648:	4bac      	ldr	r3, [pc, #688]	@ (80098fc <_dtoa_r+0x5bc>)
 800964a:	05f8      	lsls	r0, r7, #23
 800964c:	ea4f 1427 	mov.w	r4, r7, asr #4
 8009650:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009654:	ed93 7b00 	vldr	d7, [r3]
 8009658:	ed8d 7b04 	vstr	d7, [sp, #16]
 800965c:	d516      	bpl.n	800968c <_dtoa_r+0x34c>
 800965e:	4ba8      	ldr	r3, [pc, #672]	@ (8009900 <_dtoa_r+0x5c0>)
 8009660:	f004 040f 	and.w	r4, r4, #15
 8009664:	2603      	movs	r6, #3
 8009666:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800966a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800966e:	f7f7 f90b 	bl	8000888 <__aeabi_ddiv>
 8009672:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009676:	4da2      	ldr	r5, [pc, #648]	@ (8009900 <_dtoa_r+0x5c0>)
 8009678:	b954      	cbnz	r4, 8009690 <_dtoa_r+0x350>
 800967a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800967e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009682:	f7f7 f901 	bl	8000888 <__aeabi_ddiv>
 8009686:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800968a:	e028      	b.n	80096de <_dtoa_r+0x39e>
 800968c:	2602      	movs	r6, #2
 800968e:	e7f2      	b.n	8009676 <_dtoa_r+0x336>
 8009690:	07e1      	lsls	r1, r4, #31
 8009692:	d508      	bpl.n	80096a6 <_dtoa_r+0x366>
 8009694:	3601      	adds	r6, #1
 8009696:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800969a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800969e:	f7f6 ffc9 	bl	8000634 <__aeabi_dmul>
 80096a2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80096a6:	1064      	asrs	r4, r4, #1
 80096a8:	3508      	adds	r5, #8
 80096aa:	e7e5      	b.n	8009678 <_dtoa_r+0x338>
 80096ac:	f000 80d2 	beq.w	8009854 <_dtoa_r+0x514>
 80096b0:	427c      	negs	r4, r7
 80096b2:	4b92      	ldr	r3, [pc, #584]	@ (80098fc <_dtoa_r+0x5bc>)
 80096b4:	4d92      	ldr	r5, [pc, #584]	@ (8009900 <_dtoa_r+0x5c0>)
 80096b6:	2602      	movs	r6, #2
 80096b8:	f004 020f 	and.w	r2, r4, #15
 80096bc:	1124      	asrs	r4, r4, #4
 80096be:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80096c2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80096c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096ca:	f7f6 ffb3 	bl	8000634 <__aeabi_dmul>
 80096ce:	2300      	movs	r3, #0
 80096d0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80096d4:	2c00      	cmp	r4, #0
 80096d6:	f040 80b2 	bne.w	800983e <_dtoa_r+0x4fe>
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d1d3      	bne.n	8009686 <_dtoa_r+0x346>
 80096de:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80096e0:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	f000 80b7 	beq.w	8009858 <_dtoa_r+0x518>
 80096ea:	2200      	movs	r2, #0
 80096ec:	4b85      	ldr	r3, [pc, #532]	@ (8009904 <_dtoa_r+0x5c4>)
 80096ee:	4620      	mov	r0, r4
 80096f0:	4629      	mov	r1, r5
 80096f2:	f7f7 fa11 	bl	8000b18 <__aeabi_dcmplt>
 80096f6:	2800      	cmp	r0, #0
 80096f8:	f000 80ae 	beq.w	8009858 <_dtoa_r+0x518>
 80096fc:	9b07      	ldr	r3, [sp, #28]
 80096fe:	2b00      	cmp	r3, #0
 8009700:	f000 80aa 	beq.w	8009858 <_dtoa_r+0x518>
 8009704:	9b00      	ldr	r3, [sp, #0]
 8009706:	2b00      	cmp	r3, #0
 8009708:	dd37      	ble.n	800977a <_dtoa_r+0x43a>
 800970a:	1e7b      	subs	r3, r7, #1
 800970c:	4620      	mov	r0, r4
 800970e:	2200      	movs	r2, #0
 8009710:	4629      	mov	r1, r5
 8009712:	9304      	str	r3, [sp, #16]
 8009714:	3601      	adds	r6, #1
 8009716:	4b7c      	ldr	r3, [pc, #496]	@ (8009908 <_dtoa_r+0x5c8>)
 8009718:	f7f6 ff8c 	bl	8000634 <__aeabi_dmul>
 800971c:	9c00      	ldr	r4, [sp, #0]
 800971e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009722:	4630      	mov	r0, r6
 8009724:	f7f6 ff1c 	bl	8000560 <__aeabi_i2d>
 8009728:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800972c:	f7f6 ff82 	bl	8000634 <__aeabi_dmul>
 8009730:	2200      	movs	r2, #0
 8009732:	4b76      	ldr	r3, [pc, #472]	@ (800990c <_dtoa_r+0x5cc>)
 8009734:	f7f6 fdc8 	bl	80002c8 <__adddf3>
 8009738:	4605      	mov	r5, r0
 800973a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800973e:	2c00      	cmp	r4, #0
 8009740:	f040 808d 	bne.w	800985e <_dtoa_r+0x51e>
 8009744:	2200      	movs	r2, #0
 8009746:	4b72      	ldr	r3, [pc, #456]	@ (8009910 <_dtoa_r+0x5d0>)
 8009748:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800974c:	f7f6 fdba 	bl	80002c4 <__aeabi_dsub>
 8009750:	4602      	mov	r2, r0
 8009752:	460b      	mov	r3, r1
 8009754:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009758:	462a      	mov	r2, r5
 800975a:	4633      	mov	r3, r6
 800975c:	f7f7 f9fa 	bl	8000b54 <__aeabi_dcmpgt>
 8009760:	2800      	cmp	r0, #0
 8009762:	f040 828b 	bne.w	8009c7c <_dtoa_r+0x93c>
 8009766:	462a      	mov	r2, r5
 8009768:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800976c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009770:	f7f7 f9d2 	bl	8000b18 <__aeabi_dcmplt>
 8009774:	2800      	cmp	r0, #0
 8009776:	f040 8128 	bne.w	80099ca <_dtoa_r+0x68a>
 800977a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800977e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8009782:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8009784:	2b00      	cmp	r3, #0
 8009786:	f2c0 815a 	blt.w	8009a3e <_dtoa_r+0x6fe>
 800978a:	2f0e      	cmp	r7, #14
 800978c:	f300 8157 	bgt.w	8009a3e <_dtoa_r+0x6fe>
 8009790:	4b5a      	ldr	r3, [pc, #360]	@ (80098fc <_dtoa_r+0x5bc>)
 8009792:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009796:	ed93 7b00 	vldr	d7, [r3]
 800979a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800979c:	2b00      	cmp	r3, #0
 800979e:	ed8d 7b00 	vstr	d7, [sp]
 80097a2:	da03      	bge.n	80097ac <_dtoa_r+0x46c>
 80097a4:	9b07      	ldr	r3, [sp, #28]
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	f340 8101 	ble.w	80099ae <_dtoa_r+0x66e>
 80097ac:	4656      	mov	r6, sl
 80097ae:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80097b2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80097b6:	4620      	mov	r0, r4
 80097b8:	4629      	mov	r1, r5
 80097ba:	f7f7 f865 	bl	8000888 <__aeabi_ddiv>
 80097be:	f7f7 f9e9 	bl	8000b94 <__aeabi_d2iz>
 80097c2:	4680      	mov	r8, r0
 80097c4:	f7f6 fecc 	bl	8000560 <__aeabi_i2d>
 80097c8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80097cc:	f7f6 ff32 	bl	8000634 <__aeabi_dmul>
 80097d0:	4602      	mov	r2, r0
 80097d2:	4620      	mov	r0, r4
 80097d4:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80097d8:	460b      	mov	r3, r1
 80097da:	4629      	mov	r1, r5
 80097dc:	f7f6 fd72 	bl	80002c4 <__aeabi_dsub>
 80097e0:	9d07      	ldr	r5, [sp, #28]
 80097e2:	f806 4b01 	strb.w	r4, [r6], #1
 80097e6:	eba6 040a 	sub.w	r4, r6, sl
 80097ea:	4602      	mov	r2, r0
 80097ec:	460b      	mov	r3, r1
 80097ee:	42a5      	cmp	r5, r4
 80097f0:	f040 8117 	bne.w	8009a22 <_dtoa_r+0x6e2>
 80097f4:	f7f6 fd68 	bl	80002c8 <__adddf3>
 80097f8:	4604      	mov	r4, r0
 80097fa:	460d      	mov	r5, r1
 80097fc:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009800:	f7f7 f9a8 	bl	8000b54 <__aeabi_dcmpgt>
 8009804:	2800      	cmp	r0, #0
 8009806:	f040 80f9 	bne.w	80099fc <_dtoa_r+0x6bc>
 800980a:	4620      	mov	r0, r4
 800980c:	4629      	mov	r1, r5
 800980e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009812:	f7f7 f977 	bl	8000b04 <__aeabi_dcmpeq>
 8009816:	b118      	cbz	r0, 8009820 <_dtoa_r+0x4e0>
 8009818:	f018 0f01 	tst.w	r8, #1
 800981c:	f040 80ee 	bne.w	80099fc <_dtoa_r+0x6bc>
 8009820:	4649      	mov	r1, r9
 8009822:	4658      	mov	r0, fp
 8009824:	f000 fc90 	bl	800a148 <_Bfree>
 8009828:	2300      	movs	r3, #0
 800982a:	3701      	adds	r7, #1
 800982c:	7033      	strb	r3, [r6, #0]
 800982e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8009830:	601f      	str	r7, [r3, #0]
 8009832:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009834:	2b00      	cmp	r3, #0
 8009836:	f000 831d 	beq.w	8009e74 <_dtoa_r+0xb34>
 800983a:	601e      	str	r6, [r3, #0]
 800983c:	e31a      	b.n	8009e74 <_dtoa_r+0xb34>
 800983e:	07e2      	lsls	r2, r4, #31
 8009840:	d505      	bpl.n	800984e <_dtoa_r+0x50e>
 8009842:	3601      	adds	r6, #1
 8009844:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009848:	f7f6 fef4 	bl	8000634 <__aeabi_dmul>
 800984c:	2301      	movs	r3, #1
 800984e:	1064      	asrs	r4, r4, #1
 8009850:	3508      	adds	r5, #8
 8009852:	e73f      	b.n	80096d4 <_dtoa_r+0x394>
 8009854:	2602      	movs	r6, #2
 8009856:	e742      	b.n	80096de <_dtoa_r+0x39e>
 8009858:	9c07      	ldr	r4, [sp, #28]
 800985a:	9704      	str	r7, [sp, #16]
 800985c:	e761      	b.n	8009722 <_dtoa_r+0x3e2>
 800985e:	4b27      	ldr	r3, [pc, #156]	@ (80098fc <_dtoa_r+0x5bc>)
 8009860:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009862:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009866:	4454      	add	r4, sl
 8009868:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800986c:	2900      	cmp	r1, #0
 800986e:	d053      	beq.n	8009918 <_dtoa_r+0x5d8>
 8009870:	2000      	movs	r0, #0
 8009872:	4928      	ldr	r1, [pc, #160]	@ (8009914 <_dtoa_r+0x5d4>)
 8009874:	f7f7 f808 	bl	8000888 <__aeabi_ddiv>
 8009878:	4633      	mov	r3, r6
 800987a:	4656      	mov	r6, sl
 800987c:	462a      	mov	r2, r5
 800987e:	f7f6 fd21 	bl	80002c4 <__aeabi_dsub>
 8009882:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8009886:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800988a:	f7f7 f983 	bl	8000b94 <__aeabi_d2iz>
 800988e:	4605      	mov	r5, r0
 8009890:	f7f6 fe66 	bl	8000560 <__aeabi_i2d>
 8009894:	4602      	mov	r2, r0
 8009896:	460b      	mov	r3, r1
 8009898:	3530      	adds	r5, #48	@ 0x30
 800989a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800989e:	f7f6 fd11 	bl	80002c4 <__aeabi_dsub>
 80098a2:	4602      	mov	r2, r0
 80098a4:	460b      	mov	r3, r1
 80098a6:	f806 5b01 	strb.w	r5, [r6], #1
 80098aa:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80098ae:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80098b2:	f7f7 f931 	bl	8000b18 <__aeabi_dcmplt>
 80098b6:	2800      	cmp	r0, #0
 80098b8:	d171      	bne.n	800999e <_dtoa_r+0x65e>
 80098ba:	2000      	movs	r0, #0
 80098bc:	4911      	ldr	r1, [pc, #68]	@ (8009904 <_dtoa_r+0x5c4>)
 80098be:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80098c2:	f7f6 fcff 	bl	80002c4 <__aeabi_dsub>
 80098c6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80098ca:	f7f7 f925 	bl	8000b18 <__aeabi_dcmplt>
 80098ce:	2800      	cmp	r0, #0
 80098d0:	f040 8095 	bne.w	80099fe <_dtoa_r+0x6be>
 80098d4:	42a6      	cmp	r6, r4
 80098d6:	f43f af50 	beq.w	800977a <_dtoa_r+0x43a>
 80098da:	2200      	movs	r2, #0
 80098dc:	4b0a      	ldr	r3, [pc, #40]	@ (8009908 <_dtoa_r+0x5c8>)
 80098de:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80098e2:	f7f6 fea7 	bl	8000634 <__aeabi_dmul>
 80098e6:	2200      	movs	r2, #0
 80098e8:	4b07      	ldr	r3, [pc, #28]	@ (8009908 <_dtoa_r+0x5c8>)
 80098ea:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80098ee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80098f2:	f7f6 fe9f 	bl	8000634 <__aeabi_dmul>
 80098f6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80098fa:	e7c4      	b.n	8009886 <_dtoa_r+0x546>
 80098fc:	0800cc00 	.word	0x0800cc00
 8009900:	0800cbd8 	.word	0x0800cbd8
 8009904:	3ff00000 	.word	0x3ff00000
 8009908:	40240000 	.word	0x40240000
 800990c:	401c0000 	.word	0x401c0000
 8009910:	40140000 	.word	0x40140000
 8009914:	3fe00000 	.word	0x3fe00000
 8009918:	4631      	mov	r1, r6
 800991a:	4656      	mov	r6, sl
 800991c:	4628      	mov	r0, r5
 800991e:	f7f6 fe89 	bl	8000634 <__aeabi_dmul>
 8009922:	9415      	str	r4, [sp, #84]	@ 0x54
 8009924:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8009928:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800992c:	f7f7 f932 	bl	8000b94 <__aeabi_d2iz>
 8009930:	4605      	mov	r5, r0
 8009932:	f7f6 fe15 	bl	8000560 <__aeabi_i2d>
 8009936:	4602      	mov	r2, r0
 8009938:	3530      	adds	r5, #48	@ 0x30
 800993a:	460b      	mov	r3, r1
 800993c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009940:	f7f6 fcc0 	bl	80002c4 <__aeabi_dsub>
 8009944:	f806 5b01 	strb.w	r5, [r6], #1
 8009948:	4602      	mov	r2, r0
 800994a:	460b      	mov	r3, r1
 800994c:	42a6      	cmp	r6, r4
 800994e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009952:	f04f 0200 	mov.w	r2, #0
 8009956:	d124      	bne.n	80099a2 <_dtoa_r+0x662>
 8009958:	4bac      	ldr	r3, [pc, #688]	@ (8009c0c <_dtoa_r+0x8cc>)
 800995a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800995e:	f7f6 fcb3 	bl	80002c8 <__adddf3>
 8009962:	4602      	mov	r2, r0
 8009964:	460b      	mov	r3, r1
 8009966:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800996a:	f7f7 f8f3 	bl	8000b54 <__aeabi_dcmpgt>
 800996e:	2800      	cmp	r0, #0
 8009970:	d145      	bne.n	80099fe <_dtoa_r+0x6be>
 8009972:	2000      	movs	r0, #0
 8009974:	49a5      	ldr	r1, [pc, #660]	@ (8009c0c <_dtoa_r+0x8cc>)
 8009976:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800997a:	f7f6 fca3 	bl	80002c4 <__aeabi_dsub>
 800997e:	4602      	mov	r2, r0
 8009980:	460b      	mov	r3, r1
 8009982:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009986:	f7f7 f8c7 	bl	8000b18 <__aeabi_dcmplt>
 800998a:	2800      	cmp	r0, #0
 800998c:	f43f aef5 	beq.w	800977a <_dtoa_r+0x43a>
 8009990:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8009992:	1e73      	subs	r3, r6, #1
 8009994:	9315      	str	r3, [sp, #84]	@ 0x54
 8009996:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800999a:	2b30      	cmp	r3, #48	@ 0x30
 800999c:	d0f8      	beq.n	8009990 <_dtoa_r+0x650>
 800999e:	9f04      	ldr	r7, [sp, #16]
 80099a0:	e73e      	b.n	8009820 <_dtoa_r+0x4e0>
 80099a2:	4b9b      	ldr	r3, [pc, #620]	@ (8009c10 <_dtoa_r+0x8d0>)
 80099a4:	f7f6 fe46 	bl	8000634 <__aeabi_dmul>
 80099a8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80099ac:	e7bc      	b.n	8009928 <_dtoa_r+0x5e8>
 80099ae:	d10c      	bne.n	80099ca <_dtoa_r+0x68a>
 80099b0:	2200      	movs	r2, #0
 80099b2:	4b98      	ldr	r3, [pc, #608]	@ (8009c14 <_dtoa_r+0x8d4>)
 80099b4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80099b8:	f7f6 fe3c 	bl	8000634 <__aeabi_dmul>
 80099bc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80099c0:	f7f7 f8be 	bl	8000b40 <__aeabi_dcmpge>
 80099c4:	2800      	cmp	r0, #0
 80099c6:	f000 8157 	beq.w	8009c78 <_dtoa_r+0x938>
 80099ca:	2400      	movs	r4, #0
 80099cc:	4625      	mov	r5, r4
 80099ce:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80099d0:	4656      	mov	r6, sl
 80099d2:	43db      	mvns	r3, r3
 80099d4:	9304      	str	r3, [sp, #16]
 80099d6:	2700      	movs	r7, #0
 80099d8:	4621      	mov	r1, r4
 80099da:	4658      	mov	r0, fp
 80099dc:	f000 fbb4 	bl	800a148 <_Bfree>
 80099e0:	2d00      	cmp	r5, #0
 80099e2:	d0dc      	beq.n	800999e <_dtoa_r+0x65e>
 80099e4:	b12f      	cbz	r7, 80099f2 <_dtoa_r+0x6b2>
 80099e6:	42af      	cmp	r7, r5
 80099e8:	d003      	beq.n	80099f2 <_dtoa_r+0x6b2>
 80099ea:	4639      	mov	r1, r7
 80099ec:	4658      	mov	r0, fp
 80099ee:	f000 fbab 	bl	800a148 <_Bfree>
 80099f2:	4629      	mov	r1, r5
 80099f4:	4658      	mov	r0, fp
 80099f6:	f000 fba7 	bl	800a148 <_Bfree>
 80099fa:	e7d0      	b.n	800999e <_dtoa_r+0x65e>
 80099fc:	9704      	str	r7, [sp, #16]
 80099fe:	4633      	mov	r3, r6
 8009a00:	461e      	mov	r6, r3
 8009a02:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009a06:	2a39      	cmp	r2, #57	@ 0x39
 8009a08:	d107      	bne.n	8009a1a <_dtoa_r+0x6da>
 8009a0a:	459a      	cmp	sl, r3
 8009a0c:	d1f8      	bne.n	8009a00 <_dtoa_r+0x6c0>
 8009a0e:	9a04      	ldr	r2, [sp, #16]
 8009a10:	3201      	adds	r2, #1
 8009a12:	9204      	str	r2, [sp, #16]
 8009a14:	2230      	movs	r2, #48	@ 0x30
 8009a16:	f88a 2000 	strb.w	r2, [sl]
 8009a1a:	781a      	ldrb	r2, [r3, #0]
 8009a1c:	3201      	adds	r2, #1
 8009a1e:	701a      	strb	r2, [r3, #0]
 8009a20:	e7bd      	b.n	800999e <_dtoa_r+0x65e>
 8009a22:	2200      	movs	r2, #0
 8009a24:	4b7a      	ldr	r3, [pc, #488]	@ (8009c10 <_dtoa_r+0x8d0>)
 8009a26:	f7f6 fe05 	bl	8000634 <__aeabi_dmul>
 8009a2a:	2200      	movs	r2, #0
 8009a2c:	2300      	movs	r3, #0
 8009a2e:	4604      	mov	r4, r0
 8009a30:	460d      	mov	r5, r1
 8009a32:	f7f7 f867 	bl	8000b04 <__aeabi_dcmpeq>
 8009a36:	2800      	cmp	r0, #0
 8009a38:	f43f aebb 	beq.w	80097b2 <_dtoa_r+0x472>
 8009a3c:	e6f0      	b.n	8009820 <_dtoa_r+0x4e0>
 8009a3e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8009a40:	2a00      	cmp	r2, #0
 8009a42:	f000 80db 	beq.w	8009bfc <_dtoa_r+0x8bc>
 8009a46:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009a48:	2a01      	cmp	r2, #1
 8009a4a:	f300 80bf 	bgt.w	8009bcc <_dtoa_r+0x88c>
 8009a4e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8009a50:	2a00      	cmp	r2, #0
 8009a52:	f000 80b7 	beq.w	8009bc4 <_dtoa_r+0x884>
 8009a56:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8009a5a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8009a5c:	4646      	mov	r6, r8
 8009a5e:	9a08      	ldr	r2, [sp, #32]
 8009a60:	2101      	movs	r1, #1
 8009a62:	4658      	mov	r0, fp
 8009a64:	4498      	add	r8, r3
 8009a66:	441a      	add	r2, r3
 8009a68:	9208      	str	r2, [sp, #32]
 8009a6a:	f000 fc6d 	bl	800a348 <__i2b>
 8009a6e:	4605      	mov	r5, r0
 8009a70:	b15e      	cbz	r6, 8009a8a <_dtoa_r+0x74a>
 8009a72:	9b08      	ldr	r3, [sp, #32]
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	dd08      	ble.n	8009a8a <_dtoa_r+0x74a>
 8009a78:	42b3      	cmp	r3, r6
 8009a7a:	9a08      	ldr	r2, [sp, #32]
 8009a7c:	bfa8      	it	ge
 8009a7e:	4633      	movge	r3, r6
 8009a80:	eba8 0803 	sub.w	r8, r8, r3
 8009a84:	1af6      	subs	r6, r6, r3
 8009a86:	1ad3      	subs	r3, r2, r3
 8009a88:	9308      	str	r3, [sp, #32]
 8009a8a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009a8c:	b1f3      	cbz	r3, 8009acc <_dtoa_r+0x78c>
 8009a8e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	f000 80b7 	beq.w	8009c04 <_dtoa_r+0x8c4>
 8009a96:	b18c      	cbz	r4, 8009abc <_dtoa_r+0x77c>
 8009a98:	4629      	mov	r1, r5
 8009a9a:	4622      	mov	r2, r4
 8009a9c:	4658      	mov	r0, fp
 8009a9e:	f000 fd13 	bl	800a4c8 <__pow5mult>
 8009aa2:	464a      	mov	r2, r9
 8009aa4:	4601      	mov	r1, r0
 8009aa6:	4605      	mov	r5, r0
 8009aa8:	4658      	mov	r0, fp
 8009aaa:	f000 fc63 	bl	800a374 <__multiply>
 8009aae:	4649      	mov	r1, r9
 8009ab0:	9004      	str	r0, [sp, #16]
 8009ab2:	4658      	mov	r0, fp
 8009ab4:	f000 fb48 	bl	800a148 <_Bfree>
 8009ab8:	9b04      	ldr	r3, [sp, #16]
 8009aba:	4699      	mov	r9, r3
 8009abc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009abe:	1b1a      	subs	r2, r3, r4
 8009ac0:	d004      	beq.n	8009acc <_dtoa_r+0x78c>
 8009ac2:	4649      	mov	r1, r9
 8009ac4:	4658      	mov	r0, fp
 8009ac6:	f000 fcff 	bl	800a4c8 <__pow5mult>
 8009aca:	4681      	mov	r9, r0
 8009acc:	2101      	movs	r1, #1
 8009ace:	4658      	mov	r0, fp
 8009ad0:	f000 fc3a 	bl	800a348 <__i2b>
 8009ad4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009ad6:	4604      	mov	r4, r0
 8009ad8:	2b00      	cmp	r3, #0
 8009ada:	f000 81cf 	beq.w	8009e7c <_dtoa_r+0xb3c>
 8009ade:	461a      	mov	r2, r3
 8009ae0:	4601      	mov	r1, r0
 8009ae2:	4658      	mov	r0, fp
 8009ae4:	f000 fcf0 	bl	800a4c8 <__pow5mult>
 8009ae8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009aea:	4604      	mov	r4, r0
 8009aec:	2b01      	cmp	r3, #1
 8009aee:	f300 8095 	bgt.w	8009c1c <_dtoa_r+0x8dc>
 8009af2:	9b02      	ldr	r3, [sp, #8]
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	f040 8087 	bne.w	8009c08 <_dtoa_r+0x8c8>
 8009afa:	9b03      	ldr	r3, [sp, #12]
 8009afc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009b00:	2b00      	cmp	r3, #0
 8009b02:	f040 8089 	bne.w	8009c18 <_dtoa_r+0x8d8>
 8009b06:	9b03      	ldr	r3, [sp, #12]
 8009b08:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8009b0c:	0d1b      	lsrs	r3, r3, #20
 8009b0e:	051b      	lsls	r3, r3, #20
 8009b10:	b12b      	cbz	r3, 8009b1e <_dtoa_r+0x7de>
 8009b12:	9b08      	ldr	r3, [sp, #32]
 8009b14:	f108 0801 	add.w	r8, r8, #1
 8009b18:	3301      	adds	r3, #1
 8009b1a:	9308      	str	r3, [sp, #32]
 8009b1c:	2301      	movs	r3, #1
 8009b1e:	930a      	str	r3, [sp, #40]	@ 0x28
 8009b20:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009b22:	2b00      	cmp	r3, #0
 8009b24:	f000 81b0 	beq.w	8009e88 <_dtoa_r+0xb48>
 8009b28:	6923      	ldr	r3, [r4, #16]
 8009b2a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009b2e:	6918      	ldr	r0, [r3, #16]
 8009b30:	f000 fbbe 	bl	800a2b0 <__hi0bits>
 8009b34:	f1c0 0020 	rsb	r0, r0, #32
 8009b38:	9b08      	ldr	r3, [sp, #32]
 8009b3a:	4418      	add	r0, r3
 8009b3c:	f010 001f 	ands.w	r0, r0, #31
 8009b40:	d077      	beq.n	8009c32 <_dtoa_r+0x8f2>
 8009b42:	f1c0 0320 	rsb	r3, r0, #32
 8009b46:	2b04      	cmp	r3, #4
 8009b48:	dd6b      	ble.n	8009c22 <_dtoa_r+0x8e2>
 8009b4a:	f1c0 001c 	rsb	r0, r0, #28
 8009b4e:	9b08      	ldr	r3, [sp, #32]
 8009b50:	4480      	add	r8, r0
 8009b52:	4403      	add	r3, r0
 8009b54:	4406      	add	r6, r0
 8009b56:	9308      	str	r3, [sp, #32]
 8009b58:	f1b8 0f00 	cmp.w	r8, #0
 8009b5c:	dd05      	ble.n	8009b6a <_dtoa_r+0x82a>
 8009b5e:	4649      	mov	r1, r9
 8009b60:	4642      	mov	r2, r8
 8009b62:	4658      	mov	r0, fp
 8009b64:	f000 fd0a 	bl	800a57c <__lshift>
 8009b68:	4681      	mov	r9, r0
 8009b6a:	9b08      	ldr	r3, [sp, #32]
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	dd05      	ble.n	8009b7c <_dtoa_r+0x83c>
 8009b70:	4621      	mov	r1, r4
 8009b72:	461a      	mov	r2, r3
 8009b74:	4658      	mov	r0, fp
 8009b76:	f000 fd01 	bl	800a57c <__lshift>
 8009b7a:	4604      	mov	r4, r0
 8009b7c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	d059      	beq.n	8009c36 <_dtoa_r+0x8f6>
 8009b82:	4621      	mov	r1, r4
 8009b84:	4648      	mov	r0, r9
 8009b86:	f000 fd65 	bl	800a654 <__mcmp>
 8009b8a:	2800      	cmp	r0, #0
 8009b8c:	da53      	bge.n	8009c36 <_dtoa_r+0x8f6>
 8009b8e:	1e7b      	subs	r3, r7, #1
 8009b90:	4649      	mov	r1, r9
 8009b92:	220a      	movs	r2, #10
 8009b94:	4658      	mov	r0, fp
 8009b96:	9304      	str	r3, [sp, #16]
 8009b98:	2300      	movs	r3, #0
 8009b9a:	f000 faf7 	bl	800a18c <__multadd>
 8009b9e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009ba0:	4681      	mov	r9, r0
 8009ba2:	2b00      	cmp	r3, #0
 8009ba4:	f000 8172 	beq.w	8009e8c <_dtoa_r+0xb4c>
 8009ba8:	2300      	movs	r3, #0
 8009baa:	4629      	mov	r1, r5
 8009bac:	220a      	movs	r2, #10
 8009bae:	4658      	mov	r0, fp
 8009bb0:	f000 faec 	bl	800a18c <__multadd>
 8009bb4:	9b00      	ldr	r3, [sp, #0]
 8009bb6:	4605      	mov	r5, r0
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	dc67      	bgt.n	8009c8c <_dtoa_r+0x94c>
 8009bbc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009bbe:	2b02      	cmp	r3, #2
 8009bc0:	dc41      	bgt.n	8009c46 <_dtoa_r+0x906>
 8009bc2:	e063      	b.n	8009c8c <_dtoa_r+0x94c>
 8009bc4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8009bc6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8009bca:	e746      	b.n	8009a5a <_dtoa_r+0x71a>
 8009bcc:	9b07      	ldr	r3, [sp, #28]
 8009bce:	1e5c      	subs	r4, r3, #1
 8009bd0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009bd2:	42a3      	cmp	r3, r4
 8009bd4:	bfb7      	itett	lt
 8009bd6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8009bd8:	1b1c      	subge	r4, r3, r4
 8009bda:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8009bdc:	1ae3      	sublt	r3, r4, r3
 8009bde:	bfbe      	ittt	lt
 8009be0:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8009be2:	2400      	movlt	r4, #0
 8009be4:	18d2      	addlt	r2, r2, r3
 8009be6:	9b07      	ldr	r3, [sp, #28]
 8009be8:	bfb8      	it	lt
 8009bea:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	bfb5      	itete	lt
 8009bf0:	eba8 0603 	sublt.w	r6, r8, r3
 8009bf4:	4646      	movge	r6, r8
 8009bf6:	2300      	movlt	r3, #0
 8009bf8:	9b07      	ldrge	r3, [sp, #28]
 8009bfa:	e730      	b.n	8009a5e <_dtoa_r+0x71e>
 8009bfc:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8009bfe:	4646      	mov	r6, r8
 8009c00:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8009c02:	e735      	b.n	8009a70 <_dtoa_r+0x730>
 8009c04:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009c06:	e75c      	b.n	8009ac2 <_dtoa_r+0x782>
 8009c08:	2300      	movs	r3, #0
 8009c0a:	e788      	b.n	8009b1e <_dtoa_r+0x7de>
 8009c0c:	3fe00000 	.word	0x3fe00000
 8009c10:	40240000 	.word	0x40240000
 8009c14:	40140000 	.word	0x40140000
 8009c18:	9b02      	ldr	r3, [sp, #8]
 8009c1a:	e780      	b.n	8009b1e <_dtoa_r+0x7de>
 8009c1c:	2300      	movs	r3, #0
 8009c1e:	930a      	str	r3, [sp, #40]	@ 0x28
 8009c20:	e782      	b.n	8009b28 <_dtoa_r+0x7e8>
 8009c22:	d099      	beq.n	8009b58 <_dtoa_r+0x818>
 8009c24:	331c      	adds	r3, #28
 8009c26:	9a08      	ldr	r2, [sp, #32]
 8009c28:	441a      	add	r2, r3
 8009c2a:	4498      	add	r8, r3
 8009c2c:	441e      	add	r6, r3
 8009c2e:	9208      	str	r2, [sp, #32]
 8009c30:	e792      	b.n	8009b58 <_dtoa_r+0x818>
 8009c32:	4603      	mov	r3, r0
 8009c34:	e7f6      	b.n	8009c24 <_dtoa_r+0x8e4>
 8009c36:	9b07      	ldr	r3, [sp, #28]
 8009c38:	9704      	str	r7, [sp, #16]
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	dc20      	bgt.n	8009c80 <_dtoa_r+0x940>
 8009c3e:	9300      	str	r3, [sp, #0]
 8009c40:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009c42:	2b02      	cmp	r3, #2
 8009c44:	dd1e      	ble.n	8009c84 <_dtoa_r+0x944>
 8009c46:	9b00      	ldr	r3, [sp, #0]
 8009c48:	2b00      	cmp	r3, #0
 8009c4a:	f47f aec0 	bne.w	80099ce <_dtoa_r+0x68e>
 8009c4e:	4621      	mov	r1, r4
 8009c50:	2205      	movs	r2, #5
 8009c52:	4658      	mov	r0, fp
 8009c54:	f000 fa9a 	bl	800a18c <__multadd>
 8009c58:	4601      	mov	r1, r0
 8009c5a:	4604      	mov	r4, r0
 8009c5c:	4648      	mov	r0, r9
 8009c5e:	f000 fcf9 	bl	800a654 <__mcmp>
 8009c62:	2800      	cmp	r0, #0
 8009c64:	f77f aeb3 	ble.w	80099ce <_dtoa_r+0x68e>
 8009c68:	2331      	movs	r3, #49	@ 0x31
 8009c6a:	4656      	mov	r6, sl
 8009c6c:	f806 3b01 	strb.w	r3, [r6], #1
 8009c70:	9b04      	ldr	r3, [sp, #16]
 8009c72:	3301      	adds	r3, #1
 8009c74:	9304      	str	r3, [sp, #16]
 8009c76:	e6ae      	b.n	80099d6 <_dtoa_r+0x696>
 8009c78:	9c07      	ldr	r4, [sp, #28]
 8009c7a:	9704      	str	r7, [sp, #16]
 8009c7c:	4625      	mov	r5, r4
 8009c7e:	e7f3      	b.n	8009c68 <_dtoa_r+0x928>
 8009c80:	9b07      	ldr	r3, [sp, #28]
 8009c82:	9300      	str	r3, [sp, #0]
 8009c84:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	f000 8104 	beq.w	8009e94 <_dtoa_r+0xb54>
 8009c8c:	2e00      	cmp	r6, #0
 8009c8e:	dd05      	ble.n	8009c9c <_dtoa_r+0x95c>
 8009c90:	4629      	mov	r1, r5
 8009c92:	4632      	mov	r2, r6
 8009c94:	4658      	mov	r0, fp
 8009c96:	f000 fc71 	bl	800a57c <__lshift>
 8009c9a:	4605      	mov	r5, r0
 8009c9c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009c9e:	2b00      	cmp	r3, #0
 8009ca0:	d05a      	beq.n	8009d58 <_dtoa_r+0xa18>
 8009ca2:	6869      	ldr	r1, [r5, #4]
 8009ca4:	4658      	mov	r0, fp
 8009ca6:	f000 fa0f 	bl	800a0c8 <_Balloc>
 8009caa:	4606      	mov	r6, r0
 8009cac:	b928      	cbnz	r0, 8009cba <_dtoa_r+0x97a>
 8009cae:	4b84      	ldr	r3, [pc, #528]	@ (8009ec0 <_dtoa_r+0xb80>)
 8009cb0:	4602      	mov	r2, r0
 8009cb2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8009cb6:	f7ff bb5a 	b.w	800936e <_dtoa_r+0x2e>
 8009cba:	692a      	ldr	r2, [r5, #16]
 8009cbc:	f105 010c 	add.w	r1, r5, #12
 8009cc0:	300c      	adds	r0, #12
 8009cc2:	3202      	adds	r2, #2
 8009cc4:	0092      	lsls	r2, r2, #2
 8009cc6:	f7ff fa9a 	bl	80091fe <memcpy>
 8009cca:	2201      	movs	r2, #1
 8009ccc:	4631      	mov	r1, r6
 8009cce:	4658      	mov	r0, fp
 8009cd0:	f000 fc54 	bl	800a57c <__lshift>
 8009cd4:	f10a 0301 	add.w	r3, sl, #1
 8009cd8:	462f      	mov	r7, r5
 8009cda:	4605      	mov	r5, r0
 8009cdc:	9307      	str	r3, [sp, #28]
 8009cde:	9b00      	ldr	r3, [sp, #0]
 8009ce0:	4453      	add	r3, sl
 8009ce2:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009ce4:	9b02      	ldr	r3, [sp, #8]
 8009ce6:	f003 0301 	and.w	r3, r3, #1
 8009cea:	930a      	str	r3, [sp, #40]	@ 0x28
 8009cec:	9b07      	ldr	r3, [sp, #28]
 8009cee:	4621      	mov	r1, r4
 8009cf0:	4648      	mov	r0, r9
 8009cf2:	3b01      	subs	r3, #1
 8009cf4:	9300      	str	r3, [sp, #0]
 8009cf6:	f7ff fa95 	bl	8009224 <quorem>
 8009cfa:	4639      	mov	r1, r7
 8009cfc:	9002      	str	r0, [sp, #8]
 8009cfe:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8009d02:	4648      	mov	r0, r9
 8009d04:	f000 fca6 	bl	800a654 <__mcmp>
 8009d08:	462a      	mov	r2, r5
 8009d0a:	9008      	str	r0, [sp, #32]
 8009d0c:	4621      	mov	r1, r4
 8009d0e:	4658      	mov	r0, fp
 8009d10:	f000 fcbc 	bl	800a68c <__mdiff>
 8009d14:	68c2      	ldr	r2, [r0, #12]
 8009d16:	4606      	mov	r6, r0
 8009d18:	bb02      	cbnz	r2, 8009d5c <_dtoa_r+0xa1c>
 8009d1a:	4601      	mov	r1, r0
 8009d1c:	4648      	mov	r0, r9
 8009d1e:	f000 fc99 	bl	800a654 <__mcmp>
 8009d22:	4602      	mov	r2, r0
 8009d24:	4631      	mov	r1, r6
 8009d26:	4658      	mov	r0, fp
 8009d28:	920e      	str	r2, [sp, #56]	@ 0x38
 8009d2a:	f000 fa0d 	bl	800a148 <_Bfree>
 8009d2e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009d30:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009d32:	9e07      	ldr	r6, [sp, #28]
 8009d34:	ea43 0102 	orr.w	r1, r3, r2
 8009d38:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009d3a:	4319      	orrs	r1, r3
 8009d3c:	d110      	bne.n	8009d60 <_dtoa_r+0xa20>
 8009d3e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8009d42:	d029      	beq.n	8009d98 <_dtoa_r+0xa58>
 8009d44:	9b08      	ldr	r3, [sp, #32]
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	dd02      	ble.n	8009d50 <_dtoa_r+0xa10>
 8009d4a:	9b02      	ldr	r3, [sp, #8]
 8009d4c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8009d50:	9b00      	ldr	r3, [sp, #0]
 8009d52:	f883 8000 	strb.w	r8, [r3]
 8009d56:	e63f      	b.n	80099d8 <_dtoa_r+0x698>
 8009d58:	4628      	mov	r0, r5
 8009d5a:	e7bb      	b.n	8009cd4 <_dtoa_r+0x994>
 8009d5c:	2201      	movs	r2, #1
 8009d5e:	e7e1      	b.n	8009d24 <_dtoa_r+0x9e4>
 8009d60:	9b08      	ldr	r3, [sp, #32]
 8009d62:	2b00      	cmp	r3, #0
 8009d64:	db04      	blt.n	8009d70 <_dtoa_r+0xa30>
 8009d66:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009d68:	430b      	orrs	r3, r1
 8009d6a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009d6c:	430b      	orrs	r3, r1
 8009d6e:	d120      	bne.n	8009db2 <_dtoa_r+0xa72>
 8009d70:	2a00      	cmp	r2, #0
 8009d72:	dded      	ble.n	8009d50 <_dtoa_r+0xa10>
 8009d74:	4649      	mov	r1, r9
 8009d76:	2201      	movs	r2, #1
 8009d78:	4658      	mov	r0, fp
 8009d7a:	f000 fbff 	bl	800a57c <__lshift>
 8009d7e:	4621      	mov	r1, r4
 8009d80:	4681      	mov	r9, r0
 8009d82:	f000 fc67 	bl	800a654 <__mcmp>
 8009d86:	2800      	cmp	r0, #0
 8009d88:	dc03      	bgt.n	8009d92 <_dtoa_r+0xa52>
 8009d8a:	d1e1      	bne.n	8009d50 <_dtoa_r+0xa10>
 8009d8c:	f018 0f01 	tst.w	r8, #1
 8009d90:	d0de      	beq.n	8009d50 <_dtoa_r+0xa10>
 8009d92:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8009d96:	d1d8      	bne.n	8009d4a <_dtoa_r+0xa0a>
 8009d98:	2339      	movs	r3, #57	@ 0x39
 8009d9a:	9a00      	ldr	r2, [sp, #0]
 8009d9c:	7013      	strb	r3, [r2, #0]
 8009d9e:	4633      	mov	r3, r6
 8009da0:	461e      	mov	r6, r3
 8009da2:	3b01      	subs	r3, #1
 8009da4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8009da8:	2a39      	cmp	r2, #57	@ 0x39
 8009daa:	d052      	beq.n	8009e52 <_dtoa_r+0xb12>
 8009dac:	3201      	adds	r2, #1
 8009dae:	701a      	strb	r2, [r3, #0]
 8009db0:	e612      	b.n	80099d8 <_dtoa_r+0x698>
 8009db2:	2a00      	cmp	r2, #0
 8009db4:	dd07      	ble.n	8009dc6 <_dtoa_r+0xa86>
 8009db6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8009dba:	d0ed      	beq.n	8009d98 <_dtoa_r+0xa58>
 8009dbc:	f108 0301 	add.w	r3, r8, #1
 8009dc0:	9a00      	ldr	r2, [sp, #0]
 8009dc2:	7013      	strb	r3, [r2, #0]
 8009dc4:	e608      	b.n	80099d8 <_dtoa_r+0x698>
 8009dc6:	9b07      	ldr	r3, [sp, #28]
 8009dc8:	9a07      	ldr	r2, [sp, #28]
 8009dca:	f803 8c01 	strb.w	r8, [r3, #-1]
 8009dce:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009dd0:	4293      	cmp	r3, r2
 8009dd2:	d028      	beq.n	8009e26 <_dtoa_r+0xae6>
 8009dd4:	4649      	mov	r1, r9
 8009dd6:	2300      	movs	r3, #0
 8009dd8:	220a      	movs	r2, #10
 8009dda:	4658      	mov	r0, fp
 8009ddc:	f000 f9d6 	bl	800a18c <__multadd>
 8009de0:	42af      	cmp	r7, r5
 8009de2:	4681      	mov	r9, r0
 8009de4:	f04f 0300 	mov.w	r3, #0
 8009de8:	f04f 020a 	mov.w	r2, #10
 8009dec:	4639      	mov	r1, r7
 8009dee:	4658      	mov	r0, fp
 8009df0:	d107      	bne.n	8009e02 <_dtoa_r+0xac2>
 8009df2:	f000 f9cb 	bl	800a18c <__multadd>
 8009df6:	4607      	mov	r7, r0
 8009df8:	4605      	mov	r5, r0
 8009dfa:	9b07      	ldr	r3, [sp, #28]
 8009dfc:	3301      	adds	r3, #1
 8009dfe:	9307      	str	r3, [sp, #28]
 8009e00:	e774      	b.n	8009cec <_dtoa_r+0x9ac>
 8009e02:	f000 f9c3 	bl	800a18c <__multadd>
 8009e06:	4629      	mov	r1, r5
 8009e08:	4607      	mov	r7, r0
 8009e0a:	2300      	movs	r3, #0
 8009e0c:	220a      	movs	r2, #10
 8009e0e:	4658      	mov	r0, fp
 8009e10:	f000 f9bc 	bl	800a18c <__multadd>
 8009e14:	4605      	mov	r5, r0
 8009e16:	e7f0      	b.n	8009dfa <_dtoa_r+0xaba>
 8009e18:	9b00      	ldr	r3, [sp, #0]
 8009e1a:	2700      	movs	r7, #0
 8009e1c:	2b00      	cmp	r3, #0
 8009e1e:	bfcc      	ite	gt
 8009e20:	461e      	movgt	r6, r3
 8009e22:	2601      	movle	r6, #1
 8009e24:	4456      	add	r6, sl
 8009e26:	4649      	mov	r1, r9
 8009e28:	2201      	movs	r2, #1
 8009e2a:	4658      	mov	r0, fp
 8009e2c:	f000 fba6 	bl	800a57c <__lshift>
 8009e30:	4621      	mov	r1, r4
 8009e32:	4681      	mov	r9, r0
 8009e34:	f000 fc0e 	bl	800a654 <__mcmp>
 8009e38:	2800      	cmp	r0, #0
 8009e3a:	dcb0      	bgt.n	8009d9e <_dtoa_r+0xa5e>
 8009e3c:	d102      	bne.n	8009e44 <_dtoa_r+0xb04>
 8009e3e:	f018 0f01 	tst.w	r8, #1
 8009e42:	d1ac      	bne.n	8009d9e <_dtoa_r+0xa5e>
 8009e44:	4633      	mov	r3, r6
 8009e46:	461e      	mov	r6, r3
 8009e48:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009e4c:	2a30      	cmp	r2, #48	@ 0x30
 8009e4e:	d0fa      	beq.n	8009e46 <_dtoa_r+0xb06>
 8009e50:	e5c2      	b.n	80099d8 <_dtoa_r+0x698>
 8009e52:	459a      	cmp	sl, r3
 8009e54:	d1a4      	bne.n	8009da0 <_dtoa_r+0xa60>
 8009e56:	9b04      	ldr	r3, [sp, #16]
 8009e58:	3301      	adds	r3, #1
 8009e5a:	9304      	str	r3, [sp, #16]
 8009e5c:	2331      	movs	r3, #49	@ 0x31
 8009e5e:	f88a 3000 	strb.w	r3, [sl]
 8009e62:	e5b9      	b.n	80099d8 <_dtoa_r+0x698>
 8009e64:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009e66:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8009ec4 <_dtoa_r+0xb84>
 8009e6a:	b11b      	cbz	r3, 8009e74 <_dtoa_r+0xb34>
 8009e6c:	f10a 0308 	add.w	r3, sl, #8
 8009e70:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8009e72:	6013      	str	r3, [r2, #0]
 8009e74:	4650      	mov	r0, sl
 8009e76:	b019      	add	sp, #100	@ 0x64
 8009e78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e7c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009e7e:	2b01      	cmp	r3, #1
 8009e80:	f77f ae37 	ble.w	8009af2 <_dtoa_r+0x7b2>
 8009e84:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009e86:	930a      	str	r3, [sp, #40]	@ 0x28
 8009e88:	2001      	movs	r0, #1
 8009e8a:	e655      	b.n	8009b38 <_dtoa_r+0x7f8>
 8009e8c:	9b00      	ldr	r3, [sp, #0]
 8009e8e:	2b00      	cmp	r3, #0
 8009e90:	f77f aed6 	ble.w	8009c40 <_dtoa_r+0x900>
 8009e94:	4656      	mov	r6, sl
 8009e96:	4621      	mov	r1, r4
 8009e98:	4648      	mov	r0, r9
 8009e9a:	f7ff f9c3 	bl	8009224 <quorem>
 8009e9e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8009ea2:	9b00      	ldr	r3, [sp, #0]
 8009ea4:	f806 8b01 	strb.w	r8, [r6], #1
 8009ea8:	eba6 020a 	sub.w	r2, r6, sl
 8009eac:	4293      	cmp	r3, r2
 8009eae:	ddb3      	ble.n	8009e18 <_dtoa_r+0xad8>
 8009eb0:	4649      	mov	r1, r9
 8009eb2:	2300      	movs	r3, #0
 8009eb4:	220a      	movs	r2, #10
 8009eb6:	4658      	mov	r0, fp
 8009eb8:	f000 f968 	bl	800a18c <__multadd>
 8009ebc:	4681      	mov	r9, r0
 8009ebe:	e7ea      	b.n	8009e96 <_dtoa_r+0xb56>
 8009ec0:	0800cb5d 	.word	0x0800cb5d
 8009ec4:	0800cae1 	.word	0x0800cae1

08009ec8 <_free_r>:
 8009ec8:	b538      	push	{r3, r4, r5, lr}
 8009eca:	4605      	mov	r5, r0
 8009ecc:	2900      	cmp	r1, #0
 8009ece:	d041      	beq.n	8009f54 <_free_r+0x8c>
 8009ed0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009ed4:	1f0c      	subs	r4, r1, #4
 8009ed6:	2b00      	cmp	r3, #0
 8009ed8:	bfb8      	it	lt
 8009eda:	18e4      	addlt	r4, r4, r3
 8009edc:	f000 f8e8 	bl	800a0b0 <__malloc_lock>
 8009ee0:	4a1d      	ldr	r2, [pc, #116]	@ (8009f58 <_free_r+0x90>)
 8009ee2:	6813      	ldr	r3, [r2, #0]
 8009ee4:	b933      	cbnz	r3, 8009ef4 <_free_r+0x2c>
 8009ee6:	6063      	str	r3, [r4, #4]
 8009ee8:	6014      	str	r4, [r2, #0]
 8009eea:	4628      	mov	r0, r5
 8009eec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009ef0:	f000 b8e4 	b.w	800a0bc <__malloc_unlock>
 8009ef4:	42a3      	cmp	r3, r4
 8009ef6:	d908      	bls.n	8009f0a <_free_r+0x42>
 8009ef8:	6820      	ldr	r0, [r4, #0]
 8009efa:	1821      	adds	r1, r4, r0
 8009efc:	428b      	cmp	r3, r1
 8009efe:	bf01      	itttt	eq
 8009f00:	6819      	ldreq	r1, [r3, #0]
 8009f02:	685b      	ldreq	r3, [r3, #4]
 8009f04:	1809      	addeq	r1, r1, r0
 8009f06:	6021      	streq	r1, [r4, #0]
 8009f08:	e7ed      	b.n	8009ee6 <_free_r+0x1e>
 8009f0a:	461a      	mov	r2, r3
 8009f0c:	685b      	ldr	r3, [r3, #4]
 8009f0e:	b10b      	cbz	r3, 8009f14 <_free_r+0x4c>
 8009f10:	42a3      	cmp	r3, r4
 8009f12:	d9fa      	bls.n	8009f0a <_free_r+0x42>
 8009f14:	6811      	ldr	r1, [r2, #0]
 8009f16:	1850      	adds	r0, r2, r1
 8009f18:	42a0      	cmp	r0, r4
 8009f1a:	d10b      	bne.n	8009f34 <_free_r+0x6c>
 8009f1c:	6820      	ldr	r0, [r4, #0]
 8009f1e:	4401      	add	r1, r0
 8009f20:	1850      	adds	r0, r2, r1
 8009f22:	6011      	str	r1, [r2, #0]
 8009f24:	4283      	cmp	r3, r0
 8009f26:	d1e0      	bne.n	8009eea <_free_r+0x22>
 8009f28:	6818      	ldr	r0, [r3, #0]
 8009f2a:	685b      	ldr	r3, [r3, #4]
 8009f2c:	4408      	add	r0, r1
 8009f2e:	6053      	str	r3, [r2, #4]
 8009f30:	6010      	str	r0, [r2, #0]
 8009f32:	e7da      	b.n	8009eea <_free_r+0x22>
 8009f34:	d902      	bls.n	8009f3c <_free_r+0x74>
 8009f36:	230c      	movs	r3, #12
 8009f38:	602b      	str	r3, [r5, #0]
 8009f3a:	e7d6      	b.n	8009eea <_free_r+0x22>
 8009f3c:	6820      	ldr	r0, [r4, #0]
 8009f3e:	1821      	adds	r1, r4, r0
 8009f40:	428b      	cmp	r3, r1
 8009f42:	bf02      	ittt	eq
 8009f44:	6819      	ldreq	r1, [r3, #0]
 8009f46:	685b      	ldreq	r3, [r3, #4]
 8009f48:	1809      	addeq	r1, r1, r0
 8009f4a:	6063      	str	r3, [r4, #4]
 8009f4c:	bf08      	it	eq
 8009f4e:	6021      	streq	r1, [r4, #0]
 8009f50:	6054      	str	r4, [r2, #4]
 8009f52:	e7ca      	b.n	8009eea <_free_r+0x22>
 8009f54:	bd38      	pop	{r3, r4, r5, pc}
 8009f56:	bf00      	nop
 8009f58:	200005e8 	.word	0x200005e8

08009f5c <malloc>:
 8009f5c:	4b02      	ldr	r3, [pc, #8]	@ (8009f68 <malloc+0xc>)
 8009f5e:	4601      	mov	r1, r0
 8009f60:	6818      	ldr	r0, [r3, #0]
 8009f62:	f000 b825 	b.w	8009fb0 <_malloc_r>
 8009f66:	bf00      	nop
 8009f68:	20000018 	.word	0x20000018

08009f6c <sbrk_aligned>:
 8009f6c:	b570      	push	{r4, r5, r6, lr}
 8009f6e:	4e0f      	ldr	r6, [pc, #60]	@ (8009fac <sbrk_aligned+0x40>)
 8009f70:	460c      	mov	r4, r1
 8009f72:	4605      	mov	r5, r0
 8009f74:	6831      	ldr	r1, [r6, #0]
 8009f76:	b911      	cbnz	r1, 8009f7e <sbrk_aligned+0x12>
 8009f78:	f001 ffee 	bl	800bf58 <_sbrk_r>
 8009f7c:	6030      	str	r0, [r6, #0]
 8009f7e:	4621      	mov	r1, r4
 8009f80:	4628      	mov	r0, r5
 8009f82:	f001 ffe9 	bl	800bf58 <_sbrk_r>
 8009f86:	1c43      	adds	r3, r0, #1
 8009f88:	d103      	bne.n	8009f92 <sbrk_aligned+0x26>
 8009f8a:	f04f 34ff 	mov.w	r4, #4294967295
 8009f8e:	4620      	mov	r0, r4
 8009f90:	bd70      	pop	{r4, r5, r6, pc}
 8009f92:	1cc4      	adds	r4, r0, #3
 8009f94:	f024 0403 	bic.w	r4, r4, #3
 8009f98:	42a0      	cmp	r0, r4
 8009f9a:	d0f8      	beq.n	8009f8e <sbrk_aligned+0x22>
 8009f9c:	1a21      	subs	r1, r4, r0
 8009f9e:	4628      	mov	r0, r5
 8009fa0:	f001 ffda 	bl	800bf58 <_sbrk_r>
 8009fa4:	3001      	adds	r0, #1
 8009fa6:	d1f2      	bne.n	8009f8e <sbrk_aligned+0x22>
 8009fa8:	e7ef      	b.n	8009f8a <sbrk_aligned+0x1e>
 8009faa:	bf00      	nop
 8009fac:	200005e4 	.word	0x200005e4

08009fb0 <_malloc_r>:
 8009fb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009fb4:	1ccd      	adds	r5, r1, #3
 8009fb6:	4606      	mov	r6, r0
 8009fb8:	f025 0503 	bic.w	r5, r5, #3
 8009fbc:	3508      	adds	r5, #8
 8009fbe:	2d0c      	cmp	r5, #12
 8009fc0:	bf38      	it	cc
 8009fc2:	250c      	movcc	r5, #12
 8009fc4:	2d00      	cmp	r5, #0
 8009fc6:	db01      	blt.n	8009fcc <_malloc_r+0x1c>
 8009fc8:	42a9      	cmp	r1, r5
 8009fca:	d904      	bls.n	8009fd6 <_malloc_r+0x26>
 8009fcc:	230c      	movs	r3, #12
 8009fce:	6033      	str	r3, [r6, #0]
 8009fd0:	2000      	movs	r0, #0
 8009fd2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009fd6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a0ac <_malloc_r+0xfc>
 8009fda:	f000 f869 	bl	800a0b0 <__malloc_lock>
 8009fde:	f8d8 3000 	ldr.w	r3, [r8]
 8009fe2:	461c      	mov	r4, r3
 8009fe4:	bb44      	cbnz	r4, 800a038 <_malloc_r+0x88>
 8009fe6:	4629      	mov	r1, r5
 8009fe8:	4630      	mov	r0, r6
 8009fea:	f7ff ffbf 	bl	8009f6c <sbrk_aligned>
 8009fee:	1c43      	adds	r3, r0, #1
 8009ff0:	4604      	mov	r4, r0
 8009ff2:	d158      	bne.n	800a0a6 <_malloc_r+0xf6>
 8009ff4:	f8d8 4000 	ldr.w	r4, [r8]
 8009ff8:	4627      	mov	r7, r4
 8009ffa:	2f00      	cmp	r7, #0
 8009ffc:	d143      	bne.n	800a086 <_malloc_r+0xd6>
 8009ffe:	2c00      	cmp	r4, #0
 800a000:	d04b      	beq.n	800a09a <_malloc_r+0xea>
 800a002:	6823      	ldr	r3, [r4, #0]
 800a004:	4639      	mov	r1, r7
 800a006:	4630      	mov	r0, r6
 800a008:	eb04 0903 	add.w	r9, r4, r3
 800a00c:	f001 ffa4 	bl	800bf58 <_sbrk_r>
 800a010:	4581      	cmp	r9, r0
 800a012:	d142      	bne.n	800a09a <_malloc_r+0xea>
 800a014:	6821      	ldr	r1, [r4, #0]
 800a016:	4630      	mov	r0, r6
 800a018:	1a6d      	subs	r5, r5, r1
 800a01a:	4629      	mov	r1, r5
 800a01c:	f7ff ffa6 	bl	8009f6c <sbrk_aligned>
 800a020:	3001      	adds	r0, #1
 800a022:	d03a      	beq.n	800a09a <_malloc_r+0xea>
 800a024:	6823      	ldr	r3, [r4, #0]
 800a026:	442b      	add	r3, r5
 800a028:	6023      	str	r3, [r4, #0]
 800a02a:	f8d8 3000 	ldr.w	r3, [r8]
 800a02e:	685a      	ldr	r2, [r3, #4]
 800a030:	bb62      	cbnz	r2, 800a08c <_malloc_r+0xdc>
 800a032:	f8c8 7000 	str.w	r7, [r8]
 800a036:	e00f      	b.n	800a058 <_malloc_r+0xa8>
 800a038:	6822      	ldr	r2, [r4, #0]
 800a03a:	1b52      	subs	r2, r2, r5
 800a03c:	d420      	bmi.n	800a080 <_malloc_r+0xd0>
 800a03e:	2a0b      	cmp	r2, #11
 800a040:	d917      	bls.n	800a072 <_malloc_r+0xc2>
 800a042:	1961      	adds	r1, r4, r5
 800a044:	42a3      	cmp	r3, r4
 800a046:	6025      	str	r5, [r4, #0]
 800a048:	bf18      	it	ne
 800a04a:	6059      	strne	r1, [r3, #4]
 800a04c:	6863      	ldr	r3, [r4, #4]
 800a04e:	bf08      	it	eq
 800a050:	f8c8 1000 	streq.w	r1, [r8]
 800a054:	5162      	str	r2, [r4, r5]
 800a056:	604b      	str	r3, [r1, #4]
 800a058:	4630      	mov	r0, r6
 800a05a:	f000 f82f 	bl	800a0bc <__malloc_unlock>
 800a05e:	f104 000b 	add.w	r0, r4, #11
 800a062:	1d23      	adds	r3, r4, #4
 800a064:	f020 0007 	bic.w	r0, r0, #7
 800a068:	1ac2      	subs	r2, r0, r3
 800a06a:	bf1c      	itt	ne
 800a06c:	1a1b      	subne	r3, r3, r0
 800a06e:	50a3      	strne	r3, [r4, r2]
 800a070:	e7af      	b.n	8009fd2 <_malloc_r+0x22>
 800a072:	6862      	ldr	r2, [r4, #4]
 800a074:	42a3      	cmp	r3, r4
 800a076:	bf0c      	ite	eq
 800a078:	f8c8 2000 	streq.w	r2, [r8]
 800a07c:	605a      	strne	r2, [r3, #4]
 800a07e:	e7eb      	b.n	800a058 <_malloc_r+0xa8>
 800a080:	4623      	mov	r3, r4
 800a082:	6864      	ldr	r4, [r4, #4]
 800a084:	e7ae      	b.n	8009fe4 <_malloc_r+0x34>
 800a086:	463c      	mov	r4, r7
 800a088:	687f      	ldr	r7, [r7, #4]
 800a08a:	e7b6      	b.n	8009ffa <_malloc_r+0x4a>
 800a08c:	461a      	mov	r2, r3
 800a08e:	685b      	ldr	r3, [r3, #4]
 800a090:	42a3      	cmp	r3, r4
 800a092:	d1fb      	bne.n	800a08c <_malloc_r+0xdc>
 800a094:	2300      	movs	r3, #0
 800a096:	6053      	str	r3, [r2, #4]
 800a098:	e7de      	b.n	800a058 <_malloc_r+0xa8>
 800a09a:	230c      	movs	r3, #12
 800a09c:	4630      	mov	r0, r6
 800a09e:	6033      	str	r3, [r6, #0]
 800a0a0:	f000 f80c 	bl	800a0bc <__malloc_unlock>
 800a0a4:	e794      	b.n	8009fd0 <_malloc_r+0x20>
 800a0a6:	6005      	str	r5, [r0, #0]
 800a0a8:	e7d6      	b.n	800a058 <_malloc_r+0xa8>
 800a0aa:	bf00      	nop
 800a0ac:	200005e8 	.word	0x200005e8

0800a0b0 <__malloc_lock>:
 800a0b0:	4801      	ldr	r0, [pc, #4]	@ (800a0b8 <__malloc_lock+0x8>)
 800a0b2:	f7ff b894 	b.w	80091de <__retarget_lock_acquire_recursive>
 800a0b6:	bf00      	nop
 800a0b8:	200005e0 	.word	0x200005e0

0800a0bc <__malloc_unlock>:
 800a0bc:	4801      	ldr	r0, [pc, #4]	@ (800a0c4 <__malloc_unlock+0x8>)
 800a0be:	f7ff b88f 	b.w	80091e0 <__retarget_lock_release_recursive>
 800a0c2:	bf00      	nop
 800a0c4:	200005e0 	.word	0x200005e0

0800a0c8 <_Balloc>:
 800a0c8:	b570      	push	{r4, r5, r6, lr}
 800a0ca:	69c6      	ldr	r6, [r0, #28]
 800a0cc:	4604      	mov	r4, r0
 800a0ce:	460d      	mov	r5, r1
 800a0d0:	b976      	cbnz	r6, 800a0f0 <_Balloc+0x28>
 800a0d2:	2010      	movs	r0, #16
 800a0d4:	f7ff ff42 	bl	8009f5c <malloc>
 800a0d8:	4602      	mov	r2, r0
 800a0da:	61e0      	str	r0, [r4, #28]
 800a0dc:	b920      	cbnz	r0, 800a0e8 <_Balloc+0x20>
 800a0de:	4b18      	ldr	r3, [pc, #96]	@ (800a140 <_Balloc+0x78>)
 800a0e0:	216b      	movs	r1, #107	@ 0x6b
 800a0e2:	4818      	ldr	r0, [pc, #96]	@ (800a144 <_Balloc+0x7c>)
 800a0e4:	f001 ff50 	bl	800bf88 <__assert_func>
 800a0e8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a0ec:	6006      	str	r6, [r0, #0]
 800a0ee:	60c6      	str	r6, [r0, #12]
 800a0f0:	69e6      	ldr	r6, [r4, #28]
 800a0f2:	68f3      	ldr	r3, [r6, #12]
 800a0f4:	b183      	cbz	r3, 800a118 <_Balloc+0x50>
 800a0f6:	69e3      	ldr	r3, [r4, #28]
 800a0f8:	68db      	ldr	r3, [r3, #12]
 800a0fa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a0fe:	b9b8      	cbnz	r0, 800a130 <_Balloc+0x68>
 800a100:	2101      	movs	r1, #1
 800a102:	4620      	mov	r0, r4
 800a104:	fa01 f605 	lsl.w	r6, r1, r5
 800a108:	1d72      	adds	r2, r6, #5
 800a10a:	0092      	lsls	r2, r2, #2
 800a10c:	f001 ff5a 	bl	800bfc4 <_calloc_r>
 800a110:	b160      	cbz	r0, 800a12c <_Balloc+0x64>
 800a112:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a116:	e00e      	b.n	800a136 <_Balloc+0x6e>
 800a118:	2221      	movs	r2, #33	@ 0x21
 800a11a:	2104      	movs	r1, #4
 800a11c:	4620      	mov	r0, r4
 800a11e:	f001 ff51 	bl	800bfc4 <_calloc_r>
 800a122:	69e3      	ldr	r3, [r4, #28]
 800a124:	60f0      	str	r0, [r6, #12]
 800a126:	68db      	ldr	r3, [r3, #12]
 800a128:	2b00      	cmp	r3, #0
 800a12a:	d1e4      	bne.n	800a0f6 <_Balloc+0x2e>
 800a12c:	2000      	movs	r0, #0
 800a12e:	bd70      	pop	{r4, r5, r6, pc}
 800a130:	6802      	ldr	r2, [r0, #0]
 800a132:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a136:	2300      	movs	r3, #0
 800a138:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a13c:	e7f7      	b.n	800a12e <_Balloc+0x66>
 800a13e:	bf00      	nop
 800a140:	0800caee 	.word	0x0800caee
 800a144:	0800cb6e 	.word	0x0800cb6e

0800a148 <_Bfree>:
 800a148:	b570      	push	{r4, r5, r6, lr}
 800a14a:	69c6      	ldr	r6, [r0, #28]
 800a14c:	4605      	mov	r5, r0
 800a14e:	460c      	mov	r4, r1
 800a150:	b976      	cbnz	r6, 800a170 <_Bfree+0x28>
 800a152:	2010      	movs	r0, #16
 800a154:	f7ff ff02 	bl	8009f5c <malloc>
 800a158:	4602      	mov	r2, r0
 800a15a:	61e8      	str	r0, [r5, #28]
 800a15c:	b920      	cbnz	r0, 800a168 <_Bfree+0x20>
 800a15e:	4b09      	ldr	r3, [pc, #36]	@ (800a184 <_Bfree+0x3c>)
 800a160:	218f      	movs	r1, #143	@ 0x8f
 800a162:	4809      	ldr	r0, [pc, #36]	@ (800a188 <_Bfree+0x40>)
 800a164:	f001 ff10 	bl	800bf88 <__assert_func>
 800a168:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a16c:	6006      	str	r6, [r0, #0]
 800a16e:	60c6      	str	r6, [r0, #12]
 800a170:	b13c      	cbz	r4, 800a182 <_Bfree+0x3a>
 800a172:	69eb      	ldr	r3, [r5, #28]
 800a174:	6862      	ldr	r2, [r4, #4]
 800a176:	68db      	ldr	r3, [r3, #12]
 800a178:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a17c:	6021      	str	r1, [r4, #0]
 800a17e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a182:	bd70      	pop	{r4, r5, r6, pc}
 800a184:	0800caee 	.word	0x0800caee
 800a188:	0800cb6e 	.word	0x0800cb6e

0800a18c <__multadd>:
 800a18c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a190:	f101 0c14 	add.w	ip, r1, #20
 800a194:	4607      	mov	r7, r0
 800a196:	460c      	mov	r4, r1
 800a198:	461e      	mov	r6, r3
 800a19a:	690d      	ldr	r5, [r1, #16]
 800a19c:	2000      	movs	r0, #0
 800a19e:	f8dc 3000 	ldr.w	r3, [ip]
 800a1a2:	3001      	adds	r0, #1
 800a1a4:	b299      	uxth	r1, r3
 800a1a6:	4285      	cmp	r5, r0
 800a1a8:	fb02 6101 	mla	r1, r2, r1, r6
 800a1ac:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a1b0:	ea4f 4311 	mov.w	r3, r1, lsr #16
 800a1b4:	b289      	uxth	r1, r1
 800a1b6:	fb02 3306 	mla	r3, r2, r6, r3
 800a1ba:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a1be:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a1c2:	f84c 1b04 	str.w	r1, [ip], #4
 800a1c6:	dcea      	bgt.n	800a19e <__multadd+0x12>
 800a1c8:	b30e      	cbz	r6, 800a20e <__multadd+0x82>
 800a1ca:	68a3      	ldr	r3, [r4, #8]
 800a1cc:	42ab      	cmp	r3, r5
 800a1ce:	dc19      	bgt.n	800a204 <__multadd+0x78>
 800a1d0:	6861      	ldr	r1, [r4, #4]
 800a1d2:	4638      	mov	r0, r7
 800a1d4:	3101      	adds	r1, #1
 800a1d6:	f7ff ff77 	bl	800a0c8 <_Balloc>
 800a1da:	4680      	mov	r8, r0
 800a1dc:	b928      	cbnz	r0, 800a1ea <__multadd+0x5e>
 800a1de:	4602      	mov	r2, r0
 800a1e0:	4b0c      	ldr	r3, [pc, #48]	@ (800a214 <__multadd+0x88>)
 800a1e2:	21ba      	movs	r1, #186	@ 0xba
 800a1e4:	480c      	ldr	r0, [pc, #48]	@ (800a218 <__multadd+0x8c>)
 800a1e6:	f001 fecf 	bl	800bf88 <__assert_func>
 800a1ea:	6922      	ldr	r2, [r4, #16]
 800a1ec:	f104 010c 	add.w	r1, r4, #12
 800a1f0:	300c      	adds	r0, #12
 800a1f2:	3202      	adds	r2, #2
 800a1f4:	0092      	lsls	r2, r2, #2
 800a1f6:	f7ff f802 	bl	80091fe <memcpy>
 800a1fa:	4621      	mov	r1, r4
 800a1fc:	4644      	mov	r4, r8
 800a1fe:	4638      	mov	r0, r7
 800a200:	f7ff ffa2 	bl	800a148 <_Bfree>
 800a204:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a208:	3501      	adds	r5, #1
 800a20a:	615e      	str	r6, [r3, #20]
 800a20c:	6125      	str	r5, [r4, #16]
 800a20e:	4620      	mov	r0, r4
 800a210:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a214:	0800cb5d 	.word	0x0800cb5d
 800a218:	0800cb6e 	.word	0x0800cb6e

0800a21c <__s2b>:
 800a21c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a220:	4615      	mov	r5, r2
 800a222:	461f      	mov	r7, r3
 800a224:	2209      	movs	r2, #9
 800a226:	3308      	adds	r3, #8
 800a228:	460c      	mov	r4, r1
 800a22a:	4606      	mov	r6, r0
 800a22c:	2100      	movs	r1, #0
 800a22e:	fb93 f3f2 	sdiv	r3, r3, r2
 800a232:	2201      	movs	r2, #1
 800a234:	429a      	cmp	r2, r3
 800a236:	db09      	blt.n	800a24c <__s2b+0x30>
 800a238:	4630      	mov	r0, r6
 800a23a:	f7ff ff45 	bl	800a0c8 <_Balloc>
 800a23e:	b940      	cbnz	r0, 800a252 <__s2b+0x36>
 800a240:	4602      	mov	r2, r0
 800a242:	4b19      	ldr	r3, [pc, #100]	@ (800a2a8 <__s2b+0x8c>)
 800a244:	21d3      	movs	r1, #211	@ 0xd3
 800a246:	4819      	ldr	r0, [pc, #100]	@ (800a2ac <__s2b+0x90>)
 800a248:	f001 fe9e 	bl	800bf88 <__assert_func>
 800a24c:	0052      	lsls	r2, r2, #1
 800a24e:	3101      	adds	r1, #1
 800a250:	e7f0      	b.n	800a234 <__s2b+0x18>
 800a252:	9b08      	ldr	r3, [sp, #32]
 800a254:	2d09      	cmp	r5, #9
 800a256:	6143      	str	r3, [r0, #20]
 800a258:	f04f 0301 	mov.w	r3, #1
 800a25c:	6103      	str	r3, [r0, #16]
 800a25e:	dd16      	ble.n	800a28e <__s2b+0x72>
 800a260:	f104 0909 	add.w	r9, r4, #9
 800a264:	442c      	add	r4, r5
 800a266:	46c8      	mov	r8, r9
 800a268:	f818 3b01 	ldrb.w	r3, [r8], #1
 800a26c:	4601      	mov	r1, r0
 800a26e:	220a      	movs	r2, #10
 800a270:	4630      	mov	r0, r6
 800a272:	3b30      	subs	r3, #48	@ 0x30
 800a274:	f7ff ff8a 	bl	800a18c <__multadd>
 800a278:	45a0      	cmp	r8, r4
 800a27a:	d1f5      	bne.n	800a268 <__s2b+0x4c>
 800a27c:	f1a5 0408 	sub.w	r4, r5, #8
 800a280:	444c      	add	r4, r9
 800a282:	1b2d      	subs	r5, r5, r4
 800a284:	1963      	adds	r3, r4, r5
 800a286:	42bb      	cmp	r3, r7
 800a288:	db04      	blt.n	800a294 <__s2b+0x78>
 800a28a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a28e:	340a      	adds	r4, #10
 800a290:	2509      	movs	r5, #9
 800a292:	e7f6      	b.n	800a282 <__s2b+0x66>
 800a294:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a298:	4601      	mov	r1, r0
 800a29a:	220a      	movs	r2, #10
 800a29c:	4630      	mov	r0, r6
 800a29e:	3b30      	subs	r3, #48	@ 0x30
 800a2a0:	f7ff ff74 	bl	800a18c <__multadd>
 800a2a4:	e7ee      	b.n	800a284 <__s2b+0x68>
 800a2a6:	bf00      	nop
 800a2a8:	0800cb5d 	.word	0x0800cb5d
 800a2ac:	0800cb6e 	.word	0x0800cb6e

0800a2b0 <__hi0bits>:
 800a2b0:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800a2b4:	4603      	mov	r3, r0
 800a2b6:	bf36      	itet	cc
 800a2b8:	0403      	lslcc	r3, r0, #16
 800a2ba:	2000      	movcs	r0, #0
 800a2bc:	2010      	movcc	r0, #16
 800a2be:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a2c2:	bf3c      	itt	cc
 800a2c4:	021b      	lslcc	r3, r3, #8
 800a2c6:	3008      	addcc	r0, #8
 800a2c8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a2cc:	bf3c      	itt	cc
 800a2ce:	011b      	lslcc	r3, r3, #4
 800a2d0:	3004      	addcc	r0, #4
 800a2d2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a2d6:	bf3c      	itt	cc
 800a2d8:	009b      	lslcc	r3, r3, #2
 800a2da:	3002      	addcc	r0, #2
 800a2dc:	2b00      	cmp	r3, #0
 800a2de:	db05      	blt.n	800a2ec <__hi0bits+0x3c>
 800a2e0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800a2e4:	f100 0001 	add.w	r0, r0, #1
 800a2e8:	bf08      	it	eq
 800a2ea:	2020      	moveq	r0, #32
 800a2ec:	4770      	bx	lr

0800a2ee <__lo0bits>:
 800a2ee:	6803      	ldr	r3, [r0, #0]
 800a2f0:	4602      	mov	r2, r0
 800a2f2:	f013 0007 	ands.w	r0, r3, #7
 800a2f6:	d00b      	beq.n	800a310 <__lo0bits+0x22>
 800a2f8:	07d9      	lsls	r1, r3, #31
 800a2fa:	d421      	bmi.n	800a340 <__lo0bits+0x52>
 800a2fc:	0798      	lsls	r0, r3, #30
 800a2fe:	bf47      	ittee	mi
 800a300:	085b      	lsrmi	r3, r3, #1
 800a302:	2001      	movmi	r0, #1
 800a304:	089b      	lsrpl	r3, r3, #2
 800a306:	2002      	movpl	r0, #2
 800a308:	bf4c      	ite	mi
 800a30a:	6013      	strmi	r3, [r2, #0]
 800a30c:	6013      	strpl	r3, [r2, #0]
 800a30e:	4770      	bx	lr
 800a310:	b299      	uxth	r1, r3
 800a312:	b909      	cbnz	r1, 800a318 <__lo0bits+0x2a>
 800a314:	0c1b      	lsrs	r3, r3, #16
 800a316:	2010      	movs	r0, #16
 800a318:	b2d9      	uxtb	r1, r3
 800a31a:	b909      	cbnz	r1, 800a320 <__lo0bits+0x32>
 800a31c:	3008      	adds	r0, #8
 800a31e:	0a1b      	lsrs	r3, r3, #8
 800a320:	0719      	lsls	r1, r3, #28
 800a322:	bf04      	itt	eq
 800a324:	091b      	lsreq	r3, r3, #4
 800a326:	3004      	addeq	r0, #4
 800a328:	0799      	lsls	r1, r3, #30
 800a32a:	bf04      	itt	eq
 800a32c:	089b      	lsreq	r3, r3, #2
 800a32e:	3002      	addeq	r0, #2
 800a330:	07d9      	lsls	r1, r3, #31
 800a332:	d403      	bmi.n	800a33c <__lo0bits+0x4e>
 800a334:	085b      	lsrs	r3, r3, #1
 800a336:	f100 0001 	add.w	r0, r0, #1
 800a33a:	d003      	beq.n	800a344 <__lo0bits+0x56>
 800a33c:	6013      	str	r3, [r2, #0]
 800a33e:	4770      	bx	lr
 800a340:	2000      	movs	r0, #0
 800a342:	4770      	bx	lr
 800a344:	2020      	movs	r0, #32
 800a346:	4770      	bx	lr

0800a348 <__i2b>:
 800a348:	b510      	push	{r4, lr}
 800a34a:	460c      	mov	r4, r1
 800a34c:	2101      	movs	r1, #1
 800a34e:	f7ff febb 	bl	800a0c8 <_Balloc>
 800a352:	4602      	mov	r2, r0
 800a354:	b928      	cbnz	r0, 800a362 <__i2b+0x1a>
 800a356:	4b05      	ldr	r3, [pc, #20]	@ (800a36c <__i2b+0x24>)
 800a358:	f240 1145 	movw	r1, #325	@ 0x145
 800a35c:	4804      	ldr	r0, [pc, #16]	@ (800a370 <__i2b+0x28>)
 800a35e:	f001 fe13 	bl	800bf88 <__assert_func>
 800a362:	2301      	movs	r3, #1
 800a364:	6144      	str	r4, [r0, #20]
 800a366:	6103      	str	r3, [r0, #16]
 800a368:	bd10      	pop	{r4, pc}
 800a36a:	bf00      	nop
 800a36c:	0800cb5d 	.word	0x0800cb5d
 800a370:	0800cb6e 	.word	0x0800cb6e

0800a374 <__multiply>:
 800a374:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a378:	4614      	mov	r4, r2
 800a37a:	690a      	ldr	r2, [r1, #16]
 800a37c:	460f      	mov	r7, r1
 800a37e:	b085      	sub	sp, #20
 800a380:	6923      	ldr	r3, [r4, #16]
 800a382:	429a      	cmp	r2, r3
 800a384:	bfa2      	ittt	ge
 800a386:	4623      	movge	r3, r4
 800a388:	460c      	movge	r4, r1
 800a38a:	461f      	movge	r7, r3
 800a38c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800a390:	68a3      	ldr	r3, [r4, #8]
 800a392:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800a396:	6861      	ldr	r1, [r4, #4]
 800a398:	eb0a 0609 	add.w	r6, sl, r9
 800a39c:	42b3      	cmp	r3, r6
 800a39e:	bfb8      	it	lt
 800a3a0:	3101      	addlt	r1, #1
 800a3a2:	f7ff fe91 	bl	800a0c8 <_Balloc>
 800a3a6:	b930      	cbnz	r0, 800a3b6 <__multiply+0x42>
 800a3a8:	4602      	mov	r2, r0
 800a3aa:	4b45      	ldr	r3, [pc, #276]	@ (800a4c0 <__multiply+0x14c>)
 800a3ac:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800a3b0:	4844      	ldr	r0, [pc, #272]	@ (800a4c4 <__multiply+0x150>)
 800a3b2:	f001 fde9 	bl	800bf88 <__assert_func>
 800a3b6:	f100 0514 	add.w	r5, r0, #20
 800a3ba:	2200      	movs	r2, #0
 800a3bc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a3c0:	462b      	mov	r3, r5
 800a3c2:	4543      	cmp	r3, r8
 800a3c4:	d321      	bcc.n	800a40a <__multiply+0x96>
 800a3c6:	f107 0114 	add.w	r1, r7, #20
 800a3ca:	f104 0214 	add.w	r2, r4, #20
 800a3ce:	f104 0715 	add.w	r7, r4, #21
 800a3d2:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800a3d6:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800a3da:	9302      	str	r3, [sp, #8]
 800a3dc:	1b13      	subs	r3, r2, r4
 800a3de:	3b15      	subs	r3, #21
 800a3e0:	f023 0303 	bic.w	r3, r3, #3
 800a3e4:	3304      	adds	r3, #4
 800a3e6:	42ba      	cmp	r2, r7
 800a3e8:	bf38      	it	cc
 800a3ea:	2304      	movcc	r3, #4
 800a3ec:	9301      	str	r3, [sp, #4]
 800a3ee:	9b02      	ldr	r3, [sp, #8]
 800a3f0:	9103      	str	r1, [sp, #12]
 800a3f2:	428b      	cmp	r3, r1
 800a3f4:	d80c      	bhi.n	800a410 <__multiply+0x9c>
 800a3f6:	2e00      	cmp	r6, #0
 800a3f8:	dd03      	ble.n	800a402 <__multiply+0x8e>
 800a3fa:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a3fe:	2b00      	cmp	r3, #0
 800a400:	d05b      	beq.n	800a4ba <__multiply+0x146>
 800a402:	6106      	str	r6, [r0, #16]
 800a404:	b005      	add	sp, #20
 800a406:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a40a:	f843 2b04 	str.w	r2, [r3], #4
 800a40e:	e7d8      	b.n	800a3c2 <__multiply+0x4e>
 800a410:	f8b1 a000 	ldrh.w	sl, [r1]
 800a414:	f1ba 0f00 	cmp.w	sl, #0
 800a418:	d024      	beq.n	800a464 <__multiply+0xf0>
 800a41a:	f104 0e14 	add.w	lr, r4, #20
 800a41e:	46a9      	mov	r9, r5
 800a420:	f04f 0c00 	mov.w	ip, #0
 800a424:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a428:	f8d9 3000 	ldr.w	r3, [r9]
 800a42c:	fa1f fb87 	uxth.w	fp, r7
 800a430:	4572      	cmp	r2, lr
 800a432:	b29b      	uxth	r3, r3
 800a434:	fb0a 330b 	mla	r3, sl, fp, r3
 800a438:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800a43c:	f8d9 7000 	ldr.w	r7, [r9]
 800a440:	4463      	add	r3, ip
 800a442:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800a446:	fb0a c70b 	mla	r7, sl, fp, ip
 800a44a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800a44e:	b29b      	uxth	r3, r3
 800a450:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800a454:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800a458:	f849 3b04 	str.w	r3, [r9], #4
 800a45c:	d8e2      	bhi.n	800a424 <__multiply+0xb0>
 800a45e:	9b01      	ldr	r3, [sp, #4]
 800a460:	f845 c003 	str.w	ip, [r5, r3]
 800a464:	9b03      	ldr	r3, [sp, #12]
 800a466:	3104      	adds	r1, #4
 800a468:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800a46c:	f1b9 0f00 	cmp.w	r9, #0
 800a470:	d021      	beq.n	800a4b6 <__multiply+0x142>
 800a472:	682b      	ldr	r3, [r5, #0]
 800a474:	f104 0c14 	add.w	ip, r4, #20
 800a478:	46ae      	mov	lr, r5
 800a47a:	f04f 0a00 	mov.w	sl, #0
 800a47e:	f8bc b000 	ldrh.w	fp, [ip]
 800a482:	b29b      	uxth	r3, r3
 800a484:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800a488:	fb09 770b 	mla	r7, r9, fp, r7
 800a48c:	4457      	add	r7, sl
 800a48e:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800a492:	f84e 3b04 	str.w	r3, [lr], #4
 800a496:	f85c 3b04 	ldr.w	r3, [ip], #4
 800a49a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a49e:	f8be 3000 	ldrh.w	r3, [lr]
 800a4a2:	4562      	cmp	r2, ip
 800a4a4:	fb09 330a 	mla	r3, r9, sl, r3
 800a4a8:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800a4ac:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a4b0:	d8e5      	bhi.n	800a47e <__multiply+0x10a>
 800a4b2:	9f01      	ldr	r7, [sp, #4]
 800a4b4:	51eb      	str	r3, [r5, r7]
 800a4b6:	3504      	adds	r5, #4
 800a4b8:	e799      	b.n	800a3ee <__multiply+0x7a>
 800a4ba:	3e01      	subs	r6, #1
 800a4bc:	e79b      	b.n	800a3f6 <__multiply+0x82>
 800a4be:	bf00      	nop
 800a4c0:	0800cb5d 	.word	0x0800cb5d
 800a4c4:	0800cb6e 	.word	0x0800cb6e

0800a4c8 <__pow5mult>:
 800a4c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a4cc:	4615      	mov	r5, r2
 800a4ce:	f012 0203 	ands.w	r2, r2, #3
 800a4d2:	4607      	mov	r7, r0
 800a4d4:	460e      	mov	r6, r1
 800a4d6:	d007      	beq.n	800a4e8 <__pow5mult+0x20>
 800a4d8:	3a01      	subs	r2, #1
 800a4da:	4c25      	ldr	r4, [pc, #148]	@ (800a570 <__pow5mult+0xa8>)
 800a4dc:	2300      	movs	r3, #0
 800a4de:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a4e2:	f7ff fe53 	bl	800a18c <__multadd>
 800a4e6:	4606      	mov	r6, r0
 800a4e8:	10ad      	asrs	r5, r5, #2
 800a4ea:	d03d      	beq.n	800a568 <__pow5mult+0xa0>
 800a4ec:	69fc      	ldr	r4, [r7, #28]
 800a4ee:	b97c      	cbnz	r4, 800a510 <__pow5mult+0x48>
 800a4f0:	2010      	movs	r0, #16
 800a4f2:	f7ff fd33 	bl	8009f5c <malloc>
 800a4f6:	4602      	mov	r2, r0
 800a4f8:	61f8      	str	r0, [r7, #28]
 800a4fa:	b928      	cbnz	r0, 800a508 <__pow5mult+0x40>
 800a4fc:	4b1d      	ldr	r3, [pc, #116]	@ (800a574 <__pow5mult+0xac>)
 800a4fe:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800a502:	481d      	ldr	r0, [pc, #116]	@ (800a578 <__pow5mult+0xb0>)
 800a504:	f001 fd40 	bl	800bf88 <__assert_func>
 800a508:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a50c:	6004      	str	r4, [r0, #0]
 800a50e:	60c4      	str	r4, [r0, #12]
 800a510:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800a514:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a518:	b94c      	cbnz	r4, 800a52e <__pow5mult+0x66>
 800a51a:	f240 2171 	movw	r1, #625	@ 0x271
 800a51e:	4638      	mov	r0, r7
 800a520:	f7ff ff12 	bl	800a348 <__i2b>
 800a524:	2300      	movs	r3, #0
 800a526:	4604      	mov	r4, r0
 800a528:	f8c8 0008 	str.w	r0, [r8, #8]
 800a52c:	6003      	str	r3, [r0, #0]
 800a52e:	f04f 0900 	mov.w	r9, #0
 800a532:	07eb      	lsls	r3, r5, #31
 800a534:	d50a      	bpl.n	800a54c <__pow5mult+0x84>
 800a536:	4631      	mov	r1, r6
 800a538:	4622      	mov	r2, r4
 800a53a:	4638      	mov	r0, r7
 800a53c:	f7ff ff1a 	bl	800a374 <__multiply>
 800a540:	4680      	mov	r8, r0
 800a542:	4631      	mov	r1, r6
 800a544:	4638      	mov	r0, r7
 800a546:	4646      	mov	r6, r8
 800a548:	f7ff fdfe 	bl	800a148 <_Bfree>
 800a54c:	106d      	asrs	r5, r5, #1
 800a54e:	d00b      	beq.n	800a568 <__pow5mult+0xa0>
 800a550:	6820      	ldr	r0, [r4, #0]
 800a552:	b938      	cbnz	r0, 800a564 <__pow5mult+0x9c>
 800a554:	4622      	mov	r2, r4
 800a556:	4621      	mov	r1, r4
 800a558:	4638      	mov	r0, r7
 800a55a:	f7ff ff0b 	bl	800a374 <__multiply>
 800a55e:	6020      	str	r0, [r4, #0]
 800a560:	f8c0 9000 	str.w	r9, [r0]
 800a564:	4604      	mov	r4, r0
 800a566:	e7e4      	b.n	800a532 <__pow5mult+0x6a>
 800a568:	4630      	mov	r0, r6
 800a56a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a56e:	bf00      	nop
 800a570:	0800cbc8 	.word	0x0800cbc8
 800a574:	0800caee 	.word	0x0800caee
 800a578:	0800cb6e 	.word	0x0800cb6e

0800a57c <__lshift>:
 800a57c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a580:	460c      	mov	r4, r1
 800a582:	4607      	mov	r7, r0
 800a584:	4691      	mov	r9, r2
 800a586:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a58a:	6923      	ldr	r3, [r4, #16]
 800a58c:	6849      	ldr	r1, [r1, #4]
 800a58e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a592:	68a3      	ldr	r3, [r4, #8]
 800a594:	f108 0601 	add.w	r6, r8, #1
 800a598:	42b3      	cmp	r3, r6
 800a59a:	db0b      	blt.n	800a5b4 <__lshift+0x38>
 800a59c:	4638      	mov	r0, r7
 800a59e:	f7ff fd93 	bl	800a0c8 <_Balloc>
 800a5a2:	4605      	mov	r5, r0
 800a5a4:	b948      	cbnz	r0, 800a5ba <__lshift+0x3e>
 800a5a6:	4602      	mov	r2, r0
 800a5a8:	4b28      	ldr	r3, [pc, #160]	@ (800a64c <__lshift+0xd0>)
 800a5aa:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800a5ae:	4828      	ldr	r0, [pc, #160]	@ (800a650 <__lshift+0xd4>)
 800a5b0:	f001 fcea 	bl	800bf88 <__assert_func>
 800a5b4:	3101      	adds	r1, #1
 800a5b6:	005b      	lsls	r3, r3, #1
 800a5b8:	e7ee      	b.n	800a598 <__lshift+0x1c>
 800a5ba:	2300      	movs	r3, #0
 800a5bc:	f100 0114 	add.w	r1, r0, #20
 800a5c0:	f100 0210 	add.w	r2, r0, #16
 800a5c4:	4618      	mov	r0, r3
 800a5c6:	4553      	cmp	r3, sl
 800a5c8:	db33      	blt.n	800a632 <__lshift+0xb6>
 800a5ca:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a5ce:	f104 0314 	add.w	r3, r4, #20
 800a5d2:	6920      	ldr	r0, [r4, #16]
 800a5d4:	f019 091f 	ands.w	r9, r9, #31
 800a5d8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a5dc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a5e0:	d02b      	beq.n	800a63a <__lshift+0xbe>
 800a5e2:	f1c9 0e20 	rsb	lr, r9, #32
 800a5e6:	468a      	mov	sl, r1
 800a5e8:	2200      	movs	r2, #0
 800a5ea:	6818      	ldr	r0, [r3, #0]
 800a5ec:	fa00 f009 	lsl.w	r0, r0, r9
 800a5f0:	4310      	orrs	r0, r2
 800a5f2:	f84a 0b04 	str.w	r0, [sl], #4
 800a5f6:	f853 2b04 	ldr.w	r2, [r3], #4
 800a5fa:	459c      	cmp	ip, r3
 800a5fc:	fa22 f20e 	lsr.w	r2, r2, lr
 800a600:	d8f3      	bhi.n	800a5ea <__lshift+0x6e>
 800a602:	ebac 0304 	sub.w	r3, ip, r4
 800a606:	f104 0015 	add.w	r0, r4, #21
 800a60a:	3b15      	subs	r3, #21
 800a60c:	f023 0303 	bic.w	r3, r3, #3
 800a610:	3304      	adds	r3, #4
 800a612:	4584      	cmp	ip, r0
 800a614:	bf38      	it	cc
 800a616:	2304      	movcc	r3, #4
 800a618:	50ca      	str	r2, [r1, r3]
 800a61a:	b10a      	cbz	r2, 800a620 <__lshift+0xa4>
 800a61c:	f108 0602 	add.w	r6, r8, #2
 800a620:	3e01      	subs	r6, #1
 800a622:	4638      	mov	r0, r7
 800a624:	4621      	mov	r1, r4
 800a626:	612e      	str	r6, [r5, #16]
 800a628:	f7ff fd8e 	bl	800a148 <_Bfree>
 800a62c:	4628      	mov	r0, r5
 800a62e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a632:	3301      	adds	r3, #1
 800a634:	f842 0f04 	str.w	r0, [r2, #4]!
 800a638:	e7c5      	b.n	800a5c6 <__lshift+0x4a>
 800a63a:	3904      	subs	r1, #4
 800a63c:	f853 2b04 	ldr.w	r2, [r3], #4
 800a640:	459c      	cmp	ip, r3
 800a642:	f841 2f04 	str.w	r2, [r1, #4]!
 800a646:	d8f9      	bhi.n	800a63c <__lshift+0xc0>
 800a648:	e7ea      	b.n	800a620 <__lshift+0xa4>
 800a64a:	bf00      	nop
 800a64c:	0800cb5d 	.word	0x0800cb5d
 800a650:	0800cb6e 	.word	0x0800cb6e

0800a654 <__mcmp>:
 800a654:	4603      	mov	r3, r0
 800a656:	690a      	ldr	r2, [r1, #16]
 800a658:	6900      	ldr	r0, [r0, #16]
 800a65a:	1a80      	subs	r0, r0, r2
 800a65c:	b530      	push	{r4, r5, lr}
 800a65e:	d10e      	bne.n	800a67e <__mcmp+0x2a>
 800a660:	3314      	adds	r3, #20
 800a662:	3114      	adds	r1, #20
 800a664:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800a668:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800a66c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800a670:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800a674:	4295      	cmp	r5, r2
 800a676:	d003      	beq.n	800a680 <__mcmp+0x2c>
 800a678:	d205      	bcs.n	800a686 <__mcmp+0x32>
 800a67a:	f04f 30ff 	mov.w	r0, #4294967295
 800a67e:	bd30      	pop	{r4, r5, pc}
 800a680:	42a3      	cmp	r3, r4
 800a682:	d3f3      	bcc.n	800a66c <__mcmp+0x18>
 800a684:	e7fb      	b.n	800a67e <__mcmp+0x2a>
 800a686:	2001      	movs	r0, #1
 800a688:	e7f9      	b.n	800a67e <__mcmp+0x2a>
	...

0800a68c <__mdiff>:
 800a68c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a690:	4689      	mov	r9, r1
 800a692:	4606      	mov	r6, r0
 800a694:	4611      	mov	r1, r2
 800a696:	4614      	mov	r4, r2
 800a698:	4648      	mov	r0, r9
 800a69a:	f7ff ffdb 	bl	800a654 <__mcmp>
 800a69e:	1e05      	subs	r5, r0, #0
 800a6a0:	d112      	bne.n	800a6c8 <__mdiff+0x3c>
 800a6a2:	4629      	mov	r1, r5
 800a6a4:	4630      	mov	r0, r6
 800a6a6:	f7ff fd0f 	bl	800a0c8 <_Balloc>
 800a6aa:	4602      	mov	r2, r0
 800a6ac:	b928      	cbnz	r0, 800a6ba <__mdiff+0x2e>
 800a6ae:	4b41      	ldr	r3, [pc, #260]	@ (800a7b4 <__mdiff+0x128>)
 800a6b0:	f240 2137 	movw	r1, #567	@ 0x237
 800a6b4:	4840      	ldr	r0, [pc, #256]	@ (800a7b8 <__mdiff+0x12c>)
 800a6b6:	f001 fc67 	bl	800bf88 <__assert_func>
 800a6ba:	2301      	movs	r3, #1
 800a6bc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a6c0:	4610      	mov	r0, r2
 800a6c2:	b003      	add	sp, #12
 800a6c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a6c8:	bfbc      	itt	lt
 800a6ca:	464b      	movlt	r3, r9
 800a6cc:	46a1      	movlt	r9, r4
 800a6ce:	4630      	mov	r0, r6
 800a6d0:	bfb8      	it	lt
 800a6d2:	2501      	movlt	r5, #1
 800a6d4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800a6d8:	bfb4      	ite	lt
 800a6da:	461c      	movlt	r4, r3
 800a6dc:	2500      	movge	r5, #0
 800a6de:	f7ff fcf3 	bl	800a0c8 <_Balloc>
 800a6e2:	4602      	mov	r2, r0
 800a6e4:	b918      	cbnz	r0, 800a6ee <__mdiff+0x62>
 800a6e6:	4b33      	ldr	r3, [pc, #204]	@ (800a7b4 <__mdiff+0x128>)
 800a6e8:	f240 2145 	movw	r1, #581	@ 0x245
 800a6ec:	e7e2      	b.n	800a6b4 <__mdiff+0x28>
 800a6ee:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800a6f2:	f104 0e14 	add.w	lr, r4, #20
 800a6f6:	6926      	ldr	r6, [r4, #16]
 800a6f8:	f100 0b14 	add.w	fp, r0, #20
 800a6fc:	60c5      	str	r5, [r0, #12]
 800a6fe:	f109 0514 	add.w	r5, r9, #20
 800a702:	f109 0310 	add.w	r3, r9, #16
 800a706:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800a70a:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800a70e:	46d9      	mov	r9, fp
 800a710:	f04f 0c00 	mov.w	ip, #0
 800a714:	9301      	str	r3, [sp, #4]
 800a716:	9b01      	ldr	r3, [sp, #4]
 800a718:	f85e 0b04 	ldr.w	r0, [lr], #4
 800a71c:	f853 af04 	ldr.w	sl, [r3, #4]!
 800a720:	4576      	cmp	r6, lr
 800a722:	9301      	str	r3, [sp, #4]
 800a724:	fa1f f38a 	uxth.w	r3, sl
 800a728:	4619      	mov	r1, r3
 800a72a:	b283      	uxth	r3, r0
 800a72c:	ea4f 4010 	mov.w	r0, r0, lsr #16
 800a730:	eba1 0303 	sub.w	r3, r1, r3
 800a734:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800a738:	4463      	add	r3, ip
 800a73a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800a73e:	b29b      	uxth	r3, r3
 800a740:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a744:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800a748:	f849 3b04 	str.w	r3, [r9], #4
 800a74c:	d8e3      	bhi.n	800a716 <__mdiff+0x8a>
 800a74e:	1b33      	subs	r3, r6, r4
 800a750:	3415      	adds	r4, #21
 800a752:	3b15      	subs	r3, #21
 800a754:	f023 0303 	bic.w	r3, r3, #3
 800a758:	3304      	adds	r3, #4
 800a75a:	42a6      	cmp	r6, r4
 800a75c:	bf38      	it	cc
 800a75e:	2304      	movcc	r3, #4
 800a760:	441d      	add	r5, r3
 800a762:	445b      	add	r3, fp
 800a764:	462c      	mov	r4, r5
 800a766:	461e      	mov	r6, r3
 800a768:	4544      	cmp	r4, r8
 800a76a:	d30e      	bcc.n	800a78a <__mdiff+0xfe>
 800a76c:	f108 0103 	add.w	r1, r8, #3
 800a770:	1b49      	subs	r1, r1, r5
 800a772:	3d03      	subs	r5, #3
 800a774:	f021 0103 	bic.w	r1, r1, #3
 800a778:	45a8      	cmp	r8, r5
 800a77a:	bf38      	it	cc
 800a77c:	2100      	movcc	r1, #0
 800a77e:	440b      	add	r3, r1
 800a780:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a784:	b199      	cbz	r1, 800a7ae <__mdiff+0x122>
 800a786:	6117      	str	r7, [r2, #16]
 800a788:	e79a      	b.n	800a6c0 <__mdiff+0x34>
 800a78a:	f854 1b04 	ldr.w	r1, [r4], #4
 800a78e:	46e6      	mov	lr, ip
 800a790:	fa1f fc81 	uxth.w	ip, r1
 800a794:	0c08      	lsrs	r0, r1, #16
 800a796:	4471      	add	r1, lr
 800a798:	44f4      	add	ip, lr
 800a79a:	b289      	uxth	r1, r1
 800a79c:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800a7a0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800a7a4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a7a8:	f846 1b04 	str.w	r1, [r6], #4
 800a7ac:	e7dc      	b.n	800a768 <__mdiff+0xdc>
 800a7ae:	3f01      	subs	r7, #1
 800a7b0:	e7e6      	b.n	800a780 <__mdiff+0xf4>
 800a7b2:	bf00      	nop
 800a7b4:	0800cb5d 	.word	0x0800cb5d
 800a7b8:	0800cb6e 	.word	0x0800cb6e

0800a7bc <__ulp>:
 800a7bc:	b082      	sub	sp, #8
 800a7be:	4b11      	ldr	r3, [pc, #68]	@ (800a804 <__ulp+0x48>)
 800a7c0:	ed8d 0b00 	vstr	d0, [sp]
 800a7c4:	9a01      	ldr	r2, [sp, #4]
 800a7c6:	4013      	ands	r3, r2
 800a7c8:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800a7cc:	2b00      	cmp	r3, #0
 800a7ce:	dc08      	bgt.n	800a7e2 <__ulp+0x26>
 800a7d0:	425b      	negs	r3, r3
 800a7d2:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800a7d6:	ea4f 5223 	mov.w	r2, r3, asr #20
 800a7da:	da04      	bge.n	800a7e6 <__ulp+0x2a>
 800a7dc:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800a7e0:	4113      	asrs	r3, r2
 800a7e2:	2200      	movs	r2, #0
 800a7e4:	e008      	b.n	800a7f8 <__ulp+0x3c>
 800a7e6:	f1a2 0314 	sub.w	r3, r2, #20
 800a7ea:	2b1e      	cmp	r3, #30
 800a7ec:	bfd6      	itet	le
 800a7ee:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800a7f2:	2201      	movgt	r2, #1
 800a7f4:	40da      	lsrle	r2, r3
 800a7f6:	2300      	movs	r3, #0
 800a7f8:	4619      	mov	r1, r3
 800a7fa:	4610      	mov	r0, r2
 800a7fc:	ec41 0b10 	vmov	d0, r0, r1
 800a800:	b002      	add	sp, #8
 800a802:	4770      	bx	lr
 800a804:	7ff00000 	.word	0x7ff00000

0800a808 <__b2d>:
 800a808:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a80c:	6906      	ldr	r6, [r0, #16]
 800a80e:	f100 0814 	add.w	r8, r0, #20
 800a812:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800a816:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800a81a:	1f37      	subs	r7, r6, #4
 800a81c:	4610      	mov	r0, r2
 800a81e:	f7ff fd47 	bl	800a2b0 <__hi0bits>
 800a822:	f1c0 0320 	rsb	r3, r0, #32
 800a826:	280a      	cmp	r0, #10
 800a828:	600b      	str	r3, [r1, #0]
 800a82a:	491d      	ldr	r1, [pc, #116]	@ (800a8a0 <__b2d+0x98>)
 800a82c:	dc16      	bgt.n	800a85c <__b2d+0x54>
 800a82e:	f1c0 0c0b 	rsb	ip, r0, #11
 800a832:	45b8      	cmp	r8, r7
 800a834:	f100 0015 	add.w	r0, r0, #21
 800a838:	fa22 f30c 	lsr.w	r3, r2, ip
 800a83c:	fa02 f000 	lsl.w	r0, r2, r0
 800a840:	ea43 0501 	orr.w	r5, r3, r1
 800a844:	bf34      	ite	cc
 800a846:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800a84a:	2300      	movcs	r3, #0
 800a84c:	fa23 f30c 	lsr.w	r3, r3, ip
 800a850:	4303      	orrs	r3, r0
 800a852:	461c      	mov	r4, r3
 800a854:	ec45 4b10 	vmov	d0, r4, r5
 800a858:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a85c:	45b8      	cmp	r8, r7
 800a85e:	bf3a      	itte	cc
 800a860:	f1a6 0708 	subcc.w	r7, r6, #8
 800a864:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800a868:	2300      	movcs	r3, #0
 800a86a:	380b      	subs	r0, #11
 800a86c:	d014      	beq.n	800a898 <__b2d+0x90>
 800a86e:	f1c0 0120 	rsb	r1, r0, #32
 800a872:	4082      	lsls	r2, r0
 800a874:	4547      	cmp	r7, r8
 800a876:	fa23 f401 	lsr.w	r4, r3, r1
 800a87a:	fa03 f300 	lsl.w	r3, r3, r0
 800a87e:	ea42 0204 	orr.w	r2, r2, r4
 800a882:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800a886:	bf8c      	ite	hi
 800a888:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800a88c:	2200      	movls	r2, #0
 800a88e:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800a892:	40ca      	lsrs	r2, r1
 800a894:	4313      	orrs	r3, r2
 800a896:	e7dc      	b.n	800a852 <__b2d+0x4a>
 800a898:	ea42 0501 	orr.w	r5, r2, r1
 800a89c:	e7d9      	b.n	800a852 <__b2d+0x4a>
 800a89e:	bf00      	nop
 800a8a0:	3ff00000 	.word	0x3ff00000

0800a8a4 <__d2b>:
 800a8a4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a8a8:	460f      	mov	r7, r1
 800a8aa:	2101      	movs	r1, #1
 800a8ac:	4616      	mov	r6, r2
 800a8ae:	ec59 8b10 	vmov	r8, r9, d0
 800a8b2:	f7ff fc09 	bl	800a0c8 <_Balloc>
 800a8b6:	4604      	mov	r4, r0
 800a8b8:	b930      	cbnz	r0, 800a8c8 <__d2b+0x24>
 800a8ba:	4602      	mov	r2, r0
 800a8bc:	4b23      	ldr	r3, [pc, #140]	@ (800a94c <__d2b+0xa8>)
 800a8be:	f240 310f 	movw	r1, #783	@ 0x30f
 800a8c2:	4823      	ldr	r0, [pc, #140]	@ (800a950 <__d2b+0xac>)
 800a8c4:	f001 fb60 	bl	800bf88 <__assert_func>
 800a8c8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800a8cc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a8d0:	b10d      	cbz	r5, 800a8d6 <__d2b+0x32>
 800a8d2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a8d6:	9301      	str	r3, [sp, #4]
 800a8d8:	f1b8 0300 	subs.w	r3, r8, #0
 800a8dc:	d023      	beq.n	800a926 <__d2b+0x82>
 800a8de:	4668      	mov	r0, sp
 800a8e0:	9300      	str	r3, [sp, #0]
 800a8e2:	f7ff fd04 	bl	800a2ee <__lo0bits>
 800a8e6:	e9dd 1200 	ldrd	r1, r2, [sp]
 800a8ea:	b1d0      	cbz	r0, 800a922 <__d2b+0x7e>
 800a8ec:	f1c0 0320 	rsb	r3, r0, #32
 800a8f0:	fa02 f303 	lsl.w	r3, r2, r3
 800a8f4:	40c2      	lsrs	r2, r0
 800a8f6:	430b      	orrs	r3, r1
 800a8f8:	9201      	str	r2, [sp, #4]
 800a8fa:	6163      	str	r3, [r4, #20]
 800a8fc:	9b01      	ldr	r3, [sp, #4]
 800a8fe:	2b00      	cmp	r3, #0
 800a900:	61a3      	str	r3, [r4, #24]
 800a902:	bf0c      	ite	eq
 800a904:	2201      	moveq	r2, #1
 800a906:	2202      	movne	r2, #2
 800a908:	6122      	str	r2, [r4, #16]
 800a90a:	b1a5      	cbz	r5, 800a936 <__d2b+0x92>
 800a90c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800a910:	4405      	add	r5, r0
 800a912:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800a916:	603d      	str	r5, [r7, #0]
 800a918:	6030      	str	r0, [r6, #0]
 800a91a:	4620      	mov	r0, r4
 800a91c:	b003      	add	sp, #12
 800a91e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a922:	6161      	str	r1, [r4, #20]
 800a924:	e7ea      	b.n	800a8fc <__d2b+0x58>
 800a926:	a801      	add	r0, sp, #4
 800a928:	f7ff fce1 	bl	800a2ee <__lo0bits>
 800a92c:	9b01      	ldr	r3, [sp, #4]
 800a92e:	3020      	adds	r0, #32
 800a930:	2201      	movs	r2, #1
 800a932:	6163      	str	r3, [r4, #20]
 800a934:	e7e8      	b.n	800a908 <__d2b+0x64>
 800a936:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800a93a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a93e:	6038      	str	r0, [r7, #0]
 800a940:	6918      	ldr	r0, [r3, #16]
 800a942:	f7ff fcb5 	bl	800a2b0 <__hi0bits>
 800a946:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a94a:	e7e5      	b.n	800a918 <__d2b+0x74>
 800a94c:	0800cb5d 	.word	0x0800cb5d
 800a950:	0800cb6e 	.word	0x0800cb6e

0800a954 <__ratio>:
 800a954:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a958:	b085      	sub	sp, #20
 800a95a:	e9cd 1000 	strd	r1, r0, [sp]
 800a95e:	a902      	add	r1, sp, #8
 800a960:	f7ff ff52 	bl	800a808 <__b2d>
 800a964:	a903      	add	r1, sp, #12
 800a966:	9800      	ldr	r0, [sp, #0]
 800a968:	ec55 4b10 	vmov	r4, r5, d0
 800a96c:	f7ff ff4c 	bl	800a808 <__b2d>
 800a970:	9b01      	ldr	r3, [sp, #4]
 800a972:	462f      	mov	r7, r5
 800a974:	4620      	mov	r0, r4
 800a976:	6919      	ldr	r1, [r3, #16]
 800a978:	9b00      	ldr	r3, [sp, #0]
 800a97a:	691b      	ldr	r3, [r3, #16]
 800a97c:	1ac9      	subs	r1, r1, r3
 800a97e:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800a982:	ec5b ab10 	vmov	sl, fp, d0
 800a986:	1a9b      	subs	r3, r3, r2
 800a988:	46d9      	mov	r9, fp
 800a98a:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800a98e:	2b00      	cmp	r3, #0
 800a990:	bfcd      	iteet	gt
 800a992:	462a      	movgt	r2, r5
 800a994:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800a998:	465a      	movle	r2, fp
 800a99a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800a99e:	bfd8      	it	le
 800a9a0:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800a9a4:	4652      	mov	r2, sl
 800a9a6:	4639      	mov	r1, r7
 800a9a8:	464b      	mov	r3, r9
 800a9aa:	f7f5 ff6d 	bl	8000888 <__aeabi_ddiv>
 800a9ae:	ec41 0b10 	vmov	d0, r0, r1
 800a9b2:	b005      	add	sp, #20
 800a9b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a9b8 <__copybits>:
 800a9b8:	3901      	subs	r1, #1
 800a9ba:	f102 0314 	add.w	r3, r2, #20
 800a9be:	1149      	asrs	r1, r1, #5
 800a9c0:	b570      	push	{r4, r5, r6, lr}
 800a9c2:	3101      	adds	r1, #1
 800a9c4:	6914      	ldr	r4, [r2, #16]
 800a9c6:	1f05      	subs	r5, r0, #4
 800a9c8:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800a9cc:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800a9d0:	42a3      	cmp	r3, r4
 800a9d2:	d30c      	bcc.n	800a9ee <__copybits+0x36>
 800a9d4:	1aa3      	subs	r3, r4, r2
 800a9d6:	3211      	adds	r2, #17
 800a9d8:	3b11      	subs	r3, #17
 800a9da:	f023 0303 	bic.w	r3, r3, #3
 800a9de:	42a2      	cmp	r2, r4
 800a9e0:	bf88      	it	hi
 800a9e2:	2300      	movhi	r3, #0
 800a9e4:	4418      	add	r0, r3
 800a9e6:	2300      	movs	r3, #0
 800a9e8:	4288      	cmp	r0, r1
 800a9ea:	d305      	bcc.n	800a9f8 <__copybits+0x40>
 800a9ec:	bd70      	pop	{r4, r5, r6, pc}
 800a9ee:	f853 6b04 	ldr.w	r6, [r3], #4
 800a9f2:	f845 6f04 	str.w	r6, [r5, #4]!
 800a9f6:	e7eb      	b.n	800a9d0 <__copybits+0x18>
 800a9f8:	f840 3b04 	str.w	r3, [r0], #4
 800a9fc:	e7f4      	b.n	800a9e8 <__copybits+0x30>

0800a9fe <__any_on>:
 800a9fe:	f100 0214 	add.w	r2, r0, #20
 800aa02:	114b      	asrs	r3, r1, #5
 800aa04:	6900      	ldr	r0, [r0, #16]
 800aa06:	4298      	cmp	r0, r3
 800aa08:	b510      	push	{r4, lr}
 800aa0a:	db11      	blt.n	800aa30 <__any_on+0x32>
 800aa0c:	dd0a      	ble.n	800aa24 <__any_on+0x26>
 800aa0e:	f011 011f 	ands.w	r1, r1, #31
 800aa12:	d007      	beq.n	800aa24 <__any_on+0x26>
 800aa14:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800aa18:	fa24 f001 	lsr.w	r0, r4, r1
 800aa1c:	fa00 f101 	lsl.w	r1, r0, r1
 800aa20:	428c      	cmp	r4, r1
 800aa22:	d10b      	bne.n	800aa3c <__any_on+0x3e>
 800aa24:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800aa28:	4293      	cmp	r3, r2
 800aa2a:	d803      	bhi.n	800aa34 <__any_on+0x36>
 800aa2c:	2000      	movs	r0, #0
 800aa2e:	bd10      	pop	{r4, pc}
 800aa30:	4603      	mov	r3, r0
 800aa32:	e7f7      	b.n	800aa24 <__any_on+0x26>
 800aa34:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800aa38:	2900      	cmp	r1, #0
 800aa3a:	d0f5      	beq.n	800aa28 <__any_on+0x2a>
 800aa3c:	2001      	movs	r0, #1
 800aa3e:	e7f6      	b.n	800aa2e <__any_on+0x30>

0800aa40 <sulp>:
 800aa40:	b570      	push	{r4, r5, r6, lr}
 800aa42:	4604      	mov	r4, r0
 800aa44:	460d      	mov	r5, r1
 800aa46:	4616      	mov	r6, r2
 800aa48:	ec45 4b10 	vmov	d0, r4, r5
 800aa4c:	f7ff feb6 	bl	800a7bc <__ulp>
 800aa50:	ec51 0b10 	vmov	r0, r1, d0
 800aa54:	b17e      	cbz	r6, 800aa76 <sulp+0x36>
 800aa56:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800aa5a:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800aa5e:	2b00      	cmp	r3, #0
 800aa60:	dd09      	ble.n	800aa76 <sulp+0x36>
 800aa62:	051b      	lsls	r3, r3, #20
 800aa64:	2400      	movs	r4, #0
 800aa66:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800aa6a:	4622      	mov	r2, r4
 800aa6c:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800aa70:	462b      	mov	r3, r5
 800aa72:	f7f5 fddf 	bl	8000634 <__aeabi_dmul>
 800aa76:	ec41 0b10 	vmov	d0, r0, r1
 800aa7a:	bd70      	pop	{r4, r5, r6, pc}
 800aa7c:	0000      	movs	r0, r0
	...

0800aa80 <_strtod_l>:
 800aa80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa84:	b09f      	sub	sp, #124	@ 0x7c
 800aa86:	460c      	mov	r4, r1
 800aa88:	f04f 0a00 	mov.w	sl, #0
 800aa8c:	f04f 0b00 	mov.w	fp, #0
 800aa90:	9217      	str	r2, [sp, #92]	@ 0x5c
 800aa92:	2200      	movs	r2, #0
 800aa94:	9005      	str	r0, [sp, #20]
 800aa96:	921a      	str	r2, [sp, #104]	@ 0x68
 800aa98:	460a      	mov	r2, r1
 800aa9a:	9219      	str	r2, [sp, #100]	@ 0x64
 800aa9c:	7811      	ldrb	r1, [r2, #0]
 800aa9e:	292b      	cmp	r1, #43	@ 0x2b
 800aaa0:	d04a      	beq.n	800ab38 <_strtod_l+0xb8>
 800aaa2:	d838      	bhi.n	800ab16 <_strtod_l+0x96>
 800aaa4:	290d      	cmp	r1, #13
 800aaa6:	d832      	bhi.n	800ab0e <_strtod_l+0x8e>
 800aaa8:	2908      	cmp	r1, #8
 800aaaa:	d832      	bhi.n	800ab12 <_strtod_l+0x92>
 800aaac:	2900      	cmp	r1, #0
 800aaae:	d03b      	beq.n	800ab28 <_strtod_l+0xa8>
 800aab0:	2200      	movs	r2, #0
 800aab2:	920b      	str	r2, [sp, #44]	@ 0x2c
 800aab4:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800aab6:	782a      	ldrb	r2, [r5, #0]
 800aab8:	2a30      	cmp	r2, #48	@ 0x30
 800aaba:	f040 80b3 	bne.w	800ac24 <_strtod_l+0x1a4>
 800aabe:	786a      	ldrb	r2, [r5, #1]
 800aac0:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800aac4:	2a58      	cmp	r2, #88	@ 0x58
 800aac6:	d16e      	bne.n	800aba6 <_strtod_l+0x126>
 800aac8:	9302      	str	r3, [sp, #8]
 800aaca:	a919      	add	r1, sp, #100	@ 0x64
 800aacc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800aace:	4a90      	ldr	r2, [pc, #576]	@ (800ad10 <_strtod_l+0x290>)
 800aad0:	9301      	str	r3, [sp, #4]
 800aad2:	ab1a      	add	r3, sp, #104	@ 0x68
 800aad4:	9805      	ldr	r0, [sp, #20]
 800aad6:	9300      	str	r3, [sp, #0]
 800aad8:	ab1b      	add	r3, sp, #108	@ 0x6c
 800aada:	f001 faed 	bl	800c0b8 <__gethex>
 800aade:	f010 060f 	ands.w	r6, r0, #15
 800aae2:	4604      	mov	r4, r0
 800aae4:	d005      	beq.n	800aaf2 <_strtod_l+0x72>
 800aae6:	2e06      	cmp	r6, #6
 800aae8:	d128      	bne.n	800ab3c <_strtod_l+0xbc>
 800aaea:	3501      	adds	r5, #1
 800aaec:	2300      	movs	r3, #0
 800aaee:	9519      	str	r5, [sp, #100]	@ 0x64
 800aaf0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800aaf2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800aaf4:	2b00      	cmp	r3, #0
 800aaf6:	f040 858e 	bne.w	800b616 <_strtod_l+0xb96>
 800aafa:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800aafc:	b1cb      	cbz	r3, 800ab32 <_strtod_l+0xb2>
 800aafe:	4652      	mov	r2, sl
 800ab00:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800ab04:	ec43 2b10 	vmov	d0, r2, r3
 800ab08:	b01f      	add	sp, #124	@ 0x7c
 800ab0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab0e:	2920      	cmp	r1, #32
 800ab10:	d1ce      	bne.n	800aab0 <_strtod_l+0x30>
 800ab12:	3201      	adds	r2, #1
 800ab14:	e7c1      	b.n	800aa9a <_strtod_l+0x1a>
 800ab16:	292d      	cmp	r1, #45	@ 0x2d
 800ab18:	d1ca      	bne.n	800aab0 <_strtod_l+0x30>
 800ab1a:	2101      	movs	r1, #1
 800ab1c:	910b      	str	r1, [sp, #44]	@ 0x2c
 800ab1e:	1c51      	adds	r1, r2, #1
 800ab20:	9119      	str	r1, [sp, #100]	@ 0x64
 800ab22:	7852      	ldrb	r2, [r2, #1]
 800ab24:	2a00      	cmp	r2, #0
 800ab26:	d1c5      	bne.n	800aab4 <_strtod_l+0x34>
 800ab28:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800ab2a:	9419      	str	r4, [sp, #100]	@ 0x64
 800ab2c:	2b00      	cmp	r3, #0
 800ab2e:	f040 8570 	bne.w	800b612 <_strtod_l+0xb92>
 800ab32:	4652      	mov	r2, sl
 800ab34:	465b      	mov	r3, fp
 800ab36:	e7e5      	b.n	800ab04 <_strtod_l+0x84>
 800ab38:	2100      	movs	r1, #0
 800ab3a:	e7ef      	b.n	800ab1c <_strtod_l+0x9c>
 800ab3c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800ab3e:	b13a      	cbz	r2, 800ab50 <_strtod_l+0xd0>
 800ab40:	2135      	movs	r1, #53	@ 0x35
 800ab42:	a81c      	add	r0, sp, #112	@ 0x70
 800ab44:	f7ff ff38 	bl	800a9b8 <__copybits>
 800ab48:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800ab4a:	9805      	ldr	r0, [sp, #20]
 800ab4c:	f7ff fafc 	bl	800a148 <_Bfree>
 800ab50:	3e01      	subs	r6, #1
 800ab52:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800ab54:	2e04      	cmp	r6, #4
 800ab56:	d806      	bhi.n	800ab66 <_strtod_l+0xe6>
 800ab58:	e8df f006 	tbb	[pc, r6]
 800ab5c:	201d0314 	.word	0x201d0314
 800ab60:	14          	.byte	0x14
 800ab61:	00          	.byte	0x00
 800ab62:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800ab66:	05e1      	lsls	r1, r4, #23
 800ab68:	bf48      	it	mi
 800ab6a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800ab6e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800ab72:	0d1b      	lsrs	r3, r3, #20
 800ab74:	051b      	lsls	r3, r3, #20
 800ab76:	2b00      	cmp	r3, #0
 800ab78:	d1bb      	bne.n	800aaf2 <_strtod_l+0x72>
 800ab7a:	f7fe fb05 	bl	8009188 <__errno>
 800ab7e:	2322      	movs	r3, #34	@ 0x22
 800ab80:	6003      	str	r3, [r0, #0]
 800ab82:	e7b6      	b.n	800aaf2 <_strtod_l+0x72>
 800ab84:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800ab88:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800ab8c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800ab90:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800ab94:	e7e7      	b.n	800ab66 <_strtod_l+0xe6>
 800ab96:	f8df b180 	ldr.w	fp, [pc, #384]	@ 800ad18 <_strtod_l+0x298>
 800ab9a:	e7e4      	b.n	800ab66 <_strtod_l+0xe6>
 800ab9c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800aba0:	f04f 3aff 	mov.w	sl, #4294967295
 800aba4:	e7df      	b.n	800ab66 <_strtod_l+0xe6>
 800aba6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800aba8:	1c5a      	adds	r2, r3, #1
 800abaa:	9219      	str	r2, [sp, #100]	@ 0x64
 800abac:	785b      	ldrb	r3, [r3, #1]
 800abae:	2b30      	cmp	r3, #48	@ 0x30
 800abb0:	d0f9      	beq.n	800aba6 <_strtod_l+0x126>
 800abb2:	2b00      	cmp	r3, #0
 800abb4:	d09d      	beq.n	800aaf2 <_strtod_l+0x72>
 800abb6:	2301      	movs	r3, #1
 800abb8:	9309      	str	r3, [sp, #36]	@ 0x24
 800abba:	220a      	movs	r2, #10
 800abbc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800abbe:	930c      	str	r3, [sp, #48]	@ 0x30
 800abc0:	2300      	movs	r3, #0
 800abc2:	461f      	mov	r7, r3
 800abc4:	9308      	str	r3, [sp, #32]
 800abc6:	930a      	str	r3, [sp, #40]	@ 0x28
 800abc8:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800abca:	7805      	ldrb	r5, [r0, #0]
 800abcc:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800abd0:	b2d9      	uxtb	r1, r3
 800abd2:	2909      	cmp	r1, #9
 800abd4:	d928      	bls.n	800ac28 <_strtod_l+0x1a8>
 800abd6:	2201      	movs	r2, #1
 800abd8:	494e      	ldr	r1, [pc, #312]	@ (800ad14 <_strtod_l+0x294>)
 800abda:	f001 f9ab 	bl	800bf34 <strncmp>
 800abde:	2800      	cmp	r0, #0
 800abe0:	d033      	beq.n	800ac4a <_strtod_l+0x1ca>
 800abe2:	2000      	movs	r0, #0
 800abe4:	462a      	mov	r2, r5
 800abe6:	463d      	mov	r5, r7
 800abe8:	4681      	mov	r9, r0
 800abea:	4603      	mov	r3, r0
 800abec:	2a65      	cmp	r2, #101	@ 0x65
 800abee:	d001      	beq.n	800abf4 <_strtod_l+0x174>
 800abf0:	2a45      	cmp	r2, #69	@ 0x45
 800abf2:	d114      	bne.n	800ac1e <_strtod_l+0x19e>
 800abf4:	b91d      	cbnz	r5, 800abfe <_strtod_l+0x17e>
 800abf6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800abf8:	4302      	orrs	r2, r0
 800abfa:	d095      	beq.n	800ab28 <_strtod_l+0xa8>
 800abfc:	2500      	movs	r5, #0
 800abfe:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800ac00:	1c62      	adds	r2, r4, #1
 800ac02:	9219      	str	r2, [sp, #100]	@ 0x64
 800ac04:	7862      	ldrb	r2, [r4, #1]
 800ac06:	2a2b      	cmp	r2, #43	@ 0x2b
 800ac08:	d078      	beq.n	800acfc <_strtod_l+0x27c>
 800ac0a:	2a2d      	cmp	r2, #45	@ 0x2d
 800ac0c:	d07c      	beq.n	800ad08 <_strtod_l+0x288>
 800ac0e:	f04f 0c00 	mov.w	ip, #0
 800ac12:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800ac16:	2909      	cmp	r1, #9
 800ac18:	f240 8084 	bls.w	800ad24 <_strtod_l+0x2a4>
 800ac1c:	9419      	str	r4, [sp, #100]	@ 0x64
 800ac1e:	f04f 0800 	mov.w	r8, #0
 800ac22:	e0a4      	b.n	800ad6e <_strtod_l+0x2ee>
 800ac24:	2300      	movs	r3, #0
 800ac26:	e7c7      	b.n	800abb8 <_strtod_l+0x138>
 800ac28:	2f08      	cmp	r7, #8
 800ac2a:	f100 0001 	add.w	r0, r0, #1
 800ac2e:	f107 0701 	add.w	r7, r7, #1
 800ac32:	bfd5      	itete	le
 800ac34:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800ac36:	9908      	ldrgt	r1, [sp, #32]
 800ac38:	fb02 3301 	mlale	r3, r2, r1, r3
 800ac3c:	fb02 3301 	mlagt	r3, r2, r1, r3
 800ac40:	bfd4      	ite	le
 800ac42:	930a      	strle	r3, [sp, #40]	@ 0x28
 800ac44:	9308      	strgt	r3, [sp, #32]
 800ac46:	9019      	str	r0, [sp, #100]	@ 0x64
 800ac48:	e7be      	b.n	800abc8 <_strtod_l+0x148>
 800ac4a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ac4c:	1c5a      	adds	r2, r3, #1
 800ac4e:	9219      	str	r2, [sp, #100]	@ 0x64
 800ac50:	785a      	ldrb	r2, [r3, #1]
 800ac52:	b37f      	cbz	r7, 800acb4 <_strtod_l+0x234>
 800ac54:	4681      	mov	r9, r0
 800ac56:	463d      	mov	r5, r7
 800ac58:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800ac5c:	2b09      	cmp	r3, #9
 800ac5e:	d912      	bls.n	800ac86 <_strtod_l+0x206>
 800ac60:	2301      	movs	r3, #1
 800ac62:	e7c3      	b.n	800abec <_strtod_l+0x16c>
 800ac64:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ac66:	3001      	adds	r0, #1
 800ac68:	1c5a      	adds	r2, r3, #1
 800ac6a:	9219      	str	r2, [sp, #100]	@ 0x64
 800ac6c:	785a      	ldrb	r2, [r3, #1]
 800ac6e:	2a30      	cmp	r2, #48	@ 0x30
 800ac70:	d0f8      	beq.n	800ac64 <_strtod_l+0x1e4>
 800ac72:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800ac76:	2b08      	cmp	r3, #8
 800ac78:	f200 84d2 	bhi.w	800b620 <_strtod_l+0xba0>
 800ac7c:	4681      	mov	r9, r0
 800ac7e:	2000      	movs	r0, #0
 800ac80:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ac82:	4605      	mov	r5, r0
 800ac84:	930c      	str	r3, [sp, #48]	@ 0x30
 800ac86:	3a30      	subs	r2, #48	@ 0x30
 800ac88:	f100 0301 	add.w	r3, r0, #1
 800ac8c:	d02a      	beq.n	800ace4 <_strtod_l+0x264>
 800ac8e:	4499      	add	r9, r3
 800ac90:	eb00 0c05 	add.w	ip, r0, r5
 800ac94:	462b      	mov	r3, r5
 800ac96:	210a      	movs	r1, #10
 800ac98:	4563      	cmp	r3, ip
 800ac9a:	d10d      	bne.n	800acb8 <_strtod_l+0x238>
 800ac9c:	1c69      	adds	r1, r5, #1
 800ac9e:	4401      	add	r1, r0
 800aca0:	4428      	add	r0, r5
 800aca2:	2808      	cmp	r0, #8
 800aca4:	dc16      	bgt.n	800acd4 <_strtod_l+0x254>
 800aca6:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800aca8:	230a      	movs	r3, #10
 800acaa:	fb03 2300 	mla	r3, r3, r0, r2
 800acae:	930a      	str	r3, [sp, #40]	@ 0x28
 800acb0:	2300      	movs	r3, #0
 800acb2:	e018      	b.n	800ace6 <_strtod_l+0x266>
 800acb4:	4638      	mov	r0, r7
 800acb6:	e7da      	b.n	800ac6e <_strtod_l+0x1ee>
 800acb8:	2b08      	cmp	r3, #8
 800acba:	f103 0301 	add.w	r3, r3, #1
 800acbe:	dc03      	bgt.n	800acc8 <_strtod_l+0x248>
 800acc0:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800acc2:	434e      	muls	r6, r1
 800acc4:	960a      	str	r6, [sp, #40]	@ 0x28
 800acc6:	e7e7      	b.n	800ac98 <_strtod_l+0x218>
 800acc8:	2b10      	cmp	r3, #16
 800acca:	bfde      	ittt	le
 800accc:	9e08      	ldrle	r6, [sp, #32]
 800acce:	434e      	mulle	r6, r1
 800acd0:	9608      	strle	r6, [sp, #32]
 800acd2:	e7e1      	b.n	800ac98 <_strtod_l+0x218>
 800acd4:	280f      	cmp	r0, #15
 800acd6:	dceb      	bgt.n	800acb0 <_strtod_l+0x230>
 800acd8:	9808      	ldr	r0, [sp, #32]
 800acda:	230a      	movs	r3, #10
 800acdc:	fb03 2300 	mla	r3, r3, r0, r2
 800ace0:	9308      	str	r3, [sp, #32]
 800ace2:	e7e5      	b.n	800acb0 <_strtod_l+0x230>
 800ace4:	4629      	mov	r1, r5
 800ace6:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800ace8:	460d      	mov	r5, r1
 800acea:	1c50      	adds	r0, r2, #1
 800acec:	9019      	str	r0, [sp, #100]	@ 0x64
 800acee:	4618      	mov	r0, r3
 800acf0:	7852      	ldrb	r2, [r2, #1]
 800acf2:	e7b1      	b.n	800ac58 <_strtod_l+0x1d8>
 800acf4:	f04f 0900 	mov.w	r9, #0
 800acf8:	2301      	movs	r3, #1
 800acfa:	e77c      	b.n	800abf6 <_strtod_l+0x176>
 800acfc:	f04f 0c00 	mov.w	ip, #0
 800ad00:	1ca2      	adds	r2, r4, #2
 800ad02:	9219      	str	r2, [sp, #100]	@ 0x64
 800ad04:	78a2      	ldrb	r2, [r4, #2]
 800ad06:	e784      	b.n	800ac12 <_strtod_l+0x192>
 800ad08:	f04f 0c01 	mov.w	ip, #1
 800ad0c:	e7f8      	b.n	800ad00 <_strtod_l+0x280>
 800ad0e:	bf00      	nop
 800ad10:	0800cce0 	.word	0x0800cce0
 800ad14:	0800ccc8 	.word	0x0800ccc8
 800ad18:	7ff00000 	.word	0x7ff00000
 800ad1c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800ad1e:	1c51      	adds	r1, r2, #1
 800ad20:	9119      	str	r1, [sp, #100]	@ 0x64
 800ad22:	7852      	ldrb	r2, [r2, #1]
 800ad24:	2a30      	cmp	r2, #48	@ 0x30
 800ad26:	d0f9      	beq.n	800ad1c <_strtod_l+0x29c>
 800ad28:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800ad2c:	2908      	cmp	r1, #8
 800ad2e:	f63f af76 	bhi.w	800ac1e <_strtod_l+0x19e>
 800ad32:	3a30      	subs	r2, #48	@ 0x30
 800ad34:	f04f 080a 	mov.w	r8, #10
 800ad38:	920e      	str	r2, [sp, #56]	@ 0x38
 800ad3a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800ad3c:	920f      	str	r2, [sp, #60]	@ 0x3c
 800ad3e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800ad40:	1c56      	adds	r6, r2, #1
 800ad42:	9619      	str	r6, [sp, #100]	@ 0x64
 800ad44:	7852      	ldrb	r2, [r2, #1]
 800ad46:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800ad4a:	f1be 0f09 	cmp.w	lr, #9
 800ad4e:	d939      	bls.n	800adc4 <_strtod_l+0x344>
 800ad50:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800ad52:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800ad56:	1a76      	subs	r6, r6, r1
 800ad58:	2e08      	cmp	r6, #8
 800ad5a:	dc03      	bgt.n	800ad64 <_strtod_l+0x2e4>
 800ad5c:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800ad5e:	4588      	cmp	r8, r1
 800ad60:	bfa8      	it	ge
 800ad62:	4688      	movge	r8, r1
 800ad64:	f1bc 0f00 	cmp.w	ip, #0
 800ad68:	d001      	beq.n	800ad6e <_strtod_l+0x2ee>
 800ad6a:	f1c8 0800 	rsb	r8, r8, #0
 800ad6e:	2d00      	cmp	r5, #0
 800ad70:	d14e      	bne.n	800ae10 <_strtod_l+0x390>
 800ad72:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800ad74:	4308      	orrs	r0, r1
 800ad76:	f47f aebc 	bne.w	800aaf2 <_strtod_l+0x72>
 800ad7a:	2b00      	cmp	r3, #0
 800ad7c:	f47f aed4 	bne.w	800ab28 <_strtod_l+0xa8>
 800ad80:	2a69      	cmp	r2, #105	@ 0x69
 800ad82:	d028      	beq.n	800add6 <_strtod_l+0x356>
 800ad84:	dc25      	bgt.n	800add2 <_strtod_l+0x352>
 800ad86:	2a49      	cmp	r2, #73	@ 0x49
 800ad88:	d025      	beq.n	800add6 <_strtod_l+0x356>
 800ad8a:	2a4e      	cmp	r2, #78	@ 0x4e
 800ad8c:	f47f aecc 	bne.w	800ab28 <_strtod_l+0xa8>
 800ad90:	499b      	ldr	r1, [pc, #620]	@ (800b000 <_strtod_l+0x580>)
 800ad92:	a819      	add	r0, sp, #100	@ 0x64
 800ad94:	f001 fbb0 	bl	800c4f8 <__match>
 800ad98:	2800      	cmp	r0, #0
 800ad9a:	f43f aec5 	beq.w	800ab28 <_strtod_l+0xa8>
 800ad9e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ada0:	781b      	ldrb	r3, [r3, #0]
 800ada2:	2b28      	cmp	r3, #40	@ 0x28
 800ada4:	d12e      	bne.n	800ae04 <_strtod_l+0x384>
 800ada6:	aa1c      	add	r2, sp, #112	@ 0x70
 800ada8:	4996      	ldr	r1, [pc, #600]	@ (800b004 <_strtod_l+0x584>)
 800adaa:	a819      	add	r0, sp, #100	@ 0x64
 800adac:	f001 fbb8 	bl	800c520 <__hexnan>
 800adb0:	2805      	cmp	r0, #5
 800adb2:	d127      	bne.n	800ae04 <_strtod_l+0x384>
 800adb4:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800adb6:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800adba:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800adbe:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800adc2:	e696      	b.n	800aaf2 <_strtod_l+0x72>
 800adc4:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800adc6:	fb08 2101 	mla	r1, r8, r1, r2
 800adca:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800adce:	920e      	str	r2, [sp, #56]	@ 0x38
 800add0:	e7b5      	b.n	800ad3e <_strtod_l+0x2be>
 800add2:	2a6e      	cmp	r2, #110	@ 0x6e
 800add4:	e7da      	b.n	800ad8c <_strtod_l+0x30c>
 800add6:	498c      	ldr	r1, [pc, #560]	@ (800b008 <_strtod_l+0x588>)
 800add8:	a819      	add	r0, sp, #100	@ 0x64
 800adda:	f001 fb8d 	bl	800c4f8 <__match>
 800adde:	2800      	cmp	r0, #0
 800ade0:	f43f aea2 	beq.w	800ab28 <_strtod_l+0xa8>
 800ade4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ade6:	a819      	add	r0, sp, #100	@ 0x64
 800ade8:	4988      	ldr	r1, [pc, #544]	@ (800b00c <_strtod_l+0x58c>)
 800adea:	3b01      	subs	r3, #1
 800adec:	9319      	str	r3, [sp, #100]	@ 0x64
 800adee:	f001 fb83 	bl	800c4f8 <__match>
 800adf2:	b910      	cbnz	r0, 800adfa <_strtod_l+0x37a>
 800adf4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800adf6:	3301      	adds	r3, #1
 800adf8:	9319      	str	r3, [sp, #100]	@ 0x64
 800adfa:	f8df b220 	ldr.w	fp, [pc, #544]	@ 800b01c <_strtod_l+0x59c>
 800adfe:	f04f 0a00 	mov.w	sl, #0
 800ae02:	e676      	b.n	800aaf2 <_strtod_l+0x72>
 800ae04:	4882      	ldr	r0, [pc, #520]	@ (800b010 <_strtod_l+0x590>)
 800ae06:	f001 f8b7 	bl	800bf78 <nan>
 800ae0a:	ec5b ab10 	vmov	sl, fp, d0
 800ae0e:	e670      	b.n	800aaf2 <_strtod_l+0x72>
 800ae10:	eba8 0309 	sub.w	r3, r8, r9
 800ae14:	2f00      	cmp	r7, #0
 800ae16:	bf08      	it	eq
 800ae18:	462f      	moveq	r7, r5
 800ae1a:	2d10      	cmp	r5, #16
 800ae1c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800ae1e:	462c      	mov	r4, r5
 800ae20:	9309      	str	r3, [sp, #36]	@ 0x24
 800ae22:	bfa8      	it	ge
 800ae24:	2410      	movge	r4, #16
 800ae26:	f7f5 fb8b 	bl	8000540 <__aeabi_ui2d>
 800ae2a:	2d09      	cmp	r5, #9
 800ae2c:	4682      	mov	sl, r0
 800ae2e:	468b      	mov	fp, r1
 800ae30:	dc13      	bgt.n	800ae5a <_strtod_l+0x3da>
 800ae32:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ae34:	2b00      	cmp	r3, #0
 800ae36:	f43f ae5c 	beq.w	800aaf2 <_strtod_l+0x72>
 800ae3a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ae3c:	dd78      	ble.n	800af30 <_strtod_l+0x4b0>
 800ae3e:	2b16      	cmp	r3, #22
 800ae40:	dc5f      	bgt.n	800af02 <_strtod_l+0x482>
 800ae42:	4974      	ldr	r1, [pc, #464]	@ (800b014 <_strtod_l+0x594>)
 800ae44:	4652      	mov	r2, sl
 800ae46:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800ae4a:	465b      	mov	r3, fp
 800ae4c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ae50:	f7f5 fbf0 	bl	8000634 <__aeabi_dmul>
 800ae54:	4682      	mov	sl, r0
 800ae56:	468b      	mov	fp, r1
 800ae58:	e64b      	b.n	800aaf2 <_strtod_l+0x72>
 800ae5a:	4b6e      	ldr	r3, [pc, #440]	@ (800b014 <_strtod_l+0x594>)
 800ae5c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800ae60:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800ae64:	f7f5 fbe6 	bl	8000634 <__aeabi_dmul>
 800ae68:	4682      	mov	sl, r0
 800ae6a:	468b      	mov	fp, r1
 800ae6c:	9808      	ldr	r0, [sp, #32]
 800ae6e:	f7f5 fb67 	bl	8000540 <__aeabi_ui2d>
 800ae72:	4602      	mov	r2, r0
 800ae74:	460b      	mov	r3, r1
 800ae76:	4650      	mov	r0, sl
 800ae78:	4659      	mov	r1, fp
 800ae7a:	f7f5 fa25 	bl	80002c8 <__adddf3>
 800ae7e:	2d0f      	cmp	r5, #15
 800ae80:	4682      	mov	sl, r0
 800ae82:	468b      	mov	fp, r1
 800ae84:	ddd5      	ble.n	800ae32 <_strtod_l+0x3b2>
 800ae86:	1b2c      	subs	r4, r5, r4
 800ae88:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ae8a:	441c      	add	r4, r3
 800ae8c:	2c00      	cmp	r4, #0
 800ae8e:	f340 8096 	ble.w	800afbe <_strtod_l+0x53e>
 800ae92:	f014 030f 	ands.w	r3, r4, #15
 800ae96:	d00a      	beq.n	800aeae <_strtod_l+0x42e>
 800ae98:	495e      	ldr	r1, [pc, #376]	@ (800b014 <_strtod_l+0x594>)
 800ae9a:	4652      	mov	r2, sl
 800ae9c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800aea0:	465b      	mov	r3, fp
 800aea2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800aea6:	f7f5 fbc5 	bl	8000634 <__aeabi_dmul>
 800aeaa:	4682      	mov	sl, r0
 800aeac:	468b      	mov	fp, r1
 800aeae:	f034 040f 	bics.w	r4, r4, #15
 800aeb2:	d073      	beq.n	800af9c <_strtod_l+0x51c>
 800aeb4:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800aeb8:	dd48      	ble.n	800af4c <_strtod_l+0x4cc>
 800aeba:	2400      	movs	r4, #0
 800aebc:	46a0      	mov	r8, r4
 800aebe:	46a1      	mov	r9, r4
 800aec0:	940a      	str	r4, [sp, #40]	@ 0x28
 800aec2:	2322      	movs	r3, #34	@ 0x22
 800aec4:	9a05      	ldr	r2, [sp, #20]
 800aec6:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800b01c <_strtod_l+0x59c>
 800aeca:	f04f 0a00 	mov.w	sl, #0
 800aece:	6013      	str	r3, [r2, #0]
 800aed0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800aed2:	2b00      	cmp	r3, #0
 800aed4:	f43f ae0d 	beq.w	800aaf2 <_strtod_l+0x72>
 800aed8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800aeda:	9805      	ldr	r0, [sp, #20]
 800aedc:	f7ff f934 	bl	800a148 <_Bfree>
 800aee0:	4649      	mov	r1, r9
 800aee2:	9805      	ldr	r0, [sp, #20]
 800aee4:	f7ff f930 	bl	800a148 <_Bfree>
 800aee8:	4641      	mov	r1, r8
 800aeea:	9805      	ldr	r0, [sp, #20]
 800aeec:	f7ff f92c 	bl	800a148 <_Bfree>
 800aef0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800aef2:	9805      	ldr	r0, [sp, #20]
 800aef4:	f7ff f928 	bl	800a148 <_Bfree>
 800aef8:	4621      	mov	r1, r4
 800aefa:	9805      	ldr	r0, [sp, #20]
 800aefc:	f7ff f924 	bl	800a148 <_Bfree>
 800af00:	e5f7      	b.n	800aaf2 <_strtod_l+0x72>
 800af02:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800af06:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800af08:	4293      	cmp	r3, r2
 800af0a:	dbbc      	blt.n	800ae86 <_strtod_l+0x406>
 800af0c:	f1c5 050f 	rsb	r5, r5, #15
 800af10:	4c40      	ldr	r4, [pc, #256]	@ (800b014 <_strtod_l+0x594>)
 800af12:	4652      	mov	r2, sl
 800af14:	465b      	mov	r3, fp
 800af16:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800af1a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800af1e:	f7f5 fb89 	bl	8000634 <__aeabi_dmul>
 800af22:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800af24:	1b5d      	subs	r5, r3, r5
 800af26:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800af2a:	e9d4 2300 	ldrd	r2, r3, [r4]
 800af2e:	e78f      	b.n	800ae50 <_strtod_l+0x3d0>
 800af30:	3316      	adds	r3, #22
 800af32:	dba8      	blt.n	800ae86 <_strtod_l+0x406>
 800af34:	eba9 0808 	sub.w	r8, r9, r8
 800af38:	4b36      	ldr	r3, [pc, #216]	@ (800b014 <_strtod_l+0x594>)
 800af3a:	4650      	mov	r0, sl
 800af3c:	4659      	mov	r1, fp
 800af3e:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800af42:	e9d8 2300 	ldrd	r2, r3, [r8]
 800af46:	f7f5 fc9f 	bl	8000888 <__aeabi_ddiv>
 800af4a:	e783      	b.n	800ae54 <_strtod_l+0x3d4>
 800af4c:	4b32      	ldr	r3, [pc, #200]	@ (800b018 <_strtod_l+0x598>)
 800af4e:	1124      	asrs	r4, r4, #4
 800af50:	4650      	mov	r0, sl
 800af52:	4659      	mov	r1, fp
 800af54:	9308      	str	r3, [sp, #32]
 800af56:	2300      	movs	r3, #0
 800af58:	461e      	mov	r6, r3
 800af5a:	2c01      	cmp	r4, #1
 800af5c:	dc21      	bgt.n	800afa2 <_strtod_l+0x522>
 800af5e:	b10b      	cbz	r3, 800af64 <_strtod_l+0x4e4>
 800af60:	4682      	mov	sl, r0
 800af62:	468b      	mov	fp, r1
 800af64:	492c      	ldr	r1, [pc, #176]	@ (800b018 <_strtod_l+0x598>)
 800af66:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800af6a:	4652      	mov	r2, sl
 800af6c:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800af70:	465b      	mov	r3, fp
 800af72:	e9d1 0100 	ldrd	r0, r1, [r1]
 800af76:	f7f5 fb5d 	bl	8000634 <__aeabi_dmul>
 800af7a:	4b28      	ldr	r3, [pc, #160]	@ (800b01c <_strtod_l+0x59c>)
 800af7c:	460a      	mov	r2, r1
 800af7e:	4682      	mov	sl, r0
 800af80:	400b      	ands	r3, r1
 800af82:	4927      	ldr	r1, [pc, #156]	@ (800b020 <_strtod_l+0x5a0>)
 800af84:	428b      	cmp	r3, r1
 800af86:	d898      	bhi.n	800aeba <_strtod_l+0x43a>
 800af88:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800af8c:	428b      	cmp	r3, r1
 800af8e:	bf86      	itte	hi
 800af90:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 800b024 <_strtod_l+0x5a4>
 800af94:	f04f 3aff 	movhi.w	sl, #4294967295
 800af98:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800af9c:	2300      	movs	r3, #0
 800af9e:	9308      	str	r3, [sp, #32]
 800afa0:	e07a      	b.n	800b098 <_strtod_l+0x618>
 800afa2:	07e2      	lsls	r2, r4, #31
 800afa4:	d505      	bpl.n	800afb2 <_strtod_l+0x532>
 800afa6:	9b08      	ldr	r3, [sp, #32]
 800afa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afac:	f7f5 fb42 	bl	8000634 <__aeabi_dmul>
 800afb0:	2301      	movs	r3, #1
 800afb2:	9a08      	ldr	r2, [sp, #32]
 800afb4:	3601      	adds	r6, #1
 800afb6:	1064      	asrs	r4, r4, #1
 800afb8:	3208      	adds	r2, #8
 800afba:	9208      	str	r2, [sp, #32]
 800afbc:	e7cd      	b.n	800af5a <_strtod_l+0x4da>
 800afbe:	d0ed      	beq.n	800af9c <_strtod_l+0x51c>
 800afc0:	4264      	negs	r4, r4
 800afc2:	f014 020f 	ands.w	r2, r4, #15
 800afc6:	d00a      	beq.n	800afde <_strtod_l+0x55e>
 800afc8:	4b12      	ldr	r3, [pc, #72]	@ (800b014 <_strtod_l+0x594>)
 800afca:	4650      	mov	r0, sl
 800afcc:	4659      	mov	r1, fp
 800afce:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800afd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afd6:	f7f5 fc57 	bl	8000888 <__aeabi_ddiv>
 800afda:	4682      	mov	sl, r0
 800afdc:	468b      	mov	fp, r1
 800afde:	1124      	asrs	r4, r4, #4
 800afe0:	d0dc      	beq.n	800af9c <_strtod_l+0x51c>
 800afe2:	2c1f      	cmp	r4, #31
 800afe4:	dd20      	ble.n	800b028 <_strtod_l+0x5a8>
 800afe6:	2400      	movs	r4, #0
 800afe8:	46a0      	mov	r8, r4
 800afea:	46a1      	mov	r9, r4
 800afec:	940a      	str	r4, [sp, #40]	@ 0x28
 800afee:	2322      	movs	r3, #34	@ 0x22
 800aff0:	9a05      	ldr	r2, [sp, #20]
 800aff2:	f04f 0a00 	mov.w	sl, #0
 800aff6:	f04f 0b00 	mov.w	fp, #0
 800affa:	6013      	str	r3, [r2, #0]
 800affc:	e768      	b.n	800aed0 <_strtod_l+0x450>
 800affe:	bf00      	nop
 800b000:	0800cab5 	.word	0x0800cab5
 800b004:	0800cccc 	.word	0x0800cccc
 800b008:	0800caad 	.word	0x0800caad
 800b00c:	0800cae4 	.word	0x0800cae4
 800b010:	0800ce75 	.word	0x0800ce75
 800b014:	0800cc00 	.word	0x0800cc00
 800b018:	0800cbd8 	.word	0x0800cbd8
 800b01c:	7ff00000 	.word	0x7ff00000
 800b020:	7ca00000 	.word	0x7ca00000
 800b024:	7fefffff 	.word	0x7fefffff
 800b028:	f014 0310 	ands.w	r3, r4, #16
 800b02c:	4650      	mov	r0, sl
 800b02e:	4659      	mov	r1, fp
 800b030:	4ea9      	ldr	r6, [pc, #676]	@ (800b2d8 <_strtod_l+0x858>)
 800b032:	bf18      	it	ne
 800b034:	236a      	movne	r3, #106	@ 0x6a
 800b036:	9308      	str	r3, [sp, #32]
 800b038:	2300      	movs	r3, #0
 800b03a:	07e2      	lsls	r2, r4, #31
 800b03c:	d504      	bpl.n	800b048 <_strtod_l+0x5c8>
 800b03e:	e9d6 2300 	ldrd	r2, r3, [r6]
 800b042:	f7f5 faf7 	bl	8000634 <__aeabi_dmul>
 800b046:	2301      	movs	r3, #1
 800b048:	1064      	asrs	r4, r4, #1
 800b04a:	f106 0608 	add.w	r6, r6, #8
 800b04e:	d1f4      	bne.n	800b03a <_strtod_l+0x5ba>
 800b050:	b10b      	cbz	r3, 800b056 <_strtod_l+0x5d6>
 800b052:	4682      	mov	sl, r0
 800b054:	468b      	mov	fp, r1
 800b056:	9b08      	ldr	r3, [sp, #32]
 800b058:	b1b3      	cbz	r3, 800b088 <_strtod_l+0x608>
 800b05a:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800b05e:	4659      	mov	r1, fp
 800b060:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800b064:	2b00      	cmp	r3, #0
 800b066:	dd0f      	ble.n	800b088 <_strtod_l+0x608>
 800b068:	2b1f      	cmp	r3, #31
 800b06a:	dd55      	ble.n	800b118 <_strtod_l+0x698>
 800b06c:	2b34      	cmp	r3, #52	@ 0x34
 800b06e:	f04f 0a00 	mov.w	sl, #0
 800b072:	bfdb      	ittet	le
 800b074:	f04f 33ff 	movle.w	r3, #4294967295
 800b078:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800b07c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800b080:	4093      	lslle	r3, r2
 800b082:	bfd8      	it	le
 800b084:	ea03 0b01 	andle.w	fp, r3, r1
 800b088:	2200      	movs	r2, #0
 800b08a:	2300      	movs	r3, #0
 800b08c:	4650      	mov	r0, sl
 800b08e:	4659      	mov	r1, fp
 800b090:	f7f5 fd38 	bl	8000b04 <__aeabi_dcmpeq>
 800b094:	2800      	cmp	r0, #0
 800b096:	d1a6      	bne.n	800afe6 <_strtod_l+0x566>
 800b098:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b09a:	463a      	mov	r2, r7
 800b09c:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800b09e:	9300      	str	r3, [sp, #0]
 800b0a0:	462b      	mov	r3, r5
 800b0a2:	9805      	ldr	r0, [sp, #20]
 800b0a4:	f7ff f8ba 	bl	800a21c <__s2b>
 800b0a8:	900a      	str	r0, [sp, #40]	@ 0x28
 800b0aa:	2800      	cmp	r0, #0
 800b0ac:	f43f af05 	beq.w	800aeba <_strtod_l+0x43a>
 800b0b0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b0b2:	eba9 0308 	sub.w	r3, r9, r8
 800b0b6:	2400      	movs	r4, #0
 800b0b8:	2a00      	cmp	r2, #0
 800b0ba:	46a0      	mov	r8, r4
 800b0bc:	bfa8      	it	ge
 800b0be:	2300      	movge	r3, #0
 800b0c0:	9312      	str	r3, [sp, #72]	@ 0x48
 800b0c2:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800b0c6:	9316      	str	r3, [sp, #88]	@ 0x58
 800b0c8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b0ca:	9805      	ldr	r0, [sp, #20]
 800b0cc:	6859      	ldr	r1, [r3, #4]
 800b0ce:	f7fe fffb 	bl	800a0c8 <_Balloc>
 800b0d2:	4681      	mov	r9, r0
 800b0d4:	2800      	cmp	r0, #0
 800b0d6:	f43f aef4 	beq.w	800aec2 <_strtod_l+0x442>
 800b0da:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b0dc:	300c      	adds	r0, #12
 800b0de:	691a      	ldr	r2, [r3, #16]
 800b0e0:	f103 010c 	add.w	r1, r3, #12
 800b0e4:	3202      	adds	r2, #2
 800b0e6:	0092      	lsls	r2, r2, #2
 800b0e8:	f7fe f889 	bl	80091fe <memcpy>
 800b0ec:	aa1c      	add	r2, sp, #112	@ 0x70
 800b0ee:	a91b      	add	r1, sp, #108	@ 0x6c
 800b0f0:	9805      	ldr	r0, [sp, #20]
 800b0f2:	ec4b ab10 	vmov	d0, sl, fp
 800b0f6:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800b0fa:	f7ff fbd3 	bl	800a8a4 <__d2b>
 800b0fe:	901a      	str	r0, [sp, #104]	@ 0x68
 800b100:	2800      	cmp	r0, #0
 800b102:	f43f aede 	beq.w	800aec2 <_strtod_l+0x442>
 800b106:	2101      	movs	r1, #1
 800b108:	9805      	ldr	r0, [sp, #20]
 800b10a:	f7ff f91d 	bl	800a348 <__i2b>
 800b10e:	4680      	mov	r8, r0
 800b110:	b948      	cbnz	r0, 800b126 <_strtod_l+0x6a6>
 800b112:	f04f 0800 	mov.w	r8, #0
 800b116:	e6d4      	b.n	800aec2 <_strtod_l+0x442>
 800b118:	f04f 32ff 	mov.w	r2, #4294967295
 800b11c:	fa02 f303 	lsl.w	r3, r2, r3
 800b120:	ea03 0a0a 	and.w	sl, r3, sl
 800b124:	e7b0      	b.n	800b088 <_strtod_l+0x608>
 800b126:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800b128:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800b12a:	2d00      	cmp	r5, #0
 800b12c:	bfa9      	itett	ge
 800b12e:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800b130:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800b132:	18ef      	addge	r7, r5, r3
 800b134:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800b136:	bfb8      	it	lt
 800b138:	1b5e      	sublt	r6, r3, r5
 800b13a:	9b08      	ldr	r3, [sp, #32]
 800b13c:	bfb8      	it	lt
 800b13e:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800b140:	1aed      	subs	r5, r5, r3
 800b142:	4b66      	ldr	r3, [pc, #408]	@ (800b2dc <_strtod_l+0x85c>)
 800b144:	4415      	add	r5, r2
 800b146:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800b14a:	3d01      	subs	r5, #1
 800b14c:	429d      	cmp	r5, r3
 800b14e:	da4f      	bge.n	800b1f0 <_strtod_l+0x770>
 800b150:	1b5b      	subs	r3, r3, r5
 800b152:	2101      	movs	r1, #1
 800b154:	2b1f      	cmp	r3, #31
 800b156:	eba2 0203 	sub.w	r2, r2, r3
 800b15a:	dc3d      	bgt.n	800b1d8 <_strtod_l+0x758>
 800b15c:	fa01 f303 	lsl.w	r3, r1, r3
 800b160:	9313      	str	r3, [sp, #76]	@ 0x4c
 800b162:	2300      	movs	r3, #0
 800b164:	9310      	str	r3, [sp, #64]	@ 0x40
 800b166:	18bd      	adds	r5, r7, r2
 800b168:	9b08      	ldr	r3, [sp, #32]
 800b16a:	4416      	add	r6, r2
 800b16c:	42af      	cmp	r7, r5
 800b16e:	441e      	add	r6, r3
 800b170:	463b      	mov	r3, r7
 800b172:	bfa8      	it	ge
 800b174:	462b      	movge	r3, r5
 800b176:	42b3      	cmp	r3, r6
 800b178:	bfa8      	it	ge
 800b17a:	4633      	movge	r3, r6
 800b17c:	2b00      	cmp	r3, #0
 800b17e:	bfc2      	ittt	gt
 800b180:	1aed      	subgt	r5, r5, r3
 800b182:	1af6      	subgt	r6, r6, r3
 800b184:	1aff      	subgt	r7, r7, r3
 800b186:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800b188:	2b00      	cmp	r3, #0
 800b18a:	dd16      	ble.n	800b1ba <_strtod_l+0x73a>
 800b18c:	4641      	mov	r1, r8
 800b18e:	461a      	mov	r2, r3
 800b190:	9805      	ldr	r0, [sp, #20]
 800b192:	f7ff f999 	bl	800a4c8 <__pow5mult>
 800b196:	4680      	mov	r8, r0
 800b198:	2800      	cmp	r0, #0
 800b19a:	d0ba      	beq.n	800b112 <_strtod_l+0x692>
 800b19c:	4601      	mov	r1, r0
 800b19e:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800b1a0:	9805      	ldr	r0, [sp, #20]
 800b1a2:	f7ff f8e7 	bl	800a374 <__multiply>
 800b1a6:	900e      	str	r0, [sp, #56]	@ 0x38
 800b1a8:	2800      	cmp	r0, #0
 800b1aa:	f43f ae8a 	beq.w	800aec2 <_strtod_l+0x442>
 800b1ae:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b1b0:	9805      	ldr	r0, [sp, #20]
 800b1b2:	f7fe ffc9 	bl	800a148 <_Bfree>
 800b1b6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b1b8:	931a      	str	r3, [sp, #104]	@ 0x68
 800b1ba:	2d00      	cmp	r5, #0
 800b1bc:	dc1d      	bgt.n	800b1fa <_strtod_l+0x77a>
 800b1be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b1c0:	2b00      	cmp	r3, #0
 800b1c2:	dd23      	ble.n	800b20c <_strtod_l+0x78c>
 800b1c4:	4649      	mov	r1, r9
 800b1c6:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800b1c8:	9805      	ldr	r0, [sp, #20]
 800b1ca:	f7ff f97d 	bl	800a4c8 <__pow5mult>
 800b1ce:	4681      	mov	r9, r0
 800b1d0:	b9e0      	cbnz	r0, 800b20c <_strtod_l+0x78c>
 800b1d2:	f04f 0900 	mov.w	r9, #0
 800b1d6:	e674      	b.n	800aec2 <_strtod_l+0x442>
 800b1d8:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800b1dc:	9113      	str	r1, [sp, #76]	@ 0x4c
 800b1de:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800b1e2:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800b1e6:	35e2      	adds	r5, #226	@ 0xe2
 800b1e8:	fa01 f305 	lsl.w	r3, r1, r5
 800b1ec:	9310      	str	r3, [sp, #64]	@ 0x40
 800b1ee:	e7ba      	b.n	800b166 <_strtod_l+0x6e6>
 800b1f0:	2300      	movs	r3, #0
 800b1f2:	9310      	str	r3, [sp, #64]	@ 0x40
 800b1f4:	2301      	movs	r3, #1
 800b1f6:	9313      	str	r3, [sp, #76]	@ 0x4c
 800b1f8:	e7b5      	b.n	800b166 <_strtod_l+0x6e6>
 800b1fa:	462a      	mov	r2, r5
 800b1fc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b1fe:	9805      	ldr	r0, [sp, #20]
 800b200:	f7ff f9bc 	bl	800a57c <__lshift>
 800b204:	901a      	str	r0, [sp, #104]	@ 0x68
 800b206:	2800      	cmp	r0, #0
 800b208:	d1d9      	bne.n	800b1be <_strtod_l+0x73e>
 800b20a:	e65a      	b.n	800aec2 <_strtod_l+0x442>
 800b20c:	2e00      	cmp	r6, #0
 800b20e:	dd07      	ble.n	800b220 <_strtod_l+0x7a0>
 800b210:	4649      	mov	r1, r9
 800b212:	4632      	mov	r2, r6
 800b214:	9805      	ldr	r0, [sp, #20]
 800b216:	f7ff f9b1 	bl	800a57c <__lshift>
 800b21a:	4681      	mov	r9, r0
 800b21c:	2800      	cmp	r0, #0
 800b21e:	d0d8      	beq.n	800b1d2 <_strtod_l+0x752>
 800b220:	2f00      	cmp	r7, #0
 800b222:	dd08      	ble.n	800b236 <_strtod_l+0x7b6>
 800b224:	4641      	mov	r1, r8
 800b226:	463a      	mov	r2, r7
 800b228:	9805      	ldr	r0, [sp, #20]
 800b22a:	f7ff f9a7 	bl	800a57c <__lshift>
 800b22e:	4680      	mov	r8, r0
 800b230:	2800      	cmp	r0, #0
 800b232:	f43f ae46 	beq.w	800aec2 <_strtod_l+0x442>
 800b236:	464a      	mov	r2, r9
 800b238:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b23a:	9805      	ldr	r0, [sp, #20]
 800b23c:	f7ff fa26 	bl	800a68c <__mdiff>
 800b240:	4604      	mov	r4, r0
 800b242:	2800      	cmp	r0, #0
 800b244:	f43f ae3d 	beq.w	800aec2 <_strtod_l+0x442>
 800b248:	68c3      	ldr	r3, [r0, #12]
 800b24a:	4641      	mov	r1, r8
 800b24c:	930f      	str	r3, [sp, #60]	@ 0x3c
 800b24e:	2300      	movs	r3, #0
 800b250:	60c3      	str	r3, [r0, #12]
 800b252:	f7ff f9ff 	bl	800a654 <__mcmp>
 800b256:	2800      	cmp	r0, #0
 800b258:	da46      	bge.n	800b2e8 <_strtod_l+0x868>
 800b25a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b25c:	ea53 030a 	orrs.w	r3, r3, sl
 800b260:	d16c      	bne.n	800b33c <_strtod_l+0x8bc>
 800b262:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b266:	2b00      	cmp	r3, #0
 800b268:	d168      	bne.n	800b33c <_strtod_l+0x8bc>
 800b26a:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800b26e:	0d1b      	lsrs	r3, r3, #20
 800b270:	051b      	lsls	r3, r3, #20
 800b272:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800b276:	d961      	bls.n	800b33c <_strtod_l+0x8bc>
 800b278:	6963      	ldr	r3, [r4, #20]
 800b27a:	b913      	cbnz	r3, 800b282 <_strtod_l+0x802>
 800b27c:	6923      	ldr	r3, [r4, #16]
 800b27e:	2b01      	cmp	r3, #1
 800b280:	dd5c      	ble.n	800b33c <_strtod_l+0x8bc>
 800b282:	4621      	mov	r1, r4
 800b284:	2201      	movs	r2, #1
 800b286:	9805      	ldr	r0, [sp, #20]
 800b288:	f7ff f978 	bl	800a57c <__lshift>
 800b28c:	4641      	mov	r1, r8
 800b28e:	4604      	mov	r4, r0
 800b290:	f7ff f9e0 	bl	800a654 <__mcmp>
 800b294:	2800      	cmp	r0, #0
 800b296:	dd51      	ble.n	800b33c <_strtod_l+0x8bc>
 800b298:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800b29c:	9a08      	ldr	r2, [sp, #32]
 800b29e:	0d1b      	lsrs	r3, r3, #20
 800b2a0:	051b      	lsls	r3, r3, #20
 800b2a2:	2a00      	cmp	r2, #0
 800b2a4:	d06b      	beq.n	800b37e <_strtod_l+0x8fe>
 800b2a6:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800b2aa:	d868      	bhi.n	800b37e <_strtod_l+0x8fe>
 800b2ac:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800b2b0:	f67f ae9d 	bls.w	800afee <_strtod_l+0x56e>
 800b2b4:	4b0a      	ldr	r3, [pc, #40]	@ (800b2e0 <_strtod_l+0x860>)
 800b2b6:	4650      	mov	r0, sl
 800b2b8:	4659      	mov	r1, fp
 800b2ba:	2200      	movs	r2, #0
 800b2bc:	f7f5 f9ba 	bl	8000634 <__aeabi_dmul>
 800b2c0:	4b08      	ldr	r3, [pc, #32]	@ (800b2e4 <_strtod_l+0x864>)
 800b2c2:	4682      	mov	sl, r0
 800b2c4:	468b      	mov	fp, r1
 800b2c6:	400b      	ands	r3, r1
 800b2c8:	2b00      	cmp	r3, #0
 800b2ca:	f47f ae05 	bne.w	800aed8 <_strtod_l+0x458>
 800b2ce:	2322      	movs	r3, #34	@ 0x22
 800b2d0:	9a05      	ldr	r2, [sp, #20]
 800b2d2:	6013      	str	r3, [r2, #0]
 800b2d4:	e600      	b.n	800aed8 <_strtod_l+0x458>
 800b2d6:	bf00      	nop
 800b2d8:	0800ccf8 	.word	0x0800ccf8
 800b2dc:	fffffc02 	.word	0xfffffc02
 800b2e0:	39500000 	.word	0x39500000
 800b2e4:	7ff00000 	.word	0x7ff00000
 800b2e8:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800b2ec:	d165      	bne.n	800b3ba <_strtod_l+0x93a>
 800b2ee:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800b2f0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b2f4:	b35a      	cbz	r2, 800b34e <_strtod_l+0x8ce>
 800b2f6:	4a9e      	ldr	r2, [pc, #632]	@ (800b570 <_strtod_l+0xaf0>)
 800b2f8:	4293      	cmp	r3, r2
 800b2fa:	d12b      	bne.n	800b354 <_strtod_l+0x8d4>
 800b2fc:	9b08      	ldr	r3, [sp, #32]
 800b2fe:	4651      	mov	r1, sl
 800b300:	b303      	cbz	r3, 800b344 <_strtod_l+0x8c4>
 800b302:	465a      	mov	r2, fp
 800b304:	4b9b      	ldr	r3, [pc, #620]	@ (800b574 <_strtod_l+0xaf4>)
 800b306:	4013      	ands	r3, r2
 800b308:	f04f 32ff 	mov.w	r2, #4294967295
 800b30c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800b310:	d81b      	bhi.n	800b34a <_strtod_l+0x8ca>
 800b312:	0d1b      	lsrs	r3, r3, #20
 800b314:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800b318:	fa02 f303 	lsl.w	r3, r2, r3
 800b31c:	4299      	cmp	r1, r3
 800b31e:	d119      	bne.n	800b354 <_strtod_l+0x8d4>
 800b320:	4b95      	ldr	r3, [pc, #596]	@ (800b578 <_strtod_l+0xaf8>)
 800b322:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b324:	429a      	cmp	r2, r3
 800b326:	d102      	bne.n	800b32e <_strtod_l+0x8ae>
 800b328:	3101      	adds	r1, #1
 800b32a:	f43f adca 	beq.w	800aec2 <_strtod_l+0x442>
 800b32e:	4b91      	ldr	r3, [pc, #580]	@ (800b574 <_strtod_l+0xaf4>)
 800b330:	f04f 0a00 	mov.w	sl, #0
 800b334:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b336:	401a      	ands	r2, r3
 800b338:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800b33c:	9b08      	ldr	r3, [sp, #32]
 800b33e:	2b00      	cmp	r3, #0
 800b340:	d1b8      	bne.n	800b2b4 <_strtod_l+0x834>
 800b342:	e5c9      	b.n	800aed8 <_strtod_l+0x458>
 800b344:	f04f 33ff 	mov.w	r3, #4294967295
 800b348:	e7e8      	b.n	800b31c <_strtod_l+0x89c>
 800b34a:	4613      	mov	r3, r2
 800b34c:	e7e6      	b.n	800b31c <_strtod_l+0x89c>
 800b34e:	ea53 030a 	orrs.w	r3, r3, sl
 800b352:	d0a1      	beq.n	800b298 <_strtod_l+0x818>
 800b354:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800b356:	b1db      	cbz	r3, 800b390 <_strtod_l+0x910>
 800b358:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b35a:	4213      	tst	r3, r2
 800b35c:	d0ee      	beq.n	800b33c <_strtod_l+0x8bc>
 800b35e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b360:	4650      	mov	r0, sl
 800b362:	9a08      	ldr	r2, [sp, #32]
 800b364:	4659      	mov	r1, fp
 800b366:	b1bb      	cbz	r3, 800b398 <_strtod_l+0x918>
 800b368:	f7ff fb6a 	bl	800aa40 <sulp>
 800b36c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b370:	ec53 2b10 	vmov	r2, r3, d0
 800b374:	f7f4 ffa8 	bl	80002c8 <__adddf3>
 800b378:	4682      	mov	sl, r0
 800b37a:	468b      	mov	fp, r1
 800b37c:	e7de      	b.n	800b33c <_strtod_l+0x8bc>
 800b37e:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800b382:	f04f 3aff 	mov.w	sl, #4294967295
 800b386:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800b38a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800b38e:	e7d5      	b.n	800b33c <_strtod_l+0x8bc>
 800b390:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800b392:	ea13 0f0a 	tst.w	r3, sl
 800b396:	e7e1      	b.n	800b35c <_strtod_l+0x8dc>
 800b398:	f7ff fb52 	bl	800aa40 <sulp>
 800b39c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b3a0:	ec53 2b10 	vmov	r2, r3, d0
 800b3a4:	f7f4 ff8e 	bl	80002c4 <__aeabi_dsub>
 800b3a8:	2200      	movs	r2, #0
 800b3aa:	2300      	movs	r3, #0
 800b3ac:	4682      	mov	sl, r0
 800b3ae:	468b      	mov	fp, r1
 800b3b0:	f7f5 fba8 	bl	8000b04 <__aeabi_dcmpeq>
 800b3b4:	2800      	cmp	r0, #0
 800b3b6:	d0c1      	beq.n	800b33c <_strtod_l+0x8bc>
 800b3b8:	e619      	b.n	800afee <_strtod_l+0x56e>
 800b3ba:	4641      	mov	r1, r8
 800b3bc:	4620      	mov	r0, r4
 800b3be:	f7ff fac9 	bl	800a954 <__ratio>
 800b3c2:	2200      	movs	r2, #0
 800b3c4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800b3c8:	ec57 6b10 	vmov	r6, r7, d0
 800b3cc:	4630      	mov	r0, r6
 800b3ce:	4639      	mov	r1, r7
 800b3d0:	f7f5 fbac 	bl	8000b2c <__aeabi_dcmple>
 800b3d4:	2800      	cmp	r0, #0
 800b3d6:	d06f      	beq.n	800b4b8 <_strtod_l+0xa38>
 800b3d8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b3da:	2b00      	cmp	r3, #0
 800b3dc:	d17a      	bne.n	800b4d4 <_strtod_l+0xa54>
 800b3de:	f1ba 0f00 	cmp.w	sl, #0
 800b3e2:	d158      	bne.n	800b496 <_strtod_l+0xa16>
 800b3e4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b3e6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b3ea:	2b00      	cmp	r3, #0
 800b3ec:	d15a      	bne.n	800b4a4 <_strtod_l+0xa24>
 800b3ee:	2200      	movs	r2, #0
 800b3f0:	4b62      	ldr	r3, [pc, #392]	@ (800b57c <_strtod_l+0xafc>)
 800b3f2:	4630      	mov	r0, r6
 800b3f4:	4639      	mov	r1, r7
 800b3f6:	f7f5 fb8f 	bl	8000b18 <__aeabi_dcmplt>
 800b3fa:	2800      	cmp	r0, #0
 800b3fc:	d159      	bne.n	800b4b2 <_strtod_l+0xa32>
 800b3fe:	4630      	mov	r0, r6
 800b400:	4639      	mov	r1, r7
 800b402:	2200      	movs	r2, #0
 800b404:	4b5e      	ldr	r3, [pc, #376]	@ (800b580 <_strtod_l+0xb00>)
 800b406:	f7f5 f915 	bl	8000634 <__aeabi_dmul>
 800b40a:	4606      	mov	r6, r0
 800b40c:	460f      	mov	r7, r1
 800b40e:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800b412:	9606      	str	r6, [sp, #24]
 800b414:	9307      	str	r3, [sp, #28]
 800b416:	4d57      	ldr	r5, [pc, #348]	@ (800b574 <_strtod_l+0xaf4>)
 800b418:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b41c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800b420:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b422:	401d      	ands	r5, r3
 800b424:	4b57      	ldr	r3, [pc, #348]	@ (800b584 <_strtod_l+0xb04>)
 800b426:	429d      	cmp	r5, r3
 800b428:	f040 80b0 	bne.w	800b58c <_strtod_l+0xb0c>
 800b42c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b42e:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800b432:	ec4b ab10 	vmov	d0, sl, fp
 800b436:	f7ff f9c1 	bl	800a7bc <__ulp>
 800b43a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b43e:	ec51 0b10 	vmov	r0, r1, d0
 800b442:	f7f5 f8f7 	bl	8000634 <__aeabi_dmul>
 800b446:	4652      	mov	r2, sl
 800b448:	465b      	mov	r3, fp
 800b44a:	f7f4 ff3d 	bl	80002c8 <__adddf3>
 800b44e:	460b      	mov	r3, r1
 800b450:	4948      	ldr	r1, [pc, #288]	@ (800b574 <_strtod_l+0xaf4>)
 800b452:	4682      	mov	sl, r0
 800b454:	4a4c      	ldr	r2, [pc, #304]	@ (800b588 <_strtod_l+0xb08>)
 800b456:	4019      	ands	r1, r3
 800b458:	4291      	cmp	r1, r2
 800b45a:	d942      	bls.n	800b4e2 <_strtod_l+0xa62>
 800b45c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800b45e:	4b46      	ldr	r3, [pc, #280]	@ (800b578 <_strtod_l+0xaf8>)
 800b460:	429a      	cmp	r2, r3
 800b462:	d103      	bne.n	800b46c <_strtod_l+0x9ec>
 800b464:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b466:	3301      	adds	r3, #1
 800b468:	f43f ad2b 	beq.w	800aec2 <_strtod_l+0x442>
 800b46c:	f8df b108 	ldr.w	fp, [pc, #264]	@ 800b578 <_strtod_l+0xaf8>
 800b470:	f04f 3aff 	mov.w	sl, #4294967295
 800b474:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b476:	9805      	ldr	r0, [sp, #20]
 800b478:	f7fe fe66 	bl	800a148 <_Bfree>
 800b47c:	4649      	mov	r1, r9
 800b47e:	9805      	ldr	r0, [sp, #20]
 800b480:	f7fe fe62 	bl	800a148 <_Bfree>
 800b484:	4641      	mov	r1, r8
 800b486:	9805      	ldr	r0, [sp, #20]
 800b488:	f7fe fe5e 	bl	800a148 <_Bfree>
 800b48c:	4621      	mov	r1, r4
 800b48e:	9805      	ldr	r0, [sp, #20]
 800b490:	f7fe fe5a 	bl	800a148 <_Bfree>
 800b494:	e618      	b.n	800b0c8 <_strtod_l+0x648>
 800b496:	f1ba 0f01 	cmp.w	sl, #1
 800b49a:	d103      	bne.n	800b4a4 <_strtod_l+0xa24>
 800b49c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b49e:	2b00      	cmp	r3, #0
 800b4a0:	f43f ada5 	beq.w	800afee <_strtod_l+0x56e>
 800b4a4:	2600      	movs	r6, #0
 800b4a6:	4f35      	ldr	r7, [pc, #212]	@ (800b57c <_strtod_l+0xafc>)
 800b4a8:	ed9f 7b29 	vldr	d7, [pc, #164]	@ 800b550 <_strtod_l+0xad0>
 800b4ac:	ed8d 7b06 	vstr	d7, [sp, #24]
 800b4b0:	e7b1      	b.n	800b416 <_strtod_l+0x996>
 800b4b2:	2600      	movs	r6, #0
 800b4b4:	4f32      	ldr	r7, [pc, #200]	@ (800b580 <_strtod_l+0xb00>)
 800b4b6:	e7aa      	b.n	800b40e <_strtod_l+0x98e>
 800b4b8:	4b31      	ldr	r3, [pc, #196]	@ (800b580 <_strtod_l+0xb00>)
 800b4ba:	4630      	mov	r0, r6
 800b4bc:	4639      	mov	r1, r7
 800b4be:	2200      	movs	r2, #0
 800b4c0:	f7f5 f8b8 	bl	8000634 <__aeabi_dmul>
 800b4c4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b4c6:	4606      	mov	r6, r0
 800b4c8:	460f      	mov	r7, r1
 800b4ca:	2b00      	cmp	r3, #0
 800b4cc:	d09f      	beq.n	800b40e <_strtod_l+0x98e>
 800b4ce:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800b4d2:	e7a0      	b.n	800b416 <_strtod_l+0x996>
 800b4d4:	ed9f 7b20 	vldr	d7, [pc, #128]	@ 800b558 <_strtod_l+0xad8>
 800b4d8:	ec57 6b17 	vmov	r6, r7, d7
 800b4dc:	ed8d 7b06 	vstr	d7, [sp, #24]
 800b4e0:	e799      	b.n	800b416 <_strtod_l+0x996>
 800b4e2:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800b4e6:	9b08      	ldr	r3, [sp, #32]
 800b4e8:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800b4ec:	2b00      	cmp	r3, #0
 800b4ee:	d1c1      	bne.n	800b474 <_strtod_l+0x9f4>
 800b4f0:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800b4f4:	0d1b      	lsrs	r3, r3, #20
 800b4f6:	051b      	lsls	r3, r3, #20
 800b4f8:	429d      	cmp	r5, r3
 800b4fa:	d1bb      	bne.n	800b474 <_strtod_l+0x9f4>
 800b4fc:	4630      	mov	r0, r6
 800b4fe:	4639      	mov	r1, r7
 800b500:	f7f5 fbf8 	bl	8000cf4 <__aeabi_d2lz>
 800b504:	f7f5 f868 	bl	80005d8 <__aeabi_l2d>
 800b508:	4602      	mov	r2, r0
 800b50a:	460b      	mov	r3, r1
 800b50c:	4630      	mov	r0, r6
 800b50e:	4639      	mov	r1, r7
 800b510:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800b514:	f7f4 fed6 	bl	80002c4 <__aeabi_dsub>
 800b518:	460b      	mov	r3, r1
 800b51a:	4602      	mov	r2, r0
 800b51c:	ea46 060a 	orr.w	r6, r6, sl
 800b520:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800b524:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b526:	431e      	orrs	r6, r3
 800b528:	d06d      	beq.n	800b606 <_strtod_l+0xb86>
 800b52a:	a30d      	add	r3, pc, #52	@ (adr r3, 800b560 <_strtod_l+0xae0>)
 800b52c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b530:	f7f5 faf2 	bl	8000b18 <__aeabi_dcmplt>
 800b534:	2800      	cmp	r0, #0
 800b536:	f47f accf 	bne.w	800aed8 <_strtod_l+0x458>
 800b53a:	a30b      	add	r3, pc, #44	@ (adr r3, 800b568 <_strtod_l+0xae8>)
 800b53c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b540:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b544:	f7f5 fb06 	bl	8000b54 <__aeabi_dcmpgt>
 800b548:	2800      	cmp	r0, #0
 800b54a:	d093      	beq.n	800b474 <_strtod_l+0x9f4>
 800b54c:	e4c4      	b.n	800aed8 <_strtod_l+0x458>
 800b54e:	bf00      	nop
 800b550:	00000000 	.word	0x00000000
 800b554:	bff00000 	.word	0xbff00000
 800b558:	00000000 	.word	0x00000000
 800b55c:	3ff00000 	.word	0x3ff00000
 800b560:	94a03595 	.word	0x94a03595
 800b564:	3fdfffff 	.word	0x3fdfffff
 800b568:	35afe535 	.word	0x35afe535
 800b56c:	3fe00000 	.word	0x3fe00000
 800b570:	000fffff 	.word	0x000fffff
 800b574:	7ff00000 	.word	0x7ff00000
 800b578:	7fefffff 	.word	0x7fefffff
 800b57c:	3ff00000 	.word	0x3ff00000
 800b580:	3fe00000 	.word	0x3fe00000
 800b584:	7fe00000 	.word	0x7fe00000
 800b588:	7c9fffff 	.word	0x7c9fffff
 800b58c:	9b08      	ldr	r3, [sp, #32]
 800b58e:	b323      	cbz	r3, 800b5da <_strtod_l+0xb5a>
 800b590:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800b594:	d821      	bhi.n	800b5da <_strtod_l+0xb5a>
 800b596:	4630      	mov	r0, r6
 800b598:	4639      	mov	r1, r7
 800b59a:	a327      	add	r3, pc, #156	@ (adr r3, 800b638 <_strtod_l+0xbb8>)
 800b59c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5a0:	f7f5 fac4 	bl	8000b2c <__aeabi_dcmple>
 800b5a4:	b1a0      	cbz	r0, 800b5d0 <_strtod_l+0xb50>
 800b5a6:	4639      	mov	r1, r7
 800b5a8:	4630      	mov	r0, r6
 800b5aa:	f7f5 fb1b 	bl	8000be4 <__aeabi_d2uiz>
 800b5ae:	2801      	cmp	r0, #1
 800b5b0:	bf38      	it	cc
 800b5b2:	2001      	movcc	r0, #1
 800b5b4:	f7f4 ffc4 	bl	8000540 <__aeabi_ui2d>
 800b5b8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b5ba:	4606      	mov	r6, r0
 800b5bc:	460f      	mov	r7, r1
 800b5be:	b9fb      	cbnz	r3, 800b600 <_strtod_l+0xb80>
 800b5c0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800b5c4:	9014      	str	r0, [sp, #80]	@ 0x50
 800b5c6:	9315      	str	r3, [sp, #84]	@ 0x54
 800b5c8:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800b5cc:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800b5d0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800b5d2:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800b5d6:	1b5b      	subs	r3, r3, r5
 800b5d8:	9311      	str	r3, [sp, #68]	@ 0x44
 800b5da:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800b5de:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800b5e2:	f7ff f8eb 	bl	800a7bc <__ulp>
 800b5e6:	4650      	mov	r0, sl
 800b5e8:	4659      	mov	r1, fp
 800b5ea:	ec53 2b10 	vmov	r2, r3, d0
 800b5ee:	f7f5 f821 	bl	8000634 <__aeabi_dmul>
 800b5f2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800b5f6:	f7f4 fe67 	bl	80002c8 <__adddf3>
 800b5fa:	4682      	mov	sl, r0
 800b5fc:	468b      	mov	fp, r1
 800b5fe:	e772      	b.n	800b4e6 <_strtod_l+0xa66>
 800b600:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800b604:	e7e0      	b.n	800b5c8 <_strtod_l+0xb48>
 800b606:	a30e      	add	r3, pc, #56	@ (adr r3, 800b640 <_strtod_l+0xbc0>)
 800b608:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b60c:	f7f5 fa84 	bl	8000b18 <__aeabi_dcmplt>
 800b610:	e79a      	b.n	800b548 <_strtod_l+0xac8>
 800b612:	2300      	movs	r3, #0
 800b614:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b616:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b618:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800b61a:	6013      	str	r3, [r2, #0]
 800b61c:	f7ff ba6d 	b.w	800aafa <_strtod_l+0x7a>
 800b620:	2a65      	cmp	r2, #101	@ 0x65
 800b622:	f43f ab67 	beq.w	800acf4 <_strtod_l+0x274>
 800b626:	2a45      	cmp	r2, #69	@ 0x45
 800b628:	f43f ab64 	beq.w	800acf4 <_strtod_l+0x274>
 800b62c:	2301      	movs	r3, #1
 800b62e:	f7ff bba0 	b.w	800ad72 <_strtod_l+0x2f2>
 800b632:	bf00      	nop
 800b634:	f3af 8000 	nop.w
 800b638:	ffc00000 	.word	0xffc00000
 800b63c:	41dfffff 	.word	0x41dfffff
 800b640:	94a03595 	.word	0x94a03595
 800b644:	3fcfffff 	.word	0x3fcfffff

0800b648 <_strtod_r>:
 800b648:	4b01      	ldr	r3, [pc, #4]	@ (800b650 <_strtod_r+0x8>)
 800b64a:	f7ff ba19 	b.w	800aa80 <_strtod_l>
 800b64e:	bf00      	nop
 800b650:	20000068 	.word	0x20000068

0800b654 <_strtol_l.constprop.0>:
 800b654:	2b24      	cmp	r3, #36	@ 0x24
 800b656:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b65a:	4686      	mov	lr, r0
 800b65c:	4690      	mov	r8, r2
 800b65e:	d801      	bhi.n	800b664 <_strtol_l.constprop.0+0x10>
 800b660:	2b01      	cmp	r3, #1
 800b662:	d106      	bne.n	800b672 <_strtol_l.constprop.0+0x1e>
 800b664:	f7fd fd90 	bl	8009188 <__errno>
 800b668:	2316      	movs	r3, #22
 800b66a:	6003      	str	r3, [r0, #0]
 800b66c:	2000      	movs	r0, #0
 800b66e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b672:	460d      	mov	r5, r1
 800b674:	4833      	ldr	r0, [pc, #204]	@ (800b744 <_strtol_l.constprop.0+0xf0>)
 800b676:	462a      	mov	r2, r5
 800b678:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b67c:	5d06      	ldrb	r6, [r0, r4]
 800b67e:	f016 0608 	ands.w	r6, r6, #8
 800b682:	d1f8      	bne.n	800b676 <_strtol_l.constprop.0+0x22>
 800b684:	2c2d      	cmp	r4, #45	@ 0x2d
 800b686:	d12d      	bne.n	800b6e4 <_strtol_l.constprop.0+0x90>
 800b688:	782c      	ldrb	r4, [r5, #0]
 800b68a:	2601      	movs	r6, #1
 800b68c:	1c95      	adds	r5, r2, #2
 800b68e:	f033 0210 	bics.w	r2, r3, #16
 800b692:	d109      	bne.n	800b6a8 <_strtol_l.constprop.0+0x54>
 800b694:	2c30      	cmp	r4, #48	@ 0x30
 800b696:	d12a      	bne.n	800b6ee <_strtol_l.constprop.0+0x9a>
 800b698:	782a      	ldrb	r2, [r5, #0]
 800b69a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800b69e:	2a58      	cmp	r2, #88	@ 0x58
 800b6a0:	d125      	bne.n	800b6ee <_strtol_l.constprop.0+0x9a>
 800b6a2:	786c      	ldrb	r4, [r5, #1]
 800b6a4:	2310      	movs	r3, #16
 800b6a6:	3502      	adds	r5, #2
 800b6a8:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800b6ac:	2200      	movs	r2, #0
 800b6ae:	f10c 3cff 	add.w	ip, ip, #4294967295
 800b6b2:	4610      	mov	r0, r2
 800b6b4:	fbbc f9f3 	udiv	r9, ip, r3
 800b6b8:	fb03 ca19 	mls	sl, r3, r9, ip
 800b6bc:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800b6c0:	2f09      	cmp	r7, #9
 800b6c2:	d81b      	bhi.n	800b6fc <_strtol_l.constprop.0+0xa8>
 800b6c4:	463c      	mov	r4, r7
 800b6c6:	42a3      	cmp	r3, r4
 800b6c8:	dd27      	ble.n	800b71a <_strtol_l.constprop.0+0xc6>
 800b6ca:	1c57      	adds	r7, r2, #1
 800b6cc:	d007      	beq.n	800b6de <_strtol_l.constprop.0+0x8a>
 800b6ce:	4581      	cmp	r9, r0
 800b6d0:	d320      	bcc.n	800b714 <_strtol_l.constprop.0+0xc0>
 800b6d2:	d101      	bne.n	800b6d8 <_strtol_l.constprop.0+0x84>
 800b6d4:	45a2      	cmp	sl, r4
 800b6d6:	db1d      	blt.n	800b714 <_strtol_l.constprop.0+0xc0>
 800b6d8:	fb00 4003 	mla	r0, r0, r3, r4
 800b6dc:	2201      	movs	r2, #1
 800b6de:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b6e2:	e7eb      	b.n	800b6bc <_strtol_l.constprop.0+0x68>
 800b6e4:	2c2b      	cmp	r4, #43	@ 0x2b
 800b6e6:	bf04      	itt	eq
 800b6e8:	782c      	ldrbeq	r4, [r5, #0]
 800b6ea:	1c95      	addeq	r5, r2, #2
 800b6ec:	e7cf      	b.n	800b68e <_strtol_l.constprop.0+0x3a>
 800b6ee:	2b00      	cmp	r3, #0
 800b6f0:	d1da      	bne.n	800b6a8 <_strtol_l.constprop.0+0x54>
 800b6f2:	2c30      	cmp	r4, #48	@ 0x30
 800b6f4:	bf0c      	ite	eq
 800b6f6:	2308      	moveq	r3, #8
 800b6f8:	230a      	movne	r3, #10
 800b6fa:	e7d5      	b.n	800b6a8 <_strtol_l.constprop.0+0x54>
 800b6fc:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800b700:	2f19      	cmp	r7, #25
 800b702:	d801      	bhi.n	800b708 <_strtol_l.constprop.0+0xb4>
 800b704:	3c37      	subs	r4, #55	@ 0x37
 800b706:	e7de      	b.n	800b6c6 <_strtol_l.constprop.0+0x72>
 800b708:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800b70c:	2f19      	cmp	r7, #25
 800b70e:	d804      	bhi.n	800b71a <_strtol_l.constprop.0+0xc6>
 800b710:	3c57      	subs	r4, #87	@ 0x57
 800b712:	e7d8      	b.n	800b6c6 <_strtol_l.constprop.0+0x72>
 800b714:	f04f 32ff 	mov.w	r2, #4294967295
 800b718:	e7e1      	b.n	800b6de <_strtol_l.constprop.0+0x8a>
 800b71a:	1c53      	adds	r3, r2, #1
 800b71c:	d108      	bne.n	800b730 <_strtol_l.constprop.0+0xdc>
 800b71e:	2322      	movs	r3, #34	@ 0x22
 800b720:	4660      	mov	r0, ip
 800b722:	f8ce 3000 	str.w	r3, [lr]
 800b726:	f1b8 0f00 	cmp.w	r8, #0
 800b72a:	d0a0      	beq.n	800b66e <_strtol_l.constprop.0+0x1a>
 800b72c:	1e69      	subs	r1, r5, #1
 800b72e:	e006      	b.n	800b73e <_strtol_l.constprop.0+0xea>
 800b730:	b106      	cbz	r6, 800b734 <_strtol_l.constprop.0+0xe0>
 800b732:	4240      	negs	r0, r0
 800b734:	f1b8 0f00 	cmp.w	r8, #0
 800b738:	d099      	beq.n	800b66e <_strtol_l.constprop.0+0x1a>
 800b73a:	2a00      	cmp	r2, #0
 800b73c:	d1f6      	bne.n	800b72c <_strtol_l.constprop.0+0xd8>
 800b73e:	f8c8 1000 	str.w	r1, [r8]
 800b742:	e794      	b.n	800b66e <_strtol_l.constprop.0+0x1a>
 800b744:	0800cd21 	.word	0x0800cd21

0800b748 <_strtol_r>:
 800b748:	f7ff bf84 	b.w	800b654 <_strtol_l.constprop.0>

0800b74c <__ssputs_r>:
 800b74c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b750:	461f      	mov	r7, r3
 800b752:	688e      	ldr	r6, [r1, #8]
 800b754:	4682      	mov	sl, r0
 800b756:	460c      	mov	r4, r1
 800b758:	42be      	cmp	r6, r7
 800b75a:	4690      	mov	r8, r2
 800b75c:	680b      	ldr	r3, [r1, #0]
 800b75e:	d82d      	bhi.n	800b7bc <__ssputs_r+0x70>
 800b760:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b764:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800b768:	d026      	beq.n	800b7b8 <__ssputs_r+0x6c>
 800b76a:	6965      	ldr	r5, [r4, #20]
 800b76c:	6909      	ldr	r1, [r1, #16]
 800b76e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b772:	eba3 0901 	sub.w	r9, r3, r1
 800b776:	1c7b      	adds	r3, r7, #1
 800b778:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b77c:	444b      	add	r3, r9
 800b77e:	106d      	asrs	r5, r5, #1
 800b780:	429d      	cmp	r5, r3
 800b782:	bf38      	it	cc
 800b784:	461d      	movcc	r5, r3
 800b786:	0553      	lsls	r3, r2, #21
 800b788:	d527      	bpl.n	800b7da <__ssputs_r+0x8e>
 800b78a:	4629      	mov	r1, r5
 800b78c:	f7fe fc10 	bl	8009fb0 <_malloc_r>
 800b790:	4606      	mov	r6, r0
 800b792:	b360      	cbz	r0, 800b7ee <__ssputs_r+0xa2>
 800b794:	464a      	mov	r2, r9
 800b796:	6921      	ldr	r1, [r4, #16]
 800b798:	f7fd fd31 	bl	80091fe <memcpy>
 800b79c:	89a3      	ldrh	r3, [r4, #12]
 800b79e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800b7a2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b7a6:	81a3      	strh	r3, [r4, #12]
 800b7a8:	6126      	str	r6, [r4, #16]
 800b7aa:	444e      	add	r6, r9
 800b7ac:	6165      	str	r5, [r4, #20]
 800b7ae:	eba5 0509 	sub.w	r5, r5, r9
 800b7b2:	6026      	str	r6, [r4, #0]
 800b7b4:	463e      	mov	r6, r7
 800b7b6:	60a5      	str	r5, [r4, #8]
 800b7b8:	42be      	cmp	r6, r7
 800b7ba:	d900      	bls.n	800b7be <__ssputs_r+0x72>
 800b7bc:	463e      	mov	r6, r7
 800b7be:	4632      	mov	r2, r6
 800b7c0:	4641      	mov	r1, r8
 800b7c2:	6820      	ldr	r0, [r4, #0]
 800b7c4:	f000 fb9c 	bl	800bf00 <memmove>
 800b7c8:	68a3      	ldr	r3, [r4, #8]
 800b7ca:	2000      	movs	r0, #0
 800b7cc:	1b9b      	subs	r3, r3, r6
 800b7ce:	60a3      	str	r3, [r4, #8]
 800b7d0:	6823      	ldr	r3, [r4, #0]
 800b7d2:	4433      	add	r3, r6
 800b7d4:	6023      	str	r3, [r4, #0]
 800b7d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b7da:	462a      	mov	r2, r5
 800b7dc:	f000 ff4d 	bl	800c67a <_realloc_r>
 800b7e0:	4606      	mov	r6, r0
 800b7e2:	2800      	cmp	r0, #0
 800b7e4:	d1e0      	bne.n	800b7a8 <__ssputs_r+0x5c>
 800b7e6:	6921      	ldr	r1, [r4, #16]
 800b7e8:	4650      	mov	r0, sl
 800b7ea:	f7fe fb6d 	bl	8009ec8 <_free_r>
 800b7ee:	230c      	movs	r3, #12
 800b7f0:	f04f 30ff 	mov.w	r0, #4294967295
 800b7f4:	f8ca 3000 	str.w	r3, [sl]
 800b7f8:	89a3      	ldrh	r3, [r4, #12]
 800b7fa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b7fe:	81a3      	strh	r3, [r4, #12]
 800b800:	e7e9      	b.n	800b7d6 <__ssputs_r+0x8a>
	...

0800b804 <_svfiprintf_r>:
 800b804:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b808:	4698      	mov	r8, r3
 800b80a:	898b      	ldrh	r3, [r1, #12]
 800b80c:	b09d      	sub	sp, #116	@ 0x74
 800b80e:	4607      	mov	r7, r0
 800b810:	061b      	lsls	r3, r3, #24
 800b812:	460d      	mov	r5, r1
 800b814:	4614      	mov	r4, r2
 800b816:	d510      	bpl.n	800b83a <_svfiprintf_r+0x36>
 800b818:	690b      	ldr	r3, [r1, #16]
 800b81a:	b973      	cbnz	r3, 800b83a <_svfiprintf_r+0x36>
 800b81c:	2140      	movs	r1, #64	@ 0x40
 800b81e:	f7fe fbc7 	bl	8009fb0 <_malloc_r>
 800b822:	6028      	str	r0, [r5, #0]
 800b824:	6128      	str	r0, [r5, #16]
 800b826:	b930      	cbnz	r0, 800b836 <_svfiprintf_r+0x32>
 800b828:	230c      	movs	r3, #12
 800b82a:	603b      	str	r3, [r7, #0]
 800b82c:	f04f 30ff 	mov.w	r0, #4294967295
 800b830:	b01d      	add	sp, #116	@ 0x74
 800b832:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b836:	2340      	movs	r3, #64	@ 0x40
 800b838:	616b      	str	r3, [r5, #20]
 800b83a:	2300      	movs	r3, #0
 800b83c:	f8cd 800c 	str.w	r8, [sp, #12]
 800b840:	f04f 0901 	mov.w	r9, #1
 800b844:	f8df 81a0 	ldr.w	r8, [pc, #416]	@ 800b9e8 <_svfiprintf_r+0x1e4>
 800b848:	9309      	str	r3, [sp, #36]	@ 0x24
 800b84a:	2320      	movs	r3, #32
 800b84c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b850:	2330      	movs	r3, #48	@ 0x30
 800b852:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b856:	4623      	mov	r3, r4
 800b858:	469a      	mov	sl, r3
 800b85a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b85e:	b10a      	cbz	r2, 800b864 <_svfiprintf_r+0x60>
 800b860:	2a25      	cmp	r2, #37	@ 0x25
 800b862:	d1f9      	bne.n	800b858 <_svfiprintf_r+0x54>
 800b864:	ebba 0b04 	subs.w	fp, sl, r4
 800b868:	d00b      	beq.n	800b882 <_svfiprintf_r+0x7e>
 800b86a:	465b      	mov	r3, fp
 800b86c:	4622      	mov	r2, r4
 800b86e:	4629      	mov	r1, r5
 800b870:	4638      	mov	r0, r7
 800b872:	f7ff ff6b 	bl	800b74c <__ssputs_r>
 800b876:	3001      	adds	r0, #1
 800b878:	f000 80a7 	beq.w	800b9ca <_svfiprintf_r+0x1c6>
 800b87c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b87e:	445a      	add	r2, fp
 800b880:	9209      	str	r2, [sp, #36]	@ 0x24
 800b882:	f89a 3000 	ldrb.w	r3, [sl]
 800b886:	2b00      	cmp	r3, #0
 800b888:	f000 809f 	beq.w	800b9ca <_svfiprintf_r+0x1c6>
 800b88c:	2300      	movs	r3, #0
 800b88e:	f04f 32ff 	mov.w	r2, #4294967295
 800b892:	f10a 0a01 	add.w	sl, sl, #1
 800b896:	9304      	str	r3, [sp, #16]
 800b898:	9307      	str	r3, [sp, #28]
 800b89a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b89e:	931a      	str	r3, [sp, #104]	@ 0x68
 800b8a0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b8a4:	4654      	mov	r4, sl
 800b8a6:	2205      	movs	r2, #5
 800b8a8:	484f      	ldr	r0, [pc, #316]	@ (800b9e8 <_svfiprintf_r+0x1e4>)
 800b8aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b8ae:	f7fd fc98 	bl	80091e2 <memchr>
 800b8b2:	9a04      	ldr	r2, [sp, #16]
 800b8b4:	b9d8      	cbnz	r0, 800b8ee <_svfiprintf_r+0xea>
 800b8b6:	06d0      	lsls	r0, r2, #27
 800b8b8:	bf44      	itt	mi
 800b8ba:	2320      	movmi	r3, #32
 800b8bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b8c0:	0711      	lsls	r1, r2, #28
 800b8c2:	bf44      	itt	mi
 800b8c4:	232b      	movmi	r3, #43	@ 0x2b
 800b8c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b8ca:	f89a 3000 	ldrb.w	r3, [sl]
 800b8ce:	2b2a      	cmp	r3, #42	@ 0x2a
 800b8d0:	d015      	beq.n	800b8fe <_svfiprintf_r+0xfa>
 800b8d2:	9a07      	ldr	r2, [sp, #28]
 800b8d4:	4654      	mov	r4, sl
 800b8d6:	2000      	movs	r0, #0
 800b8d8:	f04f 0c0a 	mov.w	ip, #10
 800b8dc:	4621      	mov	r1, r4
 800b8de:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b8e2:	3b30      	subs	r3, #48	@ 0x30
 800b8e4:	2b09      	cmp	r3, #9
 800b8e6:	d94b      	bls.n	800b980 <_svfiprintf_r+0x17c>
 800b8e8:	b1b0      	cbz	r0, 800b918 <_svfiprintf_r+0x114>
 800b8ea:	9207      	str	r2, [sp, #28]
 800b8ec:	e014      	b.n	800b918 <_svfiprintf_r+0x114>
 800b8ee:	eba0 0308 	sub.w	r3, r0, r8
 800b8f2:	46a2      	mov	sl, r4
 800b8f4:	fa09 f303 	lsl.w	r3, r9, r3
 800b8f8:	4313      	orrs	r3, r2
 800b8fa:	9304      	str	r3, [sp, #16]
 800b8fc:	e7d2      	b.n	800b8a4 <_svfiprintf_r+0xa0>
 800b8fe:	9b03      	ldr	r3, [sp, #12]
 800b900:	1d19      	adds	r1, r3, #4
 800b902:	681b      	ldr	r3, [r3, #0]
 800b904:	2b00      	cmp	r3, #0
 800b906:	9103      	str	r1, [sp, #12]
 800b908:	bfbb      	ittet	lt
 800b90a:	425b      	neglt	r3, r3
 800b90c:	f042 0202 	orrlt.w	r2, r2, #2
 800b910:	9307      	strge	r3, [sp, #28]
 800b912:	9307      	strlt	r3, [sp, #28]
 800b914:	bfb8      	it	lt
 800b916:	9204      	strlt	r2, [sp, #16]
 800b918:	7823      	ldrb	r3, [r4, #0]
 800b91a:	2b2e      	cmp	r3, #46	@ 0x2e
 800b91c:	d10a      	bne.n	800b934 <_svfiprintf_r+0x130>
 800b91e:	7863      	ldrb	r3, [r4, #1]
 800b920:	2b2a      	cmp	r3, #42	@ 0x2a
 800b922:	d132      	bne.n	800b98a <_svfiprintf_r+0x186>
 800b924:	9b03      	ldr	r3, [sp, #12]
 800b926:	3402      	adds	r4, #2
 800b928:	1d1a      	adds	r2, r3, #4
 800b92a:	681b      	ldr	r3, [r3, #0]
 800b92c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b930:	9203      	str	r2, [sp, #12]
 800b932:	9305      	str	r3, [sp, #20]
 800b934:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800b9f8 <_svfiprintf_r+0x1f4>
 800b938:	2203      	movs	r2, #3
 800b93a:	7821      	ldrb	r1, [r4, #0]
 800b93c:	4650      	mov	r0, sl
 800b93e:	f7fd fc50 	bl	80091e2 <memchr>
 800b942:	b138      	cbz	r0, 800b954 <_svfiprintf_r+0x150>
 800b944:	eba0 000a 	sub.w	r0, r0, sl
 800b948:	2240      	movs	r2, #64	@ 0x40
 800b94a:	9b04      	ldr	r3, [sp, #16]
 800b94c:	3401      	adds	r4, #1
 800b94e:	4082      	lsls	r2, r0
 800b950:	4313      	orrs	r3, r2
 800b952:	9304      	str	r3, [sp, #16]
 800b954:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b958:	2206      	movs	r2, #6
 800b95a:	4824      	ldr	r0, [pc, #144]	@ (800b9ec <_svfiprintf_r+0x1e8>)
 800b95c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b960:	f7fd fc3f 	bl	80091e2 <memchr>
 800b964:	2800      	cmp	r0, #0
 800b966:	d036      	beq.n	800b9d6 <_svfiprintf_r+0x1d2>
 800b968:	4b21      	ldr	r3, [pc, #132]	@ (800b9f0 <_svfiprintf_r+0x1ec>)
 800b96a:	bb1b      	cbnz	r3, 800b9b4 <_svfiprintf_r+0x1b0>
 800b96c:	9b03      	ldr	r3, [sp, #12]
 800b96e:	3307      	adds	r3, #7
 800b970:	f023 0307 	bic.w	r3, r3, #7
 800b974:	3308      	adds	r3, #8
 800b976:	9303      	str	r3, [sp, #12]
 800b978:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b97a:	4433      	add	r3, r6
 800b97c:	9309      	str	r3, [sp, #36]	@ 0x24
 800b97e:	e76a      	b.n	800b856 <_svfiprintf_r+0x52>
 800b980:	fb0c 3202 	mla	r2, ip, r2, r3
 800b984:	460c      	mov	r4, r1
 800b986:	2001      	movs	r0, #1
 800b988:	e7a8      	b.n	800b8dc <_svfiprintf_r+0xd8>
 800b98a:	2300      	movs	r3, #0
 800b98c:	3401      	adds	r4, #1
 800b98e:	f04f 0c0a 	mov.w	ip, #10
 800b992:	4619      	mov	r1, r3
 800b994:	9305      	str	r3, [sp, #20]
 800b996:	4620      	mov	r0, r4
 800b998:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b99c:	3a30      	subs	r2, #48	@ 0x30
 800b99e:	2a09      	cmp	r2, #9
 800b9a0:	d903      	bls.n	800b9aa <_svfiprintf_r+0x1a6>
 800b9a2:	2b00      	cmp	r3, #0
 800b9a4:	d0c6      	beq.n	800b934 <_svfiprintf_r+0x130>
 800b9a6:	9105      	str	r1, [sp, #20]
 800b9a8:	e7c4      	b.n	800b934 <_svfiprintf_r+0x130>
 800b9aa:	fb0c 2101 	mla	r1, ip, r1, r2
 800b9ae:	4604      	mov	r4, r0
 800b9b0:	2301      	movs	r3, #1
 800b9b2:	e7f0      	b.n	800b996 <_svfiprintf_r+0x192>
 800b9b4:	ab03      	add	r3, sp, #12
 800b9b6:	462a      	mov	r2, r5
 800b9b8:	a904      	add	r1, sp, #16
 800b9ba:	4638      	mov	r0, r7
 800b9bc:	9300      	str	r3, [sp, #0]
 800b9be:	4b0d      	ldr	r3, [pc, #52]	@ (800b9f4 <_svfiprintf_r+0x1f0>)
 800b9c0:	f7fc fc8a 	bl	80082d8 <_printf_float>
 800b9c4:	1c42      	adds	r2, r0, #1
 800b9c6:	4606      	mov	r6, r0
 800b9c8:	d1d6      	bne.n	800b978 <_svfiprintf_r+0x174>
 800b9ca:	89ab      	ldrh	r3, [r5, #12]
 800b9cc:	065b      	lsls	r3, r3, #25
 800b9ce:	f53f af2d 	bmi.w	800b82c <_svfiprintf_r+0x28>
 800b9d2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b9d4:	e72c      	b.n	800b830 <_svfiprintf_r+0x2c>
 800b9d6:	ab03      	add	r3, sp, #12
 800b9d8:	462a      	mov	r2, r5
 800b9da:	a904      	add	r1, sp, #16
 800b9dc:	4638      	mov	r0, r7
 800b9de:	9300      	str	r3, [sp, #0]
 800b9e0:	4b04      	ldr	r3, [pc, #16]	@ (800b9f4 <_svfiprintf_r+0x1f0>)
 800b9e2:	f7fc ff15 	bl	8008810 <_printf_i>
 800b9e6:	e7ed      	b.n	800b9c4 <_svfiprintf_r+0x1c0>
 800b9e8:	0800ce21 	.word	0x0800ce21
 800b9ec:	0800ce2b 	.word	0x0800ce2b
 800b9f0:	080082d9 	.word	0x080082d9
 800b9f4:	0800b74d 	.word	0x0800b74d
 800b9f8:	0800ce27 	.word	0x0800ce27

0800b9fc <__sfputc_r>:
 800b9fc:	6893      	ldr	r3, [r2, #8]
 800b9fe:	3b01      	subs	r3, #1
 800ba00:	2b00      	cmp	r3, #0
 800ba02:	6093      	str	r3, [r2, #8]
 800ba04:	b410      	push	{r4}
 800ba06:	da08      	bge.n	800ba1a <__sfputc_r+0x1e>
 800ba08:	6994      	ldr	r4, [r2, #24]
 800ba0a:	42a3      	cmp	r3, r4
 800ba0c:	db01      	blt.n	800ba12 <__sfputc_r+0x16>
 800ba0e:	290a      	cmp	r1, #10
 800ba10:	d103      	bne.n	800ba1a <__sfputc_r+0x1e>
 800ba12:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ba16:	f000 b9df 	b.w	800bdd8 <__swbuf_r>
 800ba1a:	6813      	ldr	r3, [r2, #0]
 800ba1c:	1c58      	adds	r0, r3, #1
 800ba1e:	6010      	str	r0, [r2, #0]
 800ba20:	4608      	mov	r0, r1
 800ba22:	7019      	strb	r1, [r3, #0]
 800ba24:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ba28:	4770      	bx	lr

0800ba2a <__sfputs_r>:
 800ba2a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba2c:	4606      	mov	r6, r0
 800ba2e:	460f      	mov	r7, r1
 800ba30:	4614      	mov	r4, r2
 800ba32:	18d5      	adds	r5, r2, r3
 800ba34:	42ac      	cmp	r4, r5
 800ba36:	d101      	bne.n	800ba3c <__sfputs_r+0x12>
 800ba38:	2000      	movs	r0, #0
 800ba3a:	e007      	b.n	800ba4c <__sfputs_r+0x22>
 800ba3c:	463a      	mov	r2, r7
 800ba3e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ba42:	4630      	mov	r0, r6
 800ba44:	f7ff ffda 	bl	800b9fc <__sfputc_r>
 800ba48:	1c43      	adds	r3, r0, #1
 800ba4a:	d1f3      	bne.n	800ba34 <__sfputs_r+0xa>
 800ba4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ba50 <_vfiprintf_r>:
 800ba50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba54:	460d      	mov	r5, r1
 800ba56:	b09d      	sub	sp, #116	@ 0x74
 800ba58:	4614      	mov	r4, r2
 800ba5a:	4698      	mov	r8, r3
 800ba5c:	4606      	mov	r6, r0
 800ba5e:	b118      	cbz	r0, 800ba68 <_vfiprintf_r+0x18>
 800ba60:	6a03      	ldr	r3, [r0, #32]
 800ba62:	b90b      	cbnz	r3, 800ba68 <_vfiprintf_r+0x18>
 800ba64:	f7fd fa92 	bl	8008f8c <__sinit>
 800ba68:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ba6a:	07d9      	lsls	r1, r3, #31
 800ba6c:	d405      	bmi.n	800ba7a <_vfiprintf_r+0x2a>
 800ba6e:	89ab      	ldrh	r3, [r5, #12]
 800ba70:	059a      	lsls	r2, r3, #22
 800ba72:	d402      	bmi.n	800ba7a <_vfiprintf_r+0x2a>
 800ba74:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ba76:	f7fd fbb2 	bl	80091de <__retarget_lock_acquire_recursive>
 800ba7a:	89ab      	ldrh	r3, [r5, #12]
 800ba7c:	071b      	lsls	r3, r3, #28
 800ba7e:	d501      	bpl.n	800ba84 <_vfiprintf_r+0x34>
 800ba80:	692b      	ldr	r3, [r5, #16]
 800ba82:	b99b      	cbnz	r3, 800baac <_vfiprintf_r+0x5c>
 800ba84:	4629      	mov	r1, r5
 800ba86:	4630      	mov	r0, r6
 800ba88:	f000 f9e4 	bl	800be54 <__swsetup_r>
 800ba8c:	b170      	cbz	r0, 800baac <_vfiprintf_r+0x5c>
 800ba8e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ba90:	07dc      	lsls	r4, r3, #31
 800ba92:	d504      	bpl.n	800ba9e <_vfiprintf_r+0x4e>
 800ba94:	f04f 30ff 	mov.w	r0, #4294967295
 800ba98:	b01d      	add	sp, #116	@ 0x74
 800ba9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba9e:	89ab      	ldrh	r3, [r5, #12]
 800baa0:	0598      	lsls	r0, r3, #22
 800baa2:	d4f7      	bmi.n	800ba94 <_vfiprintf_r+0x44>
 800baa4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800baa6:	f7fd fb9b 	bl	80091e0 <__retarget_lock_release_recursive>
 800baaa:	e7f3      	b.n	800ba94 <_vfiprintf_r+0x44>
 800baac:	2300      	movs	r3, #0
 800baae:	f8cd 800c 	str.w	r8, [sp, #12]
 800bab2:	f04f 0901 	mov.w	r9, #1
 800bab6:	f8df 81b4 	ldr.w	r8, [pc, #436]	@ 800bc6c <_vfiprintf_r+0x21c>
 800baba:	9309      	str	r3, [sp, #36]	@ 0x24
 800babc:	2320      	movs	r3, #32
 800babe:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800bac2:	2330      	movs	r3, #48	@ 0x30
 800bac4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800bac8:	4623      	mov	r3, r4
 800baca:	469a      	mov	sl, r3
 800bacc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bad0:	b10a      	cbz	r2, 800bad6 <_vfiprintf_r+0x86>
 800bad2:	2a25      	cmp	r2, #37	@ 0x25
 800bad4:	d1f9      	bne.n	800baca <_vfiprintf_r+0x7a>
 800bad6:	ebba 0b04 	subs.w	fp, sl, r4
 800bada:	d00b      	beq.n	800baf4 <_vfiprintf_r+0xa4>
 800badc:	465b      	mov	r3, fp
 800bade:	4622      	mov	r2, r4
 800bae0:	4629      	mov	r1, r5
 800bae2:	4630      	mov	r0, r6
 800bae4:	f7ff ffa1 	bl	800ba2a <__sfputs_r>
 800bae8:	3001      	adds	r0, #1
 800baea:	f000 80a7 	beq.w	800bc3c <_vfiprintf_r+0x1ec>
 800baee:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800baf0:	445a      	add	r2, fp
 800baf2:	9209      	str	r2, [sp, #36]	@ 0x24
 800baf4:	f89a 3000 	ldrb.w	r3, [sl]
 800baf8:	2b00      	cmp	r3, #0
 800bafa:	f000 809f 	beq.w	800bc3c <_vfiprintf_r+0x1ec>
 800bafe:	2300      	movs	r3, #0
 800bb00:	f04f 32ff 	mov.w	r2, #4294967295
 800bb04:	f10a 0a01 	add.w	sl, sl, #1
 800bb08:	9304      	str	r3, [sp, #16]
 800bb0a:	9307      	str	r3, [sp, #28]
 800bb0c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800bb10:	931a      	str	r3, [sp, #104]	@ 0x68
 800bb12:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bb16:	4654      	mov	r4, sl
 800bb18:	2205      	movs	r2, #5
 800bb1a:	4854      	ldr	r0, [pc, #336]	@ (800bc6c <_vfiprintf_r+0x21c>)
 800bb1c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bb20:	f7fd fb5f 	bl	80091e2 <memchr>
 800bb24:	9a04      	ldr	r2, [sp, #16]
 800bb26:	b9d8      	cbnz	r0, 800bb60 <_vfiprintf_r+0x110>
 800bb28:	06d1      	lsls	r1, r2, #27
 800bb2a:	bf44      	itt	mi
 800bb2c:	2320      	movmi	r3, #32
 800bb2e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bb32:	0713      	lsls	r3, r2, #28
 800bb34:	bf44      	itt	mi
 800bb36:	232b      	movmi	r3, #43	@ 0x2b
 800bb38:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bb3c:	f89a 3000 	ldrb.w	r3, [sl]
 800bb40:	2b2a      	cmp	r3, #42	@ 0x2a
 800bb42:	d015      	beq.n	800bb70 <_vfiprintf_r+0x120>
 800bb44:	9a07      	ldr	r2, [sp, #28]
 800bb46:	4654      	mov	r4, sl
 800bb48:	2000      	movs	r0, #0
 800bb4a:	f04f 0c0a 	mov.w	ip, #10
 800bb4e:	4621      	mov	r1, r4
 800bb50:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bb54:	3b30      	subs	r3, #48	@ 0x30
 800bb56:	2b09      	cmp	r3, #9
 800bb58:	d94b      	bls.n	800bbf2 <_vfiprintf_r+0x1a2>
 800bb5a:	b1b0      	cbz	r0, 800bb8a <_vfiprintf_r+0x13a>
 800bb5c:	9207      	str	r2, [sp, #28]
 800bb5e:	e014      	b.n	800bb8a <_vfiprintf_r+0x13a>
 800bb60:	eba0 0308 	sub.w	r3, r0, r8
 800bb64:	46a2      	mov	sl, r4
 800bb66:	fa09 f303 	lsl.w	r3, r9, r3
 800bb6a:	4313      	orrs	r3, r2
 800bb6c:	9304      	str	r3, [sp, #16]
 800bb6e:	e7d2      	b.n	800bb16 <_vfiprintf_r+0xc6>
 800bb70:	9b03      	ldr	r3, [sp, #12]
 800bb72:	1d19      	adds	r1, r3, #4
 800bb74:	681b      	ldr	r3, [r3, #0]
 800bb76:	2b00      	cmp	r3, #0
 800bb78:	9103      	str	r1, [sp, #12]
 800bb7a:	bfbb      	ittet	lt
 800bb7c:	425b      	neglt	r3, r3
 800bb7e:	f042 0202 	orrlt.w	r2, r2, #2
 800bb82:	9307      	strge	r3, [sp, #28]
 800bb84:	9307      	strlt	r3, [sp, #28]
 800bb86:	bfb8      	it	lt
 800bb88:	9204      	strlt	r2, [sp, #16]
 800bb8a:	7823      	ldrb	r3, [r4, #0]
 800bb8c:	2b2e      	cmp	r3, #46	@ 0x2e
 800bb8e:	d10a      	bne.n	800bba6 <_vfiprintf_r+0x156>
 800bb90:	7863      	ldrb	r3, [r4, #1]
 800bb92:	2b2a      	cmp	r3, #42	@ 0x2a
 800bb94:	d132      	bne.n	800bbfc <_vfiprintf_r+0x1ac>
 800bb96:	9b03      	ldr	r3, [sp, #12]
 800bb98:	3402      	adds	r4, #2
 800bb9a:	1d1a      	adds	r2, r3, #4
 800bb9c:	681b      	ldr	r3, [r3, #0]
 800bb9e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800bba2:	9203      	str	r2, [sp, #12]
 800bba4:	9305      	str	r3, [sp, #20]
 800bba6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800bc7c <_vfiprintf_r+0x22c>
 800bbaa:	2203      	movs	r2, #3
 800bbac:	7821      	ldrb	r1, [r4, #0]
 800bbae:	4650      	mov	r0, sl
 800bbb0:	f7fd fb17 	bl	80091e2 <memchr>
 800bbb4:	b138      	cbz	r0, 800bbc6 <_vfiprintf_r+0x176>
 800bbb6:	eba0 000a 	sub.w	r0, r0, sl
 800bbba:	2240      	movs	r2, #64	@ 0x40
 800bbbc:	9b04      	ldr	r3, [sp, #16]
 800bbbe:	3401      	adds	r4, #1
 800bbc0:	4082      	lsls	r2, r0
 800bbc2:	4313      	orrs	r3, r2
 800bbc4:	9304      	str	r3, [sp, #16]
 800bbc6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bbca:	2206      	movs	r2, #6
 800bbcc:	4828      	ldr	r0, [pc, #160]	@ (800bc70 <_vfiprintf_r+0x220>)
 800bbce:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800bbd2:	f7fd fb06 	bl	80091e2 <memchr>
 800bbd6:	2800      	cmp	r0, #0
 800bbd8:	d03f      	beq.n	800bc5a <_vfiprintf_r+0x20a>
 800bbda:	4b26      	ldr	r3, [pc, #152]	@ (800bc74 <_vfiprintf_r+0x224>)
 800bbdc:	bb1b      	cbnz	r3, 800bc26 <_vfiprintf_r+0x1d6>
 800bbde:	9b03      	ldr	r3, [sp, #12]
 800bbe0:	3307      	adds	r3, #7
 800bbe2:	f023 0307 	bic.w	r3, r3, #7
 800bbe6:	3308      	adds	r3, #8
 800bbe8:	9303      	str	r3, [sp, #12]
 800bbea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bbec:	443b      	add	r3, r7
 800bbee:	9309      	str	r3, [sp, #36]	@ 0x24
 800bbf0:	e76a      	b.n	800bac8 <_vfiprintf_r+0x78>
 800bbf2:	fb0c 3202 	mla	r2, ip, r2, r3
 800bbf6:	460c      	mov	r4, r1
 800bbf8:	2001      	movs	r0, #1
 800bbfa:	e7a8      	b.n	800bb4e <_vfiprintf_r+0xfe>
 800bbfc:	2300      	movs	r3, #0
 800bbfe:	3401      	adds	r4, #1
 800bc00:	f04f 0c0a 	mov.w	ip, #10
 800bc04:	4619      	mov	r1, r3
 800bc06:	9305      	str	r3, [sp, #20]
 800bc08:	4620      	mov	r0, r4
 800bc0a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bc0e:	3a30      	subs	r2, #48	@ 0x30
 800bc10:	2a09      	cmp	r2, #9
 800bc12:	d903      	bls.n	800bc1c <_vfiprintf_r+0x1cc>
 800bc14:	2b00      	cmp	r3, #0
 800bc16:	d0c6      	beq.n	800bba6 <_vfiprintf_r+0x156>
 800bc18:	9105      	str	r1, [sp, #20]
 800bc1a:	e7c4      	b.n	800bba6 <_vfiprintf_r+0x156>
 800bc1c:	fb0c 2101 	mla	r1, ip, r1, r2
 800bc20:	4604      	mov	r4, r0
 800bc22:	2301      	movs	r3, #1
 800bc24:	e7f0      	b.n	800bc08 <_vfiprintf_r+0x1b8>
 800bc26:	ab03      	add	r3, sp, #12
 800bc28:	462a      	mov	r2, r5
 800bc2a:	a904      	add	r1, sp, #16
 800bc2c:	4630      	mov	r0, r6
 800bc2e:	9300      	str	r3, [sp, #0]
 800bc30:	4b11      	ldr	r3, [pc, #68]	@ (800bc78 <_vfiprintf_r+0x228>)
 800bc32:	f7fc fb51 	bl	80082d8 <_printf_float>
 800bc36:	4607      	mov	r7, r0
 800bc38:	1c78      	adds	r0, r7, #1
 800bc3a:	d1d6      	bne.n	800bbea <_vfiprintf_r+0x19a>
 800bc3c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bc3e:	07d9      	lsls	r1, r3, #31
 800bc40:	d405      	bmi.n	800bc4e <_vfiprintf_r+0x1fe>
 800bc42:	89ab      	ldrh	r3, [r5, #12]
 800bc44:	059a      	lsls	r2, r3, #22
 800bc46:	d402      	bmi.n	800bc4e <_vfiprintf_r+0x1fe>
 800bc48:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bc4a:	f7fd fac9 	bl	80091e0 <__retarget_lock_release_recursive>
 800bc4e:	89ab      	ldrh	r3, [r5, #12]
 800bc50:	065b      	lsls	r3, r3, #25
 800bc52:	f53f af1f 	bmi.w	800ba94 <_vfiprintf_r+0x44>
 800bc56:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800bc58:	e71e      	b.n	800ba98 <_vfiprintf_r+0x48>
 800bc5a:	ab03      	add	r3, sp, #12
 800bc5c:	462a      	mov	r2, r5
 800bc5e:	a904      	add	r1, sp, #16
 800bc60:	4630      	mov	r0, r6
 800bc62:	9300      	str	r3, [sp, #0]
 800bc64:	4b04      	ldr	r3, [pc, #16]	@ (800bc78 <_vfiprintf_r+0x228>)
 800bc66:	f7fc fdd3 	bl	8008810 <_printf_i>
 800bc6a:	e7e4      	b.n	800bc36 <_vfiprintf_r+0x1e6>
 800bc6c:	0800ce21 	.word	0x0800ce21
 800bc70:	0800ce2b 	.word	0x0800ce2b
 800bc74:	080082d9 	.word	0x080082d9
 800bc78:	0800ba2b 	.word	0x0800ba2b
 800bc7c:	0800ce27 	.word	0x0800ce27

0800bc80 <__sflush_r>:
 800bc80:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800bc84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bc88:	0716      	lsls	r6, r2, #28
 800bc8a:	4605      	mov	r5, r0
 800bc8c:	460c      	mov	r4, r1
 800bc8e:	d454      	bmi.n	800bd3a <__sflush_r+0xba>
 800bc90:	684b      	ldr	r3, [r1, #4]
 800bc92:	2b00      	cmp	r3, #0
 800bc94:	dc02      	bgt.n	800bc9c <__sflush_r+0x1c>
 800bc96:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800bc98:	2b00      	cmp	r3, #0
 800bc9a:	dd48      	ble.n	800bd2e <__sflush_r+0xae>
 800bc9c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800bc9e:	2e00      	cmp	r6, #0
 800bca0:	d045      	beq.n	800bd2e <__sflush_r+0xae>
 800bca2:	2300      	movs	r3, #0
 800bca4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800bca8:	682f      	ldr	r7, [r5, #0]
 800bcaa:	6a21      	ldr	r1, [r4, #32]
 800bcac:	602b      	str	r3, [r5, #0]
 800bcae:	d030      	beq.n	800bd12 <__sflush_r+0x92>
 800bcb0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800bcb2:	89a3      	ldrh	r3, [r4, #12]
 800bcb4:	0759      	lsls	r1, r3, #29
 800bcb6:	d505      	bpl.n	800bcc4 <__sflush_r+0x44>
 800bcb8:	6863      	ldr	r3, [r4, #4]
 800bcba:	1ad2      	subs	r2, r2, r3
 800bcbc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800bcbe:	b10b      	cbz	r3, 800bcc4 <__sflush_r+0x44>
 800bcc0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800bcc2:	1ad2      	subs	r2, r2, r3
 800bcc4:	2300      	movs	r3, #0
 800bcc6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800bcc8:	6a21      	ldr	r1, [r4, #32]
 800bcca:	4628      	mov	r0, r5
 800bccc:	47b0      	blx	r6
 800bcce:	1c43      	adds	r3, r0, #1
 800bcd0:	89a3      	ldrh	r3, [r4, #12]
 800bcd2:	d106      	bne.n	800bce2 <__sflush_r+0x62>
 800bcd4:	6829      	ldr	r1, [r5, #0]
 800bcd6:	291d      	cmp	r1, #29
 800bcd8:	d82b      	bhi.n	800bd32 <__sflush_r+0xb2>
 800bcda:	4a2a      	ldr	r2, [pc, #168]	@ (800bd84 <__sflush_r+0x104>)
 800bcdc:	410a      	asrs	r2, r1
 800bcde:	07d6      	lsls	r6, r2, #31
 800bce0:	d427      	bmi.n	800bd32 <__sflush_r+0xb2>
 800bce2:	2200      	movs	r2, #0
 800bce4:	04d9      	lsls	r1, r3, #19
 800bce6:	6062      	str	r2, [r4, #4]
 800bce8:	6922      	ldr	r2, [r4, #16]
 800bcea:	6022      	str	r2, [r4, #0]
 800bcec:	d504      	bpl.n	800bcf8 <__sflush_r+0x78>
 800bcee:	1c42      	adds	r2, r0, #1
 800bcf0:	d101      	bne.n	800bcf6 <__sflush_r+0x76>
 800bcf2:	682b      	ldr	r3, [r5, #0]
 800bcf4:	b903      	cbnz	r3, 800bcf8 <__sflush_r+0x78>
 800bcf6:	6560      	str	r0, [r4, #84]	@ 0x54
 800bcf8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800bcfa:	602f      	str	r7, [r5, #0]
 800bcfc:	b1b9      	cbz	r1, 800bd2e <__sflush_r+0xae>
 800bcfe:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800bd02:	4299      	cmp	r1, r3
 800bd04:	d002      	beq.n	800bd0c <__sflush_r+0x8c>
 800bd06:	4628      	mov	r0, r5
 800bd08:	f7fe f8de 	bl	8009ec8 <_free_r>
 800bd0c:	2300      	movs	r3, #0
 800bd0e:	6363      	str	r3, [r4, #52]	@ 0x34
 800bd10:	e00d      	b.n	800bd2e <__sflush_r+0xae>
 800bd12:	2301      	movs	r3, #1
 800bd14:	4628      	mov	r0, r5
 800bd16:	47b0      	blx	r6
 800bd18:	4602      	mov	r2, r0
 800bd1a:	1c50      	adds	r0, r2, #1
 800bd1c:	d1c9      	bne.n	800bcb2 <__sflush_r+0x32>
 800bd1e:	682b      	ldr	r3, [r5, #0]
 800bd20:	2b00      	cmp	r3, #0
 800bd22:	d0c6      	beq.n	800bcb2 <__sflush_r+0x32>
 800bd24:	2b1d      	cmp	r3, #29
 800bd26:	d001      	beq.n	800bd2c <__sflush_r+0xac>
 800bd28:	2b16      	cmp	r3, #22
 800bd2a:	d11d      	bne.n	800bd68 <__sflush_r+0xe8>
 800bd2c:	602f      	str	r7, [r5, #0]
 800bd2e:	2000      	movs	r0, #0
 800bd30:	e021      	b.n	800bd76 <__sflush_r+0xf6>
 800bd32:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bd36:	b21b      	sxth	r3, r3
 800bd38:	e01a      	b.n	800bd70 <__sflush_r+0xf0>
 800bd3a:	690f      	ldr	r7, [r1, #16]
 800bd3c:	2f00      	cmp	r7, #0
 800bd3e:	d0f6      	beq.n	800bd2e <__sflush_r+0xae>
 800bd40:	0793      	lsls	r3, r2, #30
 800bd42:	680e      	ldr	r6, [r1, #0]
 800bd44:	600f      	str	r7, [r1, #0]
 800bd46:	bf0c      	ite	eq
 800bd48:	694b      	ldreq	r3, [r1, #20]
 800bd4a:	2300      	movne	r3, #0
 800bd4c:	eba6 0807 	sub.w	r8, r6, r7
 800bd50:	608b      	str	r3, [r1, #8]
 800bd52:	f1b8 0f00 	cmp.w	r8, #0
 800bd56:	ddea      	ble.n	800bd2e <__sflush_r+0xae>
 800bd58:	4643      	mov	r3, r8
 800bd5a:	463a      	mov	r2, r7
 800bd5c:	6a21      	ldr	r1, [r4, #32]
 800bd5e:	4628      	mov	r0, r5
 800bd60:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800bd62:	47b0      	blx	r6
 800bd64:	2800      	cmp	r0, #0
 800bd66:	dc08      	bgt.n	800bd7a <__sflush_r+0xfa>
 800bd68:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bd6c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bd70:	f04f 30ff 	mov.w	r0, #4294967295
 800bd74:	81a3      	strh	r3, [r4, #12]
 800bd76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bd7a:	4407      	add	r7, r0
 800bd7c:	eba8 0800 	sub.w	r8, r8, r0
 800bd80:	e7e7      	b.n	800bd52 <__sflush_r+0xd2>
 800bd82:	bf00      	nop
 800bd84:	dfbffffe 	.word	0xdfbffffe

0800bd88 <_fflush_r>:
 800bd88:	b538      	push	{r3, r4, r5, lr}
 800bd8a:	690b      	ldr	r3, [r1, #16]
 800bd8c:	4605      	mov	r5, r0
 800bd8e:	460c      	mov	r4, r1
 800bd90:	b913      	cbnz	r3, 800bd98 <_fflush_r+0x10>
 800bd92:	2500      	movs	r5, #0
 800bd94:	4628      	mov	r0, r5
 800bd96:	bd38      	pop	{r3, r4, r5, pc}
 800bd98:	b118      	cbz	r0, 800bda2 <_fflush_r+0x1a>
 800bd9a:	6a03      	ldr	r3, [r0, #32]
 800bd9c:	b90b      	cbnz	r3, 800bda2 <_fflush_r+0x1a>
 800bd9e:	f7fd f8f5 	bl	8008f8c <__sinit>
 800bda2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bda6:	2b00      	cmp	r3, #0
 800bda8:	d0f3      	beq.n	800bd92 <_fflush_r+0xa>
 800bdaa:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800bdac:	07d0      	lsls	r0, r2, #31
 800bdae:	d404      	bmi.n	800bdba <_fflush_r+0x32>
 800bdb0:	0599      	lsls	r1, r3, #22
 800bdb2:	d402      	bmi.n	800bdba <_fflush_r+0x32>
 800bdb4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bdb6:	f7fd fa12 	bl	80091de <__retarget_lock_acquire_recursive>
 800bdba:	4628      	mov	r0, r5
 800bdbc:	4621      	mov	r1, r4
 800bdbe:	f7ff ff5f 	bl	800bc80 <__sflush_r>
 800bdc2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800bdc4:	4605      	mov	r5, r0
 800bdc6:	07da      	lsls	r2, r3, #31
 800bdc8:	d4e4      	bmi.n	800bd94 <_fflush_r+0xc>
 800bdca:	89a3      	ldrh	r3, [r4, #12]
 800bdcc:	059b      	lsls	r3, r3, #22
 800bdce:	d4e1      	bmi.n	800bd94 <_fflush_r+0xc>
 800bdd0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bdd2:	f7fd fa05 	bl	80091e0 <__retarget_lock_release_recursive>
 800bdd6:	e7dd      	b.n	800bd94 <_fflush_r+0xc>

0800bdd8 <__swbuf_r>:
 800bdd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bdda:	460e      	mov	r6, r1
 800bddc:	4614      	mov	r4, r2
 800bdde:	4605      	mov	r5, r0
 800bde0:	b118      	cbz	r0, 800bdea <__swbuf_r+0x12>
 800bde2:	6a03      	ldr	r3, [r0, #32]
 800bde4:	b90b      	cbnz	r3, 800bdea <__swbuf_r+0x12>
 800bde6:	f7fd f8d1 	bl	8008f8c <__sinit>
 800bdea:	69a3      	ldr	r3, [r4, #24]
 800bdec:	60a3      	str	r3, [r4, #8]
 800bdee:	89a3      	ldrh	r3, [r4, #12]
 800bdf0:	071a      	lsls	r2, r3, #28
 800bdf2:	d501      	bpl.n	800bdf8 <__swbuf_r+0x20>
 800bdf4:	6923      	ldr	r3, [r4, #16]
 800bdf6:	b943      	cbnz	r3, 800be0a <__swbuf_r+0x32>
 800bdf8:	4621      	mov	r1, r4
 800bdfa:	4628      	mov	r0, r5
 800bdfc:	f000 f82a 	bl	800be54 <__swsetup_r>
 800be00:	b118      	cbz	r0, 800be0a <__swbuf_r+0x32>
 800be02:	f04f 37ff 	mov.w	r7, #4294967295
 800be06:	4638      	mov	r0, r7
 800be08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800be0a:	6823      	ldr	r3, [r4, #0]
 800be0c:	b2f6      	uxtb	r6, r6
 800be0e:	6922      	ldr	r2, [r4, #16]
 800be10:	4637      	mov	r7, r6
 800be12:	1a98      	subs	r0, r3, r2
 800be14:	6963      	ldr	r3, [r4, #20]
 800be16:	4283      	cmp	r3, r0
 800be18:	dc05      	bgt.n	800be26 <__swbuf_r+0x4e>
 800be1a:	4621      	mov	r1, r4
 800be1c:	4628      	mov	r0, r5
 800be1e:	f7ff ffb3 	bl	800bd88 <_fflush_r>
 800be22:	2800      	cmp	r0, #0
 800be24:	d1ed      	bne.n	800be02 <__swbuf_r+0x2a>
 800be26:	68a3      	ldr	r3, [r4, #8]
 800be28:	3b01      	subs	r3, #1
 800be2a:	60a3      	str	r3, [r4, #8]
 800be2c:	6823      	ldr	r3, [r4, #0]
 800be2e:	1c5a      	adds	r2, r3, #1
 800be30:	6022      	str	r2, [r4, #0]
 800be32:	701e      	strb	r6, [r3, #0]
 800be34:	1c43      	adds	r3, r0, #1
 800be36:	6962      	ldr	r2, [r4, #20]
 800be38:	429a      	cmp	r2, r3
 800be3a:	d004      	beq.n	800be46 <__swbuf_r+0x6e>
 800be3c:	89a3      	ldrh	r3, [r4, #12]
 800be3e:	07db      	lsls	r3, r3, #31
 800be40:	d5e1      	bpl.n	800be06 <__swbuf_r+0x2e>
 800be42:	2e0a      	cmp	r6, #10
 800be44:	d1df      	bne.n	800be06 <__swbuf_r+0x2e>
 800be46:	4621      	mov	r1, r4
 800be48:	4628      	mov	r0, r5
 800be4a:	f7ff ff9d 	bl	800bd88 <_fflush_r>
 800be4e:	2800      	cmp	r0, #0
 800be50:	d0d9      	beq.n	800be06 <__swbuf_r+0x2e>
 800be52:	e7d6      	b.n	800be02 <__swbuf_r+0x2a>

0800be54 <__swsetup_r>:
 800be54:	b538      	push	{r3, r4, r5, lr}
 800be56:	4b29      	ldr	r3, [pc, #164]	@ (800befc <__swsetup_r+0xa8>)
 800be58:	4605      	mov	r5, r0
 800be5a:	460c      	mov	r4, r1
 800be5c:	6818      	ldr	r0, [r3, #0]
 800be5e:	b118      	cbz	r0, 800be68 <__swsetup_r+0x14>
 800be60:	6a03      	ldr	r3, [r0, #32]
 800be62:	b90b      	cbnz	r3, 800be68 <__swsetup_r+0x14>
 800be64:	f7fd f892 	bl	8008f8c <__sinit>
 800be68:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800be6c:	0719      	lsls	r1, r3, #28
 800be6e:	d422      	bmi.n	800beb6 <__swsetup_r+0x62>
 800be70:	06da      	lsls	r2, r3, #27
 800be72:	d407      	bmi.n	800be84 <__swsetup_r+0x30>
 800be74:	2209      	movs	r2, #9
 800be76:	602a      	str	r2, [r5, #0]
 800be78:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800be7c:	f04f 30ff 	mov.w	r0, #4294967295
 800be80:	81a3      	strh	r3, [r4, #12]
 800be82:	e033      	b.n	800beec <__swsetup_r+0x98>
 800be84:	0758      	lsls	r0, r3, #29
 800be86:	d512      	bpl.n	800beae <__swsetup_r+0x5a>
 800be88:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800be8a:	b141      	cbz	r1, 800be9e <__swsetup_r+0x4a>
 800be8c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800be90:	4299      	cmp	r1, r3
 800be92:	d002      	beq.n	800be9a <__swsetup_r+0x46>
 800be94:	4628      	mov	r0, r5
 800be96:	f7fe f817 	bl	8009ec8 <_free_r>
 800be9a:	2300      	movs	r3, #0
 800be9c:	6363      	str	r3, [r4, #52]	@ 0x34
 800be9e:	89a3      	ldrh	r3, [r4, #12]
 800bea0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800bea4:	81a3      	strh	r3, [r4, #12]
 800bea6:	2300      	movs	r3, #0
 800bea8:	6063      	str	r3, [r4, #4]
 800beaa:	6923      	ldr	r3, [r4, #16]
 800beac:	6023      	str	r3, [r4, #0]
 800beae:	89a3      	ldrh	r3, [r4, #12]
 800beb0:	f043 0308 	orr.w	r3, r3, #8
 800beb4:	81a3      	strh	r3, [r4, #12]
 800beb6:	6923      	ldr	r3, [r4, #16]
 800beb8:	b94b      	cbnz	r3, 800bece <__swsetup_r+0x7a>
 800beba:	89a3      	ldrh	r3, [r4, #12]
 800bebc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800bec0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800bec4:	d003      	beq.n	800bece <__swsetup_r+0x7a>
 800bec6:	4621      	mov	r1, r4
 800bec8:	4628      	mov	r0, r5
 800beca:	f000 fc48 	bl	800c75e <__smakebuf_r>
 800bece:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bed2:	f013 0201 	ands.w	r2, r3, #1
 800bed6:	d00a      	beq.n	800beee <__swsetup_r+0x9a>
 800bed8:	2200      	movs	r2, #0
 800beda:	60a2      	str	r2, [r4, #8]
 800bedc:	6962      	ldr	r2, [r4, #20]
 800bede:	4252      	negs	r2, r2
 800bee0:	61a2      	str	r2, [r4, #24]
 800bee2:	6922      	ldr	r2, [r4, #16]
 800bee4:	b942      	cbnz	r2, 800bef8 <__swsetup_r+0xa4>
 800bee6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800beea:	d1c5      	bne.n	800be78 <__swsetup_r+0x24>
 800beec:	bd38      	pop	{r3, r4, r5, pc}
 800beee:	0799      	lsls	r1, r3, #30
 800bef0:	bf58      	it	pl
 800bef2:	6962      	ldrpl	r2, [r4, #20]
 800bef4:	60a2      	str	r2, [r4, #8]
 800bef6:	e7f4      	b.n	800bee2 <__swsetup_r+0x8e>
 800bef8:	2000      	movs	r0, #0
 800befa:	e7f7      	b.n	800beec <__swsetup_r+0x98>
 800befc:	20000018 	.word	0x20000018

0800bf00 <memmove>:
 800bf00:	4288      	cmp	r0, r1
 800bf02:	b510      	push	{r4, lr}
 800bf04:	eb01 0402 	add.w	r4, r1, r2
 800bf08:	d902      	bls.n	800bf10 <memmove+0x10>
 800bf0a:	4284      	cmp	r4, r0
 800bf0c:	4623      	mov	r3, r4
 800bf0e:	d807      	bhi.n	800bf20 <memmove+0x20>
 800bf10:	1e43      	subs	r3, r0, #1
 800bf12:	42a1      	cmp	r1, r4
 800bf14:	d008      	beq.n	800bf28 <memmove+0x28>
 800bf16:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bf1a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800bf1e:	e7f8      	b.n	800bf12 <memmove+0x12>
 800bf20:	4402      	add	r2, r0
 800bf22:	4601      	mov	r1, r0
 800bf24:	428a      	cmp	r2, r1
 800bf26:	d100      	bne.n	800bf2a <memmove+0x2a>
 800bf28:	bd10      	pop	{r4, pc}
 800bf2a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800bf2e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800bf32:	e7f7      	b.n	800bf24 <memmove+0x24>

0800bf34 <strncmp>:
 800bf34:	b510      	push	{r4, lr}
 800bf36:	b16a      	cbz	r2, 800bf54 <strncmp+0x20>
 800bf38:	3901      	subs	r1, #1
 800bf3a:	1884      	adds	r4, r0, r2
 800bf3c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bf40:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800bf44:	429a      	cmp	r2, r3
 800bf46:	d103      	bne.n	800bf50 <strncmp+0x1c>
 800bf48:	42a0      	cmp	r0, r4
 800bf4a:	d001      	beq.n	800bf50 <strncmp+0x1c>
 800bf4c:	2a00      	cmp	r2, #0
 800bf4e:	d1f5      	bne.n	800bf3c <strncmp+0x8>
 800bf50:	1ad0      	subs	r0, r2, r3
 800bf52:	bd10      	pop	{r4, pc}
 800bf54:	4610      	mov	r0, r2
 800bf56:	e7fc      	b.n	800bf52 <strncmp+0x1e>

0800bf58 <_sbrk_r>:
 800bf58:	b538      	push	{r3, r4, r5, lr}
 800bf5a:	2300      	movs	r3, #0
 800bf5c:	4d05      	ldr	r5, [pc, #20]	@ (800bf74 <_sbrk_r+0x1c>)
 800bf5e:	4604      	mov	r4, r0
 800bf60:	4608      	mov	r0, r1
 800bf62:	602b      	str	r3, [r5, #0]
 800bf64:	f7f5 ff16 	bl	8001d94 <_sbrk>
 800bf68:	1c43      	adds	r3, r0, #1
 800bf6a:	d102      	bne.n	800bf72 <_sbrk_r+0x1a>
 800bf6c:	682b      	ldr	r3, [r5, #0]
 800bf6e:	b103      	cbz	r3, 800bf72 <_sbrk_r+0x1a>
 800bf70:	6023      	str	r3, [r4, #0]
 800bf72:	bd38      	pop	{r3, r4, r5, pc}
 800bf74:	200005dc 	.word	0x200005dc

0800bf78 <nan>:
 800bf78:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800bf80 <nan+0x8>
 800bf7c:	4770      	bx	lr
 800bf7e:	bf00      	nop
 800bf80:	00000000 	.word	0x00000000
 800bf84:	7ff80000 	.word	0x7ff80000

0800bf88 <__assert_func>:
 800bf88:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800bf8a:	4614      	mov	r4, r2
 800bf8c:	461a      	mov	r2, r3
 800bf8e:	4b09      	ldr	r3, [pc, #36]	@ (800bfb4 <__assert_func+0x2c>)
 800bf90:	4605      	mov	r5, r0
 800bf92:	681b      	ldr	r3, [r3, #0]
 800bf94:	68d8      	ldr	r0, [r3, #12]
 800bf96:	b954      	cbnz	r4, 800bfae <__assert_func+0x26>
 800bf98:	4b07      	ldr	r3, [pc, #28]	@ (800bfb8 <__assert_func+0x30>)
 800bf9a:	461c      	mov	r4, r3
 800bf9c:	9100      	str	r1, [sp, #0]
 800bf9e:	4907      	ldr	r1, [pc, #28]	@ (800bfbc <__assert_func+0x34>)
 800bfa0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800bfa4:	462b      	mov	r3, r5
 800bfa6:	f000 fba3 	bl	800c6f0 <fiprintf>
 800bfaa:	f000 fc37 	bl	800c81c <abort>
 800bfae:	4b04      	ldr	r3, [pc, #16]	@ (800bfc0 <__assert_func+0x38>)
 800bfb0:	e7f4      	b.n	800bf9c <__assert_func+0x14>
 800bfb2:	bf00      	nop
 800bfb4:	20000018 	.word	0x20000018
 800bfb8:	0800ce75 	.word	0x0800ce75
 800bfbc:	0800ce47 	.word	0x0800ce47
 800bfc0:	0800ce3a 	.word	0x0800ce3a

0800bfc4 <_calloc_r>:
 800bfc4:	b570      	push	{r4, r5, r6, lr}
 800bfc6:	fba1 5402 	umull	r5, r4, r1, r2
 800bfca:	b93c      	cbnz	r4, 800bfdc <_calloc_r+0x18>
 800bfcc:	4629      	mov	r1, r5
 800bfce:	f7fd ffef 	bl	8009fb0 <_malloc_r>
 800bfd2:	4606      	mov	r6, r0
 800bfd4:	b928      	cbnz	r0, 800bfe2 <_calloc_r+0x1e>
 800bfd6:	2600      	movs	r6, #0
 800bfd8:	4630      	mov	r0, r6
 800bfda:	bd70      	pop	{r4, r5, r6, pc}
 800bfdc:	220c      	movs	r2, #12
 800bfde:	6002      	str	r2, [r0, #0]
 800bfe0:	e7f9      	b.n	800bfd6 <_calloc_r+0x12>
 800bfe2:	462a      	mov	r2, r5
 800bfe4:	4621      	mov	r1, r4
 800bfe6:	f7fd f87c 	bl	80090e2 <memset>
 800bfea:	e7f5      	b.n	800bfd8 <_calloc_r+0x14>

0800bfec <rshift>:
 800bfec:	6903      	ldr	r3, [r0, #16]
 800bfee:	114a      	asrs	r2, r1, #5
 800bff0:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800bff4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800bff8:	f100 0414 	add.w	r4, r0, #20
 800bffc:	dd45      	ble.n	800c08a <rshift+0x9e>
 800bffe:	f011 011f 	ands.w	r1, r1, #31
 800c002:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800c006:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800c00a:	d10c      	bne.n	800c026 <rshift+0x3a>
 800c00c:	f100 0710 	add.w	r7, r0, #16
 800c010:	4629      	mov	r1, r5
 800c012:	42b1      	cmp	r1, r6
 800c014:	d334      	bcc.n	800c080 <rshift+0x94>
 800c016:	1a9b      	subs	r3, r3, r2
 800c018:	1eea      	subs	r2, r5, #3
 800c01a:	009b      	lsls	r3, r3, #2
 800c01c:	4296      	cmp	r6, r2
 800c01e:	bf38      	it	cc
 800c020:	2300      	movcc	r3, #0
 800c022:	4423      	add	r3, r4
 800c024:	e015      	b.n	800c052 <rshift+0x66>
 800c026:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800c02a:	f1c1 0820 	rsb	r8, r1, #32
 800c02e:	f105 0e04 	add.w	lr, r5, #4
 800c032:	46a1      	mov	r9, r4
 800c034:	40cf      	lsrs	r7, r1
 800c036:	4576      	cmp	r6, lr
 800c038:	46f4      	mov	ip, lr
 800c03a:	d815      	bhi.n	800c068 <rshift+0x7c>
 800c03c:	1a9a      	subs	r2, r3, r2
 800c03e:	3501      	adds	r5, #1
 800c040:	0092      	lsls	r2, r2, #2
 800c042:	3a04      	subs	r2, #4
 800c044:	42ae      	cmp	r6, r5
 800c046:	bf38      	it	cc
 800c048:	2200      	movcc	r2, #0
 800c04a:	18a3      	adds	r3, r4, r2
 800c04c:	50a7      	str	r7, [r4, r2]
 800c04e:	b107      	cbz	r7, 800c052 <rshift+0x66>
 800c050:	3304      	adds	r3, #4
 800c052:	1b1a      	subs	r2, r3, r4
 800c054:	42a3      	cmp	r3, r4
 800c056:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800c05a:	bf08      	it	eq
 800c05c:	2300      	moveq	r3, #0
 800c05e:	6102      	str	r2, [r0, #16]
 800c060:	bf08      	it	eq
 800c062:	6143      	streq	r3, [r0, #20]
 800c064:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c068:	f8dc c000 	ldr.w	ip, [ip]
 800c06c:	fa0c fc08 	lsl.w	ip, ip, r8
 800c070:	ea4c 0707 	orr.w	r7, ip, r7
 800c074:	f849 7b04 	str.w	r7, [r9], #4
 800c078:	f85e 7b04 	ldr.w	r7, [lr], #4
 800c07c:	40cf      	lsrs	r7, r1
 800c07e:	e7da      	b.n	800c036 <rshift+0x4a>
 800c080:	f851 cb04 	ldr.w	ip, [r1], #4
 800c084:	f847 cf04 	str.w	ip, [r7, #4]!
 800c088:	e7c3      	b.n	800c012 <rshift+0x26>
 800c08a:	4623      	mov	r3, r4
 800c08c:	e7e1      	b.n	800c052 <rshift+0x66>

0800c08e <__hexdig_fun>:
 800c08e:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800c092:	2b09      	cmp	r3, #9
 800c094:	d802      	bhi.n	800c09c <__hexdig_fun+0xe>
 800c096:	3820      	subs	r0, #32
 800c098:	b2c0      	uxtb	r0, r0
 800c09a:	4770      	bx	lr
 800c09c:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800c0a0:	2b05      	cmp	r3, #5
 800c0a2:	d801      	bhi.n	800c0a8 <__hexdig_fun+0x1a>
 800c0a4:	3847      	subs	r0, #71	@ 0x47
 800c0a6:	e7f7      	b.n	800c098 <__hexdig_fun+0xa>
 800c0a8:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800c0ac:	2b05      	cmp	r3, #5
 800c0ae:	d801      	bhi.n	800c0b4 <__hexdig_fun+0x26>
 800c0b0:	3827      	subs	r0, #39	@ 0x27
 800c0b2:	e7f1      	b.n	800c098 <__hexdig_fun+0xa>
 800c0b4:	2000      	movs	r0, #0
 800c0b6:	4770      	bx	lr

0800c0b8 <__gethex>:
 800c0b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c0bc:	b085      	sub	sp, #20
 800c0be:	468a      	mov	sl, r1
 800c0c0:	4690      	mov	r8, r2
 800c0c2:	9302      	str	r3, [sp, #8]
 800c0c4:	680b      	ldr	r3, [r1, #0]
 800c0c6:	9001      	str	r0, [sp, #4]
 800c0c8:	1c9c      	adds	r4, r3, #2
 800c0ca:	46a1      	mov	r9, r4
 800c0cc:	f814 0b01 	ldrb.w	r0, [r4], #1
 800c0d0:	2830      	cmp	r0, #48	@ 0x30
 800c0d2:	d0fa      	beq.n	800c0ca <__gethex+0x12>
 800c0d4:	eba9 0303 	sub.w	r3, r9, r3
 800c0d8:	f1a3 0b02 	sub.w	fp, r3, #2
 800c0dc:	f7ff ffd7 	bl	800c08e <__hexdig_fun>
 800c0e0:	4605      	mov	r5, r0
 800c0e2:	2800      	cmp	r0, #0
 800c0e4:	d166      	bne.n	800c1b4 <__gethex+0xfc>
 800c0e6:	2201      	movs	r2, #1
 800c0e8:	499e      	ldr	r1, [pc, #632]	@ (800c364 <__gethex+0x2ac>)
 800c0ea:	4648      	mov	r0, r9
 800c0ec:	f7ff ff22 	bl	800bf34 <strncmp>
 800c0f0:	4607      	mov	r7, r0
 800c0f2:	2800      	cmp	r0, #0
 800c0f4:	d165      	bne.n	800c1c2 <__gethex+0x10a>
 800c0f6:	f899 0001 	ldrb.w	r0, [r9, #1]
 800c0fa:	4626      	mov	r6, r4
 800c0fc:	f7ff ffc7 	bl	800c08e <__hexdig_fun>
 800c100:	2800      	cmp	r0, #0
 800c102:	d060      	beq.n	800c1c6 <__gethex+0x10e>
 800c104:	4623      	mov	r3, r4
 800c106:	7818      	ldrb	r0, [r3, #0]
 800c108:	4699      	mov	r9, r3
 800c10a:	3301      	adds	r3, #1
 800c10c:	2830      	cmp	r0, #48	@ 0x30
 800c10e:	d0fa      	beq.n	800c106 <__gethex+0x4e>
 800c110:	f7ff ffbd 	bl	800c08e <__hexdig_fun>
 800c114:	fab0 f580 	clz	r5, r0
 800c118:	f04f 0b01 	mov.w	fp, #1
 800c11c:	096d      	lsrs	r5, r5, #5
 800c11e:	464a      	mov	r2, r9
 800c120:	4616      	mov	r6, r2
 800c122:	3201      	adds	r2, #1
 800c124:	7830      	ldrb	r0, [r6, #0]
 800c126:	f7ff ffb2 	bl	800c08e <__hexdig_fun>
 800c12a:	2800      	cmp	r0, #0
 800c12c:	d1f8      	bne.n	800c120 <__gethex+0x68>
 800c12e:	2201      	movs	r2, #1
 800c130:	498c      	ldr	r1, [pc, #560]	@ (800c364 <__gethex+0x2ac>)
 800c132:	4630      	mov	r0, r6
 800c134:	f7ff fefe 	bl	800bf34 <strncmp>
 800c138:	2800      	cmp	r0, #0
 800c13a:	d13e      	bne.n	800c1ba <__gethex+0x102>
 800c13c:	b944      	cbnz	r4, 800c150 <__gethex+0x98>
 800c13e:	1c74      	adds	r4, r6, #1
 800c140:	4622      	mov	r2, r4
 800c142:	4616      	mov	r6, r2
 800c144:	3201      	adds	r2, #1
 800c146:	7830      	ldrb	r0, [r6, #0]
 800c148:	f7ff ffa1 	bl	800c08e <__hexdig_fun>
 800c14c:	2800      	cmp	r0, #0
 800c14e:	d1f8      	bne.n	800c142 <__gethex+0x8a>
 800c150:	1ba4      	subs	r4, r4, r6
 800c152:	00a7      	lsls	r7, r4, #2
 800c154:	7833      	ldrb	r3, [r6, #0]
 800c156:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800c15a:	2b50      	cmp	r3, #80	@ 0x50
 800c15c:	d13d      	bne.n	800c1da <__gethex+0x122>
 800c15e:	7873      	ldrb	r3, [r6, #1]
 800c160:	2b2b      	cmp	r3, #43	@ 0x2b
 800c162:	d032      	beq.n	800c1ca <__gethex+0x112>
 800c164:	2b2d      	cmp	r3, #45	@ 0x2d
 800c166:	d033      	beq.n	800c1d0 <__gethex+0x118>
 800c168:	1c71      	adds	r1, r6, #1
 800c16a:	2400      	movs	r4, #0
 800c16c:	7808      	ldrb	r0, [r1, #0]
 800c16e:	f7ff ff8e 	bl	800c08e <__hexdig_fun>
 800c172:	1e43      	subs	r3, r0, #1
 800c174:	b2db      	uxtb	r3, r3
 800c176:	2b18      	cmp	r3, #24
 800c178:	d82f      	bhi.n	800c1da <__gethex+0x122>
 800c17a:	f1a0 0210 	sub.w	r2, r0, #16
 800c17e:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800c182:	f7ff ff84 	bl	800c08e <__hexdig_fun>
 800c186:	f100 3cff 	add.w	ip, r0, #4294967295
 800c18a:	230a      	movs	r3, #10
 800c18c:	fa5f fc8c 	uxtb.w	ip, ip
 800c190:	f1bc 0f18 	cmp.w	ip, #24
 800c194:	d91e      	bls.n	800c1d4 <__gethex+0x11c>
 800c196:	b104      	cbz	r4, 800c19a <__gethex+0xe2>
 800c198:	4252      	negs	r2, r2
 800c19a:	4417      	add	r7, r2
 800c19c:	f8ca 1000 	str.w	r1, [sl]
 800c1a0:	b1ed      	cbz	r5, 800c1de <__gethex+0x126>
 800c1a2:	f1bb 0f00 	cmp.w	fp, #0
 800c1a6:	bf0c      	ite	eq
 800c1a8:	2506      	moveq	r5, #6
 800c1aa:	2500      	movne	r5, #0
 800c1ac:	4628      	mov	r0, r5
 800c1ae:	b005      	add	sp, #20
 800c1b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c1b4:	2500      	movs	r5, #0
 800c1b6:	462c      	mov	r4, r5
 800c1b8:	e7b1      	b.n	800c11e <__gethex+0x66>
 800c1ba:	2c00      	cmp	r4, #0
 800c1bc:	d1c8      	bne.n	800c150 <__gethex+0x98>
 800c1be:	4627      	mov	r7, r4
 800c1c0:	e7c8      	b.n	800c154 <__gethex+0x9c>
 800c1c2:	464e      	mov	r6, r9
 800c1c4:	462f      	mov	r7, r5
 800c1c6:	2501      	movs	r5, #1
 800c1c8:	e7c4      	b.n	800c154 <__gethex+0x9c>
 800c1ca:	2400      	movs	r4, #0
 800c1cc:	1cb1      	adds	r1, r6, #2
 800c1ce:	e7cd      	b.n	800c16c <__gethex+0xb4>
 800c1d0:	2401      	movs	r4, #1
 800c1d2:	e7fb      	b.n	800c1cc <__gethex+0x114>
 800c1d4:	fb03 0002 	mla	r0, r3, r2, r0
 800c1d8:	e7cf      	b.n	800c17a <__gethex+0xc2>
 800c1da:	4631      	mov	r1, r6
 800c1dc:	e7de      	b.n	800c19c <__gethex+0xe4>
 800c1de:	eba6 0309 	sub.w	r3, r6, r9
 800c1e2:	4629      	mov	r1, r5
 800c1e4:	3b01      	subs	r3, #1
 800c1e6:	2b07      	cmp	r3, #7
 800c1e8:	dc0a      	bgt.n	800c200 <__gethex+0x148>
 800c1ea:	9801      	ldr	r0, [sp, #4]
 800c1ec:	f7fd ff6c 	bl	800a0c8 <_Balloc>
 800c1f0:	4604      	mov	r4, r0
 800c1f2:	b940      	cbnz	r0, 800c206 <__gethex+0x14e>
 800c1f4:	4b5c      	ldr	r3, [pc, #368]	@ (800c368 <__gethex+0x2b0>)
 800c1f6:	4602      	mov	r2, r0
 800c1f8:	21e4      	movs	r1, #228	@ 0xe4
 800c1fa:	485c      	ldr	r0, [pc, #368]	@ (800c36c <__gethex+0x2b4>)
 800c1fc:	f7ff fec4 	bl	800bf88 <__assert_func>
 800c200:	3101      	adds	r1, #1
 800c202:	105b      	asrs	r3, r3, #1
 800c204:	e7ef      	b.n	800c1e6 <__gethex+0x12e>
 800c206:	f100 0a14 	add.w	sl, r0, #20
 800c20a:	2300      	movs	r3, #0
 800c20c:	4655      	mov	r5, sl
 800c20e:	469b      	mov	fp, r3
 800c210:	45b1      	cmp	r9, r6
 800c212:	d337      	bcc.n	800c284 <__gethex+0x1cc>
 800c214:	f845 bb04 	str.w	fp, [r5], #4
 800c218:	eba5 050a 	sub.w	r5, r5, sl
 800c21c:	4658      	mov	r0, fp
 800c21e:	10ad      	asrs	r5, r5, #2
 800c220:	6125      	str	r5, [r4, #16]
 800c222:	016d      	lsls	r5, r5, #5
 800c224:	f7fe f844 	bl	800a2b0 <__hi0bits>
 800c228:	f8d8 6000 	ldr.w	r6, [r8]
 800c22c:	1a2d      	subs	r5, r5, r0
 800c22e:	42b5      	cmp	r5, r6
 800c230:	dd54      	ble.n	800c2dc <__gethex+0x224>
 800c232:	1bad      	subs	r5, r5, r6
 800c234:	4620      	mov	r0, r4
 800c236:	4629      	mov	r1, r5
 800c238:	f7fe fbe1 	bl	800a9fe <__any_on>
 800c23c:	4681      	mov	r9, r0
 800c23e:	b178      	cbz	r0, 800c260 <__gethex+0x1a8>
 800c240:	1e6b      	subs	r3, r5, #1
 800c242:	f04f 0901 	mov.w	r9, #1
 800c246:	1159      	asrs	r1, r3, #5
 800c248:	f003 021f 	and.w	r2, r3, #31
 800c24c:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800c250:	fa09 f202 	lsl.w	r2, r9, r2
 800c254:	420a      	tst	r2, r1
 800c256:	d003      	beq.n	800c260 <__gethex+0x1a8>
 800c258:	454b      	cmp	r3, r9
 800c25a:	dc36      	bgt.n	800c2ca <__gethex+0x212>
 800c25c:	f04f 0902 	mov.w	r9, #2
 800c260:	442f      	add	r7, r5
 800c262:	4629      	mov	r1, r5
 800c264:	4620      	mov	r0, r4
 800c266:	f7ff fec1 	bl	800bfec <rshift>
 800c26a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c26e:	42bb      	cmp	r3, r7
 800c270:	da42      	bge.n	800c2f8 <__gethex+0x240>
 800c272:	4621      	mov	r1, r4
 800c274:	9801      	ldr	r0, [sp, #4]
 800c276:	f7fd ff67 	bl	800a148 <_Bfree>
 800c27a:	2300      	movs	r3, #0
 800c27c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c27e:	25a3      	movs	r5, #163	@ 0xa3
 800c280:	6013      	str	r3, [r2, #0]
 800c282:	e793      	b.n	800c1ac <__gethex+0xf4>
 800c284:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800c288:	2a2e      	cmp	r2, #46	@ 0x2e
 800c28a:	d012      	beq.n	800c2b2 <__gethex+0x1fa>
 800c28c:	2b20      	cmp	r3, #32
 800c28e:	d104      	bne.n	800c29a <__gethex+0x1e2>
 800c290:	f845 bb04 	str.w	fp, [r5], #4
 800c294:	f04f 0b00 	mov.w	fp, #0
 800c298:	465b      	mov	r3, fp
 800c29a:	7830      	ldrb	r0, [r6, #0]
 800c29c:	9303      	str	r3, [sp, #12]
 800c29e:	f7ff fef6 	bl	800c08e <__hexdig_fun>
 800c2a2:	9b03      	ldr	r3, [sp, #12]
 800c2a4:	f000 000f 	and.w	r0, r0, #15
 800c2a8:	4098      	lsls	r0, r3
 800c2aa:	3304      	adds	r3, #4
 800c2ac:	ea4b 0b00 	orr.w	fp, fp, r0
 800c2b0:	e7ae      	b.n	800c210 <__gethex+0x158>
 800c2b2:	45b1      	cmp	r9, r6
 800c2b4:	d8ea      	bhi.n	800c28c <__gethex+0x1d4>
 800c2b6:	2201      	movs	r2, #1
 800c2b8:	492a      	ldr	r1, [pc, #168]	@ (800c364 <__gethex+0x2ac>)
 800c2ba:	4630      	mov	r0, r6
 800c2bc:	9303      	str	r3, [sp, #12]
 800c2be:	f7ff fe39 	bl	800bf34 <strncmp>
 800c2c2:	9b03      	ldr	r3, [sp, #12]
 800c2c4:	2800      	cmp	r0, #0
 800c2c6:	d1e1      	bne.n	800c28c <__gethex+0x1d4>
 800c2c8:	e7a2      	b.n	800c210 <__gethex+0x158>
 800c2ca:	1ea9      	subs	r1, r5, #2
 800c2cc:	4620      	mov	r0, r4
 800c2ce:	f7fe fb96 	bl	800a9fe <__any_on>
 800c2d2:	2800      	cmp	r0, #0
 800c2d4:	d0c2      	beq.n	800c25c <__gethex+0x1a4>
 800c2d6:	f04f 0903 	mov.w	r9, #3
 800c2da:	e7c1      	b.n	800c260 <__gethex+0x1a8>
 800c2dc:	da09      	bge.n	800c2f2 <__gethex+0x23a>
 800c2de:	1b75      	subs	r5, r6, r5
 800c2e0:	4621      	mov	r1, r4
 800c2e2:	9801      	ldr	r0, [sp, #4]
 800c2e4:	462a      	mov	r2, r5
 800c2e6:	1b7f      	subs	r7, r7, r5
 800c2e8:	f7fe f948 	bl	800a57c <__lshift>
 800c2ec:	4604      	mov	r4, r0
 800c2ee:	f100 0a14 	add.w	sl, r0, #20
 800c2f2:	f04f 0900 	mov.w	r9, #0
 800c2f6:	e7b8      	b.n	800c26a <__gethex+0x1b2>
 800c2f8:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800c2fc:	42bd      	cmp	r5, r7
 800c2fe:	dd6f      	ble.n	800c3e0 <__gethex+0x328>
 800c300:	1bed      	subs	r5, r5, r7
 800c302:	42ae      	cmp	r6, r5
 800c304:	dc34      	bgt.n	800c370 <__gethex+0x2b8>
 800c306:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c30a:	2b02      	cmp	r3, #2
 800c30c:	d022      	beq.n	800c354 <__gethex+0x29c>
 800c30e:	2b03      	cmp	r3, #3
 800c310:	d024      	beq.n	800c35c <__gethex+0x2a4>
 800c312:	2b01      	cmp	r3, #1
 800c314:	d115      	bne.n	800c342 <__gethex+0x28a>
 800c316:	42ae      	cmp	r6, r5
 800c318:	d113      	bne.n	800c342 <__gethex+0x28a>
 800c31a:	2e01      	cmp	r6, #1
 800c31c:	d10b      	bne.n	800c336 <__gethex+0x27e>
 800c31e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800c322:	2562      	movs	r5, #98	@ 0x62
 800c324:	9a02      	ldr	r2, [sp, #8]
 800c326:	6013      	str	r3, [r2, #0]
 800c328:	2301      	movs	r3, #1
 800c32a:	6123      	str	r3, [r4, #16]
 800c32c:	f8ca 3000 	str.w	r3, [sl]
 800c330:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c332:	601c      	str	r4, [r3, #0]
 800c334:	e73a      	b.n	800c1ac <__gethex+0xf4>
 800c336:	1e71      	subs	r1, r6, #1
 800c338:	4620      	mov	r0, r4
 800c33a:	f7fe fb60 	bl	800a9fe <__any_on>
 800c33e:	2800      	cmp	r0, #0
 800c340:	d1ed      	bne.n	800c31e <__gethex+0x266>
 800c342:	4621      	mov	r1, r4
 800c344:	9801      	ldr	r0, [sp, #4]
 800c346:	f7fd feff 	bl	800a148 <_Bfree>
 800c34a:	2300      	movs	r3, #0
 800c34c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c34e:	2550      	movs	r5, #80	@ 0x50
 800c350:	6013      	str	r3, [r2, #0]
 800c352:	e72b      	b.n	800c1ac <__gethex+0xf4>
 800c354:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c356:	2b00      	cmp	r3, #0
 800c358:	d1f3      	bne.n	800c342 <__gethex+0x28a>
 800c35a:	e7e0      	b.n	800c31e <__gethex+0x266>
 800c35c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c35e:	2b00      	cmp	r3, #0
 800c360:	d1dd      	bne.n	800c31e <__gethex+0x266>
 800c362:	e7ee      	b.n	800c342 <__gethex+0x28a>
 800c364:	0800ccc8 	.word	0x0800ccc8
 800c368:	0800cb5d 	.word	0x0800cb5d
 800c36c:	0800ce76 	.word	0x0800ce76
 800c370:	1e6f      	subs	r7, r5, #1
 800c372:	f1b9 0f00 	cmp.w	r9, #0
 800c376:	d130      	bne.n	800c3da <__gethex+0x322>
 800c378:	b127      	cbz	r7, 800c384 <__gethex+0x2cc>
 800c37a:	4639      	mov	r1, r7
 800c37c:	4620      	mov	r0, r4
 800c37e:	f7fe fb3e 	bl	800a9fe <__any_on>
 800c382:	4681      	mov	r9, r0
 800c384:	117a      	asrs	r2, r7, #5
 800c386:	2301      	movs	r3, #1
 800c388:	f007 071f 	and.w	r7, r7, #31
 800c38c:	4629      	mov	r1, r5
 800c38e:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800c392:	4620      	mov	r0, r4
 800c394:	40bb      	lsls	r3, r7
 800c396:	1b76      	subs	r6, r6, r5
 800c398:	2502      	movs	r5, #2
 800c39a:	4213      	tst	r3, r2
 800c39c:	bf18      	it	ne
 800c39e:	f049 0902 	orrne.w	r9, r9, #2
 800c3a2:	f7ff fe23 	bl	800bfec <rshift>
 800c3a6:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800c3aa:	f1b9 0f00 	cmp.w	r9, #0
 800c3ae:	d047      	beq.n	800c440 <__gethex+0x388>
 800c3b0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c3b4:	2b02      	cmp	r3, #2
 800c3b6:	d015      	beq.n	800c3e4 <__gethex+0x32c>
 800c3b8:	2b03      	cmp	r3, #3
 800c3ba:	d017      	beq.n	800c3ec <__gethex+0x334>
 800c3bc:	2b01      	cmp	r3, #1
 800c3be:	d109      	bne.n	800c3d4 <__gethex+0x31c>
 800c3c0:	f019 0f02 	tst.w	r9, #2
 800c3c4:	d006      	beq.n	800c3d4 <__gethex+0x31c>
 800c3c6:	f8da 3000 	ldr.w	r3, [sl]
 800c3ca:	ea49 0903 	orr.w	r9, r9, r3
 800c3ce:	f019 0f01 	tst.w	r9, #1
 800c3d2:	d10e      	bne.n	800c3f2 <__gethex+0x33a>
 800c3d4:	f045 0510 	orr.w	r5, r5, #16
 800c3d8:	e032      	b.n	800c440 <__gethex+0x388>
 800c3da:	f04f 0901 	mov.w	r9, #1
 800c3de:	e7d1      	b.n	800c384 <__gethex+0x2cc>
 800c3e0:	2501      	movs	r5, #1
 800c3e2:	e7e2      	b.n	800c3aa <__gethex+0x2f2>
 800c3e4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c3e6:	f1c3 0301 	rsb	r3, r3, #1
 800c3ea:	930f      	str	r3, [sp, #60]	@ 0x3c
 800c3ec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c3ee:	2b00      	cmp	r3, #0
 800c3f0:	d0f0      	beq.n	800c3d4 <__gethex+0x31c>
 800c3f2:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800c3f6:	f104 0314 	add.w	r3, r4, #20
 800c3fa:	f04f 0c00 	mov.w	ip, #0
 800c3fe:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800c402:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800c406:	4618      	mov	r0, r3
 800c408:	f853 2b04 	ldr.w	r2, [r3], #4
 800c40c:	f1b2 3fff 	cmp.w	r2, #4294967295
 800c410:	d01b      	beq.n	800c44a <__gethex+0x392>
 800c412:	3201      	adds	r2, #1
 800c414:	6002      	str	r2, [r0, #0]
 800c416:	2d02      	cmp	r5, #2
 800c418:	f104 0314 	add.w	r3, r4, #20
 800c41c:	d13c      	bne.n	800c498 <__gethex+0x3e0>
 800c41e:	f8d8 2000 	ldr.w	r2, [r8]
 800c422:	3a01      	subs	r2, #1
 800c424:	42b2      	cmp	r2, r6
 800c426:	d109      	bne.n	800c43c <__gethex+0x384>
 800c428:	1171      	asrs	r1, r6, #5
 800c42a:	2201      	movs	r2, #1
 800c42c:	f006 061f 	and.w	r6, r6, #31
 800c430:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800c434:	fa02 f606 	lsl.w	r6, r2, r6
 800c438:	421e      	tst	r6, r3
 800c43a:	d13a      	bne.n	800c4b2 <__gethex+0x3fa>
 800c43c:	f045 0520 	orr.w	r5, r5, #32
 800c440:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c442:	601c      	str	r4, [r3, #0]
 800c444:	9b02      	ldr	r3, [sp, #8]
 800c446:	601f      	str	r7, [r3, #0]
 800c448:	e6b0      	b.n	800c1ac <__gethex+0xf4>
 800c44a:	4299      	cmp	r1, r3
 800c44c:	f843 cc04 	str.w	ip, [r3, #-4]
 800c450:	d8d9      	bhi.n	800c406 <__gethex+0x34e>
 800c452:	68a3      	ldr	r3, [r4, #8]
 800c454:	459b      	cmp	fp, r3
 800c456:	db17      	blt.n	800c488 <__gethex+0x3d0>
 800c458:	6861      	ldr	r1, [r4, #4]
 800c45a:	9801      	ldr	r0, [sp, #4]
 800c45c:	3101      	adds	r1, #1
 800c45e:	f7fd fe33 	bl	800a0c8 <_Balloc>
 800c462:	4681      	mov	r9, r0
 800c464:	b918      	cbnz	r0, 800c46e <__gethex+0x3b6>
 800c466:	4b1a      	ldr	r3, [pc, #104]	@ (800c4d0 <__gethex+0x418>)
 800c468:	4602      	mov	r2, r0
 800c46a:	2184      	movs	r1, #132	@ 0x84
 800c46c:	e6c5      	b.n	800c1fa <__gethex+0x142>
 800c46e:	6922      	ldr	r2, [r4, #16]
 800c470:	f104 010c 	add.w	r1, r4, #12
 800c474:	300c      	adds	r0, #12
 800c476:	3202      	adds	r2, #2
 800c478:	0092      	lsls	r2, r2, #2
 800c47a:	f7fc fec0 	bl	80091fe <memcpy>
 800c47e:	4621      	mov	r1, r4
 800c480:	464c      	mov	r4, r9
 800c482:	9801      	ldr	r0, [sp, #4]
 800c484:	f7fd fe60 	bl	800a148 <_Bfree>
 800c488:	6923      	ldr	r3, [r4, #16]
 800c48a:	1c5a      	adds	r2, r3, #1
 800c48c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c490:	6122      	str	r2, [r4, #16]
 800c492:	2201      	movs	r2, #1
 800c494:	615a      	str	r2, [r3, #20]
 800c496:	e7be      	b.n	800c416 <__gethex+0x35e>
 800c498:	6922      	ldr	r2, [r4, #16]
 800c49a:	455a      	cmp	r2, fp
 800c49c:	dd0b      	ble.n	800c4b6 <__gethex+0x3fe>
 800c49e:	2101      	movs	r1, #1
 800c4a0:	4620      	mov	r0, r4
 800c4a2:	f7ff fda3 	bl	800bfec <rshift>
 800c4a6:	3701      	adds	r7, #1
 800c4a8:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c4ac:	42bb      	cmp	r3, r7
 800c4ae:	f6ff aee0 	blt.w	800c272 <__gethex+0x1ba>
 800c4b2:	2501      	movs	r5, #1
 800c4b4:	e7c2      	b.n	800c43c <__gethex+0x384>
 800c4b6:	f016 061f 	ands.w	r6, r6, #31
 800c4ba:	d0fa      	beq.n	800c4b2 <__gethex+0x3fa>
 800c4bc:	4453      	add	r3, sl
 800c4be:	f1c6 0620 	rsb	r6, r6, #32
 800c4c2:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800c4c6:	f7fd fef3 	bl	800a2b0 <__hi0bits>
 800c4ca:	42b0      	cmp	r0, r6
 800c4cc:	dbe7      	blt.n	800c49e <__gethex+0x3e6>
 800c4ce:	e7f0      	b.n	800c4b2 <__gethex+0x3fa>
 800c4d0:	0800cb5d 	.word	0x0800cb5d

0800c4d4 <L_shift>:
 800c4d4:	f1c2 0208 	rsb	r2, r2, #8
 800c4d8:	0092      	lsls	r2, r2, #2
 800c4da:	b570      	push	{r4, r5, r6, lr}
 800c4dc:	f1c2 0620 	rsb	r6, r2, #32
 800c4e0:	6843      	ldr	r3, [r0, #4]
 800c4e2:	6804      	ldr	r4, [r0, #0]
 800c4e4:	fa03 f506 	lsl.w	r5, r3, r6
 800c4e8:	40d3      	lsrs	r3, r2
 800c4ea:	432c      	orrs	r4, r5
 800c4ec:	6004      	str	r4, [r0, #0]
 800c4ee:	f840 3f04 	str.w	r3, [r0, #4]!
 800c4f2:	4288      	cmp	r0, r1
 800c4f4:	d3f4      	bcc.n	800c4e0 <L_shift+0xc>
 800c4f6:	bd70      	pop	{r4, r5, r6, pc}

0800c4f8 <__match>:
 800c4f8:	6803      	ldr	r3, [r0, #0]
 800c4fa:	3301      	adds	r3, #1
 800c4fc:	b530      	push	{r4, r5, lr}
 800c4fe:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c502:	b914      	cbnz	r4, 800c50a <__match+0x12>
 800c504:	6003      	str	r3, [r0, #0]
 800c506:	2001      	movs	r0, #1
 800c508:	bd30      	pop	{r4, r5, pc}
 800c50a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c50e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800c512:	2d19      	cmp	r5, #25
 800c514:	bf98      	it	ls
 800c516:	3220      	addls	r2, #32
 800c518:	42a2      	cmp	r2, r4
 800c51a:	d0f0      	beq.n	800c4fe <__match+0x6>
 800c51c:	2000      	movs	r0, #0
 800c51e:	e7f3      	b.n	800c508 <__match+0x10>

0800c520 <__hexnan>:
 800c520:	680b      	ldr	r3, [r1, #0]
 800c522:	6801      	ldr	r1, [r0, #0]
 800c524:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c528:	115e      	asrs	r6, r3, #5
 800c52a:	f013 031f 	ands.w	r3, r3, #31
 800c52e:	f04f 0500 	mov.w	r5, #0
 800c532:	b087      	sub	sp, #28
 800c534:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800c538:	4682      	mov	sl, r0
 800c53a:	4690      	mov	r8, r2
 800c53c:	46ab      	mov	fp, r5
 800c53e:	bf18      	it	ne
 800c540:	3604      	addne	r6, #4
 800c542:	9301      	str	r3, [sp, #4]
 800c544:	9502      	str	r5, [sp, #8]
 800c546:	1f37      	subs	r7, r6, #4
 800c548:	f846 5c04 	str.w	r5, [r6, #-4]
 800c54c:	46b9      	mov	r9, r7
 800c54e:	463c      	mov	r4, r7
 800c550:	1c4b      	adds	r3, r1, #1
 800c552:	784a      	ldrb	r2, [r1, #1]
 800c554:	9303      	str	r3, [sp, #12]
 800c556:	b342      	cbz	r2, 800c5aa <__hexnan+0x8a>
 800c558:	4610      	mov	r0, r2
 800c55a:	9105      	str	r1, [sp, #20]
 800c55c:	9204      	str	r2, [sp, #16]
 800c55e:	f7ff fd96 	bl	800c08e <__hexdig_fun>
 800c562:	2800      	cmp	r0, #0
 800c564:	d151      	bne.n	800c60a <__hexnan+0xea>
 800c566:	9a04      	ldr	r2, [sp, #16]
 800c568:	9905      	ldr	r1, [sp, #20]
 800c56a:	2a20      	cmp	r2, #32
 800c56c:	d818      	bhi.n	800c5a0 <__hexnan+0x80>
 800c56e:	9b02      	ldr	r3, [sp, #8]
 800c570:	459b      	cmp	fp, r3
 800c572:	dd13      	ble.n	800c59c <__hexnan+0x7c>
 800c574:	454c      	cmp	r4, r9
 800c576:	d206      	bcs.n	800c586 <__hexnan+0x66>
 800c578:	2d07      	cmp	r5, #7
 800c57a:	dc04      	bgt.n	800c586 <__hexnan+0x66>
 800c57c:	462a      	mov	r2, r5
 800c57e:	4649      	mov	r1, r9
 800c580:	4620      	mov	r0, r4
 800c582:	f7ff ffa7 	bl	800c4d4 <L_shift>
 800c586:	4544      	cmp	r4, r8
 800c588:	d951      	bls.n	800c62e <__hexnan+0x10e>
 800c58a:	2300      	movs	r3, #0
 800c58c:	f1a4 0904 	sub.w	r9, r4, #4
 800c590:	f8cd b008 	str.w	fp, [sp, #8]
 800c594:	f844 3c04 	str.w	r3, [r4, #-4]
 800c598:	461d      	mov	r5, r3
 800c59a:	464c      	mov	r4, r9
 800c59c:	9903      	ldr	r1, [sp, #12]
 800c59e:	e7d7      	b.n	800c550 <__hexnan+0x30>
 800c5a0:	2a29      	cmp	r2, #41	@ 0x29
 800c5a2:	d156      	bne.n	800c652 <__hexnan+0x132>
 800c5a4:	3102      	adds	r1, #2
 800c5a6:	f8ca 1000 	str.w	r1, [sl]
 800c5aa:	f1bb 0f00 	cmp.w	fp, #0
 800c5ae:	d050      	beq.n	800c652 <__hexnan+0x132>
 800c5b0:	454c      	cmp	r4, r9
 800c5b2:	d206      	bcs.n	800c5c2 <__hexnan+0xa2>
 800c5b4:	2d07      	cmp	r5, #7
 800c5b6:	dc04      	bgt.n	800c5c2 <__hexnan+0xa2>
 800c5b8:	462a      	mov	r2, r5
 800c5ba:	4649      	mov	r1, r9
 800c5bc:	4620      	mov	r0, r4
 800c5be:	f7ff ff89 	bl	800c4d4 <L_shift>
 800c5c2:	4544      	cmp	r4, r8
 800c5c4:	d935      	bls.n	800c632 <__hexnan+0x112>
 800c5c6:	f1a8 0204 	sub.w	r2, r8, #4
 800c5ca:	4623      	mov	r3, r4
 800c5cc:	f853 1b04 	ldr.w	r1, [r3], #4
 800c5d0:	429f      	cmp	r7, r3
 800c5d2:	f842 1f04 	str.w	r1, [r2, #4]!
 800c5d6:	d2f9      	bcs.n	800c5cc <__hexnan+0xac>
 800c5d8:	1b3b      	subs	r3, r7, r4
 800c5da:	3e03      	subs	r6, #3
 800c5dc:	3401      	adds	r4, #1
 800c5de:	2200      	movs	r2, #0
 800c5e0:	f023 0303 	bic.w	r3, r3, #3
 800c5e4:	3304      	adds	r3, #4
 800c5e6:	42b4      	cmp	r4, r6
 800c5e8:	bf88      	it	hi
 800c5ea:	2304      	movhi	r3, #4
 800c5ec:	4443      	add	r3, r8
 800c5ee:	f843 2b04 	str.w	r2, [r3], #4
 800c5f2:	429f      	cmp	r7, r3
 800c5f4:	d2fb      	bcs.n	800c5ee <__hexnan+0xce>
 800c5f6:	683b      	ldr	r3, [r7, #0]
 800c5f8:	b91b      	cbnz	r3, 800c602 <__hexnan+0xe2>
 800c5fa:	4547      	cmp	r7, r8
 800c5fc:	d127      	bne.n	800c64e <__hexnan+0x12e>
 800c5fe:	2301      	movs	r3, #1
 800c600:	603b      	str	r3, [r7, #0]
 800c602:	2005      	movs	r0, #5
 800c604:	b007      	add	sp, #28
 800c606:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c60a:	3501      	adds	r5, #1
 800c60c:	f10b 0b01 	add.w	fp, fp, #1
 800c610:	2d08      	cmp	r5, #8
 800c612:	dd05      	ble.n	800c620 <__hexnan+0x100>
 800c614:	4544      	cmp	r4, r8
 800c616:	d9c1      	bls.n	800c59c <__hexnan+0x7c>
 800c618:	2300      	movs	r3, #0
 800c61a:	3c04      	subs	r4, #4
 800c61c:	2501      	movs	r5, #1
 800c61e:	6023      	str	r3, [r4, #0]
 800c620:	6822      	ldr	r2, [r4, #0]
 800c622:	f000 000f 	and.w	r0, r0, #15
 800c626:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800c62a:	6020      	str	r0, [r4, #0]
 800c62c:	e7b6      	b.n	800c59c <__hexnan+0x7c>
 800c62e:	2508      	movs	r5, #8
 800c630:	e7b4      	b.n	800c59c <__hexnan+0x7c>
 800c632:	9b01      	ldr	r3, [sp, #4]
 800c634:	2b00      	cmp	r3, #0
 800c636:	d0de      	beq.n	800c5f6 <__hexnan+0xd6>
 800c638:	f1c3 0320 	rsb	r3, r3, #32
 800c63c:	f04f 32ff 	mov.w	r2, #4294967295
 800c640:	40da      	lsrs	r2, r3
 800c642:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800c646:	4013      	ands	r3, r2
 800c648:	f846 3c04 	str.w	r3, [r6, #-4]
 800c64c:	e7d3      	b.n	800c5f6 <__hexnan+0xd6>
 800c64e:	3f04      	subs	r7, #4
 800c650:	e7d1      	b.n	800c5f6 <__hexnan+0xd6>
 800c652:	2004      	movs	r0, #4
 800c654:	e7d6      	b.n	800c604 <__hexnan+0xe4>

0800c656 <__ascii_mbtowc>:
 800c656:	b082      	sub	sp, #8
 800c658:	b901      	cbnz	r1, 800c65c <__ascii_mbtowc+0x6>
 800c65a:	a901      	add	r1, sp, #4
 800c65c:	b142      	cbz	r2, 800c670 <__ascii_mbtowc+0x1a>
 800c65e:	b14b      	cbz	r3, 800c674 <__ascii_mbtowc+0x1e>
 800c660:	7813      	ldrb	r3, [r2, #0]
 800c662:	600b      	str	r3, [r1, #0]
 800c664:	7812      	ldrb	r2, [r2, #0]
 800c666:	1e10      	subs	r0, r2, #0
 800c668:	bf18      	it	ne
 800c66a:	2001      	movne	r0, #1
 800c66c:	b002      	add	sp, #8
 800c66e:	4770      	bx	lr
 800c670:	4610      	mov	r0, r2
 800c672:	e7fb      	b.n	800c66c <__ascii_mbtowc+0x16>
 800c674:	f06f 0001 	mvn.w	r0, #1
 800c678:	e7f8      	b.n	800c66c <__ascii_mbtowc+0x16>

0800c67a <_realloc_r>:
 800c67a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c67e:	4680      	mov	r8, r0
 800c680:	4615      	mov	r5, r2
 800c682:	460c      	mov	r4, r1
 800c684:	b921      	cbnz	r1, 800c690 <_realloc_r+0x16>
 800c686:	4611      	mov	r1, r2
 800c688:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c68c:	f7fd bc90 	b.w	8009fb0 <_malloc_r>
 800c690:	b92a      	cbnz	r2, 800c69e <_realloc_r+0x24>
 800c692:	f7fd fc19 	bl	8009ec8 <_free_r>
 800c696:	2400      	movs	r4, #0
 800c698:	4620      	mov	r0, r4
 800c69a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c69e:	f000 f8c4 	bl	800c82a <_malloc_usable_size_r>
 800c6a2:	4285      	cmp	r5, r0
 800c6a4:	4606      	mov	r6, r0
 800c6a6:	d802      	bhi.n	800c6ae <_realloc_r+0x34>
 800c6a8:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800c6ac:	d8f4      	bhi.n	800c698 <_realloc_r+0x1e>
 800c6ae:	4629      	mov	r1, r5
 800c6b0:	4640      	mov	r0, r8
 800c6b2:	f7fd fc7d 	bl	8009fb0 <_malloc_r>
 800c6b6:	4607      	mov	r7, r0
 800c6b8:	2800      	cmp	r0, #0
 800c6ba:	d0ec      	beq.n	800c696 <_realloc_r+0x1c>
 800c6bc:	42b5      	cmp	r5, r6
 800c6be:	462a      	mov	r2, r5
 800c6c0:	4621      	mov	r1, r4
 800c6c2:	bf28      	it	cs
 800c6c4:	4632      	movcs	r2, r6
 800c6c6:	f7fc fd9a 	bl	80091fe <memcpy>
 800c6ca:	4621      	mov	r1, r4
 800c6cc:	4640      	mov	r0, r8
 800c6ce:	463c      	mov	r4, r7
 800c6d0:	f7fd fbfa 	bl	8009ec8 <_free_r>
 800c6d4:	e7e0      	b.n	800c698 <_realloc_r+0x1e>

0800c6d6 <__ascii_wctomb>:
 800c6d6:	4603      	mov	r3, r0
 800c6d8:	4608      	mov	r0, r1
 800c6da:	b141      	cbz	r1, 800c6ee <__ascii_wctomb+0x18>
 800c6dc:	2aff      	cmp	r2, #255	@ 0xff
 800c6de:	d904      	bls.n	800c6ea <__ascii_wctomb+0x14>
 800c6e0:	228a      	movs	r2, #138	@ 0x8a
 800c6e2:	f04f 30ff 	mov.w	r0, #4294967295
 800c6e6:	601a      	str	r2, [r3, #0]
 800c6e8:	4770      	bx	lr
 800c6ea:	2001      	movs	r0, #1
 800c6ec:	700a      	strb	r2, [r1, #0]
 800c6ee:	4770      	bx	lr

0800c6f0 <fiprintf>:
 800c6f0:	b40e      	push	{r1, r2, r3}
 800c6f2:	b503      	push	{r0, r1, lr}
 800c6f4:	ab03      	add	r3, sp, #12
 800c6f6:	4601      	mov	r1, r0
 800c6f8:	4805      	ldr	r0, [pc, #20]	@ (800c710 <fiprintf+0x20>)
 800c6fa:	f853 2b04 	ldr.w	r2, [r3], #4
 800c6fe:	6800      	ldr	r0, [r0, #0]
 800c700:	9301      	str	r3, [sp, #4]
 800c702:	f7ff f9a5 	bl	800ba50 <_vfiprintf_r>
 800c706:	b002      	add	sp, #8
 800c708:	f85d eb04 	ldr.w	lr, [sp], #4
 800c70c:	b003      	add	sp, #12
 800c70e:	4770      	bx	lr
 800c710:	20000018 	.word	0x20000018

0800c714 <__swhatbuf_r>:
 800c714:	b570      	push	{r4, r5, r6, lr}
 800c716:	460c      	mov	r4, r1
 800c718:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c71c:	b096      	sub	sp, #88	@ 0x58
 800c71e:	4615      	mov	r5, r2
 800c720:	2900      	cmp	r1, #0
 800c722:	461e      	mov	r6, r3
 800c724:	da0c      	bge.n	800c740 <__swhatbuf_r+0x2c>
 800c726:	89a3      	ldrh	r3, [r4, #12]
 800c728:	2100      	movs	r1, #0
 800c72a:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800c72e:	bf14      	ite	ne
 800c730:	2340      	movne	r3, #64	@ 0x40
 800c732:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800c736:	2000      	movs	r0, #0
 800c738:	6031      	str	r1, [r6, #0]
 800c73a:	602b      	str	r3, [r5, #0]
 800c73c:	b016      	add	sp, #88	@ 0x58
 800c73e:	bd70      	pop	{r4, r5, r6, pc}
 800c740:	466a      	mov	r2, sp
 800c742:	f000 f849 	bl	800c7d8 <_fstat_r>
 800c746:	2800      	cmp	r0, #0
 800c748:	dbed      	blt.n	800c726 <__swhatbuf_r+0x12>
 800c74a:	9901      	ldr	r1, [sp, #4]
 800c74c:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800c750:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800c754:	4259      	negs	r1, r3
 800c756:	4159      	adcs	r1, r3
 800c758:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c75c:	e7eb      	b.n	800c736 <__swhatbuf_r+0x22>

0800c75e <__smakebuf_r>:
 800c75e:	898b      	ldrh	r3, [r1, #12]
 800c760:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c762:	079d      	lsls	r5, r3, #30
 800c764:	4606      	mov	r6, r0
 800c766:	460c      	mov	r4, r1
 800c768:	d507      	bpl.n	800c77a <__smakebuf_r+0x1c>
 800c76a:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800c76e:	6023      	str	r3, [r4, #0]
 800c770:	6123      	str	r3, [r4, #16]
 800c772:	2301      	movs	r3, #1
 800c774:	6163      	str	r3, [r4, #20]
 800c776:	b003      	add	sp, #12
 800c778:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c77a:	ab01      	add	r3, sp, #4
 800c77c:	466a      	mov	r2, sp
 800c77e:	f7ff ffc9 	bl	800c714 <__swhatbuf_r>
 800c782:	9f00      	ldr	r7, [sp, #0]
 800c784:	4605      	mov	r5, r0
 800c786:	4630      	mov	r0, r6
 800c788:	4639      	mov	r1, r7
 800c78a:	f7fd fc11 	bl	8009fb0 <_malloc_r>
 800c78e:	b948      	cbnz	r0, 800c7a4 <__smakebuf_r+0x46>
 800c790:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c794:	059a      	lsls	r2, r3, #22
 800c796:	d4ee      	bmi.n	800c776 <__smakebuf_r+0x18>
 800c798:	f023 0303 	bic.w	r3, r3, #3
 800c79c:	f043 0302 	orr.w	r3, r3, #2
 800c7a0:	81a3      	strh	r3, [r4, #12]
 800c7a2:	e7e2      	b.n	800c76a <__smakebuf_r+0xc>
 800c7a4:	89a3      	ldrh	r3, [r4, #12]
 800c7a6:	6020      	str	r0, [r4, #0]
 800c7a8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c7ac:	81a3      	strh	r3, [r4, #12]
 800c7ae:	9b01      	ldr	r3, [sp, #4]
 800c7b0:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800c7b4:	b15b      	cbz	r3, 800c7ce <__smakebuf_r+0x70>
 800c7b6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c7ba:	4630      	mov	r0, r6
 800c7bc:	f000 f81e 	bl	800c7fc <_isatty_r>
 800c7c0:	b128      	cbz	r0, 800c7ce <__smakebuf_r+0x70>
 800c7c2:	89a3      	ldrh	r3, [r4, #12]
 800c7c4:	f023 0303 	bic.w	r3, r3, #3
 800c7c8:	f043 0301 	orr.w	r3, r3, #1
 800c7cc:	81a3      	strh	r3, [r4, #12]
 800c7ce:	89a3      	ldrh	r3, [r4, #12]
 800c7d0:	431d      	orrs	r5, r3
 800c7d2:	81a5      	strh	r5, [r4, #12]
 800c7d4:	e7cf      	b.n	800c776 <__smakebuf_r+0x18>
	...

0800c7d8 <_fstat_r>:
 800c7d8:	b538      	push	{r3, r4, r5, lr}
 800c7da:	2300      	movs	r3, #0
 800c7dc:	4d06      	ldr	r5, [pc, #24]	@ (800c7f8 <_fstat_r+0x20>)
 800c7de:	4604      	mov	r4, r0
 800c7e0:	4608      	mov	r0, r1
 800c7e2:	4611      	mov	r1, r2
 800c7e4:	602b      	str	r3, [r5, #0]
 800c7e6:	f7f5 faad 	bl	8001d44 <_fstat>
 800c7ea:	1c43      	adds	r3, r0, #1
 800c7ec:	d102      	bne.n	800c7f4 <_fstat_r+0x1c>
 800c7ee:	682b      	ldr	r3, [r5, #0]
 800c7f0:	b103      	cbz	r3, 800c7f4 <_fstat_r+0x1c>
 800c7f2:	6023      	str	r3, [r4, #0]
 800c7f4:	bd38      	pop	{r3, r4, r5, pc}
 800c7f6:	bf00      	nop
 800c7f8:	200005dc 	.word	0x200005dc

0800c7fc <_isatty_r>:
 800c7fc:	b538      	push	{r3, r4, r5, lr}
 800c7fe:	2300      	movs	r3, #0
 800c800:	4d05      	ldr	r5, [pc, #20]	@ (800c818 <_isatty_r+0x1c>)
 800c802:	4604      	mov	r4, r0
 800c804:	4608      	mov	r0, r1
 800c806:	602b      	str	r3, [r5, #0]
 800c808:	f7f5 faac 	bl	8001d64 <_isatty>
 800c80c:	1c43      	adds	r3, r0, #1
 800c80e:	d102      	bne.n	800c816 <_isatty_r+0x1a>
 800c810:	682b      	ldr	r3, [r5, #0]
 800c812:	b103      	cbz	r3, 800c816 <_isatty_r+0x1a>
 800c814:	6023      	str	r3, [r4, #0]
 800c816:	bd38      	pop	{r3, r4, r5, pc}
 800c818:	200005dc 	.word	0x200005dc

0800c81c <abort>:
 800c81c:	2006      	movs	r0, #6
 800c81e:	b508      	push	{r3, lr}
 800c820:	f000 f834 	bl	800c88c <raise>
 800c824:	2001      	movs	r0, #1
 800c826:	f7f5 fa3d 	bl	8001ca4 <_exit>

0800c82a <_malloc_usable_size_r>:
 800c82a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c82e:	1f18      	subs	r0, r3, #4
 800c830:	2b00      	cmp	r3, #0
 800c832:	bfbc      	itt	lt
 800c834:	580b      	ldrlt	r3, [r1, r0]
 800c836:	18c0      	addlt	r0, r0, r3
 800c838:	4770      	bx	lr

0800c83a <_raise_r>:
 800c83a:	291f      	cmp	r1, #31
 800c83c:	b538      	push	{r3, r4, r5, lr}
 800c83e:	4605      	mov	r5, r0
 800c840:	460c      	mov	r4, r1
 800c842:	d904      	bls.n	800c84e <_raise_r+0x14>
 800c844:	2316      	movs	r3, #22
 800c846:	6003      	str	r3, [r0, #0]
 800c848:	f04f 30ff 	mov.w	r0, #4294967295
 800c84c:	bd38      	pop	{r3, r4, r5, pc}
 800c84e:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800c850:	b112      	cbz	r2, 800c858 <_raise_r+0x1e>
 800c852:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c856:	b94b      	cbnz	r3, 800c86c <_raise_r+0x32>
 800c858:	4628      	mov	r0, r5
 800c85a:	f000 f831 	bl	800c8c0 <_getpid_r>
 800c85e:	4622      	mov	r2, r4
 800c860:	4601      	mov	r1, r0
 800c862:	4628      	mov	r0, r5
 800c864:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c868:	f000 b818 	b.w	800c89c <_kill_r>
 800c86c:	2b01      	cmp	r3, #1
 800c86e:	d00a      	beq.n	800c886 <_raise_r+0x4c>
 800c870:	1c59      	adds	r1, r3, #1
 800c872:	d103      	bne.n	800c87c <_raise_r+0x42>
 800c874:	2316      	movs	r3, #22
 800c876:	6003      	str	r3, [r0, #0]
 800c878:	2001      	movs	r0, #1
 800c87a:	e7e7      	b.n	800c84c <_raise_r+0x12>
 800c87c:	2100      	movs	r1, #0
 800c87e:	4620      	mov	r0, r4
 800c880:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800c884:	4798      	blx	r3
 800c886:	2000      	movs	r0, #0
 800c888:	e7e0      	b.n	800c84c <_raise_r+0x12>
	...

0800c88c <raise>:
 800c88c:	4b02      	ldr	r3, [pc, #8]	@ (800c898 <raise+0xc>)
 800c88e:	4601      	mov	r1, r0
 800c890:	6818      	ldr	r0, [r3, #0]
 800c892:	f7ff bfd2 	b.w	800c83a <_raise_r>
 800c896:	bf00      	nop
 800c898:	20000018 	.word	0x20000018

0800c89c <_kill_r>:
 800c89c:	b538      	push	{r3, r4, r5, lr}
 800c89e:	2300      	movs	r3, #0
 800c8a0:	4d06      	ldr	r5, [pc, #24]	@ (800c8bc <_kill_r+0x20>)
 800c8a2:	4604      	mov	r4, r0
 800c8a4:	4608      	mov	r0, r1
 800c8a6:	4611      	mov	r1, r2
 800c8a8:	602b      	str	r3, [r5, #0]
 800c8aa:	f7f5 f9eb 	bl	8001c84 <_kill>
 800c8ae:	1c43      	adds	r3, r0, #1
 800c8b0:	d102      	bne.n	800c8b8 <_kill_r+0x1c>
 800c8b2:	682b      	ldr	r3, [r5, #0]
 800c8b4:	b103      	cbz	r3, 800c8b8 <_kill_r+0x1c>
 800c8b6:	6023      	str	r3, [r4, #0]
 800c8b8:	bd38      	pop	{r3, r4, r5, pc}
 800c8ba:	bf00      	nop
 800c8bc:	200005dc 	.word	0x200005dc

0800c8c0 <_getpid_r>:
 800c8c0:	f7f5 b9d8 	b.w	8001c74 <_getpid>

0800c8c4 <_init>:
 800c8c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c8c6:	bf00      	nop
 800c8c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c8ca:	bc08      	pop	{r3}
 800c8cc:	469e      	mov	lr, r3
 800c8ce:	4770      	bx	lr

0800c8d0 <_fini>:
 800c8d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c8d2:	bf00      	nop
 800c8d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c8d6:	bc08      	pop	{r3}
 800c8d8:	469e      	mov	lr, r3
 800c8da:	4770      	bx	lr
