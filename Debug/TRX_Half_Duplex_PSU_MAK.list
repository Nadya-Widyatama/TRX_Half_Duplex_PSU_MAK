
TRX_Half_Duplex_PSU_MAK.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000258  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000aefc  08000258  08000258  00001258  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000580  0800b158  0800b158  0000c158  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b6d8  0800b6d8  0000d1d4  2**0
                  CONTENTS
  4 .ARM          00000008  0800b6d8  0800b6d8  0000c6d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b6e0  0800b6e0  0000d1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b6e0  0800b6e0  0000c6e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800b6e4  0800b6e4  0000c6e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  0800b6e8  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004f0  200001d4  0800b8bc  0000d1d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200006c4  0800b8bc  0000d6c4  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  0000d1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f044  00000000  00000000  0000d20a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ec8  00000000  00000000  0001c24e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a80  00000000  00000000  0001e118  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000080b  00000000  00000000  0001eb98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001fdc4  00000000  00000000  0001f3a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e6f1  00000000  00000000  0003f167  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c33bc  00000000  00000000  0004d858  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00110c14  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004074  00000000  00000000  00110c58  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004d  00000000  00000000  00114ccc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000258 <__do_global_dtors_aux>:
 8000258:	b510      	push	{r4, lr}
 800025a:	4c05      	ldr	r4, [pc, #20]	@ (8000270 <__do_global_dtors_aux+0x18>)
 800025c:	7823      	ldrb	r3, [r4, #0]
 800025e:	b933      	cbnz	r3, 800026e <__do_global_dtors_aux+0x16>
 8000260:	4b04      	ldr	r3, [pc, #16]	@ (8000274 <__do_global_dtors_aux+0x1c>)
 8000262:	b113      	cbz	r3, 800026a <__do_global_dtors_aux+0x12>
 8000264:	4804      	ldr	r0, [pc, #16]	@ (8000278 <__do_global_dtors_aux+0x20>)
 8000266:	f3af 8000 	nop.w
 800026a:	2301      	movs	r3, #1
 800026c:	7023      	strb	r3, [r4, #0]
 800026e:	bd10      	pop	{r4, pc}
 8000270:	200001d4 	.word	0x200001d4
 8000274:	00000000 	.word	0x00000000
 8000278:	0800b13c 	.word	0x0800b13c

0800027c <frame_dummy>:
 800027c:	b508      	push	{r3, lr}
 800027e:	4b03      	ldr	r3, [pc, #12]	@ (800028c <frame_dummy+0x10>)
 8000280:	b11b      	cbz	r3, 800028a <frame_dummy+0xe>
 8000282:	4903      	ldr	r1, [pc, #12]	@ (8000290 <frame_dummy+0x14>)
 8000284:	4803      	ldr	r0, [pc, #12]	@ (8000294 <frame_dummy+0x18>)
 8000286:	f3af 8000 	nop.w
 800028a:	bd08      	pop	{r3, pc}
 800028c:	00000000 	.word	0x00000000
 8000290:	200001d8 	.word	0x200001d8
 8000294:	0800b13c 	.word	0x0800b13c

08000298 <strcmp>:
 8000298:	f810 2b01 	ldrb.w	r2, [r0], #1
 800029c:	f811 3b01 	ldrb.w	r3, [r1], #1
 80002a0:	2a01      	cmp	r2, #1
 80002a2:	bf28      	it	cs
 80002a4:	429a      	cmpcs	r2, r3
 80002a6:	d0f7      	beq.n	8000298 <strcmp>
 80002a8:	1ad0      	subs	r0, r2, r3
 80002aa:	4770      	bx	lr

080002ac <strlen>:
 80002ac:	4603      	mov	r3, r0
 80002ae:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b2:	2a00      	cmp	r2, #0
 80002b4:	d1fb      	bne.n	80002ae <strlen+0x2>
 80002b6:	1a18      	subs	r0, r3, r0
 80002b8:	3801      	subs	r0, #1
 80002ba:	4770      	bx	lr

080002bc <__aeabi_drsub>:
 80002bc:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c0:	e002      	b.n	80002c8 <__adddf3>
 80002c2:	bf00      	nop

080002c4 <__aeabi_dsub>:
 80002c4:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002c8 <__adddf3>:
 80002c8:	b530      	push	{r4, r5, lr}
 80002ca:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002ce:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d2:	ea94 0f05 	teq	r4, r5
 80002d6:	bf08      	it	eq
 80002d8:	ea90 0f02 	teqeq	r0, r2
 80002dc:	bf1f      	itttt	ne
 80002de:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e2:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002e6:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ea:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002ee:	f000 80e2 	beq.w	80004b6 <__adddf3+0x1ee>
 80002f2:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002f6:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fa:	bfb8      	it	lt
 80002fc:	426d      	neglt	r5, r5
 80002fe:	dd0c      	ble.n	800031a <__adddf3+0x52>
 8000300:	442c      	add	r4, r5
 8000302:	ea80 0202 	eor.w	r2, r0, r2
 8000306:	ea81 0303 	eor.w	r3, r1, r3
 800030a:	ea82 0000 	eor.w	r0, r2, r0
 800030e:	ea83 0101 	eor.w	r1, r3, r1
 8000312:	ea80 0202 	eor.w	r2, r0, r2
 8000316:	ea81 0303 	eor.w	r3, r1, r3
 800031a:	2d36      	cmp	r5, #54	@ 0x36
 800031c:	bf88      	it	hi
 800031e:	bd30      	pophi	{r4, r5, pc}
 8000320:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000324:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000328:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 800032c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000330:	d002      	beq.n	8000338 <__adddf3+0x70>
 8000332:	4240      	negs	r0, r0
 8000334:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000338:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 800033c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000340:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x84>
 8000346:	4252      	negs	r2, r2
 8000348:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800034c:	ea94 0f05 	teq	r4, r5
 8000350:	f000 80a7 	beq.w	80004a2 <__adddf3+0x1da>
 8000354:	f1a4 0401 	sub.w	r4, r4, #1
 8000358:	f1d5 0e20 	rsbs	lr, r5, #32
 800035c:	db0d      	blt.n	800037a <__adddf3+0xb2>
 800035e:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000362:	fa22 f205 	lsr.w	r2, r2, r5
 8000366:	1880      	adds	r0, r0, r2
 8000368:	f141 0100 	adc.w	r1, r1, #0
 800036c:	fa03 f20e 	lsl.w	r2, r3, lr
 8000370:	1880      	adds	r0, r0, r2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	4159      	adcs	r1, r3
 8000378:	e00e      	b.n	8000398 <__adddf3+0xd0>
 800037a:	f1a5 0520 	sub.w	r5, r5, #32
 800037e:	f10e 0e20 	add.w	lr, lr, #32
 8000382:	2a01      	cmp	r2, #1
 8000384:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000388:	bf28      	it	cs
 800038a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800038e:	fa43 f305 	asr.w	r3, r3, r5
 8000392:	18c0      	adds	r0, r0, r3
 8000394:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800039c:	d507      	bpl.n	80003ae <__adddf3+0xe6>
 800039e:	f04f 0e00 	mov.w	lr, #0
 80003a2:	f1dc 0c00 	rsbs	ip, ip, #0
 80003a6:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003aa:	eb6e 0101 	sbc.w	r1, lr, r1
 80003ae:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b2:	d31b      	bcc.n	80003ec <__adddf3+0x124>
 80003b4:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003b8:	d30c      	bcc.n	80003d4 <__adddf3+0x10c>
 80003ba:	0849      	lsrs	r1, r1, #1
 80003bc:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c0:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c4:	f104 0401 	add.w	r4, r4, #1
 80003c8:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003cc:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d0:	f080 809a 	bcs.w	8000508 <__adddf3+0x240>
 80003d4:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003d8:	bf08      	it	eq
 80003da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003de:	f150 0000 	adcs.w	r0, r0, #0
 80003e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003e6:	ea41 0105 	orr.w	r1, r1, r5
 80003ea:	bd30      	pop	{r4, r5, pc}
 80003ec:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f0:	4140      	adcs	r0, r0
 80003f2:	eb41 0101 	adc.w	r1, r1, r1
 80003f6:	3c01      	subs	r4, #1
 80003f8:	bf28      	it	cs
 80003fa:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003fe:	d2e9      	bcs.n	80003d4 <__adddf3+0x10c>
 8000400:	f091 0f00 	teq	r1, #0
 8000404:	bf04      	itt	eq
 8000406:	4601      	moveq	r1, r0
 8000408:	2000      	moveq	r0, #0
 800040a:	fab1 f381 	clz	r3, r1
 800040e:	bf08      	it	eq
 8000410:	3320      	addeq	r3, #32
 8000412:	f1a3 030b 	sub.w	r3, r3, #11
 8000416:	f1b3 0220 	subs.w	r2, r3, #32
 800041a:	da0c      	bge.n	8000436 <__adddf3+0x16e>
 800041c:	320c      	adds	r2, #12
 800041e:	dd08      	ble.n	8000432 <__adddf3+0x16a>
 8000420:	f102 0c14 	add.w	ip, r2, #20
 8000424:	f1c2 020c 	rsb	r2, r2, #12
 8000428:	fa01 f00c 	lsl.w	r0, r1, ip
 800042c:	fa21 f102 	lsr.w	r1, r1, r2
 8000430:	e00c      	b.n	800044c <__adddf3+0x184>
 8000432:	f102 0214 	add.w	r2, r2, #20
 8000436:	bfd8      	it	le
 8000438:	f1c2 0c20 	rsble	ip, r2, #32
 800043c:	fa01 f102 	lsl.w	r1, r1, r2
 8000440:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000444:	bfdc      	itt	le
 8000446:	ea41 010c 	orrle.w	r1, r1, ip
 800044a:	4090      	lslle	r0, r2
 800044c:	1ae4      	subs	r4, r4, r3
 800044e:	bfa2      	ittt	ge
 8000450:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000454:	4329      	orrge	r1, r5
 8000456:	bd30      	popge	{r4, r5, pc}
 8000458:	ea6f 0404 	mvn.w	r4, r4
 800045c:	3c1f      	subs	r4, #31
 800045e:	da1c      	bge.n	800049a <__adddf3+0x1d2>
 8000460:	340c      	adds	r4, #12
 8000462:	dc0e      	bgt.n	8000482 <__adddf3+0x1ba>
 8000464:	f104 0414 	add.w	r4, r4, #20
 8000468:	f1c4 0220 	rsb	r2, r4, #32
 800046c:	fa20 f004 	lsr.w	r0, r0, r4
 8000470:	fa01 f302 	lsl.w	r3, r1, r2
 8000474:	ea40 0003 	orr.w	r0, r0, r3
 8000478:	fa21 f304 	lsr.w	r3, r1, r4
 800047c:	ea45 0103 	orr.w	r1, r5, r3
 8000480:	bd30      	pop	{r4, r5, pc}
 8000482:	f1c4 040c 	rsb	r4, r4, #12
 8000486:	f1c4 0220 	rsb	r2, r4, #32
 800048a:	fa20 f002 	lsr.w	r0, r0, r2
 800048e:	fa01 f304 	lsl.w	r3, r1, r4
 8000492:	ea40 0003 	orr.w	r0, r0, r3
 8000496:	4629      	mov	r1, r5
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	fa21 f004 	lsr.w	r0, r1, r4
 800049e:	4629      	mov	r1, r5
 80004a0:	bd30      	pop	{r4, r5, pc}
 80004a2:	f094 0f00 	teq	r4, #0
 80004a6:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004aa:	bf06      	itte	eq
 80004ac:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b0:	3401      	addeq	r4, #1
 80004b2:	3d01      	subne	r5, #1
 80004b4:	e74e      	b.n	8000354 <__adddf3+0x8c>
 80004b6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ba:	bf18      	it	ne
 80004bc:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c0:	d029      	beq.n	8000516 <__adddf3+0x24e>
 80004c2:	ea94 0f05 	teq	r4, r5
 80004c6:	bf08      	it	eq
 80004c8:	ea90 0f02 	teqeq	r0, r2
 80004cc:	d005      	beq.n	80004da <__adddf3+0x212>
 80004ce:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d2:	bf04      	itt	eq
 80004d4:	4619      	moveq	r1, r3
 80004d6:	4610      	moveq	r0, r2
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea91 0f03 	teq	r1, r3
 80004de:	bf1e      	ittt	ne
 80004e0:	2100      	movne	r1, #0
 80004e2:	2000      	movne	r0, #0
 80004e4:	bd30      	popne	{r4, r5, pc}
 80004e6:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ea:	d105      	bne.n	80004f8 <__adddf3+0x230>
 80004ec:	0040      	lsls	r0, r0, #1
 80004ee:	4149      	adcs	r1, r1
 80004f0:	bf28      	it	cs
 80004f2:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004f6:	bd30      	pop	{r4, r5, pc}
 80004f8:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004fc:	bf3c      	itt	cc
 80004fe:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000502:	bd30      	popcc	{r4, r5, pc}
 8000504:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000508:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 800050c:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000510:	f04f 0000 	mov.w	r0, #0
 8000514:	bd30      	pop	{r4, r5, pc}
 8000516:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051a:	bf1a      	itte	ne
 800051c:	4619      	movne	r1, r3
 800051e:	4610      	movne	r0, r2
 8000520:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000524:	bf1c      	itt	ne
 8000526:	460b      	movne	r3, r1
 8000528:	4602      	movne	r2, r0
 800052a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800052e:	bf06      	itte	eq
 8000530:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000534:	ea91 0f03 	teqeq	r1, r3
 8000538:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 800053c:	bd30      	pop	{r4, r5, pc}
 800053e:	bf00      	nop

08000540 <__aeabi_ui2d>:
 8000540:	f090 0f00 	teq	r0, #0
 8000544:	bf04      	itt	eq
 8000546:	2100      	moveq	r1, #0
 8000548:	4770      	bxeq	lr
 800054a:	b530      	push	{r4, r5, lr}
 800054c:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000550:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000554:	f04f 0500 	mov.w	r5, #0
 8000558:	f04f 0100 	mov.w	r1, #0
 800055c:	e750      	b.n	8000400 <__adddf3+0x138>
 800055e:	bf00      	nop

08000560 <__aeabi_i2d>:
 8000560:	f090 0f00 	teq	r0, #0
 8000564:	bf04      	itt	eq
 8000566:	2100      	moveq	r1, #0
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000570:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000574:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000578:	bf48      	it	mi
 800057a:	4240      	negmi	r0, r0
 800057c:	f04f 0100 	mov.w	r1, #0
 8000580:	e73e      	b.n	8000400 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_f2d>:
 8000584:	0042      	lsls	r2, r0, #1
 8000586:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058a:	ea4f 0131 	mov.w	r1, r1, rrx
 800058e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000592:	bf1f      	itttt	ne
 8000594:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000598:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 800059c:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a0:	4770      	bxne	lr
 80005a2:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005a6:	bf08      	it	eq
 80005a8:	4770      	bxeq	lr
 80005aa:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005ae:	bf04      	itt	eq
 80005b0:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b4:	4770      	bxeq	lr
 80005b6:	b530      	push	{r4, r5, lr}
 80005b8:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005bc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c4:	e71c      	b.n	8000400 <__adddf3+0x138>
 80005c6:	bf00      	nop

080005c8 <__aeabi_ul2d>:
 80005c8:	ea50 0201 	orrs.w	r2, r0, r1
 80005cc:	bf08      	it	eq
 80005ce:	4770      	bxeq	lr
 80005d0:	b530      	push	{r4, r5, lr}
 80005d2:	f04f 0500 	mov.w	r5, #0
 80005d6:	e00a      	b.n	80005ee <__aeabi_l2d+0x16>

080005d8 <__aeabi_l2d>:
 80005d8:	ea50 0201 	orrs.w	r2, r0, r1
 80005dc:	bf08      	it	eq
 80005de:	4770      	bxeq	lr
 80005e0:	b530      	push	{r4, r5, lr}
 80005e2:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005e6:	d502      	bpl.n	80005ee <__aeabi_l2d+0x16>
 80005e8:	4240      	negs	r0, r0
 80005ea:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005ee:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f2:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005f6:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fa:	f43f aed8 	beq.w	80003ae <__adddf3+0xe6>
 80005fe:	f04f 0203 	mov.w	r2, #3
 8000602:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000606:	bf18      	it	ne
 8000608:	3203      	addne	r2, #3
 800060a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060e:	bf18      	it	ne
 8000610:	3203      	addne	r2, #3
 8000612:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000616:	f1c2 0320 	rsb	r3, r2, #32
 800061a:	fa00 fc03 	lsl.w	ip, r0, r3
 800061e:	fa20 f002 	lsr.w	r0, r0, r2
 8000622:	fa01 fe03 	lsl.w	lr, r1, r3
 8000626:	ea40 000e 	orr.w	r0, r0, lr
 800062a:	fa21 f102 	lsr.w	r1, r1, r2
 800062e:	4414      	add	r4, r2
 8000630:	e6bd      	b.n	80003ae <__adddf3+0xe6>
 8000632:	bf00      	nop

08000634 <__aeabi_dmul>:
 8000634:	b570      	push	{r4, r5, r6, lr}
 8000636:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800063e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000642:	bf1d      	ittte	ne
 8000644:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000648:	ea94 0f0c 	teqne	r4, ip
 800064c:	ea95 0f0c 	teqne	r5, ip
 8000650:	f000 f8de 	bleq	8000810 <__aeabi_dmul+0x1dc>
 8000654:	442c      	add	r4, r5
 8000656:	ea81 0603 	eor.w	r6, r1, r3
 800065a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800065e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000662:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000666:	bf18      	it	ne
 8000668:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 800066c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000670:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000674:	d038      	beq.n	80006e8 <__aeabi_dmul+0xb4>
 8000676:	fba0 ce02 	umull	ip, lr, r0, r2
 800067a:	f04f 0500 	mov.w	r5, #0
 800067e:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000682:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000686:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068a:	f04f 0600 	mov.w	r6, #0
 800068e:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000692:	f09c 0f00 	teq	ip, #0
 8000696:	bf18      	it	ne
 8000698:	f04e 0e01 	orrne.w	lr, lr, #1
 800069c:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a0:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a4:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006a8:	d204      	bcs.n	80006b4 <__aeabi_dmul+0x80>
 80006aa:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006ae:	416d      	adcs	r5, r5
 80006b0:	eb46 0606 	adc.w	r6, r6, r6
 80006b4:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006b8:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006bc:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c0:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c4:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006c8:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006cc:	bf88      	it	hi
 80006ce:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d2:	d81e      	bhi.n	8000712 <__aeabi_dmul+0xde>
 80006d4:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006d8:	bf08      	it	eq
 80006da:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006de:	f150 0000 	adcs.w	r0, r0, #0
 80006e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006e6:	bd70      	pop	{r4, r5, r6, pc}
 80006e8:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006ec:	ea46 0101 	orr.w	r1, r6, r1
 80006f0:	ea40 0002 	orr.w	r0, r0, r2
 80006f4:	ea81 0103 	eor.w	r1, r1, r3
 80006f8:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006fc:	bfc2      	ittt	gt
 80006fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000702:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000706:	bd70      	popgt	{r4, r5, r6, pc}
 8000708:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800070c:	f04f 0e00 	mov.w	lr, #0
 8000710:	3c01      	subs	r4, #1
 8000712:	f300 80ab 	bgt.w	800086c <__aeabi_dmul+0x238>
 8000716:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071a:	bfde      	ittt	le
 800071c:	2000      	movle	r0, #0
 800071e:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000722:	bd70      	pople	{r4, r5, r6, pc}
 8000724:	f1c4 0400 	rsb	r4, r4, #0
 8000728:	3c20      	subs	r4, #32
 800072a:	da35      	bge.n	8000798 <__aeabi_dmul+0x164>
 800072c:	340c      	adds	r4, #12
 800072e:	dc1b      	bgt.n	8000768 <__aeabi_dmul+0x134>
 8000730:	f104 0414 	add.w	r4, r4, #20
 8000734:	f1c4 0520 	rsb	r5, r4, #32
 8000738:	fa00 f305 	lsl.w	r3, r0, r5
 800073c:	fa20 f004 	lsr.w	r0, r0, r4
 8000740:	fa01 f205 	lsl.w	r2, r1, r5
 8000744:	ea40 0002 	orr.w	r0, r0, r2
 8000748:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 800074c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000750:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000754:	fa21 f604 	lsr.w	r6, r1, r4
 8000758:	eb42 0106 	adc.w	r1, r2, r6
 800075c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000760:	bf08      	it	eq
 8000762:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000766:	bd70      	pop	{r4, r5, r6, pc}
 8000768:	f1c4 040c 	rsb	r4, r4, #12
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f304 	lsl.w	r3, r0, r4
 8000774:	fa20 f005 	lsr.w	r0, r0, r5
 8000778:	fa01 f204 	lsl.w	r2, r1, r4
 800077c:	ea40 0002 	orr.w	r0, r0, r2
 8000780:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000784:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000788:	f141 0100 	adc.w	r1, r1, #0
 800078c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000790:	bf08      	it	eq
 8000792:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000796:	bd70      	pop	{r4, r5, r6, pc}
 8000798:	f1c4 0520 	rsb	r5, r4, #32
 800079c:	fa00 f205 	lsl.w	r2, r0, r5
 80007a0:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a4:	fa20 f304 	lsr.w	r3, r0, r4
 80007a8:	fa01 f205 	lsl.w	r2, r1, r5
 80007ac:	ea43 0302 	orr.w	r3, r3, r2
 80007b0:	fa21 f004 	lsr.w	r0, r1, r4
 80007b4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007b8:	fa21 f204 	lsr.w	r2, r1, r4
 80007bc:	ea20 0002 	bic.w	r0, r0, r2
 80007c0:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007c8:	bf08      	it	eq
 80007ca:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ce:	bd70      	pop	{r4, r5, r6, pc}
 80007d0:	f094 0f00 	teq	r4, #0
 80007d4:	d10f      	bne.n	80007f6 <__aeabi_dmul+0x1c2>
 80007d6:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007da:	0040      	lsls	r0, r0, #1
 80007dc:	eb41 0101 	adc.w	r1, r1, r1
 80007e0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e4:	bf08      	it	eq
 80007e6:	3c01      	subeq	r4, #1
 80007e8:	d0f7      	beq.n	80007da <__aeabi_dmul+0x1a6>
 80007ea:	ea41 0106 	orr.w	r1, r1, r6
 80007ee:	f095 0f00 	teq	r5, #0
 80007f2:	bf18      	it	ne
 80007f4:	4770      	bxne	lr
 80007f6:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fa:	0052      	lsls	r2, r2, #1
 80007fc:	eb43 0303 	adc.w	r3, r3, r3
 8000800:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000804:	bf08      	it	eq
 8000806:	3d01      	subeq	r5, #1
 8000808:	d0f7      	beq.n	80007fa <__aeabi_dmul+0x1c6>
 800080a:	ea43 0306 	orr.w	r3, r3, r6
 800080e:	4770      	bx	lr
 8000810:	ea94 0f0c 	teq	r4, ip
 8000814:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000818:	bf18      	it	ne
 800081a:	ea95 0f0c 	teqne	r5, ip
 800081e:	d00c      	beq.n	800083a <__aeabi_dmul+0x206>
 8000820:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000824:	bf18      	it	ne
 8000826:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082a:	d1d1      	bne.n	80007d0 <__aeabi_dmul+0x19c>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f04f 0000 	mov.w	r0, #0
 8000838:	bd70      	pop	{r4, r5, r6, pc}
 800083a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800083e:	bf06      	itte	eq
 8000840:	4610      	moveq	r0, r2
 8000842:	4619      	moveq	r1, r3
 8000844:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000848:	d019      	beq.n	800087e <__aeabi_dmul+0x24a>
 800084a:	ea94 0f0c 	teq	r4, ip
 800084e:	d102      	bne.n	8000856 <__aeabi_dmul+0x222>
 8000850:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000854:	d113      	bne.n	800087e <__aeabi_dmul+0x24a>
 8000856:	ea95 0f0c 	teq	r5, ip
 800085a:	d105      	bne.n	8000868 <__aeabi_dmul+0x234>
 800085c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000860:	bf1c      	itt	ne
 8000862:	4610      	movne	r0, r2
 8000864:	4619      	movne	r1, r3
 8000866:	d10a      	bne.n	800087e <__aeabi_dmul+0x24a>
 8000868:	ea81 0103 	eor.w	r1, r1, r3
 800086c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000870:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000874:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000878:	f04f 0000 	mov.w	r0, #0
 800087c:	bd70      	pop	{r4, r5, r6, pc}
 800087e:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000882:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000886:	bd70      	pop	{r4, r5, r6, pc}

08000888 <__aeabi_ddiv>:
 8000888:	b570      	push	{r4, r5, r6, lr}
 800088a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800088e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000892:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000896:	bf1d      	ittte	ne
 8000898:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800089c:	ea94 0f0c 	teqne	r4, ip
 80008a0:	ea95 0f0c 	teqne	r5, ip
 80008a4:	f000 f8a7 	bleq	80009f6 <__aeabi_ddiv+0x16e>
 80008a8:	eba4 0405 	sub.w	r4, r4, r5
 80008ac:	ea81 0e03 	eor.w	lr, r1, r3
 80008b0:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008b8:	f000 8088 	beq.w	80009cc <__aeabi_ddiv+0x144>
 80008bc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c0:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c4:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008c8:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008cc:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d0:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d4:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008d8:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008dc:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e0:	429d      	cmp	r5, r3
 80008e2:	bf08      	it	eq
 80008e4:	4296      	cmpeq	r6, r2
 80008e6:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ea:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008ee:	d202      	bcs.n	80008f6 <__aeabi_ddiv+0x6e>
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	1ab6      	subs	r6, r6, r2
 80008f8:	eb65 0503 	sbc.w	r5, r5, r3
 80008fc:	085b      	lsrs	r3, r3, #1
 80008fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000902:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000906:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090a:	ebb6 0e02 	subs.w	lr, r6, r2
 800090e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000912:	bf22      	ittt	cs
 8000914:	1ab6      	subcs	r6, r6, r2
 8000916:	4675      	movcs	r5, lr
 8000918:	ea40 000c 	orrcs.w	r0, r0, ip
 800091c:	085b      	lsrs	r3, r3, #1
 800091e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000922:	ebb6 0e02 	subs.w	lr, r6, r2
 8000926:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092a:	bf22      	ittt	cs
 800092c:	1ab6      	subcs	r6, r6, r2
 800092e:	4675      	movcs	r5, lr
 8000930:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000934:	085b      	lsrs	r3, r3, #1
 8000936:	ea4f 0232 	mov.w	r2, r2, rrx
 800093a:	ebb6 0e02 	subs.w	lr, r6, r2
 800093e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000942:	bf22      	ittt	cs
 8000944:	1ab6      	subcs	r6, r6, r2
 8000946:	4675      	movcs	r5, lr
 8000948:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800094c:	085b      	lsrs	r3, r3, #1
 800094e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000952:	ebb6 0e02 	subs.w	lr, r6, r2
 8000956:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095a:	bf22      	ittt	cs
 800095c:	1ab6      	subcs	r6, r6, r2
 800095e:	4675      	movcs	r5, lr
 8000960:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000964:	ea55 0e06 	orrs.w	lr, r5, r6
 8000968:	d018      	beq.n	800099c <__aeabi_ddiv+0x114>
 800096a:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800096e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000972:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000976:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800097e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000982:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000986:	d1c0      	bne.n	800090a <__aeabi_ddiv+0x82>
 8000988:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 800098c:	d10b      	bne.n	80009a6 <__aeabi_ddiv+0x11e>
 800098e:	ea41 0100 	orr.w	r1, r1, r0
 8000992:	f04f 0000 	mov.w	r0, #0
 8000996:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099a:	e7b6      	b.n	800090a <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a0:	bf04      	itt	eq
 80009a2:	4301      	orreq	r1, r0
 80009a4:	2000      	moveq	r0, #0
 80009a6:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009aa:	bf88      	it	hi
 80009ac:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b0:	f63f aeaf 	bhi.w	8000712 <__aeabi_dmul+0xde>
 80009b4:	ebb5 0c03 	subs.w	ip, r5, r3
 80009b8:	bf04      	itt	eq
 80009ba:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c2:	f150 0000 	adcs.w	r0, r0, #0
 80009c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ca:	bd70      	pop	{r4, r5, r6, pc}
 80009cc:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d0:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d4:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009d8:	bfc2      	ittt	gt
 80009da:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009de:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e2:	bd70      	popgt	{r4, r5, r6, pc}
 80009e4:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009e8:	f04f 0e00 	mov.w	lr, #0
 80009ec:	3c01      	subs	r4, #1
 80009ee:	e690      	b.n	8000712 <__aeabi_dmul+0xde>
 80009f0:	ea45 0e06 	orr.w	lr, r5, r6
 80009f4:	e68d      	b.n	8000712 <__aeabi_dmul+0xde>
 80009f6:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fa:	ea94 0f0c 	teq	r4, ip
 80009fe:	bf08      	it	eq
 8000a00:	ea95 0f0c 	teqeq	r5, ip
 8000a04:	f43f af3b 	beq.w	800087e <__aeabi_dmul+0x24a>
 8000a08:	ea94 0f0c 	teq	r4, ip
 8000a0c:	d10a      	bne.n	8000a24 <__aeabi_ddiv+0x19c>
 8000a0e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a12:	f47f af34 	bne.w	800087e <__aeabi_dmul+0x24a>
 8000a16:	ea95 0f0c 	teq	r5, ip
 8000a1a:	f47f af25 	bne.w	8000868 <__aeabi_dmul+0x234>
 8000a1e:	4610      	mov	r0, r2
 8000a20:	4619      	mov	r1, r3
 8000a22:	e72c      	b.n	800087e <__aeabi_dmul+0x24a>
 8000a24:	ea95 0f0c 	teq	r5, ip
 8000a28:	d106      	bne.n	8000a38 <__aeabi_ddiv+0x1b0>
 8000a2a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a2e:	f43f aefd 	beq.w	800082c <__aeabi_dmul+0x1f8>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e722      	b.n	800087e <__aeabi_dmul+0x24a>
 8000a38:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a3c:	bf18      	it	ne
 8000a3e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a42:	f47f aec5 	bne.w	80007d0 <__aeabi_dmul+0x19c>
 8000a46:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4a:	f47f af0d 	bne.w	8000868 <__aeabi_dmul+0x234>
 8000a4e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a52:	f47f aeeb 	bne.w	800082c <__aeabi_dmul+0x1f8>
 8000a56:	e712      	b.n	800087e <__aeabi_dmul+0x24a>

08000a58 <__gedf2>:
 8000a58:	f04f 3cff 	mov.w	ip, #4294967295
 8000a5c:	e006      	b.n	8000a6c <__cmpdf2+0x4>
 8000a5e:	bf00      	nop

08000a60 <__ledf2>:
 8000a60:	f04f 0c01 	mov.w	ip, #1
 8000a64:	e002      	b.n	8000a6c <__cmpdf2+0x4>
 8000a66:	bf00      	nop

08000a68 <__cmpdf2>:
 8000a68:	f04f 0c01 	mov.w	ip, #1
 8000a6c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a70:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a78:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a7c:	bf18      	it	ne
 8000a7e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a82:	d01b      	beq.n	8000abc <__cmpdf2+0x54>
 8000a84:	b001      	add	sp, #4
 8000a86:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8a:	bf0c      	ite	eq
 8000a8c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a90:	ea91 0f03 	teqne	r1, r3
 8000a94:	bf02      	ittt	eq
 8000a96:	ea90 0f02 	teqeq	r0, r2
 8000a9a:	2000      	moveq	r0, #0
 8000a9c:	4770      	bxeq	lr
 8000a9e:	f110 0f00 	cmn.w	r0, #0
 8000aa2:	ea91 0f03 	teq	r1, r3
 8000aa6:	bf58      	it	pl
 8000aa8:	4299      	cmppl	r1, r3
 8000aaa:	bf08      	it	eq
 8000aac:	4290      	cmpeq	r0, r2
 8000aae:	bf2c      	ite	cs
 8000ab0:	17d8      	asrcs	r0, r3, #31
 8000ab2:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ab6:	f040 0001 	orr.w	r0, r0, #1
 8000aba:	4770      	bx	lr
 8000abc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac4:	d102      	bne.n	8000acc <__cmpdf2+0x64>
 8000ac6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aca:	d107      	bne.n	8000adc <__cmpdf2+0x74>
 8000acc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad4:	d1d6      	bne.n	8000a84 <__cmpdf2+0x1c>
 8000ad6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ada:	d0d3      	beq.n	8000a84 <__cmpdf2+0x1c>
 8000adc:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae0:	4770      	bx	lr
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_cdrcmple>:
 8000ae4:	4684      	mov	ip, r0
 8000ae6:	4610      	mov	r0, r2
 8000ae8:	4662      	mov	r2, ip
 8000aea:	468c      	mov	ip, r1
 8000aec:	4619      	mov	r1, r3
 8000aee:	4663      	mov	r3, ip
 8000af0:	e000      	b.n	8000af4 <__aeabi_cdcmpeq>
 8000af2:	bf00      	nop

08000af4 <__aeabi_cdcmpeq>:
 8000af4:	b501      	push	{r0, lr}
 8000af6:	f7ff ffb7 	bl	8000a68 <__cmpdf2>
 8000afa:	2800      	cmp	r0, #0
 8000afc:	bf48      	it	mi
 8000afe:	f110 0f00 	cmnmi.w	r0, #0
 8000b02:	bd01      	pop	{r0, pc}

08000b04 <__aeabi_dcmpeq>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff fff4 	bl	8000af4 <__aeabi_cdcmpeq>
 8000b0c:	bf0c      	ite	eq
 8000b0e:	2001      	moveq	r0, #1
 8000b10:	2000      	movne	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmplt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffea 	bl	8000af4 <__aeabi_cdcmpeq>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmple>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffe0 	bl	8000af4 <__aeabi_cdcmpeq>
 8000b34:	bf94      	ite	ls
 8000b36:	2001      	movls	r0, #1
 8000b38:	2000      	movhi	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmpge>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffce 	bl	8000ae4 <__aeabi_cdrcmple>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpgt>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffc4 	bl	8000ae4 <__aeabi_cdrcmple>
 8000b5c:	bf34      	ite	cc
 8000b5e:	2001      	movcc	r0, #1
 8000b60:	2000      	movcs	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpun>:
 8000b68:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b6c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b70:	d102      	bne.n	8000b78 <__aeabi_dcmpun+0x10>
 8000b72:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b76:	d10a      	bne.n	8000b8e <__aeabi_dcmpun+0x26>
 8000b78:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b7c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b80:	d102      	bne.n	8000b88 <__aeabi_dcmpun+0x20>
 8000b82:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b86:	d102      	bne.n	8000b8e <__aeabi_dcmpun+0x26>
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	f04f 0001 	mov.w	r0, #1
 8000b92:	4770      	bx	lr

08000b94 <__aeabi_d2iz>:
 8000b94:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b98:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b9c:	d215      	bcs.n	8000bca <__aeabi_d2iz+0x36>
 8000b9e:	d511      	bpl.n	8000bc4 <__aeabi_d2iz+0x30>
 8000ba0:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ba8:	d912      	bls.n	8000bd0 <__aeabi_d2iz+0x3c>
 8000baa:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bae:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bba:	fa23 f002 	lsr.w	r0, r3, r2
 8000bbe:	bf18      	it	ne
 8000bc0:	4240      	negne	r0, r0
 8000bc2:	4770      	bx	lr
 8000bc4:	f04f 0000 	mov.w	r0, #0
 8000bc8:	4770      	bx	lr
 8000bca:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bce:	d105      	bne.n	8000bdc <__aeabi_d2iz+0x48>
 8000bd0:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd4:	bf08      	it	eq
 8000bd6:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bda:	4770      	bx	lr
 8000bdc:	f04f 0000 	mov.w	r0, #0
 8000be0:	4770      	bx	lr
 8000be2:	bf00      	nop

08000be4 <__aeabi_d2uiz>:
 8000be4:	004a      	lsls	r2, r1, #1
 8000be6:	d211      	bcs.n	8000c0c <__aeabi_d2uiz+0x28>
 8000be8:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bec:	d211      	bcs.n	8000c12 <__aeabi_d2uiz+0x2e>
 8000bee:	d50d      	bpl.n	8000c0c <__aeabi_d2uiz+0x28>
 8000bf0:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bf4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bf8:	d40e      	bmi.n	8000c18 <__aeabi_d2uiz+0x34>
 8000bfa:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bfe:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c02:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c06:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0a:	4770      	bx	lr
 8000c0c:	f04f 0000 	mov.w	r0, #0
 8000c10:	4770      	bx	lr
 8000c12:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c16:	d102      	bne.n	8000c1e <__aeabi_d2uiz+0x3a>
 8000c18:	f04f 30ff 	mov.w	r0, #4294967295
 8000c1c:	4770      	bx	lr
 8000c1e:	f04f 0000 	mov.w	r0, #0
 8000c22:	4770      	bx	lr

08000c24 <__aeabi_d2f>:
 8000c24:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c28:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c2c:	bf24      	itt	cs
 8000c2e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c32:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c36:	d90d      	bls.n	8000c54 <__aeabi_d2f+0x30>
 8000c38:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c3c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c40:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c44:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c48:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c4c:	bf08      	it	eq
 8000c4e:	f020 0001 	biceq.w	r0, r0, #1
 8000c52:	4770      	bx	lr
 8000c54:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c58:	d121      	bne.n	8000c9e <__aeabi_d2f+0x7a>
 8000c5a:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c5e:	bfbc      	itt	lt
 8000c60:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c64:	4770      	bxlt	lr
 8000c66:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c6a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c6e:	f1c2 0218 	rsb	r2, r2, #24
 8000c72:	f1c2 0c20 	rsb	ip, r2, #32
 8000c76:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7a:	fa20 f002 	lsr.w	r0, r0, r2
 8000c7e:	bf18      	it	ne
 8000c80:	f040 0001 	orrne.w	r0, r0, #1
 8000c84:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c88:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c8c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c90:	ea40 000c 	orr.w	r0, r0, ip
 8000c94:	fa23 f302 	lsr.w	r3, r3, r2
 8000c98:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c9c:	e7cc      	b.n	8000c38 <__aeabi_d2f+0x14>
 8000c9e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca2:	d107      	bne.n	8000cb4 <__aeabi_d2f+0x90>
 8000ca4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ca8:	bf1e      	ittt	ne
 8000caa:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cae:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cb2:	4770      	bxne	lr
 8000cb4:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000cb8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cbc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cc0:	4770      	bx	lr
 8000cc2:	bf00      	nop

08000cc4 <__aeabi_uldivmod>:
 8000cc4:	b953      	cbnz	r3, 8000cdc <__aeabi_uldivmod+0x18>
 8000cc6:	b94a      	cbnz	r2, 8000cdc <__aeabi_uldivmod+0x18>
 8000cc8:	2900      	cmp	r1, #0
 8000cca:	bf08      	it	eq
 8000ccc:	2800      	cmpeq	r0, #0
 8000cce:	bf1c      	itt	ne
 8000cd0:	f04f 31ff 	movne.w	r1, #4294967295
 8000cd4:	f04f 30ff 	movne.w	r0, #4294967295
 8000cd8:	f000 b9b4 	b.w	8001044 <__aeabi_idiv0>
 8000cdc:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce4:	f000 f83c 	bl	8000d60 <__udivmoddi4>
 8000ce8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf0:	b004      	add	sp, #16
 8000cf2:	4770      	bx	lr

08000cf4 <__aeabi_d2lz>:
 8000cf4:	b538      	push	{r3, r4, r5, lr}
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	460d      	mov	r5, r1
 8000cfe:	f7ff ff0b 	bl	8000b18 <__aeabi_dcmplt>
 8000d02:	b928      	cbnz	r0, 8000d10 <__aeabi_d2lz+0x1c>
 8000d04:	4620      	mov	r0, r4
 8000d06:	4629      	mov	r1, r5
 8000d08:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d0c:	f000 b80a 	b.w	8000d24 <__aeabi_d2ulz>
 8000d10:	4620      	mov	r0, r4
 8000d12:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d16:	f000 f805 	bl	8000d24 <__aeabi_d2ulz>
 8000d1a:	4240      	negs	r0, r0
 8000d1c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d20:	bd38      	pop	{r3, r4, r5, pc}
 8000d22:	bf00      	nop

08000d24 <__aeabi_d2ulz>:
 8000d24:	b5d0      	push	{r4, r6, r7, lr}
 8000d26:	2200      	movs	r2, #0
 8000d28:	4b0b      	ldr	r3, [pc, #44]	@ (8000d58 <__aeabi_d2ulz+0x34>)
 8000d2a:	4606      	mov	r6, r0
 8000d2c:	460f      	mov	r7, r1
 8000d2e:	f7ff fc81 	bl	8000634 <__aeabi_dmul>
 8000d32:	f7ff ff57 	bl	8000be4 <__aeabi_d2uiz>
 8000d36:	4604      	mov	r4, r0
 8000d38:	f7ff fc02 	bl	8000540 <__aeabi_ui2d>
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	4b07      	ldr	r3, [pc, #28]	@ (8000d5c <__aeabi_d2ulz+0x38>)
 8000d40:	f7ff fc78 	bl	8000634 <__aeabi_dmul>
 8000d44:	4602      	mov	r2, r0
 8000d46:	460b      	mov	r3, r1
 8000d48:	4630      	mov	r0, r6
 8000d4a:	4639      	mov	r1, r7
 8000d4c:	f7ff faba 	bl	80002c4 <__aeabi_dsub>
 8000d50:	f7ff ff48 	bl	8000be4 <__aeabi_d2uiz>
 8000d54:	4621      	mov	r1, r4
 8000d56:	bdd0      	pop	{r4, r6, r7, pc}
 8000d58:	3df00000 	.word	0x3df00000
 8000d5c:	41f00000 	.word	0x41f00000

08000d60 <__udivmoddi4>:
 8000d60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000d64:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8000d66:	460c      	mov	r4, r1
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d14d      	bne.n	8000e08 <__udivmoddi4+0xa8>
 8000d6c:	428a      	cmp	r2, r1
 8000d6e:	460f      	mov	r7, r1
 8000d70:	4684      	mov	ip, r0
 8000d72:	4696      	mov	lr, r2
 8000d74:	fab2 f382 	clz	r3, r2
 8000d78:	d960      	bls.n	8000e3c <__udivmoddi4+0xdc>
 8000d7a:	b14b      	cbz	r3, 8000d90 <__udivmoddi4+0x30>
 8000d7c:	fa02 fe03 	lsl.w	lr, r2, r3
 8000d80:	f1c3 0220 	rsb	r2, r3, #32
 8000d84:	409f      	lsls	r7, r3
 8000d86:	fa00 fc03 	lsl.w	ip, r0, r3
 8000d8a:	fa20 f202 	lsr.w	r2, r0, r2
 8000d8e:	4317      	orrs	r7, r2
 8000d90:	ea4f 461e 	mov.w	r6, lr, lsr #16
 8000d94:	fa1f f48e 	uxth.w	r4, lr
 8000d98:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8000d9c:	fbb7 f1f6 	udiv	r1, r7, r6
 8000da0:	fb06 7711 	mls	r7, r6, r1, r7
 8000da4:	fb01 f004 	mul.w	r0, r1, r4
 8000da8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000dac:	4290      	cmp	r0, r2
 8000dae:	d908      	bls.n	8000dc2 <__udivmoddi4+0x62>
 8000db0:	eb1e 0202 	adds.w	r2, lr, r2
 8000db4:	f101 37ff 	add.w	r7, r1, #4294967295
 8000db8:	d202      	bcs.n	8000dc0 <__udivmoddi4+0x60>
 8000dba:	4290      	cmp	r0, r2
 8000dbc:	f200 812d 	bhi.w	800101a <__udivmoddi4+0x2ba>
 8000dc0:	4639      	mov	r1, r7
 8000dc2:	1a12      	subs	r2, r2, r0
 8000dc4:	fa1f fc8c 	uxth.w	ip, ip
 8000dc8:	fbb2 f0f6 	udiv	r0, r2, r6
 8000dcc:	fb06 2210 	mls	r2, r6, r0, r2
 8000dd0:	fb00 f404 	mul.w	r4, r0, r4
 8000dd4:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8000dd8:	4564      	cmp	r4, ip
 8000dda:	d908      	bls.n	8000dee <__udivmoddi4+0x8e>
 8000ddc:	eb1e 0c0c 	adds.w	ip, lr, ip
 8000de0:	f100 32ff 	add.w	r2, r0, #4294967295
 8000de4:	d202      	bcs.n	8000dec <__udivmoddi4+0x8c>
 8000de6:	4564      	cmp	r4, ip
 8000de8:	f200 811a 	bhi.w	8001020 <__udivmoddi4+0x2c0>
 8000dec:	4610      	mov	r0, r2
 8000dee:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000df2:	ebac 0c04 	sub.w	ip, ip, r4
 8000df6:	2100      	movs	r1, #0
 8000df8:	b125      	cbz	r5, 8000e04 <__udivmoddi4+0xa4>
 8000dfa:	fa2c f303 	lsr.w	r3, ip, r3
 8000dfe:	2200      	movs	r2, #0
 8000e00:	e9c5 3200 	strd	r3, r2, [r5]
 8000e04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000e08:	428b      	cmp	r3, r1
 8000e0a:	d905      	bls.n	8000e18 <__udivmoddi4+0xb8>
 8000e0c:	b10d      	cbz	r5, 8000e12 <__udivmoddi4+0xb2>
 8000e0e:	e9c5 0100 	strd	r0, r1, [r5]
 8000e12:	2100      	movs	r1, #0
 8000e14:	4608      	mov	r0, r1
 8000e16:	e7f5      	b.n	8000e04 <__udivmoddi4+0xa4>
 8000e18:	fab3 f183 	clz	r1, r3
 8000e1c:	2900      	cmp	r1, #0
 8000e1e:	d14d      	bne.n	8000ebc <__udivmoddi4+0x15c>
 8000e20:	42a3      	cmp	r3, r4
 8000e22:	f0c0 80f2 	bcc.w	800100a <__udivmoddi4+0x2aa>
 8000e26:	4290      	cmp	r0, r2
 8000e28:	f080 80ef 	bcs.w	800100a <__udivmoddi4+0x2aa>
 8000e2c:	4606      	mov	r6, r0
 8000e2e:	4623      	mov	r3, r4
 8000e30:	4608      	mov	r0, r1
 8000e32:	2d00      	cmp	r5, #0
 8000e34:	d0e6      	beq.n	8000e04 <__udivmoddi4+0xa4>
 8000e36:	e9c5 6300 	strd	r6, r3, [r5]
 8000e3a:	e7e3      	b.n	8000e04 <__udivmoddi4+0xa4>
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	f040 80a2 	bne.w	8000f86 <__udivmoddi4+0x226>
 8000e42:	1a8a      	subs	r2, r1, r2
 8000e44:	ea4f 471e 	mov.w	r7, lr, lsr #16
 8000e48:	fa1f f68e 	uxth.w	r6, lr
 8000e4c:	2101      	movs	r1, #1
 8000e4e:	fbb2 f4f7 	udiv	r4, r2, r7
 8000e52:	fb07 2014 	mls	r0, r7, r4, r2
 8000e56:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8000e5a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e5e:	fb06 f004 	mul.w	r0, r6, r4
 8000e62:	4290      	cmp	r0, r2
 8000e64:	d90f      	bls.n	8000e86 <__udivmoddi4+0x126>
 8000e66:	eb1e 0202 	adds.w	r2, lr, r2
 8000e6a:	f104 38ff 	add.w	r8, r4, #4294967295
 8000e6e:	bf2c      	ite	cs
 8000e70:	f04f 0901 	movcs.w	r9, #1
 8000e74:	f04f 0900 	movcc.w	r9, #0
 8000e78:	4290      	cmp	r0, r2
 8000e7a:	d903      	bls.n	8000e84 <__udivmoddi4+0x124>
 8000e7c:	f1b9 0f00 	cmp.w	r9, #0
 8000e80:	f000 80c8 	beq.w	8001014 <__udivmoddi4+0x2b4>
 8000e84:	4644      	mov	r4, r8
 8000e86:	1a12      	subs	r2, r2, r0
 8000e88:	fa1f fc8c 	uxth.w	ip, ip
 8000e8c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e90:	fb07 2210 	mls	r2, r7, r0, r2
 8000e94:	fb00 f606 	mul.w	r6, r0, r6
 8000e98:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8000e9c:	4566      	cmp	r6, ip
 8000e9e:	d908      	bls.n	8000eb2 <__udivmoddi4+0x152>
 8000ea0:	eb1e 0c0c 	adds.w	ip, lr, ip
 8000ea4:	f100 32ff 	add.w	r2, r0, #4294967295
 8000ea8:	d202      	bcs.n	8000eb0 <__udivmoddi4+0x150>
 8000eaa:	4566      	cmp	r6, ip
 8000eac:	f200 80bb 	bhi.w	8001026 <__udivmoddi4+0x2c6>
 8000eb0:	4610      	mov	r0, r2
 8000eb2:	ebac 0c06 	sub.w	ip, ip, r6
 8000eb6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000eba:	e79d      	b.n	8000df8 <__udivmoddi4+0x98>
 8000ebc:	f1c1 0620 	rsb	r6, r1, #32
 8000ec0:	408b      	lsls	r3, r1
 8000ec2:	fa04 fe01 	lsl.w	lr, r4, r1
 8000ec6:	fa22 f706 	lsr.w	r7, r2, r6
 8000eca:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ece:	40f4      	lsrs	r4, r6
 8000ed0:	408a      	lsls	r2, r1
 8000ed2:	431f      	orrs	r7, r3
 8000ed4:	ea4e 030c 	orr.w	r3, lr, ip
 8000ed8:	fa00 fe01 	lsl.w	lr, r0, r1
 8000edc:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000ee0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ee4:	fa1f fc87 	uxth.w	ip, r7
 8000ee8:	fbb4 f0f8 	udiv	r0, r4, r8
 8000eec:	fb08 4410 	mls	r4, r8, r0, r4
 8000ef0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ef4:	fb00 f90c 	mul.w	r9, r0, ip
 8000ef8:	45a1      	cmp	r9, r4
 8000efa:	d90e      	bls.n	8000f1a <__udivmoddi4+0x1ba>
 8000efc:	193c      	adds	r4, r7, r4
 8000efe:	f100 3aff 	add.w	sl, r0, #4294967295
 8000f02:	bf2c      	ite	cs
 8000f04:	f04f 0b01 	movcs.w	fp, #1
 8000f08:	f04f 0b00 	movcc.w	fp, #0
 8000f0c:	45a1      	cmp	r9, r4
 8000f0e:	d903      	bls.n	8000f18 <__udivmoddi4+0x1b8>
 8000f10:	f1bb 0f00 	cmp.w	fp, #0
 8000f14:	f000 8093 	beq.w	800103e <__udivmoddi4+0x2de>
 8000f18:	4650      	mov	r0, sl
 8000f1a:	eba4 0409 	sub.w	r4, r4, r9
 8000f1e:	fa1f f983 	uxth.w	r9, r3
 8000f22:	fbb4 f3f8 	udiv	r3, r4, r8
 8000f26:	fb08 4413 	mls	r4, r8, r3, r4
 8000f2a:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f2e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f32:	45a4      	cmp	ip, r4
 8000f34:	d906      	bls.n	8000f44 <__udivmoddi4+0x1e4>
 8000f36:	193c      	adds	r4, r7, r4
 8000f38:	f103 38ff 	add.w	r8, r3, #4294967295
 8000f3c:	d201      	bcs.n	8000f42 <__udivmoddi4+0x1e2>
 8000f3e:	45a4      	cmp	ip, r4
 8000f40:	d87a      	bhi.n	8001038 <__udivmoddi4+0x2d8>
 8000f42:	4643      	mov	r3, r8
 8000f44:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000f48:	eba4 040c 	sub.w	r4, r4, ip
 8000f4c:	fba0 9802 	umull	r9, r8, r0, r2
 8000f50:	4544      	cmp	r4, r8
 8000f52:	46cc      	mov	ip, r9
 8000f54:	4643      	mov	r3, r8
 8000f56:	d302      	bcc.n	8000f5e <__udivmoddi4+0x1fe>
 8000f58:	d106      	bne.n	8000f68 <__udivmoddi4+0x208>
 8000f5a:	45ce      	cmp	lr, r9
 8000f5c:	d204      	bcs.n	8000f68 <__udivmoddi4+0x208>
 8000f5e:	3801      	subs	r0, #1
 8000f60:	ebb9 0c02 	subs.w	ip, r9, r2
 8000f64:	eb68 0307 	sbc.w	r3, r8, r7
 8000f68:	b15d      	cbz	r5, 8000f82 <__udivmoddi4+0x222>
 8000f6a:	ebbe 020c 	subs.w	r2, lr, ip
 8000f6e:	eb64 0403 	sbc.w	r4, r4, r3
 8000f72:	fa04 f606 	lsl.w	r6, r4, r6
 8000f76:	fa22 f301 	lsr.w	r3, r2, r1
 8000f7a:	40cc      	lsrs	r4, r1
 8000f7c:	431e      	orrs	r6, r3
 8000f7e:	e9c5 6400 	strd	r6, r4, [r5]
 8000f82:	2100      	movs	r1, #0
 8000f84:	e73e      	b.n	8000e04 <__udivmoddi4+0xa4>
 8000f86:	fa02 fe03 	lsl.w	lr, r2, r3
 8000f8a:	f1c3 0120 	rsb	r1, r3, #32
 8000f8e:	fa04 f203 	lsl.w	r2, r4, r3
 8000f92:	fa00 fc03 	lsl.w	ip, r0, r3
 8000f96:	40cc      	lsrs	r4, r1
 8000f98:	ea4f 471e 	mov.w	r7, lr, lsr #16
 8000f9c:	fa20 f101 	lsr.w	r1, r0, r1
 8000fa0:	fa1f f68e 	uxth.w	r6, lr
 8000fa4:	fbb4 f0f7 	udiv	r0, r4, r7
 8000fa8:	430a      	orrs	r2, r1
 8000faa:	fb07 4410 	mls	r4, r7, r0, r4
 8000fae:	0c11      	lsrs	r1, r2, #16
 8000fb0:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8000fb4:	fb00 f406 	mul.w	r4, r0, r6
 8000fb8:	428c      	cmp	r4, r1
 8000fba:	d90e      	bls.n	8000fda <__udivmoddi4+0x27a>
 8000fbc:	eb1e 0101 	adds.w	r1, lr, r1
 8000fc0:	f100 38ff 	add.w	r8, r0, #4294967295
 8000fc4:	bf2c      	ite	cs
 8000fc6:	f04f 0901 	movcs.w	r9, #1
 8000fca:	f04f 0900 	movcc.w	r9, #0
 8000fce:	428c      	cmp	r4, r1
 8000fd0:	d902      	bls.n	8000fd8 <__udivmoddi4+0x278>
 8000fd2:	f1b9 0f00 	cmp.w	r9, #0
 8000fd6:	d02c      	beq.n	8001032 <__udivmoddi4+0x2d2>
 8000fd8:	4640      	mov	r0, r8
 8000fda:	1b09      	subs	r1, r1, r4
 8000fdc:	b292      	uxth	r2, r2
 8000fde:	fbb1 f4f7 	udiv	r4, r1, r7
 8000fe2:	fb07 1114 	mls	r1, r7, r4, r1
 8000fe6:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fea:	fb04 f106 	mul.w	r1, r4, r6
 8000fee:	4291      	cmp	r1, r2
 8000ff0:	d907      	bls.n	8001002 <__udivmoddi4+0x2a2>
 8000ff2:	eb1e 0202 	adds.w	r2, lr, r2
 8000ff6:	f104 38ff 	add.w	r8, r4, #4294967295
 8000ffa:	d201      	bcs.n	8001000 <__udivmoddi4+0x2a0>
 8000ffc:	4291      	cmp	r1, r2
 8000ffe:	d815      	bhi.n	800102c <__udivmoddi4+0x2cc>
 8001000:	4644      	mov	r4, r8
 8001002:	1a52      	subs	r2, r2, r1
 8001004:	ea44 4100 	orr.w	r1, r4, r0, lsl #16
 8001008:	e721      	b.n	8000e4e <__udivmoddi4+0xee>
 800100a:	1a86      	subs	r6, r0, r2
 800100c:	eb64 0303 	sbc.w	r3, r4, r3
 8001010:	2001      	movs	r0, #1
 8001012:	e70e      	b.n	8000e32 <__udivmoddi4+0xd2>
 8001014:	3c02      	subs	r4, #2
 8001016:	4472      	add	r2, lr
 8001018:	e735      	b.n	8000e86 <__udivmoddi4+0x126>
 800101a:	3902      	subs	r1, #2
 800101c:	4472      	add	r2, lr
 800101e:	e6d0      	b.n	8000dc2 <__udivmoddi4+0x62>
 8001020:	44f4      	add	ip, lr
 8001022:	3802      	subs	r0, #2
 8001024:	e6e3      	b.n	8000dee <__udivmoddi4+0x8e>
 8001026:	44f4      	add	ip, lr
 8001028:	3802      	subs	r0, #2
 800102a:	e742      	b.n	8000eb2 <__udivmoddi4+0x152>
 800102c:	3c02      	subs	r4, #2
 800102e:	4472      	add	r2, lr
 8001030:	e7e7      	b.n	8001002 <__udivmoddi4+0x2a2>
 8001032:	3802      	subs	r0, #2
 8001034:	4471      	add	r1, lr
 8001036:	e7d0      	b.n	8000fda <__udivmoddi4+0x27a>
 8001038:	3b02      	subs	r3, #2
 800103a:	443c      	add	r4, r7
 800103c:	e782      	b.n	8000f44 <__udivmoddi4+0x1e4>
 800103e:	3802      	subs	r0, #2
 8001040:	443c      	add	r4, r7
 8001042:	e76a      	b.n	8000f1a <__udivmoddi4+0x1ba>

08001044 <__aeabi_idiv0>:
 8001044:	4770      	bx	lr
 8001046:	bf00      	nop

08001048 <__io_putchar>:
uint8_t RxData3[128];
int before;
char voltage1[7], current1[8], batterypercentage1[6], status1[10], SoH1[7];
char voltage2[7], current2[8], batterypercentage2[6], status2[10], SoH2[7];

void __io_putchar(char ch) {
 8001048:	b580      	push	{r7, lr}
 800104a:	b082      	sub	sp, #8
 800104c:	af00      	add	r7, sp, #0
 800104e:	4603      	mov	r3, r0
 8001050:	71fb      	strb	r3, [r7, #7]
	HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 10);
 8001052:	1df9      	adds	r1, r7, #7
 8001054:	230a      	movs	r3, #10
 8001056:	2201      	movs	r2, #1
 8001058:	4803      	ldr	r0, [pc, #12]	@ (8001068 <__io_putchar+0x20>)
 800105a:	f004 fe1b 	bl	8005c94 <HAL_UART_Transmit>
}
 800105e:	bf00      	nop
 8001060:	3708      	adds	r7, #8
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}
 8001066:	bf00      	nop
 8001068:	200001f0 	.word	0x200001f0

0800106c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b084      	sub	sp, #16
 8001070:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001072:	f000 fd93 	bl	8001b9c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001076:	f000 f91f 	bl	80012b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800107a:	f000 fa37 	bl	80014ec <MX_GPIO_Init>
  MX_GPDMA1_Init();
 800107e:	f000 f97d 	bl	800137c <MX_GPDMA1_Init>
  MX_USART1_UART_Init();
 8001082:	f000 f99b 	bl	80013bc <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8001086:	f000 f9e5 	bl	8001454 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_HalfDuplex_EnableReceiver(&huart2);
 800108a:	4872      	ldr	r0, [pc, #456]	@ (8001254 <main+0x1e8>)
 800108c:	f004 ffcb 	bl	8006026 <HAL_HalfDuplex_EnableReceiver>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  HAL_UART_Receive(&huart1, &rxData, 1, 50);
 8001090:	2332      	movs	r3, #50	@ 0x32
 8001092:	2201      	movs	r2, #1
 8001094:	4970      	ldr	r1, [pc, #448]	@ (8001258 <main+0x1ec>)
 8001096:	4871      	ldr	r0, [pc, #452]	@ (800125c <main+0x1f0>)
 8001098:	f004 fe9a 	bl	8005dd0 <HAL_UART_Receive>
	  if (rxData == '1'){ //Hidupkan charger Batt1
 800109c:	4b6e      	ldr	r3, [pc, #440]	@ (8001258 <main+0x1ec>)
 800109e:	781b      	ldrb	r3, [r3, #0]
 80010a0:	2b31      	cmp	r3, #49	@ 0x31
 80010a2:	d10d      	bne.n	80010c0 <main+0x54>
		  request = 0x15;
 80010a4:	4b6e      	ldr	r3, [pc, #440]	@ (8001260 <main+0x1f4>)
 80010a6:	2215      	movs	r2, #21
 80010a8:	701a      	strb	r2, [r3, #0]
		  HAL_UART_Transmit(&huart2, &request, 1, 1000);
 80010aa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80010ae:	2201      	movs	r2, #1
 80010b0:	496b      	ldr	r1, [pc, #428]	@ (8001260 <main+0x1f4>)
 80010b2:	4868      	ldr	r0, [pc, #416]	@ (8001254 <main+0x1e8>)
 80010b4:	f004 fdee 	bl	8005c94 <HAL_UART_Transmit>
		  printf("Hidupkan charger Batt1");
 80010b8:	486a      	ldr	r0, [pc, #424]	@ (8001264 <main+0x1f8>)
 80010ba:	f006 fbd7 	bl	800786c <iprintf>
 80010be:	e046      	b.n	800114e <main+0xe2>
	  }
	  else if (rxData == '2') { //Hidupkan charger Batt2
 80010c0:	4b65      	ldr	r3, [pc, #404]	@ (8001258 <main+0x1ec>)
 80010c2:	781b      	ldrb	r3, [r3, #0]
 80010c4:	2b32      	cmp	r3, #50	@ 0x32
 80010c6:	d10d      	bne.n	80010e4 <main+0x78>
		  request = 0x20;
 80010c8:	4b65      	ldr	r3, [pc, #404]	@ (8001260 <main+0x1f4>)
 80010ca:	2220      	movs	r2, #32
 80010cc:	701a      	strb	r2, [r3, #0]
		  HAL_UART_Transmit(&huart2, &request, 1, 1000);
 80010ce:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80010d2:	2201      	movs	r2, #1
 80010d4:	4962      	ldr	r1, [pc, #392]	@ (8001260 <main+0x1f4>)
 80010d6:	485f      	ldr	r0, [pc, #380]	@ (8001254 <main+0x1e8>)
 80010d8:	f004 fddc 	bl	8005c94 <HAL_UART_Transmit>
		  printf("Hidupkan charger Batt2");
 80010dc:	4862      	ldr	r0, [pc, #392]	@ (8001268 <main+0x1fc>)
 80010de:	f006 fbc5 	bl	800786c <iprintf>
 80010e2:	e034      	b.n	800114e <main+0xe2>
	  }
	  else if (rxData == '3') { //Hidupkan output Batt1
 80010e4:	4b5c      	ldr	r3, [pc, #368]	@ (8001258 <main+0x1ec>)
 80010e6:	781b      	ldrb	r3, [r3, #0]
 80010e8:	2b33      	cmp	r3, #51	@ 0x33
 80010ea:	d10d      	bne.n	8001108 <main+0x9c>
		  request = 0x25;
 80010ec:	4b5c      	ldr	r3, [pc, #368]	@ (8001260 <main+0x1f4>)
 80010ee:	2225      	movs	r2, #37	@ 0x25
 80010f0:	701a      	strb	r2, [r3, #0]
		  HAL_UART_Transmit(&huart2, &request, 1, 1000);
 80010f2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80010f6:	2201      	movs	r2, #1
 80010f8:	4959      	ldr	r1, [pc, #356]	@ (8001260 <main+0x1f4>)
 80010fa:	4856      	ldr	r0, [pc, #344]	@ (8001254 <main+0x1e8>)
 80010fc:	f004 fdca 	bl	8005c94 <HAL_UART_Transmit>
		  printf("Hidupkan output Batt1");
 8001100:	485a      	ldr	r0, [pc, #360]	@ (800126c <main+0x200>)
 8001102:	f006 fbb3 	bl	800786c <iprintf>
 8001106:	e022      	b.n	800114e <main+0xe2>
	  }
	  else if (rxData == '4') { //Hidupkan output Batt2
 8001108:	4b53      	ldr	r3, [pc, #332]	@ (8001258 <main+0x1ec>)
 800110a:	781b      	ldrb	r3, [r3, #0]
 800110c:	2b34      	cmp	r3, #52	@ 0x34
 800110e:	d10d      	bne.n	800112c <main+0xc0>
		  request = 0x30;
 8001110:	4b53      	ldr	r3, [pc, #332]	@ (8001260 <main+0x1f4>)
 8001112:	2230      	movs	r2, #48	@ 0x30
 8001114:	701a      	strb	r2, [r3, #0]
		  HAL_UART_Transmit(&huart2, &request, 1, 1000);
 8001116:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800111a:	2201      	movs	r2, #1
 800111c:	4950      	ldr	r1, [pc, #320]	@ (8001260 <main+0x1f4>)
 800111e:	484d      	ldr	r0, [pc, #308]	@ (8001254 <main+0x1e8>)
 8001120:	f004 fdb8 	bl	8005c94 <HAL_UART_Transmit>
		  printf("Hidupkan output Batt2");
 8001124:	4852      	ldr	r0, [pc, #328]	@ (8001270 <main+0x204>)
 8001126:	f006 fba1 	bl	800786c <iprintf>
 800112a:	e010      	b.n	800114e <main+0xe2>
	  }
	  else if (rxData == '5') { //Hidupkan output Batt2
 800112c:	4b4a      	ldr	r3, [pc, #296]	@ (8001258 <main+0x1ec>)
 800112e:	781b      	ldrb	r3, [r3, #0]
 8001130:	2b35      	cmp	r3, #53	@ 0x35
 8001132:	d10c      	bne.n	800114e <main+0xe2>
		  request = 0x35;
 8001134:	4b4a      	ldr	r3, [pc, #296]	@ (8001260 <main+0x1f4>)
 8001136:	2235      	movs	r2, #53	@ 0x35
 8001138:	701a      	strb	r2, [r3, #0]
		  HAL_UART_Transmit(&huart2, &request, 1, 1000);
 800113a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800113e:	2201      	movs	r2, #1
 8001140:	4947      	ldr	r1, [pc, #284]	@ (8001260 <main+0x1f4>)
 8001142:	4844      	ldr	r0, [pc, #272]	@ (8001254 <main+0x1e8>)
 8001144:	f004 fda6 	bl	8005c94 <HAL_UART_Transmit>
		  printf("Off all");
 8001148:	484a      	ldr	r0, [pc, #296]	@ (8001274 <main+0x208>)
 800114a:	f006 fb8f 	bl	800786c <iprintf>
	  }
	  rxData = 0;
 800114e:	4b42      	ldr	r3, [pc, #264]	@ (8001258 <main+0x1ec>)
 8001150:	2200      	movs	r2, #0
 8001152:	701a      	strb	r2, [r3, #0]


	  HAL_HalfDuplex_EnableTransmitter(&huart2);
 8001154:	483f      	ldr	r0, [pc, #252]	@ (8001254 <main+0x1e8>)
 8001156:	f004 ff12 	bl	8005f7e <HAL_HalfDuplex_EnableTransmitter>
	  HAL_UART_Transmit(&huart2, &request, 1, 1000);
 800115a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800115e:	2201      	movs	r2, #1
 8001160:	493f      	ldr	r1, [pc, #252]	@ (8001260 <main+0x1f4>)
 8001162:	483c      	ldr	r0, [pc, #240]	@ (8001254 <main+0x1e8>)
 8001164:	f004 fd96 	bl	8005c94 <HAL_UART_Transmit>
	  HAL_Delay(10);
 8001168:	200a      	movs	r0, #10
 800116a:	f000 fdd5 	bl	8001d18 <HAL_Delay>
	  HAL_HalfDuplex_EnableReceiver(&huart2);
 800116e:	4839      	ldr	r0, [pc, #228]	@ (8001254 <main+0x1e8>)
 8001170:	f004 ff59 	bl	8006026 <HAL_HalfDuplex_EnableReceiver>
	  if (before == 1){
 8001174:	4b40      	ldr	r3, [pc, #256]	@ (8001278 <main+0x20c>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	2b01      	cmp	r3, #1
 800117a:	d10d      	bne.n	8001198 <main+0x12c>
		  request = 0x55;
 800117c:	4b38      	ldr	r3, [pc, #224]	@ (8001260 <main+0x1f4>)
 800117e:	2255      	movs	r2, #85	@ 0x55
 8001180:	701a      	strb	r2, [r3, #0]
		  HAL_UART_Receive(&huart2, RxData3, sizeof(RxData3), 1000);
 8001182:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001186:	2280      	movs	r2, #128	@ 0x80
 8001188:	493c      	ldr	r1, [pc, #240]	@ (800127c <main+0x210>)
 800118a:	4832      	ldr	r0, [pc, #200]	@ (8001254 <main+0x1e8>)
 800118c:	f004 fe20 	bl	8005dd0 <HAL_UART_Receive>
		  before = 2;
 8001190:	4b39      	ldr	r3, [pc, #228]	@ (8001278 <main+0x20c>)
 8001192:	2202      	movs	r2, #2
 8001194:	601a      	str	r2, [r3, #0]
 8001196:	e022      	b.n	80011de <main+0x172>
	  }
	  else if(before == 2){
 8001198:	4b37      	ldr	r3, [pc, #220]	@ (8001278 <main+0x20c>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	2b02      	cmp	r3, #2
 800119e:	d10d      	bne.n	80011bc <main+0x150>
		  request = 0x66;
 80011a0:	4b2f      	ldr	r3, [pc, #188]	@ (8001260 <main+0x1f4>)
 80011a2:	2266      	movs	r2, #102	@ 0x66
 80011a4:	701a      	strb	r2, [r3, #0]
		  HAL_UART_Receive(&huart2, RxData1, sizeof(RxData1), 1000);
 80011a6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80011aa:	2280      	movs	r2, #128	@ 0x80
 80011ac:	4934      	ldr	r1, [pc, #208]	@ (8001280 <main+0x214>)
 80011ae:	4829      	ldr	r0, [pc, #164]	@ (8001254 <main+0x1e8>)
 80011b0:	f004 fe0e 	bl	8005dd0 <HAL_UART_Receive>
		  before = 0;
 80011b4:	4b30      	ldr	r3, [pc, #192]	@ (8001278 <main+0x20c>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	601a      	str	r2, [r3, #0]
 80011ba:	e010      	b.n	80011de <main+0x172>
	  }
	  else if(before == 0){
 80011bc:	4b2e      	ldr	r3, [pc, #184]	@ (8001278 <main+0x20c>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d10c      	bne.n	80011de <main+0x172>
		  request = 0x77;
 80011c4:	4b26      	ldr	r3, [pc, #152]	@ (8001260 <main+0x1f4>)
 80011c6:	2277      	movs	r2, #119	@ 0x77
 80011c8:	701a      	strb	r2, [r3, #0]
		  HAL_UART_Receive(&huart2, RxData2, sizeof(RxData2), 1000);
 80011ca:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80011ce:	2280      	movs	r2, #128	@ 0x80
 80011d0:	492c      	ldr	r1, [pc, #176]	@ (8001284 <main+0x218>)
 80011d2:	4820      	ldr	r0, [pc, #128]	@ (8001254 <main+0x1e8>)
 80011d4:	f004 fdfc 	bl	8005dd0 <HAL_UART_Receive>
		  before = 1;
 80011d8:	4b27      	ldr	r3, [pc, #156]	@ (8001278 <main+0x20c>)
 80011da:	2201      	movs	r2, #1
 80011dc:	601a      	str	r2, [r3, #0]
	  }

	  processBuffer(RxData1, 1, voltage1, current1, batterypercentage1, status1, SoH1);
 80011de:	4b2a      	ldr	r3, [pc, #168]	@ (8001288 <main+0x21c>)
 80011e0:	9302      	str	r3, [sp, #8]
 80011e2:	4b2a      	ldr	r3, [pc, #168]	@ (800128c <main+0x220>)
 80011e4:	9301      	str	r3, [sp, #4]
 80011e6:	4b2a      	ldr	r3, [pc, #168]	@ (8001290 <main+0x224>)
 80011e8:	9300      	str	r3, [sp, #0]
 80011ea:	4b2a      	ldr	r3, [pc, #168]	@ (8001294 <main+0x228>)
 80011ec:	4a2a      	ldr	r2, [pc, #168]	@ (8001298 <main+0x22c>)
 80011ee:	2101      	movs	r1, #1
 80011f0:	4823      	ldr	r0, [pc, #140]	@ (8001280 <main+0x214>)
 80011f2:	f000 f9bf 	bl	8001574 <processBuffer>
	  processBuffer(RxData2, 2, voltage2, current2, batterypercentage2, status2, SoH2);
 80011f6:	4b29      	ldr	r3, [pc, #164]	@ (800129c <main+0x230>)
 80011f8:	9302      	str	r3, [sp, #8]
 80011fa:	4b29      	ldr	r3, [pc, #164]	@ (80012a0 <main+0x234>)
 80011fc:	9301      	str	r3, [sp, #4]
 80011fe:	4b29      	ldr	r3, [pc, #164]	@ (80012a4 <main+0x238>)
 8001200:	9300      	str	r3, [sp, #0]
 8001202:	4b29      	ldr	r3, [pc, #164]	@ (80012a8 <main+0x23c>)
 8001204:	4a29      	ldr	r2, [pc, #164]	@ (80012ac <main+0x240>)
 8001206:	2102      	movs	r1, #2
 8001208:	481e      	ldr	r0, [pc, #120]	@ (8001284 <main+0x218>)
 800120a:	f000 f9b3 	bl	8001574 <processBuffer>

	  printf("voltage1: %s | current1: %s | capacity1: %s | status1: %s | SoH1: %s", voltage1, current1, batterypercentage1, status1, SoH1);
 800120e:	4b1e      	ldr	r3, [pc, #120]	@ (8001288 <main+0x21c>)
 8001210:	9301      	str	r3, [sp, #4]
 8001212:	4b1e      	ldr	r3, [pc, #120]	@ (800128c <main+0x220>)
 8001214:	9300      	str	r3, [sp, #0]
 8001216:	4b1e      	ldr	r3, [pc, #120]	@ (8001290 <main+0x224>)
 8001218:	4a1e      	ldr	r2, [pc, #120]	@ (8001294 <main+0x228>)
 800121a:	491f      	ldr	r1, [pc, #124]	@ (8001298 <main+0x22c>)
 800121c:	4824      	ldr	r0, [pc, #144]	@ (80012b0 <main+0x244>)
 800121e:	f006 fb25 	bl	800786c <iprintf>
	  printf("voltage2: %s | current2: %s | capacity2: %s | status2: %s | SoH2: %s", voltage2, current2, batterypercentage2, status2, SoH2);
 8001222:	4b1e      	ldr	r3, [pc, #120]	@ (800129c <main+0x230>)
 8001224:	9301      	str	r3, [sp, #4]
 8001226:	4b1e      	ldr	r3, [pc, #120]	@ (80012a0 <main+0x234>)
 8001228:	9300      	str	r3, [sp, #0]
 800122a:	4b1e      	ldr	r3, [pc, #120]	@ (80012a4 <main+0x238>)
 800122c:	4a1e      	ldr	r2, [pc, #120]	@ (80012a8 <main+0x23c>)
 800122e:	491f      	ldr	r1, [pc, #124]	@ (80012ac <main+0x240>)
 8001230:	4820      	ldr	r0, [pc, #128]	@ (80012b4 <main+0x248>)
 8001232:	f006 fb1b 	bl	800786c <iprintf>

	  memset(RxData1, 0, sizeof(RxData1));
 8001236:	2280      	movs	r2, #128	@ 0x80
 8001238:	2100      	movs	r1, #0
 800123a:	4811      	ldr	r0, [pc, #68]	@ (8001280 <main+0x214>)
 800123c:	f006 fb8b 	bl	8007956 <memset>
	  memset(RxData2, 0, sizeof(RxData2));
 8001240:	2280      	movs	r2, #128	@ 0x80
 8001242:	2100      	movs	r1, #0
 8001244:	480f      	ldr	r0, [pc, #60]	@ (8001284 <main+0x218>)
 8001246:	f006 fb86 	bl	8007956 <memset>
	  HAL_Delay(300);
 800124a:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800124e:	f000 fd63 	bl	8001d18 <HAL_Delay>
	  HAL_UART_Receive(&huart1, &rxData, 1, 50);
 8001252:	e71d      	b.n	8001090 <main+0x24>
 8001254:	20000284 	.word	0x20000284
 8001258:	20000391 	.word	0x20000391
 800125c:	200001f0 	.word	0x200001f0
 8001260:	20000390 	.word	0x20000390
 8001264:	0800b158 	.word	0x0800b158
 8001268:	0800b170 	.word	0x0800b170
 800126c:	0800b188 	.word	0x0800b188
 8001270:	0800b1a0 	.word	0x0800b1a0
 8001274:	0800b1b8 	.word	0x0800b1b8
 8001278:	20000514 	.word	0x20000514
 800127c:	20000494 	.word	0x20000494
 8001280:	20000394 	.word	0x20000394
 8001284:	20000414 	.word	0x20000414
 8001288:	2000053c 	.word	0x2000053c
 800128c:	20000530 	.word	0x20000530
 8001290:	20000528 	.word	0x20000528
 8001294:	20000520 	.word	0x20000520
 8001298:	20000518 	.word	0x20000518
 800129c:	20000568 	.word	0x20000568
 80012a0:	2000055c 	.word	0x2000055c
 80012a4:	20000554 	.word	0x20000554
 80012a8:	2000054c 	.word	0x2000054c
 80012ac:	20000544 	.word	0x20000544
 80012b0:	0800b1c0 	.word	0x0800b1c0
 80012b4:	0800b208 	.word	0x0800b208

080012b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b09c      	sub	sp, #112	@ 0x70
 80012bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012be:	f107 0320 	add.w	r3, r7, #32
 80012c2:	2250      	movs	r2, #80	@ 0x50
 80012c4:	2100      	movs	r1, #0
 80012c6:	4618      	mov	r0, r3
 80012c8:	f006 fb45 	bl	8007956 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012cc:	f107 0308 	add.w	r3, r7, #8
 80012d0:	2200      	movs	r2, #0
 80012d2:	601a      	str	r2, [r3, #0]
 80012d4:	605a      	str	r2, [r3, #4]
 80012d6:	609a      	str	r2, [r3, #8]
 80012d8:	60da      	str	r2, [r3, #12]
 80012da:	611a      	str	r2, [r3, #16]
 80012dc:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80012de:	4b25      	ldr	r3, [pc, #148]	@ (8001374 <SystemClock_Config+0xbc>)
 80012e0:	691b      	ldr	r3, [r3, #16]
 80012e2:	4a24      	ldr	r2, [pc, #144]	@ (8001374 <SystemClock_Config+0xbc>)
 80012e4:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80012e8:	6113      	str	r3, [r2, #16]
 80012ea:	4b22      	ldr	r3, [pc, #136]	@ (8001374 <SystemClock_Config+0xbc>)
 80012ec:	691b      	ldr	r3, [r3, #16]
 80012ee:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80012f2:	607b      	str	r3, [r7, #4]
 80012f4:	687b      	ldr	r3, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80012f6:	bf00      	nop
 80012f8:	4b1e      	ldr	r3, [pc, #120]	@ (8001374 <SystemClock_Config+0xbc>)
 80012fa:	695b      	ldr	r3, [r3, #20]
 80012fc:	f003 0308 	and.w	r3, r3, #8
 8001300:	2b08      	cmp	r3, #8
 8001302:	d1f9      	bne.n	80012f8 <SystemClock_Config+0x40>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001304:	2302      	movs	r3, #2
 8001306:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001308:	2301      	movs	r3, #1
 800130a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 800130c:	2300      	movs	r3, #0
 800130e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001310:	2340      	movs	r3, #64	@ 0x40
 8001312:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001314:	2300      	movs	r3, #0
 8001316:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001318:	f107 0320 	add.w	r3, r7, #32
 800131c:	4618      	mov	r0, r3
 800131e:	f001 fbc9 	bl	8002ab4 <HAL_RCC_OscConfig>
 8001322:	4603      	mov	r3, r0
 8001324:	2b00      	cmp	r3, #0
 8001326:	d001      	beq.n	800132c <SystemClock_Config+0x74>
  {
    Error_Handler();
 8001328:	f000 f986 	bl	8001638 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800132c:	231f      	movs	r3, #31
 800132e:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001330:	2300      	movs	r3, #0
 8001332:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001334:	2300      	movs	r3, #0
 8001336:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001338:	2300      	movs	r3, #0
 800133a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800133c:	2300      	movs	r3, #0
 800133e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 8001340:	2300      	movs	r3, #0
 8001342:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001344:	f107 0308 	add.w	r3, r7, #8
 8001348:	2103      	movs	r1, #3
 800134a:	4618      	mov	r0, r3
 800134c:	f001 ffea 	bl	8003324 <HAL_RCC_ClockConfig>
 8001350:	4603      	mov	r3, r0
 8001352:	2b00      	cmp	r3, #0
 8001354:	d001      	beq.n	800135a <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8001356:	f000 f96f 	bl	8001638 <Error_Handler>
  }

  /** Configure the programming delay
  */
  __HAL_FLASH_SET_PROGRAM_DELAY(FLASH_PROGRAMMING_DELAY_1);
 800135a:	4b07      	ldr	r3, [pc, #28]	@ (8001378 <SystemClock_Config+0xc0>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8001362:	4a05      	ldr	r2, [pc, #20]	@ (8001378 <SystemClock_Config+0xc0>)
 8001364:	f043 0310 	orr.w	r3, r3, #16
 8001368:	6013      	str	r3, [r2, #0]
}
 800136a:	bf00      	nop
 800136c:	3770      	adds	r7, #112	@ 0x70
 800136e:	46bd      	mov	sp, r7
 8001370:	bd80      	pop	{r7, pc}
 8001372:	bf00      	nop
 8001374:	44020800 	.word	0x44020800
 8001378:	40022000 	.word	0x40022000

0800137c <MX_GPDMA1_Init>:
  * @brief GPDMA1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPDMA1_Init(void)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b082      	sub	sp, #8
 8001380:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Init 0 */

  /* USER CODE END GPDMA1_Init 0 */

  /* Peripheral clock enable */
  __HAL_RCC_GPDMA1_CLK_ENABLE();
 8001382:	4b0d      	ldr	r3, [pc, #52]	@ (80013b8 <MX_GPDMA1_Init+0x3c>)
 8001384:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001388:	4a0b      	ldr	r2, [pc, #44]	@ (80013b8 <MX_GPDMA1_Init+0x3c>)
 800138a:	f043 0301 	orr.w	r3, r3, #1
 800138e:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 8001392:	4b09      	ldr	r3, [pc, #36]	@ (80013b8 <MX_GPDMA1_Init+0x3c>)
 8001394:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001398:	f003 0301 	and.w	r3, r3, #1
 800139c:	607b      	str	r3, [r7, #4]
 800139e:	687b      	ldr	r3, [r7, #4]

  /* GPDMA1 interrupt Init */
    HAL_NVIC_SetPriority(GPDMA1_Channel0_IRQn, 0, 0);
 80013a0:	2200      	movs	r2, #0
 80013a2:	2100      	movs	r1, #0
 80013a4:	201b      	movs	r0, #27
 80013a6:	f000 fd93 	bl	8001ed0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA1_Channel0_IRQn);
 80013aa:	201b      	movs	r0, #27
 80013ac:	f000 fdaa 	bl	8001f04 <HAL_NVIC_EnableIRQ>
  /* USER CODE END GPDMA1_Init 1 */
  /* USER CODE BEGIN GPDMA1_Init 2 */

  /* USER CODE END GPDMA1_Init 2 */

}
 80013b0:	bf00      	nop
 80013b2:	3708      	adds	r7, #8
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bd80      	pop	{r7, pc}
 80013b8:	44020c00 	.word	0x44020c00

080013bc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80013c0:	4b22      	ldr	r3, [pc, #136]	@ (800144c <MX_USART1_UART_Init+0x90>)
 80013c2:	4a23      	ldr	r2, [pc, #140]	@ (8001450 <MX_USART1_UART_Init+0x94>)
 80013c4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80013c6:	4b21      	ldr	r3, [pc, #132]	@ (800144c <MX_USART1_UART_Init+0x90>)
 80013c8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80013cc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80013ce:	4b1f      	ldr	r3, [pc, #124]	@ (800144c <MX_USART1_UART_Init+0x90>)
 80013d0:	2200      	movs	r2, #0
 80013d2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80013d4:	4b1d      	ldr	r3, [pc, #116]	@ (800144c <MX_USART1_UART_Init+0x90>)
 80013d6:	2200      	movs	r2, #0
 80013d8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80013da:	4b1c      	ldr	r3, [pc, #112]	@ (800144c <MX_USART1_UART_Init+0x90>)
 80013dc:	2200      	movs	r2, #0
 80013de:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80013e0:	4b1a      	ldr	r3, [pc, #104]	@ (800144c <MX_USART1_UART_Init+0x90>)
 80013e2:	220c      	movs	r2, #12
 80013e4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013e6:	4b19      	ldr	r3, [pc, #100]	@ (800144c <MX_USART1_UART_Init+0x90>)
 80013e8:	2200      	movs	r2, #0
 80013ea:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80013ec:	4b17      	ldr	r3, [pc, #92]	@ (800144c <MX_USART1_UART_Init+0x90>)
 80013ee:	2200      	movs	r2, #0
 80013f0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80013f2:	4b16      	ldr	r3, [pc, #88]	@ (800144c <MX_USART1_UART_Init+0x90>)
 80013f4:	2200      	movs	r2, #0
 80013f6:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80013f8:	4b14      	ldr	r3, [pc, #80]	@ (800144c <MX_USART1_UART_Init+0x90>)
 80013fa:	2200      	movs	r2, #0
 80013fc:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80013fe:	4b13      	ldr	r3, [pc, #76]	@ (800144c <MX_USART1_UART_Init+0x90>)
 8001400:	2200      	movs	r2, #0
 8001402:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001404:	4811      	ldr	r0, [pc, #68]	@ (800144c <MX_USART1_UART_Init+0x90>)
 8001406:	f004 fb9d 	bl	8005b44 <HAL_UART_Init>
 800140a:	4603      	mov	r3, r0
 800140c:	2b00      	cmp	r3, #0
 800140e:	d001      	beq.n	8001414 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001410:	f000 f912 	bl	8001638 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001414:	2100      	movs	r1, #0
 8001416:	480d      	ldr	r0, [pc, #52]	@ (800144c <MX_USART1_UART_Init+0x90>)
 8001418:	f005 fa30 	bl	800687c <HAL_UARTEx_SetTxFifoThreshold>
 800141c:	4603      	mov	r3, r0
 800141e:	2b00      	cmp	r3, #0
 8001420:	d001      	beq.n	8001426 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001422:	f000 f909 	bl	8001638 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001426:	2100      	movs	r1, #0
 8001428:	4808      	ldr	r0, [pc, #32]	@ (800144c <MX_USART1_UART_Init+0x90>)
 800142a:	f005 fa65 	bl	80068f8 <HAL_UARTEx_SetRxFifoThreshold>
 800142e:	4603      	mov	r3, r0
 8001430:	2b00      	cmp	r3, #0
 8001432:	d001      	beq.n	8001438 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001434:	f000 f900 	bl	8001638 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001438:	4804      	ldr	r0, [pc, #16]	@ (800144c <MX_USART1_UART_Init+0x90>)
 800143a:	f005 f9e6 	bl	800680a <HAL_UARTEx_DisableFifoMode>
 800143e:	4603      	mov	r3, r0
 8001440:	2b00      	cmp	r3, #0
 8001442:	d001      	beq.n	8001448 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001444:	f000 f8f8 	bl	8001638 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001448:	bf00      	nop
 800144a:	bd80      	pop	{r7, pc}
 800144c:	200001f0 	.word	0x200001f0
 8001450:	40013800 	.word	0x40013800

08001454 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001458:	4b22      	ldr	r3, [pc, #136]	@ (80014e4 <MX_USART2_UART_Init+0x90>)
 800145a:	4a23      	ldr	r2, [pc, #140]	@ (80014e8 <MX_USART2_UART_Init+0x94>)
 800145c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800145e:	4b21      	ldr	r3, [pc, #132]	@ (80014e4 <MX_USART2_UART_Init+0x90>)
 8001460:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001464:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001466:	4b1f      	ldr	r3, [pc, #124]	@ (80014e4 <MX_USART2_UART_Init+0x90>)
 8001468:	2200      	movs	r2, #0
 800146a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800146c:	4b1d      	ldr	r3, [pc, #116]	@ (80014e4 <MX_USART2_UART_Init+0x90>)
 800146e:	2200      	movs	r2, #0
 8001470:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001472:	4b1c      	ldr	r3, [pc, #112]	@ (80014e4 <MX_USART2_UART_Init+0x90>)
 8001474:	2200      	movs	r2, #0
 8001476:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001478:	4b1a      	ldr	r3, [pc, #104]	@ (80014e4 <MX_USART2_UART_Init+0x90>)
 800147a:	220c      	movs	r2, #12
 800147c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800147e:	4b19      	ldr	r3, [pc, #100]	@ (80014e4 <MX_USART2_UART_Init+0x90>)
 8001480:	2200      	movs	r2, #0
 8001482:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001484:	4b17      	ldr	r3, [pc, #92]	@ (80014e4 <MX_USART2_UART_Init+0x90>)
 8001486:	2200      	movs	r2, #0
 8001488:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800148a:	4b16      	ldr	r3, [pc, #88]	@ (80014e4 <MX_USART2_UART_Init+0x90>)
 800148c:	2200      	movs	r2, #0
 800148e:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001490:	4b14      	ldr	r3, [pc, #80]	@ (80014e4 <MX_USART2_UART_Init+0x90>)
 8001492:	2200      	movs	r2, #0
 8001494:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001496:	4b13      	ldr	r3, [pc, #76]	@ (80014e4 <MX_USART2_UART_Init+0x90>)
 8001498:	2200      	movs	r2, #0
 800149a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_HalfDuplex_Init(&huart2) != HAL_OK)
 800149c:	4811      	ldr	r0, [pc, #68]	@ (80014e4 <MX_USART2_UART_Init+0x90>)
 800149e:	f004 fba1 	bl	8005be4 <HAL_HalfDuplex_Init>
 80014a2:	4603      	mov	r3, r0
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d001      	beq.n	80014ac <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80014a8:	f000 f8c6 	bl	8001638 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80014ac:	2100      	movs	r1, #0
 80014ae:	480d      	ldr	r0, [pc, #52]	@ (80014e4 <MX_USART2_UART_Init+0x90>)
 80014b0:	f005 f9e4 	bl	800687c <HAL_UARTEx_SetTxFifoThreshold>
 80014b4:	4603      	mov	r3, r0
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d001      	beq.n	80014be <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80014ba:	f000 f8bd 	bl	8001638 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80014be:	2100      	movs	r1, #0
 80014c0:	4808      	ldr	r0, [pc, #32]	@ (80014e4 <MX_USART2_UART_Init+0x90>)
 80014c2:	f005 fa19 	bl	80068f8 <HAL_UARTEx_SetRxFifoThreshold>
 80014c6:	4603      	mov	r3, r0
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d001      	beq.n	80014d0 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80014cc:	f000 f8b4 	bl	8001638 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80014d0:	4804      	ldr	r0, [pc, #16]	@ (80014e4 <MX_USART2_UART_Init+0x90>)
 80014d2:	f005 f99a 	bl	800680a <HAL_UARTEx_DisableFifoMode>
 80014d6:	4603      	mov	r3, r0
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d001      	beq.n	80014e0 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80014dc:	f000 f8ac 	bl	8001638 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80014e0:	bf00      	nop
 80014e2:	bd80      	pop	{r7, pc}
 80014e4:	20000284 	.word	0x20000284
 80014e8:	40004400 	.word	0x40004400

080014ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b088      	sub	sp, #32
 80014f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014f2:	f107 030c 	add.w	r3, r7, #12
 80014f6:	2200      	movs	r2, #0
 80014f8:	601a      	str	r2, [r3, #0]
 80014fa:	605a      	str	r2, [r3, #4]
 80014fc:	609a      	str	r2, [r3, #8]
 80014fe:	60da      	str	r2, [r3, #12]
 8001500:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001502:	4b1a      	ldr	r3, [pc, #104]	@ (800156c <MX_GPIO_Init+0x80>)
 8001504:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001508:	4a18      	ldr	r2, [pc, #96]	@ (800156c <MX_GPIO_Init+0x80>)
 800150a:	f043 0301 	orr.w	r3, r3, #1
 800150e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001512:	4b16      	ldr	r3, [pc, #88]	@ (800156c <MX_GPIO_Init+0x80>)
 8001514:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001518:	f003 0301 	and.w	r3, r3, #1
 800151c:	60bb      	str	r3, [r7, #8]
 800151e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001520:	4b12      	ldr	r3, [pc, #72]	@ (800156c <MX_GPIO_Init+0x80>)
 8001522:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001526:	4a11      	ldr	r2, [pc, #68]	@ (800156c <MX_GPIO_Init+0x80>)
 8001528:	f043 0304 	orr.w	r3, r3, #4
 800152c:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001530:	4b0e      	ldr	r3, [pc, #56]	@ (800156c <MX_GPIO_Init+0x80>)
 8001532:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001536:	f003 0304 	and.w	r3, r3, #4
 800153a:	607b      	str	r3, [r7, #4]
 800153c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 800153e:	2200      	movs	r2, #0
 8001540:	2180      	movs	r1, #128	@ 0x80
 8001542:	480b      	ldr	r0, [pc, #44]	@ (8001570 <MX_GPIO_Init+0x84>)
 8001544:	f001 fa9e 	bl	8002a84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001548:	2380      	movs	r3, #128	@ 0x80
 800154a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800154c:	2301      	movs	r3, #1
 800154e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001550:	2300      	movs	r3, #0
 8001552:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001554:	2300      	movs	r3, #0
 8001556:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001558:	f107 030c 	add.w	r3, r7, #12
 800155c:	4619      	mov	r1, r3
 800155e:	4804      	ldr	r0, [pc, #16]	@ (8001570 <MX_GPIO_Init+0x84>)
 8001560:	f001 f93e 	bl	80027e0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001564:	bf00      	nop
 8001566:	3720      	adds	r7, #32
 8001568:	46bd      	mov	sp, r7
 800156a:	bd80      	pop	{r7, pc}
 800156c:	44020c00 	.word	0x44020c00
 8001570:	42020800 	.word	0x42020800

08001574 <processBuffer>:
    if (huart->Instance == USART2) {

    }
}

void processBuffer(const unsigned char *RxData, int batteryNumber, char *voltage, char *current, char *batterypercentage, char *status, char *SoH) {
 8001574:	b580      	push	{r7, lr}
 8001576:	b084      	sub	sp, #16
 8001578:	af00      	add	r7, sp, #0
 800157a:	60f8      	str	r0, [r7, #12]
 800157c:	60b9      	str	r1, [r7, #8]
 800157e:	607a      	str	r2, [r7, #4]
 8001580:	603b      	str	r3, [r7, #0]
    if (RxData[0] != '\0') {
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	781b      	ldrb	r3, [r3, #0]
 8001586:	2b00      	cmp	r3, #0
 8001588:	d04b      	beq.n	8001622 <processBuffer+0xae>
        // Copy and null-terminate the strings
        memcpy(voltage, RxData, 6);
 800158a:	2206      	movs	r2, #6
 800158c:	68f9      	ldr	r1, [r7, #12]
 800158e:	6878      	ldr	r0, [r7, #4]
 8001590:	f006 fa6f 	bl	8007a72 <memcpy>
        voltage[6] = '\0';
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	3306      	adds	r3, #6
 8001598:	2200      	movs	r2, #0
 800159a:	701a      	strb	r2, [r3, #0]

        memcpy(current, RxData + 7, 7);
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	3307      	adds	r3, #7
 80015a0:	2207      	movs	r2, #7
 80015a2:	4619      	mov	r1, r3
 80015a4:	6838      	ldr	r0, [r7, #0]
 80015a6:	f006 fa64 	bl	8007a72 <memcpy>
        current[7] = '\0';
 80015aa:	683b      	ldr	r3, [r7, #0]
 80015ac:	3307      	adds	r3, #7
 80015ae:	2200      	movs	r2, #0
 80015b0:	701a      	strb	r2, [r3, #0]

        memcpy(batterypercentage, RxData + 15, 5);
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	330f      	adds	r3, #15
 80015b6:	2205      	movs	r2, #5
 80015b8:	4619      	mov	r1, r3
 80015ba:	69b8      	ldr	r0, [r7, #24]
 80015bc:	f006 fa59 	bl	8007a72 <memcpy>
        batterypercentage[5] = '\0';
 80015c0:	69bb      	ldr	r3, [r7, #24]
 80015c2:	3305      	adds	r3, #5
 80015c4:	2200      	movs	r2, #0
 80015c6:	701a      	strb	r2, [r3, #0]

        memcpy(status, RxData + 21, 1);
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	3315      	adds	r3, #21
 80015cc:	781a      	ldrb	r2, [r3, #0]
 80015ce:	69fb      	ldr	r3, [r7, #28]
 80015d0:	701a      	strb	r2, [r3, #0]
        status[1] = '\0';
 80015d2:	69fb      	ldr	r3, [r7, #28]
 80015d4:	3301      	adds	r3, #1
 80015d6:	2200      	movs	r2, #0
 80015d8:	701a      	strb	r2, [r3, #0]
        if (strcmp(status, "1") == 0) {
 80015da:	4914      	ldr	r1, [pc, #80]	@ (800162c <processBuffer+0xb8>)
 80015dc:	69f8      	ldr	r0, [r7, #28]
 80015de:	f7fe fe5b 	bl	8000298 <strcmp>
 80015e2:	4603      	mov	r3, r0
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d108      	bne.n	80015fa <processBuffer+0x86>
            strcpy(status, "charge");
 80015e8:	69fb      	ldr	r3, [r7, #28]
 80015ea:	4a11      	ldr	r2, [pc, #68]	@ (8001630 <processBuffer+0xbc>)
 80015ec:	6810      	ldr	r0, [r2, #0]
 80015ee:	6018      	str	r0, [r3, #0]
 80015f0:	8891      	ldrh	r1, [r2, #4]
 80015f2:	7992      	ldrb	r2, [r2, #6]
 80015f4:	8099      	strh	r1, [r3, #4]
 80015f6:	719a      	strb	r2, [r3, #6]
 80015f8:	e008      	b.n	800160c <processBuffer+0x98>
        } else {
            strcpy(status, "discharge");
 80015fa:	69fb      	ldr	r3, [r7, #28]
 80015fc:	490d      	ldr	r1, [pc, #52]	@ (8001634 <processBuffer+0xc0>)
 80015fe:	461a      	mov	r2, r3
 8001600:	460b      	mov	r3, r1
 8001602:	cb03      	ldmia	r3!, {r0, r1}
 8001604:	6010      	str	r0, [r2, #0]
 8001606:	6051      	str	r1, [r2, #4]
 8001608:	881b      	ldrh	r3, [r3, #0]
 800160a:	8113      	strh	r3, [r2, #8]
        }

        memcpy(SoH, RxData + 23, 6);
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	3317      	adds	r3, #23
 8001610:	2206      	movs	r2, #6
 8001612:	4619      	mov	r1, r3
 8001614:	6a38      	ldr	r0, [r7, #32]
 8001616:	f006 fa2c 	bl	8007a72 <memcpy>
        SoH[6] = '\0';
 800161a:	6a3b      	ldr	r3, [r7, #32]
 800161c:	3306      	adds	r3, #6
 800161e:	2200      	movs	r2, #0
 8001620:	701a      	strb	r2, [r3, #0]
    }
}
 8001622:	bf00      	nop
 8001624:	3710      	adds	r7, #16
 8001626:	46bd      	mov	sp, r7
 8001628:	bd80      	pop	{r7, pc}
 800162a:	bf00      	nop
 800162c:	0800b250 	.word	0x0800b250
 8001630:	0800b254 	.word	0x0800b254
 8001634:	0800b25c 	.word	0x0800b25c

08001638 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001638:	b480      	push	{r7}
 800163a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800163c:	b672      	cpsid	i
}
 800163e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001640:	bf00      	nop
 8001642:	e7fd      	b.n	8001640 <Error_Handler+0x8>

08001644 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001644:	b480      	push	{r7}
 8001646:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001648:	bf00      	nop
 800164a:	46bd      	mov	sp, r7
 800164c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001650:	4770      	bx	lr
	...

08001654 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b0ae      	sub	sp, #184	@ 0xb8
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800165c:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001660:	2200      	movs	r2, #0
 8001662:	601a      	str	r2, [r3, #0]
 8001664:	605a      	str	r2, [r3, #4]
 8001666:	609a      	str	r2, [r3, #8]
 8001668:	60da      	str	r2, [r3, #12]
 800166a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800166c:	f107 0318 	add.w	r3, r7, #24
 8001670:	2288      	movs	r2, #136	@ 0x88
 8001672:	2100      	movs	r1, #0
 8001674:	4618      	mov	r0, r3
 8001676:	f006 f96e 	bl	8007956 <memset>
  if(huart->Instance==USART1)
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	4a73      	ldr	r2, [pc, #460]	@ (800184c <HAL_UART_MspInit+0x1f8>)
 8001680:	4293      	cmp	r3, r2
 8001682:	d146      	bne.n	8001712 <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001684:	f04f 0201 	mov.w	r2, #1
 8001688:	f04f 0300 	mov.w	r3, #0
 800168c:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001690:	2300      	movs	r3, #0
 8001692:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001694:	f107 0318 	add.w	r3, r7, #24
 8001698:	4618      	mov	r0, r3
 800169a:	f002 f985 	bl	80039a8 <HAL_RCCEx_PeriphCLKConfig>
 800169e:	4603      	mov	r3, r0
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d001      	beq.n	80016a8 <HAL_UART_MspInit+0x54>
    {
      Error_Handler();
 80016a4:	f7ff ffc8 	bl	8001638 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80016a8:	4b69      	ldr	r3, [pc, #420]	@ (8001850 <HAL_UART_MspInit+0x1fc>)
 80016aa:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80016ae:	4a68      	ldr	r2, [pc, #416]	@ (8001850 <HAL_UART_MspInit+0x1fc>)
 80016b0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80016b4:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 80016b8:	4b65      	ldr	r3, [pc, #404]	@ (8001850 <HAL_UART_MspInit+0x1fc>)
 80016ba:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80016be:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80016c2:	617b      	str	r3, [r7, #20]
 80016c4:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016c6:	4b62      	ldr	r3, [pc, #392]	@ (8001850 <HAL_UART_MspInit+0x1fc>)
 80016c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80016cc:	4a60      	ldr	r2, [pc, #384]	@ (8001850 <HAL_UART_MspInit+0x1fc>)
 80016ce:	f043 0301 	orr.w	r3, r3, #1
 80016d2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80016d6:	4b5e      	ldr	r3, [pc, #376]	@ (8001850 <HAL_UART_MspInit+0x1fc>)
 80016d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80016dc:	f003 0301 	and.w	r3, r3, #1
 80016e0:	613b      	str	r3, [r7, #16]
 80016e2:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80016e4:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80016e8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016ec:	2302      	movs	r3, #2
 80016ee:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f2:	2300      	movs	r3, #0
 80016f4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016f8:	2300      	movs	r3, #0
 80016fa:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80016fe:	2307      	movs	r3, #7
 8001700:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001704:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001708:	4619      	mov	r1, r3
 800170a:	4852      	ldr	r0, [pc, #328]	@ (8001854 <HAL_UART_MspInit+0x200>)
 800170c:	f001 f868 	bl	80027e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001710:	e097      	b.n	8001842 <HAL_UART_MspInit+0x1ee>
  else if(huart->Instance==USART2)
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	4a50      	ldr	r2, [pc, #320]	@ (8001858 <HAL_UART_MspInit+0x204>)
 8001718:	4293      	cmp	r3, r2
 800171a:	f040 8092 	bne.w	8001842 <HAL_UART_MspInit+0x1ee>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800171e:	f04f 0202 	mov.w	r2, #2
 8001722:	f04f 0300 	mov.w	r3, #0
 8001726:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800172a:	2300      	movs	r3, #0
 800172c:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800172e:	f107 0318 	add.w	r3, r7, #24
 8001732:	4618      	mov	r0, r3
 8001734:	f002 f938 	bl	80039a8 <HAL_RCCEx_PeriphCLKConfig>
 8001738:	4603      	mov	r3, r0
 800173a:	2b00      	cmp	r3, #0
 800173c:	d001      	beq.n	8001742 <HAL_UART_MspInit+0xee>
      Error_Handler();
 800173e:	f7ff ff7b 	bl	8001638 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001742:	4b43      	ldr	r3, [pc, #268]	@ (8001850 <HAL_UART_MspInit+0x1fc>)
 8001744:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001748:	4a41      	ldr	r2, [pc, #260]	@ (8001850 <HAL_UART_MspInit+0x1fc>)
 800174a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800174e:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8001752:	4b3f      	ldr	r3, [pc, #252]	@ (8001850 <HAL_UART_MspInit+0x1fc>)
 8001754:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001758:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800175c:	60fb      	str	r3, [r7, #12]
 800175e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001760:	4b3b      	ldr	r3, [pc, #236]	@ (8001850 <HAL_UART_MspInit+0x1fc>)
 8001762:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001766:	4a3a      	ldr	r2, [pc, #232]	@ (8001850 <HAL_UART_MspInit+0x1fc>)
 8001768:	f043 0301 	orr.w	r3, r3, #1
 800176c:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001770:	4b37      	ldr	r3, [pc, #220]	@ (8001850 <HAL_UART_MspInit+0x1fc>)
 8001772:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001776:	f003 0301 	and.w	r3, r3, #1
 800177a:	60bb      	str	r3, [r7, #8]
 800177c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800177e:	2304      	movs	r3, #4
 8001780:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001784:	2312      	movs	r3, #18
 8001786:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800178a:	2301      	movs	r3, #1
 800178c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001790:	2300      	movs	r3, #0
 8001792:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001796:	2307      	movs	r3, #7
 8001798:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800179c:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80017a0:	4619      	mov	r1, r3
 80017a2:	482c      	ldr	r0, [pc, #176]	@ (8001854 <HAL_UART_MspInit+0x200>)
 80017a4:	f001 f81c 	bl	80027e0 <HAL_GPIO_Init>
    handle_GPDMA1_Channel0.Instance = GPDMA1_Channel0;
 80017a8:	4b2c      	ldr	r3, [pc, #176]	@ (800185c <HAL_UART_MspInit+0x208>)
 80017aa:	4a2d      	ldr	r2, [pc, #180]	@ (8001860 <HAL_UART_MspInit+0x20c>)
 80017ac:	601a      	str	r2, [r3, #0]
    handle_GPDMA1_Channel0.Init.Request = GPDMA1_REQUEST_USART2_TX;
 80017ae:	4b2b      	ldr	r3, [pc, #172]	@ (800185c <HAL_UART_MspInit+0x208>)
 80017b0:	2218      	movs	r2, #24
 80017b2:	605a      	str	r2, [r3, #4]
    handle_GPDMA1_Channel0.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 80017b4:	4b29      	ldr	r3, [pc, #164]	@ (800185c <HAL_UART_MspInit+0x208>)
 80017b6:	2200      	movs	r2, #0
 80017b8:	609a      	str	r2, [r3, #8]
    handle_GPDMA1_Channel0.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80017ba:	4b28      	ldr	r3, [pc, #160]	@ (800185c <HAL_UART_MspInit+0x208>)
 80017bc:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80017c0:	60da      	str	r2, [r3, #12]
    handle_GPDMA1_Channel0.Init.SrcInc = DMA_SINC_FIXED;
 80017c2:	4b26      	ldr	r3, [pc, #152]	@ (800185c <HAL_UART_MspInit+0x208>)
 80017c4:	2200      	movs	r2, #0
 80017c6:	611a      	str	r2, [r3, #16]
    handle_GPDMA1_Channel0.Init.DestInc = DMA_DINC_INCREMENTED;
 80017c8:	4b24      	ldr	r3, [pc, #144]	@ (800185c <HAL_UART_MspInit+0x208>)
 80017ca:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80017ce:	615a      	str	r2, [r3, #20]
    handle_GPDMA1_Channel0.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_BYTE;
 80017d0:	4b22      	ldr	r3, [pc, #136]	@ (800185c <HAL_UART_MspInit+0x208>)
 80017d2:	2200      	movs	r2, #0
 80017d4:	619a      	str	r2, [r3, #24]
    handle_GPDMA1_Channel0.Init.DestDataWidth = DMA_DEST_DATAWIDTH_BYTE;
 80017d6:	4b21      	ldr	r3, [pc, #132]	@ (800185c <HAL_UART_MspInit+0x208>)
 80017d8:	2200      	movs	r2, #0
 80017da:	61da      	str	r2, [r3, #28]
    handle_GPDMA1_Channel0.Init.Priority = DMA_LOW_PRIORITY_HIGH_WEIGHT;
 80017dc:	4b1f      	ldr	r3, [pc, #124]	@ (800185c <HAL_UART_MspInit+0x208>)
 80017de:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80017e2:	621a      	str	r2, [r3, #32]
    handle_GPDMA1_Channel0.Init.SrcBurstLength = 1;
 80017e4:	4b1d      	ldr	r3, [pc, #116]	@ (800185c <HAL_UART_MspInit+0x208>)
 80017e6:	2201      	movs	r2, #1
 80017e8:	625a      	str	r2, [r3, #36]	@ 0x24
    handle_GPDMA1_Channel0.Init.DestBurstLength = 1;
 80017ea:	4b1c      	ldr	r3, [pc, #112]	@ (800185c <HAL_UART_MspInit+0x208>)
 80017ec:	2201      	movs	r2, #1
 80017ee:	629a      	str	r2, [r3, #40]	@ 0x28
    handle_GPDMA1_Channel0.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT1;
 80017f0:	4b1a      	ldr	r3, [pc, #104]	@ (800185c <HAL_UART_MspInit+0x208>)
 80017f2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80017f6:	62da      	str	r2, [r3, #44]	@ 0x2c
    handle_GPDMA1_Channel0.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 80017f8:	4b18      	ldr	r3, [pc, #96]	@ (800185c <HAL_UART_MspInit+0x208>)
 80017fa:	2200      	movs	r2, #0
 80017fc:	631a      	str	r2, [r3, #48]	@ 0x30
    handle_GPDMA1_Channel0.Init.Mode = DMA_NORMAL;
 80017fe:	4b17      	ldr	r3, [pc, #92]	@ (800185c <HAL_UART_MspInit+0x208>)
 8001800:	2200      	movs	r2, #0
 8001802:	635a      	str	r2, [r3, #52]	@ 0x34
    if (HAL_DMA_Init(&handle_GPDMA1_Channel0) != HAL_OK)
 8001804:	4815      	ldr	r0, [pc, #84]	@ (800185c <HAL_UART_MspInit+0x208>)
 8001806:	f000 fc3b 	bl	8002080 <HAL_DMA_Init>
 800180a:	4603      	mov	r3, r0
 800180c:	2b00      	cmp	r3, #0
 800180e:	d001      	beq.n	8001814 <HAL_UART_MspInit+0x1c0>
      Error_Handler();
 8001810:	f7ff ff12 	bl	8001638 <Error_Handler>
    __HAL_LINKDMA(huart, hdmatx, handle_GPDMA1_Channel0);
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	4a11      	ldr	r2, [pc, #68]	@ (800185c <HAL_UART_MspInit+0x208>)
 8001818:	67da      	str	r2, [r3, #124]	@ 0x7c
 800181a:	4a10      	ldr	r2, [pc, #64]	@ (800185c <HAL_UART_MspInit+0x208>)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	65d3      	str	r3, [r2, #92]	@ 0x5c
    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel0, DMA_CHANNEL_NPRIV) != HAL_OK)
 8001820:	2110      	movs	r1, #16
 8001822:	480e      	ldr	r0, [pc, #56]	@ (800185c <HAL_UART_MspInit+0x208>)
 8001824:	f000 fe43 	bl	80024ae <HAL_DMA_ConfigChannelAttributes>
 8001828:	4603      	mov	r3, r0
 800182a:	2b00      	cmp	r3, #0
 800182c:	d001      	beq.n	8001832 <HAL_UART_MspInit+0x1de>
      Error_Handler();
 800182e:	f7ff ff03 	bl	8001638 <Error_Handler>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001832:	2200      	movs	r2, #0
 8001834:	2100      	movs	r1, #0
 8001836:	203b      	movs	r0, #59	@ 0x3b
 8001838:	f000 fb4a 	bl	8001ed0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800183c:	203b      	movs	r0, #59	@ 0x3b
 800183e:	f000 fb61 	bl	8001f04 <HAL_NVIC_EnableIRQ>
}
 8001842:	bf00      	nop
 8001844:	37b8      	adds	r7, #184	@ 0xb8
 8001846:	46bd      	mov	sp, r7
 8001848:	bd80      	pop	{r7, pc}
 800184a:	bf00      	nop
 800184c:	40013800 	.word	0x40013800
 8001850:	44020c00 	.word	0x44020c00
 8001854:	42020000 	.word	0x42020000
 8001858:	40004400 	.word	0x40004400
 800185c:	20000318 	.word	0x20000318
 8001860:	40020050 	.word	0x40020050

08001864 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001864:	b480      	push	{r7}
 8001866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001868:	bf00      	nop
 800186a:	e7fd      	b.n	8001868 <NMI_Handler+0x4>

0800186c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800186c:	b480      	push	{r7}
 800186e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001870:	bf00      	nop
 8001872:	e7fd      	b.n	8001870 <HardFault_Handler+0x4>

08001874 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001874:	b480      	push	{r7}
 8001876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001878:	bf00      	nop
 800187a:	e7fd      	b.n	8001878 <MemManage_Handler+0x4>

0800187c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800187c:	b480      	push	{r7}
 800187e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001880:	bf00      	nop
 8001882:	e7fd      	b.n	8001880 <BusFault_Handler+0x4>

08001884 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001884:	b480      	push	{r7}
 8001886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001888:	bf00      	nop
 800188a:	e7fd      	b.n	8001888 <UsageFault_Handler+0x4>

0800188c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800188c:	b480      	push	{r7}
 800188e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001890:	bf00      	nop
 8001892:	46bd      	mov	sp, r7
 8001894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001898:	4770      	bx	lr

0800189a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800189a:	b480      	push	{r7}
 800189c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800189e:	bf00      	nop
 80018a0:	46bd      	mov	sp, r7
 80018a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a6:	4770      	bx	lr

080018a8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018a8:	b480      	push	{r7}
 80018aa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018ac:	bf00      	nop
 80018ae:	46bd      	mov	sp, r7
 80018b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b4:	4770      	bx	lr

080018b6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018b6:	b580      	push	{r7, lr}
 80018b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018ba:	f000 fa0d 	bl	8001cd8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018be:	bf00      	nop
 80018c0:	bd80      	pop	{r7, pc}
	...

080018c4 <GPDMA1_Channel0_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 0 global interrupt.
  */
void GPDMA1_Channel0_IRQHandler(void)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel0_IRQn 0 */

  /* USER CODE END GPDMA1_Channel0_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel0);
 80018c8:	4802      	ldr	r0, [pc, #8]	@ (80018d4 <GPDMA1_Channel0_IRQHandler+0x10>)
 80018ca:	f000 fc8f 	bl	80021ec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel0_IRQn 1 */

  /* USER CODE END GPDMA1_Channel0_IRQn 1 */
}
 80018ce:	bf00      	nop
 80018d0:	bd80      	pop	{r7, pc}
 80018d2:	bf00      	nop
 80018d4:	20000318 	.word	0x20000318

080018d8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80018d8:	b480      	push	{r7}
 80018da:	af00      	add	r7, sp, #0
  return 1;
 80018dc:	2301      	movs	r3, #1
}
 80018de:	4618      	mov	r0, r3
 80018e0:	46bd      	mov	sp, r7
 80018e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e6:	4770      	bx	lr

080018e8 <_kill>:

int _kill(int pid, int sig)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b082      	sub	sp, #8
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
 80018f0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80018f2:	f006 f883 	bl	80079fc <__errno>
 80018f6:	4603      	mov	r3, r0
 80018f8:	2216      	movs	r2, #22
 80018fa:	601a      	str	r2, [r3, #0]
  return -1;
 80018fc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001900:	4618      	mov	r0, r3
 8001902:	3708      	adds	r7, #8
 8001904:	46bd      	mov	sp, r7
 8001906:	bd80      	pop	{r7, pc}

08001908 <_exit>:

void _exit (int status)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b082      	sub	sp, #8
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001910:	f04f 31ff 	mov.w	r1, #4294967295
 8001914:	6878      	ldr	r0, [r7, #4]
 8001916:	f7ff ffe7 	bl	80018e8 <_kill>
  while (1) {}    /* Make sure we hang here */
 800191a:	bf00      	nop
 800191c:	e7fd      	b.n	800191a <_exit+0x12>

0800191e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800191e:	b580      	push	{r7, lr}
 8001920:	b086      	sub	sp, #24
 8001922:	af00      	add	r7, sp, #0
 8001924:	60f8      	str	r0, [r7, #12]
 8001926:	60b9      	str	r1, [r7, #8]
 8001928:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800192a:	2300      	movs	r3, #0
 800192c:	617b      	str	r3, [r7, #20]
 800192e:	e00a      	b.n	8001946 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001930:	f3af 8000 	nop.w
 8001934:	4601      	mov	r1, r0
 8001936:	68bb      	ldr	r3, [r7, #8]
 8001938:	1c5a      	adds	r2, r3, #1
 800193a:	60ba      	str	r2, [r7, #8]
 800193c:	b2ca      	uxtb	r2, r1
 800193e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001940:	697b      	ldr	r3, [r7, #20]
 8001942:	3301      	adds	r3, #1
 8001944:	617b      	str	r3, [r7, #20]
 8001946:	697a      	ldr	r2, [r7, #20]
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	429a      	cmp	r2, r3
 800194c:	dbf0      	blt.n	8001930 <_read+0x12>
  }

  return len;
 800194e:	687b      	ldr	r3, [r7, #4]
}
 8001950:	4618      	mov	r0, r3
 8001952:	3718      	adds	r7, #24
 8001954:	46bd      	mov	sp, r7
 8001956:	bd80      	pop	{r7, pc}

08001958 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b086      	sub	sp, #24
 800195c:	af00      	add	r7, sp, #0
 800195e:	60f8      	str	r0, [r7, #12]
 8001960:	60b9      	str	r1, [r7, #8]
 8001962:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001964:	2300      	movs	r3, #0
 8001966:	617b      	str	r3, [r7, #20]
 8001968:	e009      	b.n	800197e <_write+0x26>
  {
    __io_putchar(*ptr++);
 800196a:	68bb      	ldr	r3, [r7, #8]
 800196c:	1c5a      	adds	r2, r3, #1
 800196e:	60ba      	str	r2, [r7, #8]
 8001970:	781b      	ldrb	r3, [r3, #0]
 8001972:	4618      	mov	r0, r3
 8001974:	f7ff fb68 	bl	8001048 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001978:	697b      	ldr	r3, [r7, #20]
 800197a:	3301      	adds	r3, #1
 800197c:	617b      	str	r3, [r7, #20]
 800197e:	697a      	ldr	r2, [r7, #20]
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	429a      	cmp	r2, r3
 8001984:	dbf1      	blt.n	800196a <_write+0x12>
  }
  return len;
 8001986:	687b      	ldr	r3, [r7, #4]
}
 8001988:	4618      	mov	r0, r3
 800198a:	3718      	adds	r7, #24
 800198c:	46bd      	mov	sp, r7
 800198e:	bd80      	pop	{r7, pc}

08001990 <_close>:

int _close(int file)
{
 8001990:	b480      	push	{r7}
 8001992:	b083      	sub	sp, #12
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001998:	f04f 33ff 	mov.w	r3, #4294967295
}
 800199c:	4618      	mov	r0, r3
 800199e:	370c      	adds	r7, #12
 80019a0:	46bd      	mov	sp, r7
 80019a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a6:	4770      	bx	lr

080019a8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80019a8:	b480      	push	{r7}
 80019aa:	b083      	sub	sp, #12
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
 80019b0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80019b2:	683b      	ldr	r3, [r7, #0]
 80019b4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80019b8:	605a      	str	r2, [r3, #4]
  return 0;
 80019ba:	2300      	movs	r3, #0
}
 80019bc:	4618      	mov	r0, r3
 80019be:	370c      	adds	r7, #12
 80019c0:	46bd      	mov	sp, r7
 80019c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c6:	4770      	bx	lr

080019c8 <_isatty>:

int _isatty(int file)
{
 80019c8:	b480      	push	{r7}
 80019ca:	b083      	sub	sp, #12
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80019d0:	2301      	movs	r3, #1
}
 80019d2:	4618      	mov	r0, r3
 80019d4:	370c      	adds	r7, #12
 80019d6:	46bd      	mov	sp, r7
 80019d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019dc:	4770      	bx	lr

080019de <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80019de:	b480      	push	{r7}
 80019e0:	b085      	sub	sp, #20
 80019e2:	af00      	add	r7, sp, #0
 80019e4:	60f8      	str	r0, [r7, #12]
 80019e6:	60b9      	str	r1, [r7, #8]
 80019e8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80019ea:	2300      	movs	r3, #0
}
 80019ec:	4618      	mov	r0, r3
 80019ee:	3714      	adds	r7, #20
 80019f0:	46bd      	mov	sp, r7
 80019f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f6:	4770      	bx	lr

080019f8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b086      	sub	sp, #24
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a00:	4a14      	ldr	r2, [pc, #80]	@ (8001a54 <_sbrk+0x5c>)
 8001a02:	4b15      	ldr	r3, [pc, #84]	@ (8001a58 <_sbrk+0x60>)
 8001a04:	1ad3      	subs	r3, r2, r3
 8001a06:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a08:	697b      	ldr	r3, [r7, #20]
 8001a0a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a0c:	4b13      	ldr	r3, [pc, #76]	@ (8001a5c <_sbrk+0x64>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d102      	bne.n	8001a1a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a14:	4b11      	ldr	r3, [pc, #68]	@ (8001a5c <_sbrk+0x64>)
 8001a16:	4a12      	ldr	r2, [pc, #72]	@ (8001a60 <_sbrk+0x68>)
 8001a18:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a1a:	4b10      	ldr	r3, [pc, #64]	@ (8001a5c <_sbrk+0x64>)
 8001a1c:	681a      	ldr	r2, [r3, #0]
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	4413      	add	r3, r2
 8001a22:	693a      	ldr	r2, [r7, #16]
 8001a24:	429a      	cmp	r2, r3
 8001a26:	d207      	bcs.n	8001a38 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a28:	f005 ffe8 	bl	80079fc <__errno>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	220c      	movs	r2, #12
 8001a30:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a32:	f04f 33ff 	mov.w	r3, #4294967295
 8001a36:	e009      	b.n	8001a4c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a38:	4b08      	ldr	r3, [pc, #32]	@ (8001a5c <_sbrk+0x64>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a3e:	4b07      	ldr	r3, [pc, #28]	@ (8001a5c <_sbrk+0x64>)
 8001a40:	681a      	ldr	r2, [r3, #0]
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	4413      	add	r3, r2
 8001a46:	4a05      	ldr	r2, [pc, #20]	@ (8001a5c <_sbrk+0x64>)
 8001a48:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a4a:	68fb      	ldr	r3, [r7, #12]
}
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	3718      	adds	r7, #24
 8001a50:	46bd      	mov	sp, r7
 8001a52:	bd80      	pop	{r7, pc}
 8001a54:	20008000 	.word	0x20008000
 8001a58:	00000400 	.word	0x00000400
 8001a5c:	20000570 	.word	0x20000570
 8001a60:	200006c8 	.word	0x200006c8

08001a64 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001a64:	b480      	push	{r7}
 8001a66:	b083      	sub	sp, #12
 8001a68:	af00      	add	r7, sp, #0
  uint32_t reg_opsr;

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001a6a:	4b30      	ldr	r3, [pc, #192]	@ (8001b2c <SystemInit+0xc8>)
 8001a6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001a70:	4a2e      	ldr	r2, [pc, #184]	@ (8001b2c <SystemInit+0xc8>)
 8001a72:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001a76:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR = RCC_CR_HSION;
 8001a7a:	4b2d      	ldr	r3, [pc, #180]	@ (8001b30 <SystemInit+0xcc>)
 8001a7c:	2201      	movs	r2, #1
 8001a7e:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8001a80:	4b2b      	ldr	r3, [pc, #172]	@ (8001b30 <SystemInit+0xcc>)
 8001a82:	2200      	movs	r2, #0
 8001a84:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8001a86:	4b2a      	ldr	r3, [pc, #168]	@ (8001b30 <SystemInit+0xcc>)
 8001a88:	2200      	movs	r2, #0
 8001a8a:	621a      	str	r2, [r3, #32]
  /* Reset HSEON, HSECSSON, HSEBYP, HSEEXT, HSIDIV, HSIKERON, CSION, CSIKERON, HSI48 and PLLxON bits */
#if defined(RCC_CR_PLL3ON)
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
               RCC_CR_CSION | RCC_CR_CSIKERON |RCC_CR_HSI48ON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
#else
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
 8001a8c:	4b28      	ldr	r3, [pc, #160]	@ (8001b30 <SystemInit+0xcc>)
 8001a8e:	681a      	ldr	r2, [r3, #0]
 8001a90:	4927      	ldr	r1, [pc, #156]	@ (8001b30 <SystemInit+0xcc>)
 8001a92:	4b28      	ldr	r3, [pc, #160]	@ (8001b34 <SystemInit+0xd0>)
 8001a94:	4013      	ands	r3, r2
 8001a96:	600b      	str	r3, [r1, #0]
               RCC_CR_CSION | RCC_CR_CSIKERON |RCC_CR_HSI48ON | RCC_CR_PLL1ON | RCC_CR_PLL2ON);
#endif

  /* Reset PLLxCFGR register */
  RCC->PLL1CFGR = 0U;
 8001a98:	4b25      	ldr	r3, [pc, #148]	@ (8001b30 <SystemInit+0xcc>)
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC->PLL2CFGR = 0U;
 8001a9e:	4b24      	ldr	r3, [pc, #144]	@ (8001b30 <SystemInit+0xcc>)
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	62da      	str	r2, [r3, #44]	@ 0x2c
#if defined(RCC_CR_PLL3ON)
  RCC->PLL3CFGR = 0U;
#endif /* RCC_CR_PLL3ON */

  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280U;
 8001aa4:	4b22      	ldr	r3, [pc, #136]	@ (8001b30 <SystemInit+0xcc>)
 8001aa6:	4a24      	ldr	r2, [pc, #144]	@ (8001b38 <SystemInit+0xd4>)
 8001aa8:	635a      	str	r2, [r3, #52]	@ 0x34
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000U;
 8001aaa:	4b21      	ldr	r3, [pc, #132]	@ (8001b30 <SystemInit+0xcc>)
 8001aac:	2200      	movs	r2, #0
 8001aae:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280U;
 8001ab0:	4b1f      	ldr	r3, [pc, #124]	@ (8001b30 <SystemInit+0xcc>)
 8001ab2:	4a21      	ldr	r2, [pc, #132]	@ (8001b38 <SystemInit+0xd4>)
 8001ab4:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL2FRACR register */
  RCC->PLL2FRACR = 0x00000000U;
 8001ab6:	4b1e      	ldr	r3, [pc, #120]	@ (8001b30 <SystemInit+0xcc>)
 8001ab8:	2200      	movs	r2, #0
 8001aba:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000U;
#endif /* RCC_CR_PLL3ON */

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8001abc:	4b1c      	ldr	r3, [pc, #112]	@ (8001b30 <SystemInit+0xcc>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	4a1b      	ldr	r2, [pc, #108]	@ (8001b30 <SystemInit+0xcc>)
 8001ac2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001ac6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8001ac8:	4b19      	ldr	r3, [pc, #100]	@ (8001b30 <SystemInit+0xcc>)
 8001aca:	2200      	movs	r2, #0
 8001acc:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001ace:	4b17      	ldr	r3, [pc, #92]	@ (8001b2c <SystemInit+0xc8>)
 8001ad0:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001ad4:	609a      	str	r2, [r3, #8]
  #endif /* VECT_TAB_SRAM */

  /* Check OPSR register to verify if there is an ongoing swap or option bytes update interrupted by a reset */
  reg_opsr = FLASH->OPSR & FLASH_OPSR_CODE_OP;
 8001ad6:	4b19      	ldr	r3, [pc, #100]	@ (8001b3c <SystemInit+0xd8>)
 8001ad8:	699b      	ldr	r3, [r3, #24]
 8001ada:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
 8001ade:	607b      	str	r3, [r7, #4]
  if ((reg_opsr == FLASH_OPSR_CODE_OP) || (reg_opsr == (FLASH_OPSR_CODE_OP_2 | FLASH_OPSR_CODE_OP_1)))
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	f1b3 4f60 	cmp.w	r3, #3758096384	@ 0xe0000000
 8001ae6:	d003      	beq.n	8001af0 <SystemInit+0x8c>
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8001aee:	d117      	bne.n	8001b20 <SystemInit+0xbc>
  {
    /* Check FLASH Option Control Register access */
    if ((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != 0U)
 8001af0:	4b12      	ldr	r3, [pc, #72]	@ (8001b3c <SystemInit+0xd8>)
 8001af2:	69db      	ldr	r3, [r3, #28]
 8001af4:	f003 0301 	and.w	r3, r3, #1
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d005      	beq.n	8001b08 <SystemInit+0xa4>
    {
      /* Authorizes the Option Byte registers programming */
      FLASH->OPTKEYR = 0x08192A3BU;
 8001afc:	4b0f      	ldr	r3, [pc, #60]	@ (8001b3c <SystemInit+0xd8>)
 8001afe:	4a10      	ldr	r2, [pc, #64]	@ (8001b40 <SystemInit+0xdc>)
 8001b00:	60da      	str	r2, [r3, #12]
      FLASH->OPTKEYR = 0x4C5D6E7FU;
 8001b02:	4b0e      	ldr	r3, [pc, #56]	@ (8001b3c <SystemInit+0xd8>)
 8001b04:	4a0f      	ldr	r2, [pc, #60]	@ (8001b44 <SystemInit+0xe0>)
 8001b06:	60da      	str	r2, [r3, #12]
    }
    /* Launch the option bytes change operation */
    FLASH->OPTCR |= FLASH_OPTCR_OPTSTART;
 8001b08:	4b0c      	ldr	r3, [pc, #48]	@ (8001b3c <SystemInit+0xd8>)
 8001b0a:	69db      	ldr	r3, [r3, #28]
 8001b0c:	4a0b      	ldr	r2, [pc, #44]	@ (8001b3c <SystemInit+0xd8>)
 8001b0e:	f043 0302 	orr.w	r3, r3, #2
 8001b12:	61d3      	str	r3, [r2, #28]

    /* Lock the FLASH Option Control Register access */
    FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 8001b14:	4b09      	ldr	r3, [pc, #36]	@ (8001b3c <SystemInit+0xd8>)
 8001b16:	69db      	ldr	r3, [r3, #28]
 8001b18:	4a08      	ldr	r2, [pc, #32]	@ (8001b3c <SystemInit+0xd8>)
 8001b1a:	f043 0301 	orr.w	r3, r3, #1
 8001b1e:	61d3      	str	r3, [r2, #28]
  }
}
 8001b20:	bf00      	nop
 8001b22:	370c      	adds	r7, #12
 8001b24:	46bd      	mov	sp, r7
 8001b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2a:	4770      	bx	lr
 8001b2c:	e000ed00 	.word	0xe000ed00
 8001b30:	44020c00 	.word	0x44020c00
 8001b34:	fae2eae3 	.word	0xfae2eae3
 8001b38:	01010280 	.word	0x01010280
 8001b3c:	40022000 	.word	0x40022000
 8001b40:	08192a3b 	.word	0x08192a3b
 8001b44:	4c5d6e7f 	.word	0x4c5d6e7f

08001b48 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8001b48:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001b80 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001b4c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001b4e:	e003      	b.n	8001b58 <LoopCopyDataInit>

08001b50 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001b50:	4b0c      	ldr	r3, [pc, #48]	@ (8001b84 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001b52:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001b54:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001b56:	3104      	adds	r1, #4

08001b58 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001b58:	480b      	ldr	r0, [pc, #44]	@ (8001b88 <LoopForever+0xa>)
	ldr	r3, =_edata
 8001b5a:	4b0c      	ldr	r3, [pc, #48]	@ (8001b8c <LoopForever+0xe>)
	adds	r2, r0, r1
 8001b5c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001b5e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001b60:	d3f6      	bcc.n	8001b50 <CopyDataInit>
	ldr	r2, =_sbss
 8001b62:	4a0b      	ldr	r2, [pc, #44]	@ (8001b90 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001b64:	e002      	b.n	8001b6c <LoopFillZerobss>

08001b66 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001b66:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001b68:	f842 3b04 	str.w	r3, [r2], #4

08001b6c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001b6c:	4b09      	ldr	r3, [pc, #36]	@ (8001b94 <LoopForever+0x16>)
	cmp	r2, r3
 8001b6e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001b70:	d3f9      	bcc.n	8001b66 <FillZerobss>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001b72:	f7ff ff77 	bl	8001a64 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001b76:	f005 ff47 	bl	8007a08 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001b7a:	f7ff fa77 	bl	800106c <main>

08001b7e <LoopForever>:

LoopForever:
    b LoopForever
 8001b7e:	e7fe      	b.n	8001b7e <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8001b80:	20008000 	.word	0x20008000
	ldr	r3, =_sidata
 8001b84:	0800b6e8 	.word	0x0800b6e8
	ldr	r0, =_sdata
 8001b88:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001b8c:	200001d4 	.word	0x200001d4
	ldr	r2, =_sbss
 8001b90:	200001d4 	.word	0x200001d4
	ldr	r3, = _ebss
 8001b94:	200006c4 	.word	0x200006c4

08001b98 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001b98:	e7fe      	b.n	8001b98 <ADC1_IRQHandler>
	...

08001b9c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ba0:	2003      	movs	r0, #3
 8001ba2:	f000 f98a 	bl	8001eba <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8001ba6:	f001 fd75 	bl	8003694 <HAL_RCC_GetSysClockFreq>
 8001baa:	4602      	mov	r2, r0
 8001bac:	4b0c      	ldr	r3, [pc, #48]	@ (8001be0 <HAL_Init+0x44>)
 8001bae:	6a1b      	ldr	r3, [r3, #32]
 8001bb0:	f003 030f 	and.w	r3, r3, #15
 8001bb4:	490b      	ldr	r1, [pc, #44]	@ (8001be4 <HAL_Init+0x48>)
 8001bb6:	5ccb      	ldrb	r3, [r1, r3]
 8001bb8:	fa22 f303 	lsr.w	r3, r2, r3
 8001bbc:	4a0a      	ldr	r2, [pc, #40]	@ (8001be8 <HAL_Init+0x4c>)
 8001bbe:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8001bc0:	2004      	movs	r0, #4
 8001bc2:	f000 f9cf 	bl	8001f64 <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001bc6:	200f      	movs	r0, #15
 8001bc8:	f000 f810 	bl	8001bec <HAL_InitTick>
 8001bcc:	4603      	mov	r3, r0
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d001      	beq.n	8001bd6 <HAL_Init+0x3a>
  {
    return HAL_ERROR;
 8001bd2:	2301      	movs	r3, #1
 8001bd4:	e002      	b.n	8001bdc <HAL_Init+0x40>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001bd6:	f7ff fd35 	bl	8001644 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001bda:	2300      	movs	r3, #0
}
 8001bdc:	4618      	mov	r0, r3
 8001bde:	bd80      	pop	{r7, pc}
 8001be0:	44020c00 	.word	0x44020c00
 8001be4:	0800b268 	.word	0x0800b268
 8001be8:	20000000 	.word	0x20000000

08001bec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b084      	sub	sp, #16
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
  uint32_t ticknumber = 0U;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	60fb      	str	r3, [r7, #12]
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 8001bf8:	4b33      	ldr	r3, [pc, #204]	@ (8001cc8 <HAL_InitTick+0xdc>)
 8001bfa:	781b      	ldrb	r3, [r3, #0]
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d101      	bne.n	8001c04 <HAL_InitTick+0x18>
  {
    return HAL_ERROR;
 8001c00:	2301      	movs	r3, #1
 8001c02:	e05c      	b.n	8001cbe <HAL_InitTick+0xd2>
  }

  /* Check Clock source to calculate the tickNumber */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 8001c04:	4b31      	ldr	r3, [pc, #196]	@ (8001ccc <HAL_InitTick+0xe0>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f003 0304 	and.w	r3, r3, #4
 8001c0c:	2b04      	cmp	r3, #4
 8001c0e:	d10c      	bne.n	8001c2a <HAL_InitTick+0x3e>
  {
    /* HCLK selected as SysTick clock source */
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 8001c10:	4b2f      	ldr	r3, [pc, #188]	@ (8001cd0 <HAL_InitTick+0xe4>)
 8001c12:	681a      	ldr	r2, [r3, #0]
 8001c14:	4b2c      	ldr	r3, [pc, #176]	@ (8001cc8 <HAL_InitTick+0xdc>)
 8001c16:	781b      	ldrb	r3, [r3, #0]
 8001c18:	4619      	mov	r1, r3
 8001c1a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001c1e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c22:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c26:	60fb      	str	r3, [r7, #12]
 8001c28:	e037      	b.n	8001c9a <HAL_InitTick+0xae>
  }
  else
  {
    systicksel = HAL_SYSTICK_GetCLKSourceConfig();
 8001c2a:	f000 f9f3 	bl	8002014 <HAL_SYSTICK_GetCLKSourceConfig>
 8001c2e:	60b8      	str	r0, [r7, #8]
    switch (systicksel)
 8001c30:	68bb      	ldr	r3, [r7, #8]
 8001c32:	2b02      	cmp	r3, #2
 8001c34:	d023      	beq.n	8001c7e <HAL_InitTick+0x92>
 8001c36:	68bb      	ldr	r3, [r7, #8]
 8001c38:	2b02      	cmp	r3, #2
 8001c3a:	d82d      	bhi.n	8001c98 <HAL_InitTick+0xac>
 8001c3c:	68bb      	ldr	r3, [r7, #8]
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d003      	beq.n	8001c4a <HAL_InitTick+0x5e>
 8001c42:	68bb      	ldr	r3, [r7, #8]
 8001c44:	2b01      	cmp	r3, #1
 8001c46:	d00d      	beq.n	8001c64 <HAL_InitTick+0x78>
        /* Calculate tick value */
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
        break;
      default:
        /* Nothing to do */
        break;
 8001c48:	e026      	b.n	8001c98 <HAL_InitTick+0xac>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 8001c4a:	4b21      	ldr	r3, [pc, #132]	@ (8001cd0 <HAL_InitTick+0xe4>)
 8001c4c:	681a      	ldr	r2, [r3, #0]
 8001c4e:	4b1e      	ldr	r3, [pc, #120]	@ (8001cc8 <HAL_InitTick+0xdc>)
 8001c50:	781b      	ldrb	r3, [r3, #0]
 8001c52:	4619      	mov	r1, r3
 8001c54:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 8001c58:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c60:	60fb      	str	r3, [r7, #12]
        break;
 8001c62:	e01a      	b.n	8001c9a <HAL_InitTick+0xae>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8001c64:	4b18      	ldr	r3, [pc, #96]	@ (8001cc8 <HAL_InitTick+0xdc>)
 8001c66:	781b      	ldrb	r3, [r3, #0]
 8001c68:	461a      	mov	r2, r3
 8001c6a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001c6e:	fbb3 f3f2 	udiv	r3, r3, r2
 8001c72:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 8001c76:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c7a:	60fb      	str	r3, [r7, #12]
        break;
 8001c7c:	e00d      	b.n	8001c9a <HAL_InitTick+0xae>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8001c7e:	4b12      	ldr	r3, [pc, #72]	@ (8001cc8 <HAL_InitTick+0xdc>)
 8001c80:	781b      	ldrb	r3, [r3, #0]
 8001c82:	461a      	mov	r2, r3
 8001c84:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001c88:	fbb3 f3f2 	udiv	r3, r3, r2
 8001c8c:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001c90:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c94:	60fb      	str	r3, [r7, #12]
        break;
 8001c96:	e000      	b.n	8001c9a <HAL_InitTick+0xae>
        break;
 8001c98:	bf00      	nop
    }
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 8001c9a:	68f8      	ldr	r0, [r7, #12]
 8001c9c:	f000 f940 	bl	8001f20 <HAL_SYSTICK_Config>
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d001      	beq.n	8001caa <HAL_InitTick+0xbe>
  {
    return HAL_ERROR;
 8001ca6:	2301      	movs	r3, #1
 8001ca8:	e009      	b.n	8001cbe <HAL_InitTick+0xd2>
  }

  /* Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001caa:	2200      	movs	r2, #0
 8001cac:	6879      	ldr	r1, [r7, #4]
 8001cae:	f04f 30ff 	mov.w	r0, #4294967295
 8001cb2:	f000 f90d 	bl	8001ed0 <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 8001cb6:	4a07      	ldr	r2, [pc, #28]	@ (8001cd4 <HAL_InitTick+0xe8>)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8001cbc:	2300      	movs	r3, #0
}
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	3710      	adds	r7, #16
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bd80      	pop	{r7, pc}
 8001cc6:	bf00      	nop
 8001cc8:	20000008 	.word	0x20000008
 8001ccc:	e000e010 	.word	0xe000e010
 8001cd0:	20000000 	.word	0x20000000
 8001cd4:	20000004 	.word	0x20000004

08001cd8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001cdc:	4b06      	ldr	r3, [pc, #24]	@ (8001cf8 <HAL_IncTick+0x20>)
 8001cde:	781b      	ldrb	r3, [r3, #0]
 8001ce0:	461a      	mov	r2, r3
 8001ce2:	4b06      	ldr	r3, [pc, #24]	@ (8001cfc <HAL_IncTick+0x24>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	4413      	add	r3, r2
 8001ce8:	4a04      	ldr	r2, [pc, #16]	@ (8001cfc <HAL_IncTick+0x24>)
 8001cea:	6013      	str	r3, [r2, #0]
}
 8001cec:	bf00      	nop
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf4:	4770      	bx	lr
 8001cf6:	bf00      	nop
 8001cf8:	20000008 	.word	0x20000008
 8001cfc:	20000574 	.word	0x20000574

08001d00 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d00:	b480      	push	{r7}
 8001d02:	af00      	add	r7, sp, #0
  return uwTick;
 8001d04:	4b03      	ldr	r3, [pc, #12]	@ (8001d14 <HAL_GetTick+0x14>)
 8001d06:	681b      	ldr	r3, [r3, #0]
}
 8001d08:	4618      	mov	r0, r3
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d10:	4770      	bx	lr
 8001d12:	bf00      	nop
 8001d14:	20000574 	.word	0x20000574

08001d18 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b084      	sub	sp, #16
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d20:	f7ff ffee 	bl	8001d00 <HAL_GetTick>
 8001d24:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d30:	d005      	beq.n	8001d3e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d32:	4b0a      	ldr	r3, [pc, #40]	@ (8001d5c <HAL_Delay+0x44>)
 8001d34:	781b      	ldrb	r3, [r3, #0]
 8001d36:	461a      	mov	r2, r3
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	4413      	add	r3, r2
 8001d3c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001d3e:	bf00      	nop
 8001d40:	f7ff ffde 	bl	8001d00 <HAL_GetTick>
 8001d44:	4602      	mov	r2, r0
 8001d46:	68bb      	ldr	r3, [r7, #8]
 8001d48:	1ad3      	subs	r3, r2, r3
 8001d4a:	68fa      	ldr	r2, [r7, #12]
 8001d4c:	429a      	cmp	r2, r3
 8001d4e:	d8f7      	bhi.n	8001d40 <HAL_Delay+0x28>
  {
  }
}
 8001d50:	bf00      	nop
 8001d52:	bf00      	nop
 8001d54:	3710      	adds	r7, #16
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bd80      	pop	{r7, pc}
 8001d5a:	bf00      	nop
 8001d5c:	20000008 	.word	0x20000008

08001d60 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d60:	b480      	push	{r7}
 8001d62:	b085      	sub	sp, #20
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	f003 0307 	and.w	r3, r3, #7
 8001d6e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d70:	4b0c      	ldr	r3, [pc, #48]	@ (8001da4 <__NVIC_SetPriorityGrouping+0x44>)
 8001d72:	68db      	ldr	r3, [r3, #12]
 8001d74:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d76:	68ba      	ldr	r2, [r7, #8]
 8001d78:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001d7c:	4013      	ands	r3, r2
 8001d7e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d84:	68bb      	ldr	r3, [r7, #8]
 8001d86:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d88:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001d8c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001d90:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d92:	4a04      	ldr	r2, [pc, #16]	@ (8001da4 <__NVIC_SetPriorityGrouping+0x44>)
 8001d94:	68bb      	ldr	r3, [r7, #8]
 8001d96:	60d3      	str	r3, [r2, #12]
}
 8001d98:	bf00      	nop
 8001d9a:	3714      	adds	r7, #20
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da2:	4770      	bx	lr
 8001da4:	e000ed00 	.word	0xe000ed00

08001da8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001da8:	b480      	push	{r7}
 8001daa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001dac:	4b04      	ldr	r3, [pc, #16]	@ (8001dc0 <__NVIC_GetPriorityGrouping+0x18>)
 8001dae:	68db      	ldr	r3, [r3, #12]
 8001db0:	0a1b      	lsrs	r3, r3, #8
 8001db2:	f003 0307 	and.w	r3, r3, #7
}
 8001db6:	4618      	mov	r0, r3
 8001db8:	46bd      	mov	sp, r7
 8001dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbe:	4770      	bx	lr
 8001dc0:	e000ed00 	.word	0xe000ed00

08001dc4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	b083      	sub	sp, #12
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	4603      	mov	r3, r0
 8001dcc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001dce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	db0b      	blt.n	8001dee <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001dd6:	88fb      	ldrh	r3, [r7, #6]
 8001dd8:	f003 021f 	and.w	r2, r3, #31
 8001ddc:	4907      	ldr	r1, [pc, #28]	@ (8001dfc <__NVIC_EnableIRQ+0x38>)
 8001dde:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001de2:	095b      	lsrs	r3, r3, #5
 8001de4:	2001      	movs	r0, #1
 8001de6:	fa00 f202 	lsl.w	r2, r0, r2
 8001dea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001dee:	bf00      	nop
 8001df0:	370c      	adds	r7, #12
 8001df2:	46bd      	mov	sp, r7
 8001df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df8:	4770      	bx	lr
 8001dfa:	bf00      	nop
 8001dfc:	e000e100 	.word	0xe000e100

08001e00 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e00:	b480      	push	{r7}
 8001e02:	b083      	sub	sp, #12
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	4603      	mov	r3, r0
 8001e08:	6039      	str	r1, [r7, #0]
 8001e0a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001e0c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	db0a      	blt.n	8001e2a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	b2da      	uxtb	r2, r3
 8001e18:	490c      	ldr	r1, [pc, #48]	@ (8001e4c <__NVIC_SetPriority+0x4c>)
 8001e1a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001e1e:	0112      	lsls	r2, r2, #4
 8001e20:	b2d2      	uxtb	r2, r2
 8001e22:	440b      	add	r3, r1
 8001e24:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e28:	e00a      	b.n	8001e40 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e2a:	683b      	ldr	r3, [r7, #0]
 8001e2c:	b2da      	uxtb	r2, r3
 8001e2e:	4908      	ldr	r1, [pc, #32]	@ (8001e50 <__NVIC_SetPriority+0x50>)
 8001e30:	88fb      	ldrh	r3, [r7, #6]
 8001e32:	f003 030f 	and.w	r3, r3, #15
 8001e36:	3b04      	subs	r3, #4
 8001e38:	0112      	lsls	r2, r2, #4
 8001e3a:	b2d2      	uxtb	r2, r2
 8001e3c:	440b      	add	r3, r1
 8001e3e:	761a      	strb	r2, [r3, #24]
}
 8001e40:	bf00      	nop
 8001e42:	370c      	adds	r7, #12
 8001e44:	46bd      	mov	sp, r7
 8001e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4a:	4770      	bx	lr
 8001e4c:	e000e100 	.word	0xe000e100
 8001e50:	e000ed00 	.word	0xe000ed00

08001e54 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e54:	b480      	push	{r7}
 8001e56:	b089      	sub	sp, #36	@ 0x24
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	60f8      	str	r0, [r7, #12]
 8001e5c:	60b9      	str	r1, [r7, #8]
 8001e5e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	f003 0307 	and.w	r3, r3, #7
 8001e66:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e68:	69fb      	ldr	r3, [r7, #28]
 8001e6a:	f1c3 0307 	rsb	r3, r3, #7
 8001e6e:	2b04      	cmp	r3, #4
 8001e70:	bf28      	it	cs
 8001e72:	2304      	movcs	r3, #4
 8001e74:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e76:	69fb      	ldr	r3, [r7, #28]
 8001e78:	3304      	adds	r3, #4
 8001e7a:	2b06      	cmp	r3, #6
 8001e7c:	d902      	bls.n	8001e84 <NVIC_EncodePriority+0x30>
 8001e7e:	69fb      	ldr	r3, [r7, #28]
 8001e80:	3b03      	subs	r3, #3
 8001e82:	e000      	b.n	8001e86 <NVIC_EncodePriority+0x32>
 8001e84:	2300      	movs	r3, #0
 8001e86:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e88:	f04f 32ff 	mov.w	r2, #4294967295
 8001e8c:	69bb      	ldr	r3, [r7, #24]
 8001e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e92:	43da      	mvns	r2, r3
 8001e94:	68bb      	ldr	r3, [r7, #8]
 8001e96:	401a      	ands	r2, r3
 8001e98:	697b      	ldr	r3, [r7, #20]
 8001e9a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e9c:	f04f 31ff 	mov.w	r1, #4294967295
 8001ea0:	697b      	ldr	r3, [r7, #20]
 8001ea2:	fa01 f303 	lsl.w	r3, r1, r3
 8001ea6:	43d9      	mvns	r1, r3
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001eac:	4313      	orrs	r3, r2
         );
}
 8001eae:	4618      	mov	r0, r3
 8001eb0:	3724      	adds	r7, #36	@ 0x24
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb8:	4770      	bx	lr

08001eba <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PRIORITYGROUP_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001eba:	b580      	push	{r7, lr}
 8001ebc:	b082      	sub	sp, #8
 8001ebe:	af00      	add	r7, sp, #0
 8001ec0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ec2:	6878      	ldr	r0, [r7, #4]
 8001ec4:	f7ff ff4c 	bl	8001d60 <__NVIC_SetPriorityGrouping>
}
 8001ec8:	bf00      	nop
 8001eca:	3708      	adds	r7, #8
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	bd80      	pop	{r7, pc}

08001ed0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b086      	sub	sp, #24
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	60b9      	str	r1, [r7, #8]
 8001eda:	607a      	str	r2, [r7, #4]
 8001edc:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001ede:	f7ff ff63 	bl	8001da8 <__NVIC_GetPriorityGrouping>
 8001ee2:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ee4:	687a      	ldr	r2, [r7, #4]
 8001ee6:	68b9      	ldr	r1, [r7, #8]
 8001ee8:	6978      	ldr	r0, [r7, #20]
 8001eea:	f7ff ffb3 	bl	8001e54 <NVIC_EncodePriority>
 8001eee:	4602      	mov	r2, r0
 8001ef0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001ef4:	4611      	mov	r1, r2
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	f7ff ff82 	bl	8001e00 <__NVIC_SetPriority>
}
 8001efc:	bf00      	nop
 8001efe:	3718      	adds	r7, #24
 8001f00:	46bd      	mov	sp, r7
 8001f02:	bd80      	pop	{r7, pc}

08001f04 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32h5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b082      	sub	sp, #8
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f0e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001f12:	4618      	mov	r0, r3
 8001f14:	f7ff ff56 	bl	8001dc4 <__NVIC_EnableIRQ>
}
 8001f18:	bf00      	nop
 8001f1a:	3708      	adds	r7, #8
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	bd80      	pop	{r7, pc}

08001f20 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f20:	b480      	push	{r7}
 8001f22:	b083      	sub	sp, #12
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	3b01      	subs	r3, #1
 8001f2c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001f30:	d301      	bcc.n	8001f36 <HAL_SYSTICK_Config+0x16>
  {
    /* Reload value impossible */
    return (1UL);
 8001f32:	2301      	movs	r3, #1
 8001f34:	e00d      	b.n	8001f52 <HAL_SYSTICK_Config+0x32>
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 8001f36:	4a0a      	ldr	r2, [pc, #40]	@ (8001f60 <HAL_SYSTICK_Config+0x40>)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	3b01      	subs	r3, #1
 8001f3c:	6053      	str	r3, [r2, #4]

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 8001f3e:	4b08      	ldr	r3, [pc, #32]	@ (8001f60 <HAL_SYSTICK_Config+0x40>)
 8001f40:	2200      	movs	r2, #0
 8001f42:	609a      	str	r2, [r3, #8]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 8001f44:	4b06      	ldr	r3, [pc, #24]	@ (8001f60 <HAL_SYSTICK_Config+0x40>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	4a05      	ldr	r2, [pc, #20]	@ (8001f60 <HAL_SYSTICK_Config+0x40>)
 8001f4a:	f043 0303 	orr.w	r3, r3, #3
 8001f4e:	6013      	str	r3, [r2, #0]

  /* Function successful */
  return (0UL);
 8001f50:	2300      	movs	r3, #0
}
 8001f52:	4618      	mov	r0, r3
 8001f54:	370c      	adds	r7, #12
 8001f56:	46bd      	mov	sp, r7
 8001f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5c:	4770      	bx	lr
 8001f5e:	bf00      	nop
 8001f60:	e000e010 	.word	0xe000e010

08001f64 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8001f64:	b480      	push	{r7}
 8001f66:	b083      	sub	sp, #12
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	2b04      	cmp	r3, #4
 8001f70:	d844      	bhi.n	8001ffc <HAL_SYSTICK_CLKSourceConfig+0x98>
 8001f72:	a201      	add	r2, pc, #4	@ (adr r2, 8001f78 <HAL_SYSTICK_CLKSourceConfig+0x14>)
 8001f74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f78:	08001f9b 	.word	0x08001f9b
 8001f7c:	08001fb9 	.word	0x08001fb9
 8001f80:	08001fdb 	.word	0x08001fdb
 8001f84:	08001ffd 	.word	0x08001ffd
 8001f88:	08001f8d 	.word	0x08001f8d
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8001f8c:	4b1f      	ldr	r3, [pc, #124]	@ (800200c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	4a1e      	ldr	r2, [pc, #120]	@ (800200c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001f92:	f043 0304 	orr.w	r3, r3, #4
 8001f96:	6013      	str	r3, [r2, #0]
      break;
 8001f98:	e031      	b.n	8001ffe <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8001f9a:	4b1c      	ldr	r3, [pc, #112]	@ (800200c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	4a1b      	ldr	r2, [pc, #108]	@ (800200c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001fa0:	f023 0304 	bic.w	r3, r3, #4
 8001fa4:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, (0x00000000U));
 8001fa6:	4b1a      	ldr	r3, [pc, #104]	@ (8002010 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001fa8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8001fac:	4a18      	ldr	r2, [pc, #96]	@ (8002010 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001fae:	f023 030c 	bic.w	r3, r3, #12
 8001fb2:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 8001fb6:	e022      	b.n	8001ffe <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8001fb8:	4b14      	ldr	r3, [pc, #80]	@ (800200c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	4a13      	ldr	r2, [pc, #76]	@ (800200c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001fbe:	f023 0304 	bic.w	r3, r3, #4
 8001fc2:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_0);
 8001fc4:	4b12      	ldr	r3, [pc, #72]	@ (8002010 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001fc6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8001fca:	f023 030c 	bic.w	r3, r3, #12
 8001fce:	4a10      	ldr	r2, [pc, #64]	@ (8002010 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001fd0:	f043 0304 	orr.w	r3, r3, #4
 8001fd4:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 8001fd8:	e011      	b.n	8001ffe <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8001fda:	4b0c      	ldr	r3, [pc, #48]	@ (800200c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	4a0b      	ldr	r2, [pc, #44]	@ (800200c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001fe0:	f023 0304 	bic.w	r3, r3, #4
 8001fe4:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_1);
 8001fe6:	4b0a      	ldr	r3, [pc, #40]	@ (8002010 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001fe8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8001fec:	f023 030c 	bic.w	r3, r3, #12
 8001ff0:	4a07      	ldr	r2, [pc, #28]	@ (8002010 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001ff2:	f043 0308 	orr.w	r3, r3, #8
 8001ff6:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 8001ffa:	e000      	b.n	8001ffe <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 8001ffc:	bf00      	nop
  }
}
 8001ffe:	bf00      	nop
 8002000:	370c      	adds	r7, #12
 8002002:	46bd      	mov	sp, r7
 8002004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002008:	4770      	bx	lr
 800200a:	bf00      	nop
 800200c:	e000e010 	.word	0xe000e010
 8002010:	44020c00 	.word	0x44020c00

08002014 <HAL_SYSTICK_GetCLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_LSE: LSE clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  */
uint32_t HAL_SYSTICK_GetCLKSourceConfig(void)
{
 8002014:	b480      	push	{r7}
 8002016:	b083      	sub	sp, #12
 8002018:	af00      	add	r7, sp, #0
  uint32_t systick_source;
  uint32_t systick_rcc_source;

  /* Read SysTick->CTRL register for internal or external clock source */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) != 0U)
 800201a:	4b17      	ldr	r3, [pc, #92]	@ (8002078 <HAL_SYSTICK_GetCLKSourceConfig+0x64>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f003 0304 	and.w	r3, r3, #4
 8002022:	2b00      	cmp	r3, #0
 8002024:	d002      	beq.n	800202c <HAL_SYSTICK_GetCLKSourceConfig+0x18>
  {
    /* Internal clock source */
    systick_source = SYSTICK_CLKSOURCE_HCLK;
 8002026:	2304      	movs	r3, #4
 8002028:	607b      	str	r3, [r7, #4]
 800202a:	e01e      	b.n	800206a <HAL_SYSTICK_GetCLKSourceConfig+0x56>
  }
  else
  {
    /* External clock source, check the selected one in RCC */
    systick_rcc_source = READ_BIT(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL);
 800202c:	4b13      	ldr	r3, [pc, #76]	@ (800207c <HAL_SYSTICK_GetCLKSourceConfig+0x68>)
 800202e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8002032:	f003 030c 	and.w	r3, r3, #12
 8002036:	603b      	str	r3, [r7, #0]

    switch (systick_rcc_source)
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	2b08      	cmp	r3, #8
 800203c:	d00f      	beq.n	800205e <HAL_SYSTICK_GetCLKSourceConfig+0x4a>
 800203e:	683b      	ldr	r3, [r7, #0]
 8002040:	2b08      	cmp	r3, #8
 8002042:	d80f      	bhi.n	8002064 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	2b00      	cmp	r3, #0
 8002048:	d003      	beq.n	8002052 <HAL_SYSTICK_GetCLKSourceConfig+0x3e>
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	2b04      	cmp	r3, #4
 800204e:	d003      	beq.n	8002058 <HAL_SYSTICK_GetCLKSourceConfig+0x44>
 8002050:	e008      	b.n	8002064 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
    {
      case (0x00000000U):
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8002052:	2300      	movs	r3, #0
 8002054:	607b      	str	r3, [r7, #4]
        break;
 8002056:	e008      	b.n	800206a <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      case (RCC_CCIPR4_SYSTICKSEL_0):
        systick_source = SYSTICK_CLKSOURCE_LSI;
 8002058:	2301      	movs	r3, #1
 800205a:	607b      	str	r3, [r7, #4]
        break;
 800205c:	e005      	b.n	800206a <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      case (RCC_CCIPR4_SYSTICKSEL_1):
        systick_source = SYSTICK_CLKSOURCE_LSE;
 800205e:	2302      	movs	r3, #2
 8002060:	607b      	str	r3, [r7, #4]
        break;
 8002062:	e002      	b.n	800206a <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      default:
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8002064:	2300      	movs	r3, #0
 8002066:	607b      	str	r3, [r7, #4]
        break;
 8002068:	bf00      	nop
    }
  }
  return systick_source;
 800206a:	687b      	ldr	r3, [r7, #4]
}
 800206c:	4618      	mov	r0, r3
 800206e:	370c      	adds	r7, #12
 8002070:	46bd      	mov	sp, r7
 8002072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002076:	4770      	bx	lr
 8002078:	e000e010 	.word	0xe000e010
 800207c:	44020c00 	.word	0x44020c00

08002080 <HAL_DMA_Init>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *const hdma)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b084      	sub	sp, #16
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart = HAL_GetTick();
 8002088:	f7ff fe3a 	bl	8001d00 <HAL_GetTick>
 800208c:	60f8      	str	r0, [r7, #12]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	2b00      	cmp	r3, #0
 8002092:	d101      	bne.n	8002098 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8002094:	2301      	movs	r3, #1
 8002096:	e085      	b.n	80021a4 <HAL_DMA_Init+0x124>
  if (hdma->Init.Mode == DMA_PFCTRL)
  {
    assert_param(IS_DMA_PFREQ_INSTANCE(hdma->Instance));
  }
  /* Check DMA channel instance */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	4a43      	ldr	r2, [pc, #268]	@ (80021ac <HAL_DMA_Init+0x12c>)
 800209e:	4293      	cmp	r3, r2
 80020a0:	d049      	beq.n	8002136 <HAL_DMA_Init+0xb6>
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	4a42      	ldr	r2, [pc, #264]	@ (80021b0 <HAL_DMA_Init+0x130>)
 80020a8:	4293      	cmp	r3, r2
 80020aa:	d044      	beq.n	8002136 <HAL_DMA_Init+0xb6>
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	4a40      	ldr	r2, [pc, #256]	@ (80021b4 <HAL_DMA_Init+0x134>)
 80020b2:	4293      	cmp	r3, r2
 80020b4:	d03f      	beq.n	8002136 <HAL_DMA_Init+0xb6>
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	4a3f      	ldr	r2, [pc, #252]	@ (80021b8 <HAL_DMA_Init+0x138>)
 80020bc:	4293      	cmp	r3, r2
 80020be:	d03a      	beq.n	8002136 <HAL_DMA_Init+0xb6>
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	4a3d      	ldr	r2, [pc, #244]	@ (80021bc <HAL_DMA_Init+0x13c>)
 80020c6:	4293      	cmp	r3, r2
 80020c8:	d035      	beq.n	8002136 <HAL_DMA_Init+0xb6>
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	4a3c      	ldr	r2, [pc, #240]	@ (80021c0 <HAL_DMA_Init+0x140>)
 80020d0:	4293      	cmp	r3, r2
 80020d2:	d030      	beq.n	8002136 <HAL_DMA_Init+0xb6>
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	4a3a      	ldr	r2, [pc, #232]	@ (80021c4 <HAL_DMA_Init+0x144>)
 80020da:	4293      	cmp	r3, r2
 80020dc:	d02b      	beq.n	8002136 <HAL_DMA_Init+0xb6>
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	4a39      	ldr	r2, [pc, #228]	@ (80021c8 <HAL_DMA_Init+0x148>)
 80020e4:	4293      	cmp	r3, r2
 80020e6:	d026      	beq.n	8002136 <HAL_DMA_Init+0xb6>
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	4a37      	ldr	r2, [pc, #220]	@ (80021cc <HAL_DMA_Init+0x14c>)
 80020ee:	4293      	cmp	r3, r2
 80020f0:	d021      	beq.n	8002136 <HAL_DMA_Init+0xb6>
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	4a36      	ldr	r2, [pc, #216]	@ (80021d0 <HAL_DMA_Init+0x150>)
 80020f8:	4293      	cmp	r3, r2
 80020fa:	d01c      	beq.n	8002136 <HAL_DMA_Init+0xb6>
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	4a34      	ldr	r2, [pc, #208]	@ (80021d4 <HAL_DMA_Init+0x154>)
 8002102:	4293      	cmp	r3, r2
 8002104:	d017      	beq.n	8002136 <HAL_DMA_Init+0xb6>
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	4a33      	ldr	r2, [pc, #204]	@ (80021d8 <HAL_DMA_Init+0x158>)
 800210c:	4293      	cmp	r3, r2
 800210e:	d012      	beq.n	8002136 <HAL_DMA_Init+0xb6>
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	4a31      	ldr	r2, [pc, #196]	@ (80021dc <HAL_DMA_Init+0x15c>)
 8002116:	4293      	cmp	r3, r2
 8002118:	d00d      	beq.n	8002136 <HAL_DMA_Init+0xb6>
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	4a30      	ldr	r2, [pc, #192]	@ (80021e0 <HAL_DMA_Init+0x160>)
 8002120:	4293      	cmp	r3, r2
 8002122:	d008      	beq.n	8002136 <HAL_DMA_Init+0xb6>
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	4a2e      	ldr	r2, [pc, #184]	@ (80021e4 <HAL_DMA_Init+0x164>)
 800212a:	4293      	cmp	r3, r2
 800212c:	d003      	beq.n	8002136 <HAL_DMA_Init+0xb6>
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	4a2d      	ldr	r2, [pc, #180]	@ (80021e8 <HAL_DMA_Init+0x168>)
 8002134:	4293      	cmp	r3, r2
    assert_param(IS_DMA_BURST_LENGTH(hdma->Init.DestBurstLength));
    assert_param(IS_DMA_TRANSFER_ALLOCATED_PORT(hdma->Init.TransferAllocatedPort));
  }

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	2200      	movs	r2, #0
 800213a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  /* Update the DMA channel state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	2202      	movs	r2, #2
 8002142:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Disable the DMA channel */
  __HAL_DMA_DISABLE(hdma);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	695a      	ldr	r2, [r3, #20]
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f042 0206 	orr.w	r2, r2, #6
 8002154:	615a      	str	r2, [r3, #20]

  /* Check if the DMA channel is effectively disabled */
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 8002156:	e00f      	b.n	8002178 <HAL_DMA_Init+0xf8>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 8002158:	f7ff fdd2 	bl	8001d00 <HAL_GetTick>
 800215c:	4602      	mov	r2, r0
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	1ad3      	subs	r3, r2, r3
 8002162:	2b05      	cmp	r3, #5
 8002164:	d908      	bls.n	8002178 <HAL_DMA_Init+0xf8>
    {
      /* Update the DMA channel error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	2210      	movs	r2, #16
 800216a:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Update the DMA channel state */
      hdma->State = HAL_DMA_STATE_ERROR;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	2203      	movs	r2, #3
 8002170:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

      return HAL_ERROR;
 8002174:	2301      	movs	r3, #1
 8002176:	e015      	b.n	80021a4 <HAL_DMA_Init+0x124>
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	695b      	ldr	r3, [r3, #20]
 800217e:	f003 0301 	and.w	r3, r3, #1
 8002182:	2b00      	cmp	r3, #0
 8002184:	d1e8      	bne.n	8002158 <HAL_DMA_Init+0xd8>
    }
  }

  /* Initialize the DMA channel registers */
  DMA_Init(hdma);
 8002186:	6878      	ldr	r0, [r7, #4]
 8002188:	f000 f9ce 	bl	8002528 <DMA_Init>

  /* Update DMA channel operation mode */
  hdma->Mode = hdma->Init.Mode;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Update the DMA channel error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	2200      	movs	r2, #0
 8002198:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Update the DMA channel state */
  hdma->State = HAL_DMA_STATE_READY;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	2201      	movs	r2, #1
 800219e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 80021a2:	2300      	movs	r3, #0
}
 80021a4:	4618      	mov	r0, r3
 80021a6:	3710      	adds	r7, #16
 80021a8:	46bd      	mov	sp, r7
 80021aa:	bd80      	pop	{r7, pc}
 80021ac:	40020050 	.word	0x40020050
 80021b0:	400200d0 	.word	0x400200d0
 80021b4:	40020150 	.word	0x40020150
 80021b8:	400201d0 	.word	0x400201d0
 80021bc:	40020250 	.word	0x40020250
 80021c0:	400202d0 	.word	0x400202d0
 80021c4:	40020350 	.word	0x40020350
 80021c8:	400203d0 	.word	0x400203d0
 80021cc:	40021050 	.word	0x40021050
 80021d0:	400210d0 	.word	0x400210d0
 80021d4:	40021150 	.word	0x40021150
 80021d8:	400211d0 	.word	0x400211d0
 80021dc:	40021250 	.word	0x40021250
 80021e0:	400212d0 	.word	0x400212d0
 80021e4:	40021350 	.word	0x40021350
 80021e8:	400213d0 	.word	0x400213d0

080021ec <HAL_DMA_IRQHandler>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *const hdma)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b086      	sub	sp, #24
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
  const DMA_TypeDef *p_dma_instance = GET_DMA_INSTANCE(hdma);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 80021fc:	f023 030f 	bic.w	r3, r3, #15
 8002200:	617b      	str	r3, [r7, #20]
  uint32_t global_it_flag =  1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800220a:	3b50      	subs	r3, #80	@ 0x50
 800220c:	09db      	lsrs	r3, r3, #7
 800220e:	f003 031f 	and.w	r3, r3, #31
 8002212:	2201      	movs	r2, #1
 8002214:	fa02 f303 	lsl.w	r3, r2, r3
 8002218:	613b      	str	r3, [r7, #16]
  uint32_t global_active_flag_ns = IS_DMA_GLOBAL_ACTIVE_FLAG_NS(p_dma_instance, global_it_flag);
 800221a:	697b      	ldr	r3, [r7, #20]
 800221c:	68db      	ldr	r3, [r3, #12]
 800221e:	693a      	ldr	r2, [r7, #16]
 8002220:	4013      	ands	r3, r2
 8002222:	60fb      	str	r3, [r7, #12]

  /* Global Interrupt Flag management *********************************************************************************/
#if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
  if ((global_active_flag_s == 0U) && (global_active_flag_ns == 0U))
#else
  if (global_active_flag_ns == 0U)
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	2b00      	cmp	r3, #0
 8002228:	f000 813b 	beq.w	80024a2 <HAL_DMA_IRQHandler+0x2b6>
  {
    return; /* the global interrupt flag for the current channel is down , nothing to do */
  }

  /* Data Transfer Error Interrupt management *************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_DTE) != 0U))
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	691b      	ldr	r3, [r3, #16]
 8002232:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002236:	2b00      	cmp	r3, #0
 8002238:	d011      	beq.n	800225e <HAL_DMA_IRQHandler+0x72>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DTE) != 0U)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	695b      	ldr	r3, [r3, #20]
 8002240:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002244:	2b00      	cmp	r3, #0
 8002246:	d00a      	beq.n	800225e <HAL_DMA_IRQHandler+0x72>
    {
      /* Clear the transfer error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_DTE);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002250:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DTE;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002256:	f043 0201 	orr.w	r2, r3, #1
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Update Linked-list Error Interrupt management ********************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_ULE) != 0U))
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	691b      	ldr	r3, [r3, #16]
 8002264:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002268:	2b00      	cmp	r3, #0
 800226a:	d011      	beq.n	8002290 <HAL_DMA_IRQHandler+0xa4>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_ULE) != 0U)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	695b      	ldr	r3, [r3, #20]
 8002272:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002276:	2b00      	cmp	r3, #0
 8002278:	d00a      	beq.n	8002290 <HAL_DMA_IRQHandler+0xa4>
    {
      /* Clear the update linked-list error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_ULE);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002282:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_ULE;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002288:	f043 0202 	orr.w	r2, r3, #2
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* User Setting Error Interrupt management **************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_USE) != 0U))
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	691b      	ldr	r3, [r3, #16]
 8002296:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800229a:	2b00      	cmp	r3, #0
 800229c:	d011      	beq.n	80022c2 <HAL_DMA_IRQHandler+0xd6>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_USE) != 0U)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	695b      	ldr	r3, [r3, #20]
 80022a4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d00a      	beq.n	80022c2 <HAL_DMA_IRQHandler+0xd6>
    {
      /* Clear the user setting error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_USE);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80022b4:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_USE;
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022ba:	f043 0204 	orr.w	r2, r3, #4
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Trigger Overrun Interrupt management *****************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TO) != 0U))
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	691b      	ldr	r3, [r3, #16]
 80022c8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d011      	beq.n	80022f4 <HAL_DMA_IRQHandler+0x108>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TO) != 0U)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	695b      	ldr	r3, [r3, #20]
 80022d6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d00a      	beq.n	80022f4 <HAL_DMA_IRQHandler+0x108>
    {
      /* Clear the trigger overrun flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_TO);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80022e6:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TO;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022ec:	f043 0208 	orr.w	r2, r3, #8
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Half Transfer Complete Interrupt management **********************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_HT) != 0U))
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	691b      	ldr	r3, [r3, #16]
 80022fa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d013      	beq.n	800232a <HAL_DMA_IRQHandler+0x13e>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	695b      	ldr	r3, [r3, #20]
 8002308:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800230c:	2b00      	cmp	r3, #0
 800230e:	d00c      	beq.n	800232a <HAL_DMA_IRQHandler+0x13e>
    {
      /* Clear the half transfer flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_HT);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002318:	60da      	str	r2, [r3, #12]

      /* Check half transfer complete callback */
      if (hdma->XferHalfCpltCallback != NULL)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800231e:	2b00      	cmp	r3, #0
 8002320:	d003      	beq.n	800232a <HAL_DMA_IRQHandler+0x13e>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002326:	6878      	ldr	r0, [r7, #4]
 8002328:	4798      	blx	r3
      }
    }
  }

  /* Suspend Transfer Interrupt management ****************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_SUSP) != 0U))
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	691b      	ldr	r3, [r3, #16]
 8002330:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002334:	2b00      	cmp	r3, #0
 8002336:	d04c      	beq.n	80023d2 <HAL_DMA_IRQHandler+0x1e6>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_SUSP) != 0U)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	695b      	ldr	r3, [r3, #20]
 800233e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002342:	2b00      	cmp	r3, #0
 8002344:	d045      	beq.n	80023d2 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Clear the block transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_SUSP);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800234e:	60da      	str	r2, [r3, #12]

      /* Check DMA channel state */
      if (hdma->State == HAL_DMA_STATE_ABORT)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8002356:	b2db      	uxtb	r3, r3
 8002358:	2b04      	cmp	r3, #4
 800235a:	d12e      	bne.n	80023ba <HAL_DMA_IRQHandler+0x1ce>
      {
        /* Disable the suspend transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_SUSP);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	695a      	ldr	r2, [r3, #20]
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800236a:	615a      	str	r2, [r3, #20]

        /* Reset the channel internal state and reset the FIFO */
        hdma->Instance->CCR |= DMA_CCR_RESET;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	695a      	ldr	r2, [r3, #20]
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f042 0202 	orr.w	r2, r2, #2
 800237a:	615a      	str	r2, [r3, #20]

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_READY;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	2201      	movs	r2, #1
 8002380:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002388:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800238c:	2b00      	cmp	r3, #0
 800238e:	d007      	beq.n	80023a0 <HAL_DMA_IRQHandler+0x1b4>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002394:	2201      	movs	r2, #1
 8002396:	731a      	strb	r2, [r3, #12]

          /* Clear remaining data size to ensure loading linked-list from memory next start */
          hdma->Instance->CBR1 = 0U;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	2200      	movs	r2, #0
 800239e:	649a      	str	r2, [r3, #72]	@ 0x48
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	2200      	movs	r2, #0
 80023a4:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        /* Check transfer abort callback */
        if (hdma->XferAbortCallback != NULL)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d07a      	beq.n	80024a6 <HAL_DMA_IRQHandler+0x2ba>
        {
          /* Transfer abort callback */
          hdma->XferAbortCallback(hdma);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80023b4:	6878      	ldr	r0, [r7, #4]
 80023b6:	4798      	blx	r3
        }

        return;
 80023b8:	e075      	b.n	80024a6 <HAL_DMA_IRQHandler+0x2ba>
      }
      else
      {
        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_SUSPEND;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	2205      	movs	r2, #5
 80023be:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check transfer suspend callback */
        if (hdma->XferSuspendCallback != NULL)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d003      	beq.n	80023d2 <HAL_DMA_IRQHandler+0x1e6>
        {
          /* Transfer suspend callback */
          hdma->XferSuspendCallback(hdma);
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80023ce:	6878      	ldr	r0, [r7, #4]
 80023d0:	4798      	blx	r3
      }
    }
  }

  /* Transfer Complete Interrupt management ***************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TC) != 0U))
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	691b      	ldr	r3, [r3, #16]
 80023d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d039      	beq.n	8002454 <HAL_DMA_IRQHandler+0x268>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	695b      	ldr	r3, [r3, #20]
 80023e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d032      	beq.n	8002454 <HAL_DMA_IRQHandler+0x268>
    {
      /* Check DMA channel transfer mode */
      if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80023f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d012      	beq.n	8002420 <HAL_DMA_IRQHandler+0x234>
      {
        /* If linked-list transfer */
        if (hdma->Instance->CLLR == 0U)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002400:	2b00      	cmp	r3, #0
 8002402:	d116      	bne.n	8002432 <HAL_DMA_IRQHandler+0x246>
        {
          if (hdma->Instance->CBR1 == 0U)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800240a:	2b00      	cmp	r3, #0
 800240c:	d111      	bne.n	8002432 <HAL_DMA_IRQHandler+0x246>
          {
            /* Update the DMA channel state */
            hdma->State = HAL_DMA_STATE_READY;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	2201      	movs	r2, #1
 8002412:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

            /* Update the linked-list queue state */
            hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800241a:	2201      	movs	r2, #1
 800241c:	731a      	strb	r2, [r3, #12]
 800241e:	e008      	b.n	8002432 <HAL_DMA_IRQHandler+0x246>
        }
      }
      else
      {
        /* If normal transfer */
        if (hdma->Instance->CBR1 == 0U)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002426:	2b00      	cmp	r3, #0
 8002428:	d103      	bne.n	8002432 <HAL_DMA_IRQHandler+0x246>
        {
          /* Update the DMA channel state */
          hdma->State = HAL_DMA_STATE_READY;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	2201      	movs	r2, #1
 800242e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
        }
      }

      /* Clear TC and HT transfer flags */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT));
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f44f 7240 	mov.w	r2, #768	@ 0x300
 800243a:	60da      	str	r2, [r3, #12]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	2200      	movs	r2, #0
 8002440:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

      /* Check transfer complete callback */
      if (hdma->XferCpltCallback != NULL)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002448:	2b00      	cmp	r3, #0
 800244a:	d003      	beq.n	8002454 <HAL_DMA_IRQHandler+0x268>
      {
        /* Channel Transfer Complete callback */
        hdma->XferCpltCallback(hdma);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002450:	6878      	ldr	r0, [r7, #4]
 8002452:	4798      	blx	r3
      }
    }
  }

  /* Manage error case ************************************************************************************************/
  if (hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002458:	2b00      	cmp	r3, #0
 800245a:	d025      	beq.n	80024a8 <HAL_DMA_IRQHandler+0x2bc>
  {
    /* Reset the channel internal state and reset the FIFO */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	695a      	ldr	r2, [r3, #20]
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f042 0202 	orr.w	r2, r2, #2
 800246a:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	2201      	movs	r2, #1
 8002470:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002478:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800247c:	2b00      	cmp	r3, #0
 800247e:	d003      	beq.n	8002488 <HAL_DMA_IRQHandler+0x29c>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002484:	2201      	movs	r2, #1
 8002486:	731a      	strb	r2, [r3, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	2200      	movs	r2, #0
 800248c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /* Check transfer error callback */
    if (hdma->XferErrorCallback != NULL)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002494:	2b00      	cmp	r3, #0
 8002496:	d007      	beq.n	80024a8 <HAL_DMA_IRQHandler+0x2bc>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800249c:	6878      	ldr	r0, [r7, #4]
 800249e:	4798      	blx	r3
 80024a0:	e002      	b.n	80024a8 <HAL_DMA_IRQHandler+0x2bc>
    return; /* the global interrupt flag for the current channel is down , nothing to do */
 80024a2:	bf00      	nop
 80024a4:	e000      	b.n	80024a8 <HAL_DMA_IRQHandler+0x2bc>
        return;
 80024a6:	bf00      	nop
    }
  }
}
 80024a8:	3718      	adds	r7, #24
 80024aa:	46bd      	mov	sp, r7
 80024ac:	bd80      	pop	{r7, pc}

080024ae <HAL_DMA_ConfigChannelAttributes>:
  * @param  ChannelAttributes : Specifies the DMA channel secure/privilege attributes.
  *                             This parameter can be a one or a combination of @ref DMA_Channel_Attributes.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_DMA_ConfigChannelAttributes(DMA_HandleTypeDef *const hdma, uint32_t ChannelAttributes)
{
 80024ae:	b480      	push	{r7}
 80024b0:	b085      	sub	sp, #20
 80024b2:	af00      	add	r7, sp, #0
 80024b4:	6078      	str	r0, [r7, #4]
 80024b6:	6039      	str	r1, [r7, #0]
  DMA_TypeDef *p_dma_instance;
  uint32_t channel_idx;

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d101      	bne.n	80024c2 <HAL_DMA_ConfigChannelAttributes+0x14>
  {
    return HAL_ERROR;
 80024be:	2301      	movs	r3, #1
 80024c0:	e02b      	b.n	800251a <HAL_DMA_ConfigChannelAttributes+0x6c>

  /* Check the parameters */
  assert_param(IS_DMA_ATTRIBUTES(ChannelAttributes));

  /* Get DMA instance */
  p_dma_instance = GET_DMA_INSTANCE(hdma);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 80024ca:	f023 030f 	bic.w	r3, r3, #15
 80024ce:	60fb      	str	r3, [r7, #12]

  /* Get channel index */
  channel_idx = 1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80024d8:	3b50      	subs	r3, #80	@ 0x50
 80024da:	09db      	lsrs	r3, r3, #7
 80024dc:	f003 031f 	and.w	r3, r3, #31
 80024e0:	2201      	movs	r2, #1
 80024e2:	fa02 f303 	lsl.w	r3, r2, r3
 80024e6:	60bb      	str	r3, [r7, #8]

  /* Check DMA channel privilege attribute management */
  if ((ChannelAttributes & DMA_CHANNEL_ATTR_PRIV_MASK) == DMA_CHANNEL_ATTR_PRIV_MASK)
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	f003 0310 	and.w	r3, r3, #16
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d012      	beq.n	8002518 <HAL_DMA_ConfigChannelAttributes+0x6a>
  {
    /* Configure DMA channel privilege attribute */
    if ((ChannelAttributes & DMA_CHANNEL_PRIV) == DMA_CHANNEL_PRIV)
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	f003 0311 	and.w	r3, r3, #17
 80024f8:	2b11      	cmp	r3, #17
 80024fa:	d106      	bne.n	800250a <HAL_DMA_ConfigChannelAttributes+0x5c>
    {
      p_dma_instance->PRIVCFGR |= channel_idx;
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	685a      	ldr	r2, [r3, #4]
 8002500:	68bb      	ldr	r3, [r7, #8]
 8002502:	431a      	orrs	r2, r3
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	605a      	str	r2, [r3, #4]
 8002508:	e006      	b.n	8002518 <HAL_DMA_ConfigChannelAttributes+0x6a>
    }
    else
    {
      p_dma_instance->PRIVCFGR &= (~channel_idx);
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	685a      	ldr	r2, [r3, #4]
 800250e:	68bb      	ldr	r3, [r7, #8]
 8002510:	43db      	mvns	r3, r3
 8002512:	401a      	ands	r2, r3
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	605a      	str	r2, [r3, #4]
      hdma->Instance->CTR1 &= (~DMA_CTR1_DSEC);
    }
  }
#endif /* (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  return HAL_OK;
 8002518:	2300      	movs	r3, #0
}
 800251a:	4618      	mov	r0, r3
 800251c:	3714      	adds	r7, #20
 800251e:	46bd      	mov	sp, r7
 8002520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002524:	4770      	bx	lr
	...

08002528 <DMA_Init>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
static void DMA_Init(DMA_HandleTypeDef const *const hdma)
{
 8002528:	b480      	push	{r7}
 800252a:	b085      	sub	sp, #20
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Prepare DMA Channel Control Register (CCR) value *****************************************************************/
  tmpreg = hdma->Init.Priority;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	6a1b      	ldr	r3, [r3, #32]
 8002534:	60fb      	str	r3, [r7, #12]

  /* Write DMA Channel Control Register (CCR) */
  MODIFY_REG(hdma->Instance->CCR, DMA_CCR_PRIO | DMA_CCR_LAP | DMA_CCR_LSM, tmpreg);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	695b      	ldr	r3, [r3, #20]
 800253c:	f423 0143 	bic.w	r1, r3, #12779520	@ 0xc30000
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	68fa      	ldr	r2, [r7, #12]
 8002546:	430a      	orrs	r2, r1
 8002548:	615a      	str	r2, [r3, #20]

  /* Prepare DMA Channel Transfer Register (CTR1) value ***************************************************************/
  tmpreg = hdma->Init.DestInc | hdma->Init.DestDataWidth | hdma->Init.SrcInc | hdma->Init.SrcDataWidth;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	695a      	ldr	r2, [r3, #20]
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	69db      	ldr	r3, [r3, #28]
 8002552:	431a      	orrs	r2, r3
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	691b      	ldr	r3, [r3, #16]
 8002558:	431a      	orrs	r2, r3
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	699b      	ldr	r3, [r3, #24]
 800255e:	4313      	orrs	r3, r2
 8002560:	60fb      	str	r3, [r7, #12]

  /* Add parameters specific to GPDMA */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	4a82      	ldr	r2, [pc, #520]	@ (8002770 <DMA_Init+0x248>)
 8002568:	4293      	cmp	r3, r2
 800256a:	d04a      	beq.n	8002602 <DMA_Init+0xda>
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	4a80      	ldr	r2, [pc, #512]	@ (8002774 <DMA_Init+0x24c>)
 8002572:	4293      	cmp	r3, r2
 8002574:	d045      	beq.n	8002602 <DMA_Init+0xda>
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	4a7f      	ldr	r2, [pc, #508]	@ (8002778 <DMA_Init+0x250>)
 800257c:	4293      	cmp	r3, r2
 800257e:	d040      	beq.n	8002602 <DMA_Init+0xda>
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	4a7d      	ldr	r2, [pc, #500]	@ (800277c <DMA_Init+0x254>)
 8002586:	4293      	cmp	r3, r2
 8002588:	d03b      	beq.n	8002602 <DMA_Init+0xda>
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	4a7c      	ldr	r2, [pc, #496]	@ (8002780 <DMA_Init+0x258>)
 8002590:	4293      	cmp	r3, r2
 8002592:	d036      	beq.n	8002602 <DMA_Init+0xda>
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	4a7a      	ldr	r2, [pc, #488]	@ (8002784 <DMA_Init+0x25c>)
 800259a:	4293      	cmp	r3, r2
 800259c:	d031      	beq.n	8002602 <DMA_Init+0xda>
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	4a79      	ldr	r2, [pc, #484]	@ (8002788 <DMA_Init+0x260>)
 80025a4:	4293      	cmp	r3, r2
 80025a6:	d02c      	beq.n	8002602 <DMA_Init+0xda>
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	4a77      	ldr	r2, [pc, #476]	@ (800278c <DMA_Init+0x264>)
 80025ae:	4293      	cmp	r3, r2
 80025b0:	d027      	beq.n	8002602 <DMA_Init+0xda>
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	4a76      	ldr	r2, [pc, #472]	@ (8002790 <DMA_Init+0x268>)
 80025b8:	4293      	cmp	r3, r2
 80025ba:	d022      	beq.n	8002602 <DMA_Init+0xda>
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	4a74      	ldr	r2, [pc, #464]	@ (8002794 <DMA_Init+0x26c>)
 80025c2:	4293      	cmp	r3, r2
 80025c4:	d01d      	beq.n	8002602 <DMA_Init+0xda>
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	4a73      	ldr	r2, [pc, #460]	@ (8002798 <DMA_Init+0x270>)
 80025cc:	4293      	cmp	r3, r2
 80025ce:	d018      	beq.n	8002602 <DMA_Init+0xda>
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	4a71      	ldr	r2, [pc, #452]	@ (800279c <DMA_Init+0x274>)
 80025d6:	4293      	cmp	r3, r2
 80025d8:	d013      	beq.n	8002602 <DMA_Init+0xda>
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	4a70      	ldr	r2, [pc, #448]	@ (80027a0 <DMA_Init+0x278>)
 80025e0:	4293      	cmp	r3, r2
 80025e2:	d00e      	beq.n	8002602 <DMA_Init+0xda>
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	4a6e      	ldr	r2, [pc, #440]	@ (80027a4 <DMA_Init+0x27c>)
 80025ea:	4293      	cmp	r3, r2
 80025ec:	d009      	beq.n	8002602 <DMA_Init+0xda>
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	4a6d      	ldr	r2, [pc, #436]	@ (80027a8 <DMA_Init+0x280>)
 80025f4:	4293      	cmp	r3, r2
 80025f6:	d004      	beq.n	8002602 <DMA_Init+0xda>
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	4a6b      	ldr	r2, [pc, #428]	@ (80027ac <DMA_Init+0x284>)
 80025fe:	4293      	cmp	r3, r2
 8002600:	d101      	bne.n	8002606 <DMA_Init+0xde>
 8002602:	2301      	movs	r3, #1
 8002604:	e000      	b.n	8002608 <DMA_Init+0xe0>
 8002606:	2300      	movs	r3, #0
 8002608:	2b00      	cmp	r3, #0
 800260a:	d012      	beq.n	8002632 <DMA_Init+0x10a>
  {
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
               (((hdma->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1) |
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002614:	3b01      	subs	r3, #1
 8002616:	051b      	lsls	r3, r3, #20
 8002618:	f003 737c 	and.w	r3, r3, #66060288	@ 0x3f00000
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
 800261c:	431a      	orrs	r2, r3
               (((hdma->Init.SrcBurstLength - 1U) << DMA_CTR1_SBL_1_Pos) & DMA_CTR1_SBL_1));
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002622:	3b01      	subs	r3, #1
 8002624:	011b      	lsls	r3, r3, #4
 8002626:	f403 737c 	and.w	r3, r3, #1008	@ 0x3f0
               (((hdma->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1) |
 800262a:	4313      	orrs	r3, r2
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
 800262c:	68fa      	ldr	r2, [r7, #12]
 800262e:	4313      	orrs	r3, r2
 8002630:	60fb      	str	r3, [r7, #12]

  /* Write DMA Channel Transfer Register 1 (CTR1) */
#if defined (DMA_CTR1_SSEC)
  MODIFY_REG(hdma->Instance->CTR1, ~(DMA_CTR1_SSEC | DMA_CTR1_DSEC), tmpreg);
#else
  WRITE_REG(hdma->Instance->CTR1, tmpreg);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	68fa      	ldr	r2, [r7, #12]
 8002638:	641a      	str	r2, [r3, #64]	@ 0x40
#endif /* DMA_CTR1_SSEC */

  /* Prepare DMA Channel Transfer Register 2 (CTR2) value *************************************************************/
  tmpreg = hdma->Init.BlkHWRequest | (hdma->Init.Request & DMA_CTR2_REQSEL) | hdma->Init.TransferEventMode;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	689a      	ldr	r2, [r3, #8]
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	685b      	ldr	r3, [r3, #4]
 8002642:	b2db      	uxtb	r3, r3
 8002644:	431a      	orrs	r2, r3
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800264a:	4313      	orrs	r3, r2
 800264c:	60fb      	str	r3, [r7, #12]

  /* Memory to Peripheral Transfer */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	68db      	ldr	r3, [r3, #12]
 8002652:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002656:	d159      	bne.n	800270c <DMA_Init+0x1e4>
  {
    if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	4a44      	ldr	r2, [pc, #272]	@ (8002770 <DMA_Init+0x248>)
 800265e:	4293      	cmp	r3, r2
 8002660:	d04a      	beq.n	80026f8 <DMA_Init+0x1d0>
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	4a43      	ldr	r2, [pc, #268]	@ (8002774 <DMA_Init+0x24c>)
 8002668:	4293      	cmp	r3, r2
 800266a:	d045      	beq.n	80026f8 <DMA_Init+0x1d0>
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	4a41      	ldr	r2, [pc, #260]	@ (8002778 <DMA_Init+0x250>)
 8002672:	4293      	cmp	r3, r2
 8002674:	d040      	beq.n	80026f8 <DMA_Init+0x1d0>
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	4a40      	ldr	r2, [pc, #256]	@ (800277c <DMA_Init+0x254>)
 800267c:	4293      	cmp	r3, r2
 800267e:	d03b      	beq.n	80026f8 <DMA_Init+0x1d0>
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	4a3e      	ldr	r2, [pc, #248]	@ (8002780 <DMA_Init+0x258>)
 8002686:	4293      	cmp	r3, r2
 8002688:	d036      	beq.n	80026f8 <DMA_Init+0x1d0>
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	4a3d      	ldr	r2, [pc, #244]	@ (8002784 <DMA_Init+0x25c>)
 8002690:	4293      	cmp	r3, r2
 8002692:	d031      	beq.n	80026f8 <DMA_Init+0x1d0>
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	4a3b      	ldr	r2, [pc, #236]	@ (8002788 <DMA_Init+0x260>)
 800269a:	4293      	cmp	r3, r2
 800269c:	d02c      	beq.n	80026f8 <DMA_Init+0x1d0>
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	4a3a      	ldr	r2, [pc, #232]	@ (800278c <DMA_Init+0x264>)
 80026a4:	4293      	cmp	r3, r2
 80026a6:	d027      	beq.n	80026f8 <DMA_Init+0x1d0>
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	4a38      	ldr	r2, [pc, #224]	@ (8002790 <DMA_Init+0x268>)
 80026ae:	4293      	cmp	r3, r2
 80026b0:	d022      	beq.n	80026f8 <DMA_Init+0x1d0>
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	4a37      	ldr	r2, [pc, #220]	@ (8002794 <DMA_Init+0x26c>)
 80026b8:	4293      	cmp	r3, r2
 80026ba:	d01d      	beq.n	80026f8 <DMA_Init+0x1d0>
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	4a35      	ldr	r2, [pc, #212]	@ (8002798 <DMA_Init+0x270>)
 80026c2:	4293      	cmp	r3, r2
 80026c4:	d018      	beq.n	80026f8 <DMA_Init+0x1d0>
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	4a34      	ldr	r2, [pc, #208]	@ (800279c <DMA_Init+0x274>)
 80026cc:	4293      	cmp	r3, r2
 80026ce:	d013      	beq.n	80026f8 <DMA_Init+0x1d0>
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	4a32      	ldr	r2, [pc, #200]	@ (80027a0 <DMA_Init+0x278>)
 80026d6:	4293      	cmp	r3, r2
 80026d8:	d00e      	beq.n	80026f8 <DMA_Init+0x1d0>
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	4a31      	ldr	r2, [pc, #196]	@ (80027a4 <DMA_Init+0x27c>)
 80026e0:	4293      	cmp	r3, r2
 80026e2:	d009      	beq.n	80026f8 <DMA_Init+0x1d0>
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	4a2f      	ldr	r2, [pc, #188]	@ (80027a8 <DMA_Init+0x280>)
 80026ea:	4293      	cmp	r3, r2
 80026ec:	d004      	beq.n	80026f8 <DMA_Init+0x1d0>
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	4a2e      	ldr	r2, [pc, #184]	@ (80027ac <DMA_Init+0x284>)
 80026f4:	4293      	cmp	r3, r2
 80026f6:	d101      	bne.n	80026fc <DMA_Init+0x1d4>
 80026f8:	2301      	movs	r3, #1
 80026fa:	e000      	b.n	80026fe <DMA_Init+0x1d6>
 80026fc:	2300      	movs	r3, #0
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d00d      	beq.n	800271e <DMA_Init+0x1f6>
    {
      tmpreg |= DMA_CTR2_DREQ;
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002708:	60fb      	str	r3, [r7, #12]
 800270a:	e008      	b.n	800271e <DMA_Init+0x1f6>
    }
  }
  /* Memory to Memory Transfer */
  else if ((hdma->Init.Direction) == DMA_MEMORY_TO_MEMORY)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	68db      	ldr	r3, [r3, #12]
 8002710:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002714:	d103      	bne.n	800271e <DMA_Init+0x1f6>
  {
    tmpreg |= DMA_CTR2_SWREQ;
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800271c:	60fb      	str	r3, [r7, #12]
  {
    /* Nothing to do */
  }

  /* Set DMA channel operation mode */
  tmpreg |= hdma->Init.Mode;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002722:	68fa      	ldr	r2, [r7, #12]
 8002724:	4313      	orrs	r3, r2
 8002726:	60fb      	str	r3, [r7, #12]

  /* Write DMA Channel Transfer Register 2 (CTR2) */
  MODIFY_REG(hdma->Instance->CTR2, (DMA_CTR2_TCEM  | DMA_CTR2_TRIGPOL | DMA_CTR2_TRIGSEL | DMA_CTR2_TRIGM |
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800272e:	4b20      	ldr	r3, [pc, #128]	@ (80027b0 <DMA_Init+0x288>)
 8002730:	4013      	ands	r3, r2
 8002732:	687a      	ldr	r2, [r7, #4]
 8002734:	6812      	ldr	r2, [r2, #0]
 8002736:	68f9      	ldr	r1, [r7, #12]
 8002738:	430b      	orrs	r3, r1
 800273a:	6453      	str	r3, [r2, #68]	@ 0x44
                                    DMA_CTR2_PFREQ | DMA_CTR2_BREQ  | DMA_CTR2_DREQ    | DMA_CTR2_SWREQ   |
                                    DMA_CTR2_REQSEL), tmpreg);


  /* Write DMA Channel Block Register 1 (CBR1) ************************************************************************/
  WRITE_REG(hdma->Instance->CBR1, 0U);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	2200      	movs	r2, #0
 8002742:	649a      	str	r2, [r3, #72]	@ 0x48

  /* If 2D Addressing is supported by current channel */
  if (IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) != 0U)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	4a0f      	ldr	r2, [pc, #60]	@ (8002788 <DMA_Init+0x260>)
 800274a:	4293      	cmp	r3, r2
 800274c:	d00e      	beq.n	800276c <DMA_Init+0x244>
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	4a0e      	ldr	r2, [pc, #56]	@ (800278c <DMA_Init+0x264>)
 8002754:	4293      	cmp	r3, r2
 8002756:	d009      	beq.n	800276c <DMA_Init+0x244>
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	4a12      	ldr	r2, [pc, #72]	@ (80027a8 <DMA_Init+0x280>)
 800275e:	4293      	cmp	r3, r2
 8002760:	d004      	beq.n	800276c <DMA_Init+0x244>
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	4a11      	ldr	r2, [pc, #68]	@ (80027ac <DMA_Init+0x284>)
 8002768:	4293      	cmp	r3, r2
 800276a:	d123      	bne.n	80027b4 <DMA_Init+0x28c>
 800276c:	2301      	movs	r3, #1
 800276e:	e022      	b.n	80027b6 <DMA_Init+0x28e>
 8002770:	40020050 	.word	0x40020050
 8002774:	400200d0 	.word	0x400200d0
 8002778:	40020150 	.word	0x40020150
 800277c:	400201d0 	.word	0x400201d0
 8002780:	40020250 	.word	0x40020250
 8002784:	400202d0 	.word	0x400202d0
 8002788:	40020350 	.word	0x40020350
 800278c:	400203d0 	.word	0x400203d0
 8002790:	40021050 	.word	0x40021050
 8002794:	400210d0 	.word	0x400210d0
 8002798:	40021150 	.word	0x40021150
 800279c:	400211d0 	.word	0x400211d0
 80027a0:	40021250 	.word	0x40021250
 80027a4:	400212d0 	.word	0x400212d0
 80027a8:	40021350 	.word	0x40021350
 80027ac:	400213d0 	.word	0x400213d0
 80027b0:	3cc02100 	.word	0x3cc02100
 80027b4:	2300      	movs	r3, #0
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d007      	beq.n	80027ca <DMA_Init+0x2a2>
  {
    /* Write DMA Channel Transfer Register 3 (CTR3) *******************************************************************/
    WRITE_REG(hdma->Instance->CTR3, 0U);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	2200      	movs	r2, #0
 80027c0:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Write DMA Channel Block Register 2 (CBR2) **********************************************************************/
    WRITE_REG(hdma->Instance->CBR2, 0U);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	2200      	movs	r2, #0
 80027c8:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Write DMA Channel linked-list address register (CLLR) ************************************************************/
  WRITE_REG(hdma->Instance->CLLR, 0U);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	2200      	movs	r2, #0
 80027d0:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 80027d2:	bf00      	nop
 80027d4:	3714      	adds	r7, #20
 80027d6:	46bd      	mov	sp, r7
 80027d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027dc:	4770      	bx	lr
 80027de:	bf00      	nop

080027e0 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 80027e0:	b480      	push	{r7}
 80027e2:	b087      	sub	sp, #28
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
 80027e8:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 80027ea:	2300      	movs	r3, #0
 80027ec:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80027ee:	e136      	b.n	8002a5e <HAL_GPIO_Init+0x27e>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	681a      	ldr	r2, [r3, #0]
 80027f4:	2101      	movs	r1, #1
 80027f6:	693b      	ldr	r3, [r7, #16]
 80027f8:	fa01 f303 	lsl.w	r3, r1, r3
 80027fc:	4013      	ands	r3, r2
 80027fe:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	2b00      	cmp	r3, #0
 8002804:	f000 8128 	beq.w	8002a58 <HAL_GPIO_Init+0x278>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	685b      	ldr	r3, [r3, #4]
 800280c:	2b02      	cmp	r3, #2
 800280e:	d003      	beq.n	8002818 <HAL_GPIO_Init+0x38>
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	685b      	ldr	r3, [r3, #4]
 8002814:	2b12      	cmp	r3, #18
 8002816:	d125      	bne.n	8002864 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8002818:	693b      	ldr	r3, [r7, #16]
 800281a:	08da      	lsrs	r2, r3, #3
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	3208      	adds	r2, #8
 8002820:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002824:	617b      	str	r3, [r7, #20]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8002826:	693b      	ldr	r3, [r7, #16]
 8002828:	f003 0307 	and.w	r3, r3, #7
 800282c:	009b      	lsls	r3, r3, #2
 800282e:	220f      	movs	r2, #15
 8002830:	fa02 f303 	lsl.w	r3, r2, r3
 8002834:	43db      	mvns	r3, r3
 8002836:	697a      	ldr	r2, [r7, #20]
 8002838:	4013      	ands	r3, r2
 800283a:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	691b      	ldr	r3, [r3, #16]
 8002840:	f003 020f 	and.w	r2, r3, #15
 8002844:	693b      	ldr	r3, [r7, #16]
 8002846:	f003 0307 	and.w	r3, r3, #7
 800284a:	009b      	lsls	r3, r3, #2
 800284c:	fa02 f303 	lsl.w	r3, r2, r3
 8002850:	697a      	ldr	r2, [r7, #20]
 8002852:	4313      	orrs	r3, r2
 8002854:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 8002856:	693b      	ldr	r3, [r7, #16]
 8002858:	08da      	lsrs	r2, r3, #3
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	3208      	adds	r2, #8
 800285e:	6979      	ldr	r1, [r7, #20]
 8002860:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 800286a:	693b      	ldr	r3, [r7, #16]
 800286c:	005b      	lsls	r3, r3, #1
 800286e:	2203      	movs	r2, #3
 8002870:	fa02 f303 	lsl.w	r3, r2, r3
 8002874:	43db      	mvns	r3, r3
 8002876:	697a      	ldr	r2, [r7, #20]
 8002878:	4013      	ands	r3, r2
 800287a:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	685b      	ldr	r3, [r3, #4]
 8002880:	f003 0203 	and.w	r2, r3, #3
 8002884:	693b      	ldr	r3, [r7, #16]
 8002886:	005b      	lsls	r3, r3, #1
 8002888:	fa02 f303 	lsl.w	r3, r2, r3
 800288c:	697a      	ldr	r2, [r7, #20]
 800288e:	4313      	orrs	r3, r2
 8002890:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	697a      	ldr	r2, [r7, #20]
 8002896:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	685b      	ldr	r3, [r3, #4]
 800289c:	2b01      	cmp	r3, #1
 800289e:	d00b      	beq.n	80028b8 <HAL_GPIO_Init+0xd8>
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	685b      	ldr	r3, [r3, #4]
 80028a4:	2b02      	cmp	r3, #2
 80028a6:	d007      	beq.n	80028b8 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80028ac:	2b11      	cmp	r3, #17
 80028ae:	d003      	beq.n	80028b8 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	685b      	ldr	r3, [r3, #4]
 80028b4:	2b12      	cmp	r3, #18
 80028b6:	d130      	bne.n	800291a <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	689b      	ldr	r3, [r3, #8]
 80028bc:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 80028be:	693b      	ldr	r3, [r7, #16]
 80028c0:	005b      	lsls	r3, r3, #1
 80028c2:	2203      	movs	r2, #3
 80028c4:	fa02 f303 	lsl.w	r3, r2, r3
 80028c8:	43db      	mvns	r3, r3
 80028ca:	697a      	ldr	r2, [r7, #20]
 80028cc:	4013      	ands	r3, r2
 80028ce:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	68da      	ldr	r2, [r3, #12]
 80028d4:	693b      	ldr	r3, [r7, #16]
 80028d6:	005b      	lsls	r3, r3, #1
 80028d8:	fa02 f303 	lsl.w	r3, r2, r3
 80028dc:	697a      	ldr	r2, [r7, #20]
 80028de:	4313      	orrs	r3, r2
 80028e0:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	697a      	ldr	r2, [r7, #20]
 80028e6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	685b      	ldr	r3, [r3, #4]
 80028ec:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 80028ee:	2201      	movs	r2, #1
 80028f0:	693b      	ldr	r3, [r7, #16]
 80028f2:	fa02 f303 	lsl.w	r3, r2, r3
 80028f6:	43db      	mvns	r3, r3
 80028f8:	697a      	ldr	r2, [r7, #20]
 80028fa:	4013      	ands	r3, r2
 80028fc:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80028fe:	683b      	ldr	r3, [r7, #0]
 8002900:	685b      	ldr	r3, [r3, #4]
 8002902:	091b      	lsrs	r3, r3, #4
 8002904:	f003 0201 	and.w	r2, r3, #1
 8002908:	693b      	ldr	r3, [r7, #16]
 800290a:	fa02 f303 	lsl.w	r3, r2, r3
 800290e:	697a      	ldr	r2, [r7, #20]
 8002910:	4313      	orrs	r3, r2
 8002912:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	697a      	ldr	r2, [r7, #20]
 8002918:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 800291a:	683b      	ldr	r3, [r7, #0]
 800291c:	685b      	ldr	r3, [r3, #4]
 800291e:	2b03      	cmp	r3, #3
 8002920:	d017      	beq.n	8002952 <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	68db      	ldr	r3, [r3, #12]
 8002926:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 8002928:	693b      	ldr	r3, [r7, #16]
 800292a:	005b      	lsls	r3, r3, #1
 800292c:	2203      	movs	r2, #3
 800292e:	fa02 f303 	lsl.w	r3, r2, r3
 8002932:	43db      	mvns	r3, r3
 8002934:	697a      	ldr	r2, [r7, #20]
 8002936:	4013      	ands	r3, r2
 8002938:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	689a      	ldr	r2, [r3, #8]
 800293e:	693b      	ldr	r3, [r7, #16]
 8002940:	005b      	lsls	r3, r3, #1
 8002942:	fa02 f303 	lsl.w	r3, r2, r3
 8002946:	697a      	ldr	r2, [r7, #20]
 8002948:	4313      	orrs	r3, r2
 800294a:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	697a      	ldr	r2, [r7, #20]
 8002950:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	685b      	ldr	r3, [r3, #4]
 8002956:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800295a:	2b00      	cmp	r3, #0
 800295c:	d07c      	beq.n	8002a58 <HAL_GPIO_Init+0x278>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 800295e:	4a47      	ldr	r2, [pc, #284]	@ (8002a7c <HAL_GPIO_Init+0x29c>)
 8002960:	693b      	ldr	r3, [r7, #16]
 8002962:	089b      	lsrs	r3, r3, #2
 8002964:	3318      	adds	r3, #24
 8002966:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800296a:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 800296c:	693b      	ldr	r3, [r7, #16]
 800296e:	f003 0303 	and.w	r3, r3, #3
 8002972:	00db      	lsls	r3, r3, #3
 8002974:	220f      	movs	r2, #15
 8002976:	fa02 f303 	lsl.w	r3, r2, r3
 800297a:	43db      	mvns	r3, r3
 800297c:	697a      	ldr	r2, [r7, #20]
 800297e:	4013      	ands	r3, r2
 8002980:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	0a9a      	lsrs	r2, r3, #10
 8002986:	4b3e      	ldr	r3, [pc, #248]	@ (8002a80 <HAL_GPIO_Init+0x2a0>)
 8002988:	4013      	ands	r3, r2
 800298a:	693a      	ldr	r2, [r7, #16]
 800298c:	f002 0203 	and.w	r2, r2, #3
 8002990:	00d2      	lsls	r2, r2, #3
 8002992:	4093      	lsls	r3, r2
 8002994:	697a      	ldr	r2, [r7, #20]
 8002996:	4313      	orrs	r3, r2
 8002998:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 800299a:	4938      	ldr	r1, [pc, #224]	@ (8002a7c <HAL_GPIO_Init+0x29c>)
 800299c:	693b      	ldr	r3, [r7, #16]
 800299e:	089b      	lsrs	r3, r3, #2
 80029a0:	3318      	adds	r3, #24
 80029a2:	697a      	ldr	r2, [r7, #20]
 80029a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 80029a8:	4b34      	ldr	r3, [pc, #208]	@ (8002a7c <HAL_GPIO_Init+0x29c>)
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	43db      	mvns	r3, r3
 80029b2:	697a      	ldr	r2, [r7, #20]
 80029b4:	4013      	ands	r3, r2
 80029b6:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	685b      	ldr	r3, [r3, #4]
 80029bc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d003      	beq.n	80029cc <HAL_GPIO_Init+0x1ec>
        {
          tmp |= iocurrent;
 80029c4:	697a      	ldr	r2, [r7, #20]
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	4313      	orrs	r3, r2
 80029ca:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 80029cc:	4a2b      	ldr	r2, [pc, #172]	@ (8002a7c <HAL_GPIO_Init+0x29c>)
 80029ce:	697b      	ldr	r3, [r7, #20]
 80029d0:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 80029d2:	4b2a      	ldr	r3, [pc, #168]	@ (8002a7c <HAL_GPIO_Init+0x29c>)
 80029d4:	685b      	ldr	r3, [r3, #4]
 80029d6:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	43db      	mvns	r3, r3
 80029dc:	697a      	ldr	r2, [r7, #20]
 80029de:	4013      	ands	r3, r2
 80029e0:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	685b      	ldr	r3, [r3, #4]
 80029e6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d003      	beq.n	80029f6 <HAL_GPIO_Init+0x216>
        {
          tmp |= iocurrent;
 80029ee:	697a      	ldr	r2, [r7, #20]
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	4313      	orrs	r3, r2
 80029f4:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 80029f6:	4a21      	ldr	r2, [pc, #132]	@ (8002a7c <HAL_GPIO_Init+0x29c>)
 80029f8:	697b      	ldr	r3, [r7, #20]
 80029fa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 80029fc:	4b1f      	ldr	r3, [pc, #124]	@ (8002a7c <HAL_GPIO_Init+0x29c>)
 80029fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002a02:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	43db      	mvns	r3, r3
 8002a08:	697a      	ldr	r2, [r7, #20]
 8002a0a:	4013      	ands	r3, r2
 8002a0c:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002a0e:	683b      	ldr	r3, [r7, #0]
 8002a10:	685b      	ldr	r3, [r3, #4]
 8002a12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d003      	beq.n	8002a22 <HAL_GPIO_Init+0x242>
        {
          tmp |= iocurrent;
 8002a1a:	697a      	ldr	r2, [r7, #20]
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	4313      	orrs	r3, r2
 8002a20:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 8002a22:	4a16      	ldr	r2, [pc, #88]	@ (8002a7c <HAL_GPIO_Init+0x29c>)
 8002a24:	697b      	ldr	r3, [r7, #20]
 8002a26:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 8002a2a:	4b14      	ldr	r3, [pc, #80]	@ (8002a7c <HAL_GPIO_Init+0x29c>)
 8002a2c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002a30:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	43db      	mvns	r3, r3
 8002a36:	697a      	ldr	r2, [r7, #20]
 8002a38:	4013      	ands	r3, r2
 8002a3a:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	685b      	ldr	r3, [r3, #4]
 8002a40:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d003      	beq.n	8002a50 <HAL_GPIO_Init+0x270>
        {
          tmp |= iocurrent;
 8002a48:	697a      	ldr	r2, [r7, #20]
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	4313      	orrs	r3, r2
 8002a4e:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 8002a50:	4a0a      	ldr	r2, [pc, #40]	@ (8002a7c <HAL_GPIO_Init+0x29c>)
 8002a52:	697b      	ldr	r3, [r7, #20]
 8002a54:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }

    position++;
 8002a58:	693b      	ldr	r3, [r7, #16]
 8002a5a:	3301      	adds	r3, #1
 8002a5c:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	681a      	ldr	r2, [r3, #0]
 8002a62:	693b      	ldr	r3, [r7, #16]
 8002a64:	fa22 f303 	lsr.w	r3, r2, r3
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	f47f aec1 	bne.w	80027f0 <HAL_GPIO_Init+0x10>
  }
}
 8002a6e:	bf00      	nop
 8002a70:	bf00      	nop
 8002a72:	371c      	adds	r7, #28
 8002a74:	46bd      	mov	sp, r7
 8002a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7a:	4770      	bx	lr
 8002a7c:	44022000 	.word	0x44022000
 8002a80:	002f7f7f 	.word	0x002f7f7f

08002a84 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a84:	b480      	push	{r7}
 8002a86:	b083      	sub	sp, #12
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
 8002a8c:	460b      	mov	r3, r1
 8002a8e:	807b      	strh	r3, [r7, #2]
 8002a90:	4613      	mov	r3, r2
 8002a92:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002a94:	787b      	ldrb	r3, [r7, #1]
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d003      	beq.n	8002aa2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002a9a:	887a      	ldrh	r2, [r7, #2]
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002aa0:	e002      	b.n	8002aa8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002aa2:	887a      	ldrh	r2, [r7, #2]
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002aa8:	bf00      	nop
 8002aaa:	370c      	adds	r7, #12
 8002aac:	46bd      	mov	sp, r7
 8002aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab2:	4770      	bx	lr

08002ab4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pOscInitStruct)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b088      	sub	sp, #32
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
  uint32_t temp_pllckselr;
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pOscInitStruct == NULL)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d102      	bne.n	8002ac8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	f000 bc28 	b.w	8003318 <HAL_RCC_OscConfig+0x864>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pOscInitStruct->OscillatorType));
  temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002ac8:	4b94      	ldr	r3, [pc, #592]	@ (8002d1c <HAL_RCC_OscConfig+0x268>)
 8002aca:	69db      	ldr	r3, [r3, #28]
 8002acc:	f003 0318 	and.w	r3, r3, #24
 8002ad0:	61fb      	str	r3, [r7, #28]
  temp_pllckselr = __HAL_RCC_GET_PLL1_OSCSOURCE();
 8002ad2:	4b92      	ldr	r3, [pc, #584]	@ (8002d1c <HAL_RCC_OscConfig+0x268>)
 8002ad4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ad6:	f003 0303 	and.w	r3, r3, #3
 8002ada:	61bb      	str	r3, [r7, #24]

  /*----------------------------- CSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f003 0310 	and.w	r3, r3, #16
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d05b      	beq.n	8002ba0 <HAL_RCC_OscConfig+0xec>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(pOscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(pOscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_CSI) ||
 8002ae8:	69fb      	ldr	r3, [r7, #28]
 8002aea:	2b08      	cmp	r3, #8
 8002aec:	d005      	beq.n	8002afa <HAL_RCC_OscConfig+0x46>
 8002aee:	69fb      	ldr	r3, [r7, #28]
 8002af0:	2b18      	cmp	r3, #24
 8002af2:	d114      	bne.n	8002b1e <HAL_RCC_OscConfig+0x6a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_CSI)))
 8002af4:	69bb      	ldr	r3, [r7, #24]
 8002af6:	2b02      	cmp	r3, #2
 8002af8:	d111      	bne.n	8002b1e <HAL_RCC_OscConfig+0x6a>
    {
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	69db      	ldr	r3, [r3, #28]
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d102      	bne.n	8002b08 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8002b02:	2301      	movs	r3, #1
 8002b04:	f000 bc08 	b.w	8003318 <HAL_RCC_OscConfig+0x864>

      /* Otherwise, just the calibration and CSI is allowed */
      else
      {
        /* Adjusts the Internal Low-power oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 8002b08:	4b84      	ldr	r3, [pc, #528]	@ (8002d1c <HAL_RCC_OscConfig+0x268>)
 8002b0a:	699b      	ldr	r3, [r3, #24]
 8002b0c:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	6a1b      	ldr	r3, [r3, #32]
 8002b14:	041b      	lsls	r3, r3, #16
 8002b16:	4981      	ldr	r1, [pc, #516]	@ (8002d1c <HAL_RCC_OscConfig+0x268>)
 8002b18:	4313      	orrs	r3, r2
 8002b1a:	618b      	str	r3, [r1, #24]
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 8002b1c:	e040      	b.n	8002ba0 <HAL_RCC_OscConfig+0xec>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((pOscInitStruct->CSIState) != RCC_CSI_OFF)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	69db      	ldr	r3, [r3, #28]
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d023      	beq.n	8002b6e <HAL_RCC_OscConfig+0xba>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002b26:	4b7d      	ldr	r3, [pc, #500]	@ (8002d1c <HAL_RCC_OscConfig+0x268>)
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	4a7c      	ldr	r2, [pc, #496]	@ (8002d1c <HAL_RCC_OscConfig+0x268>)
 8002b2c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002b30:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b32:	f7ff f8e5 	bl	8001d00 <HAL_GetTick>
 8002b36:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8002b38:	e008      	b.n	8002b4c <HAL_RCC_OscConfig+0x98>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 8002b3a:	f7ff f8e1 	bl	8001d00 <HAL_GetTick>
 8002b3e:	4602      	mov	r2, r0
 8002b40:	697b      	ldr	r3, [r7, #20]
 8002b42:	1ad3      	subs	r3, r2, r3
 8002b44:	2b02      	cmp	r3, #2
 8002b46:	d901      	bls.n	8002b4c <HAL_RCC_OscConfig+0x98>
          {
            return HAL_TIMEOUT;
 8002b48:	2303      	movs	r3, #3
 8002b4a:	e3e5      	b.n	8003318 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8002b4c:	4b73      	ldr	r3, [pc, #460]	@ (8002d1c <HAL_RCC_OscConfig+0x268>)
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d0f0      	beq.n	8002b3a <HAL_RCC_OscConfig+0x86>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 8002b58:	4b70      	ldr	r3, [pc, #448]	@ (8002d1c <HAL_RCC_OscConfig+0x268>)
 8002b5a:	699b      	ldr	r3, [r3, #24]
 8002b5c:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	6a1b      	ldr	r3, [r3, #32]
 8002b64:	041b      	lsls	r3, r3, #16
 8002b66:	496d      	ldr	r1, [pc, #436]	@ (8002d1c <HAL_RCC_OscConfig+0x268>)
 8002b68:	4313      	orrs	r3, r2
 8002b6a:	618b      	str	r3, [r1, #24]
 8002b6c:	e018      	b.n	8002ba0 <HAL_RCC_OscConfig+0xec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002b6e:	4b6b      	ldr	r3, [pc, #428]	@ (8002d1c <HAL_RCC_OscConfig+0x268>)
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	4a6a      	ldr	r2, [pc, #424]	@ (8002d1c <HAL_RCC_OscConfig+0x268>)
 8002b74:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002b78:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b7a:	f7ff f8c1 	bl	8001d00 <HAL_GetTick>
 8002b7e:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8002b80:	e008      	b.n	8002b94 <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 8002b82:	f7ff f8bd 	bl	8001d00 <HAL_GetTick>
 8002b86:	4602      	mov	r2, r0
 8002b88:	697b      	ldr	r3, [r7, #20]
 8002b8a:	1ad3      	subs	r3, r2, r3
 8002b8c:	2b02      	cmp	r3, #2
 8002b8e:	d901      	bls.n	8002b94 <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 8002b90:	2303      	movs	r3, #3
 8002b92:	e3c1      	b.n	8003318 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8002b94:	4b61      	ldr	r3, [pc, #388]	@ (8002d1c <HAL_RCC_OscConfig+0x268>)
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d1f0      	bne.n	8002b82 <HAL_RCC_OscConfig+0xce>
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f003 0301 	and.w	r3, r3, #1
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	f000 80a0 	beq.w	8002cee <HAL_RCC_OscConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pOscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8002bae:	69fb      	ldr	r3, [r7, #28]
 8002bb0:	2b10      	cmp	r3, #16
 8002bb2:	d005      	beq.n	8002bc0 <HAL_RCC_OscConfig+0x10c>
 8002bb4:	69fb      	ldr	r3, [r7, #28]
 8002bb6:	2b18      	cmp	r3, #24
 8002bb8:	d109      	bne.n	8002bce <HAL_RCC_OscConfig+0x11a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSE)))
 8002bba:	69bb      	ldr	r3, [r7, #24]
 8002bbc:	2b03      	cmp	r3, #3
 8002bbe:	d106      	bne.n	8002bce <HAL_RCC_OscConfig+0x11a>
    {
      if (pOscInitStruct->HSEState == RCC_HSE_OFF)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	685b      	ldr	r3, [r3, #4]
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	f040 8092 	bne.w	8002cee <HAL_RCC_OscConfig+0x23a>
      {
        return HAL_ERROR;
 8002bca:	2301      	movs	r3, #1
 8002bcc:	e3a4      	b.n	8003318 <HAL_RCC_OscConfig+0x864>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pOscInitStruct->HSEState);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	685b      	ldr	r3, [r3, #4]
 8002bd2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002bd6:	d106      	bne.n	8002be6 <HAL_RCC_OscConfig+0x132>
 8002bd8:	4b50      	ldr	r3, [pc, #320]	@ (8002d1c <HAL_RCC_OscConfig+0x268>)
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	4a4f      	ldr	r2, [pc, #316]	@ (8002d1c <HAL_RCC_OscConfig+0x268>)
 8002bde:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002be2:	6013      	str	r3, [r2, #0]
 8002be4:	e058      	b.n	8002c98 <HAL_RCC_OscConfig+0x1e4>
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	685b      	ldr	r3, [r3, #4]
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d112      	bne.n	8002c14 <HAL_RCC_OscConfig+0x160>
 8002bee:	4b4b      	ldr	r3, [pc, #300]	@ (8002d1c <HAL_RCC_OscConfig+0x268>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	4a4a      	ldr	r2, [pc, #296]	@ (8002d1c <HAL_RCC_OscConfig+0x268>)
 8002bf4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002bf8:	6013      	str	r3, [r2, #0]
 8002bfa:	4b48      	ldr	r3, [pc, #288]	@ (8002d1c <HAL_RCC_OscConfig+0x268>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	4a47      	ldr	r2, [pc, #284]	@ (8002d1c <HAL_RCC_OscConfig+0x268>)
 8002c00:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8002c04:	6013      	str	r3, [r2, #0]
 8002c06:	4b45      	ldr	r3, [pc, #276]	@ (8002d1c <HAL_RCC_OscConfig+0x268>)
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	4a44      	ldr	r2, [pc, #272]	@ (8002d1c <HAL_RCC_OscConfig+0x268>)
 8002c0c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002c10:	6013      	str	r3, [r2, #0]
 8002c12:	e041      	b.n	8002c98 <HAL_RCC_OscConfig+0x1e4>
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	685b      	ldr	r3, [r3, #4]
 8002c18:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002c1c:	d112      	bne.n	8002c44 <HAL_RCC_OscConfig+0x190>
 8002c1e:	4b3f      	ldr	r3, [pc, #252]	@ (8002d1c <HAL_RCC_OscConfig+0x268>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	4a3e      	ldr	r2, [pc, #248]	@ (8002d1c <HAL_RCC_OscConfig+0x268>)
 8002c24:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002c28:	6013      	str	r3, [r2, #0]
 8002c2a:	4b3c      	ldr	r3, [pc, #240]	@ (8002d1c <HAL_RCC_OscConfig+0x268>)
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	4a3b      	ldr	r2, [pc, #236]	@ (8002d1c <HAL_RCC_OscConfig+0x268>)
 8002c30:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8002c34:	6013      	str	r3, [r2, #0]
 8002c36:	4b39      	ldr	r3, [pc, #228]	@ (8002d1c <HAL_RCC_OscConfig+0x268>)
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	4a38      	ldr	r2, [pc, #224]	@ (8002d1c <HAL_RCC_OscConfig+0x268>)
 8002c3c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c40:	6013      	str	r3, [r2, #0]
 8002c42:	e029      	b.n	8002c98 <HAL_RCC_OscConfig+0x1e4>
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	685b      	ldr	r3, [r3, #4]
 8002c48:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 8002c4c:	d112      	bne.n	8002c74 <HAL_RCC_OscConfig+0x1c0>
 8002c4e:	4b33      	ldr	r3, [pc, #204]	@ (8002d1c <HAL_RCC_OscConfig+0x268>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	4a32      	ldr	r2, [pc, #200]	@ (8002d1c <HAL_RCC_OscConfig+0x268>)
 8002c54:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002c58:	6013      	str	r3, [r2, #0]
 8002c5a:	4b30      	ldr	r3, [pc, #192]	@ (8002d1c <HAL_RCC_OscConfig+0x268>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	4a2f      	ldr	r2, [pc, #188]	@ (8002d1c <HAL_RCC_OscConfig+0x268>)
 8002c60:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002c64:	6013      	str	r3, [r2, #0]
 8002c66:	4b2d      	ldr	r3, [pc, #180]	@ (8002d1c <HAL_RCC_OscConfig+0x268>)
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	4a2c      	ldr	r2, [pc, #176]	@ (8002d1c <HAL_RCC_OscConfig+0x268>)
 8002c6c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c70:	6013      	str	r3, [r2, #0]
 8002c72:	e011      	b.n	8002c98 <HAL_RCC_OscConfig+0x1e4>
 8002c74:	4b29      	ldr	r3, [pc, #164]	@ (8002d1c <HAL_RCC_OscConfig+0x268>)
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	4a28      	ldr	r2, [pc, #160]	@ (8002d1c <HAL_RCC_OscConfig+0x268>)
 8002c7a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002c7e:	6013      	str	r3, [r2, #0]
 8002c80:	4b26      	ldr	r3, [pc, #152]	@ (8002d1c <HAL_RCC_OscConfig+0x268>)
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	4a25      	ldr	r2, [pc, #148]	@ (8002d1c <HAL_RCC_OscConfig+0x268>)
 8002c86:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002c8a:	6013      	str	r3, [r2, #0]
 8002c8c:	4b23      	ldr	r3, [pc, #140]	@ (8002d1c <HAL_RCC_OscConfig+0x268>)
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	4a22      	ldr	r2, [pc, #136]	@ (8002d1c <HAL_RCC_OscConfig+0x268>)
 8002c92:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8002c96:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pOscInitStruct->HSEState != RCC_HSE_OFF)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	685b      	ldr	r3, [r3, #4]
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d013      	beq.n	8002cc8 <HAL_RCC_OscConfig+0x214>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ca0:	f7ff f82e 	bl	8001d00 <HAL_GetTick>
 8002ca4:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002ca6:	e008      	b.n	8002cba <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8002ca8:	f7ff f82a 	bl	8001d00 <HAL_GetTick>
 8002cac:	4602      	mov	r2, r0
 8002cae:	697b      	ldr	r3, [r7, #20]
 8002cb0:	1ad3      	subs	r3, r2, r3
 8002cb2:	2b64      	cmp	r3, #100	@ 0x64
 8002cb4:	d901      	bls.n	8002cba <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002cb6:	2303      	movs	r3, #3
 8002cb8:	e32e      	b.n	8003318 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002cba:	4b18      	ldr	r3, [pc, #96]	@ (8002d1c <HAL_RCC_OscConfig+0x268>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d0f0      	beq.n	8002ca8 <HAL_RCC_OscConfig+0x1f4>
 8002cc6:	e012      	b.n	8002cee <HAL_RCC_OscConfig+0x23a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cc8:	f7ff f81a 	bl	8001d00 <HAL_GetTick>
 8002ccc:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002cce:	e008      	b.n	8002ce2 <HAL_RCC_OscConfig+0x22e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8002cd0:	f7ff f816 	bl	8001d00 <HAL_GetTick>
 8002cd4:	4602      	mov	r2, r0
 8002cd6:	697b      	ldr	r3, [r7, #20]
 8002cd8:	1ad3      	subs	r3, r2, r3
 8002cda:	2b64      	cmp	r3, #100	@ 0x64
 8002cdc:	d901      	bls.n	8002ce2 <HAL_RCC_OscConfig+0x22e>
          {
            return HAL_TIMEOUT;
 8002cde:	2303      	movs	r3, #3
 8002ce0:	e31a      	b.n	8003318 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002ce2:	4b0e      	ldr	r3, [pc, #56]	@ (8002d1c <HAL_RCC_OscConfig+0x268>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d1f0      	bne.n	8002cd0 <HAL_RCC_OscConfig+0x21c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f003 0302 	and.w	r3, r3, #2
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	f000 809a 	beq.w	8002e30 <HAL_RCC_OscConfig+0x37c>
    assert_param(IS_RCC_HSI(pOscInitStruct->HSIState));
    assert_param(IS_RCC_HSIDIV(pOscInitStruct->HSIDiv));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pOscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8002cfc:	69fb      	ldr	r3, [r7, #28]
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d005      	beq.n	8002d0e <HAL_RCC_OscConfig+0x25a>
 8002d02:	69fb      	ldr	r3, [r7, #28]
 8002d04:	2b18      	cmp	r3, #24
 8002d06:	d149      	bne.n	8002d9c <HAL_RCC_OscConfig+0x2e8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSI)))
 8002d08:	69bb      	ldr	r3, [r7, #24]
 8002d0a:	2b01      	cmp	r3, #1
 8002d0c:	d146      	bne.n	8002d9c <HAL_RCC_OscConfig+0x2e8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	68db      	ldr	r3, [r3, #12]
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d104      	bne.n	8002d20 <HAL_RCC_OscConfig+0x26c>
      {
        return HAL_ERROR;
 8002d16:	2301      	movs	r3, #1
 8002d18:	e2fe      	b.n	8003318 <HAL_RCC_OscConfig+0x864>
 8002d1a:	bf00      	nop
 8002d1c:	44020c00 	.word	0x44020c00
      /* Otherwise, HSI calibration and division may be allowed */
      else
      {

        /* HSI division is allowed if HSI is used as system clock */
        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002d20:	69fb      	ldr	r3, [r7, #28]
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d11c      	bne.n	8002d60 <HAL_RCC_OscConfig+0x2ac>
        {
          if (__HAL_RCC_GET_HSI_DIVIDER() != (pOscInitStruct->HSIDiv))
 8002d26:	4b9a      	ldr	r3, [pc, #616]	@ (8002f90 <HAL_RCC_OscConfig+0x4dc>)
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f003 0218 	and.w	r2, r3, #24
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	691b      	ldr	r3, [r3, #16]
 8002d32:	429a      	cmp	r2, r3
 8002d34:	d014      	beq.n	8002d60 <HAL_RCC_OscConfig+0x2ac>
          {
            /* Adjust the HSI division factor */
            __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 8002d36:	4b96      	ldr	r3, [pc, #600]	@ (8002f90 <HAL_RCC_OscConfig+0x4dc>)
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f023 0218 	bic.w	r2, r3, #24
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	691b      	ldr	r3, [r3, #16]
 8002d42:	4993      	ldr	r1, [pc, #588]	@ (8002f90 <HAL_RCC_OscConfig+0x4dc>)
 8002d44:	4313      	orrs	r3, r2
 8002d46:	600b      	str	r3, [r1, #0]

            /* Update the SystemCoreClock global variable with new HSI value  */
            (void) HAL_RCC_GetHCLKFreq();
 8002d48:	f000 fdd0 	bl	80038ec <HAL_RCC_GetHCLKFreq>

            /* Configure the source of time base considering new system clocks settings*/
            if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002d4c:	4b91      	ldr	r3, [pc, #580]	@ (8002f94 <HAL_RCC_OscConfig+0x4e0>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	4618      	mov	r0, r3
 8002d52:	f7fe ff4b 	bl	8001bec <HAL_InitTick>
 8002d56:	4603      	mov	r3, r0
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d001      	beq.n	8002d60 <HAL_RCC_OscConfig+0x2ac>
            {
              return HAL_ERROR;
 8002d5c:	2301      	movs	r3, #1
 8002d5e:	e2db      	b.n	8003318 <HAL_RCC_OscConfig+0x864>
            }
          }
        }

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d60:	f7fe ffce 	bl	8001d00 <HAL_GetTick>
 8002d64:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002d66:	e008      	b.n	8002d7a <HAL_RCC_OscConfig+0x2c6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8002d68:	f7fe ffca 	bl	8001d00 <HAL_GetTick>
 8002d6c:	4602      	mov	r2, r0
 8002d6e:	697b      	ldr	r3, [r7, #20]
 8002d70:	1ad3      	subs	r3, r2, r3
 8002d72:	2b02      	cmp	r3, #2
 8002d74:	d901      	bls.n	8002d7a <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 8002d76:	2303      	movs	r3, #3
 8002d78:	e2ce      	b.n	8003318 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002d7a:	4b85      	ldr	r3, [pc, #532]	@ (8002f90 <HAL_RCC_OscConfig+0x4dc>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f003 0302 	and.w	r3, r3, #2
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d0f0      	beq.n	8002d68 <HAL_RCC_OscConfig+0x2b4>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 8002d86:	4b82      	ldr	r3, [pc, #520]	@ (8002f90 <HAL_RCC_OscConfig+0x4dc>)
 8002d88:	691b      	ldr	r3, [r3, #16]
 8002d8a:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	695b      	ldr	r3, [r3, #20]
 8002d92:	041b      	lsls	r3, r3, #16
 8002d94:	497e      	ldr	r1, [pc, #504]	@ (8002f90 <HAL_RCC_OscConfig+0x4dc>)
 8002d96:	4313      	orrs	r3, r2
 8002d98:	610b      	str	r3, [r1, #16]
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 8002d9a:	e049      	b.n	8002e30 <HAL_RCC_OscConfig+0x37c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pOscInitStruct->HSIState != RCC_HSI_OFF)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	68db      	ldr	r3, [r3, #12]
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d02c      	beq.n	8002dfe <HAL_RCC_OscConfig+0x34a>
      {
        /* Adjust the HSI division factor */
        __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 8002da4:	4b7a      	ldr	r3, [pc, #488]	@ (8002f90 <HAL_RCC_OscConfig+0x4dc>)
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f023 0218 	bic.w	r2, r3, #24
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	691b      	ldr	r3, [r3, #16]
 8002db0:	4977      	ldr	r1, [pc, #476]	@ (8002f90 <HAL_RCC_OscConfig+0x4dc>)
 8002db2:	4313      	orrs	r3, r2
 8002db4:	600b      	str	r3, [r1, #0]

        /* Enable the HSI oscillator */
        __HAL_RCC_HSI_ENABLE();
 8002db6:	4b76      	ldr	r3, [pc, #472]	@ (8002f90 <HAL_RCC_OscConfig+0x4dc>)
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	4a75      	ldr	r2, [pc, #468]	@ (8002f90 <HAL_RCC_OscConfig+0x4dc>)
 8002dbc:	f043 0301 	orr.w	r3, r3, #1
 8002dc0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dc2:	f7fe ff9d 	bl	8001d00 <HAL_GetTick>
 8002dc6:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002dc8:	e008      	b.n	8002ddc <HAL_RCC_OscConfig+0x328>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8002dca:	f7fe ff99 	bl	8001d00 <HAL_GetTick>
 8002dce:	4602      	mov	r2, r0
 8002dd0:	697b      	ldr	r3, [r7, #20]
 8002dd2:	1ad3      	subs	r3, r2, r3
 8002dd4:	2b02      	cmp	r3, #2
 8002dd6:	d901      	bls.n	8002ddc <HAL_RCC_OscConfig+0x328>
          {
            return HAL_TIMEOUT;
 8002dd8:	2303      	movs	r3, #3
 8002dda:	e29d      	b.n	8003318 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002ddc:	4b6c      	ldr	r3, [pc, #432]	@ (8002f90 <HAL_RCC_OscConfig+0x4dc>)
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f003 0302 	and.w	r3, r3, #2
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d0f0      	beq.n	8002dca <HAL_RCC_OscConfig+0x316>
          }
        }

        /* Adjust the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 8002de8:	4b69      	ldr	r3, [pc, #420]	@ (8002f90 <HAL_RCC_OscConfig+0x4dc>)
 8002dea:	691b      	ldr	r3, [r3, #16]
 8002dec:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	695b      	ldr	r3, [r3, #20]
 8002df4:	041b      	lsls	r3, r3, #16
 8002df6:	4966      	ldr	r1, [pc, #408]	@ (8002f90 <HAL_RCC_OscConfig+0x4dc>)
 8002df8:	4313      	orrs	r3, r2
 8002dfa:	610b      	str	r3, [r1, #16]
 8002dfc:	e018      	b.n	8002e30 <HAL_RCC_OscConfig+0x37c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002dfe:	4b64      	ldr	r3, [pc, #400]	@ (8002f90 <HAL_RCC_OscConfig+0x4dc>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	4a63      	ldr	r2, [pc, #396]	@ (8002f90 <HAL_RCC_OscConfig+0x4dc>)
 8002e04:	f023 0301 	bic.w	r3, r3, #1
 8002e08:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e0a:	f7fe ff79 	bl	8001d00 <HAL_GetTick>
 8002e0e:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002e10:	e008      	b.n	8002e24 <HAL_RCC_OscConfig+0x370>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8002e12:	f7fe ff75 	bl	8001d00 <HAL_GetTick>
 8002e16:	4602      	mov	r2, r0
 8002e18:	697b      	ldr	r3, [r7, #20]
 8002e1a:	1ad3      	subs	r3, r2, r3
 8002e1c:	2b02      	cmp	r3, #2
 8002e1e:	d901      	bls.n	8002e24 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8002e20:	2303      	movs	r3, #3
 8002e22:	e279      	b.n	8003318 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002e24:	4b5a      	ldr	r3, [pc, #360]	@ (8002f90 <HAL_RCC_OscConfig+0x4dc>)
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f003 0302 	and.w	r3, r3, #2
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d1f0      	bne.n	8002e12 <HAL_RCC_OscConfig+0x35e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f003 0308 	and.w	r3, r3, #8
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d03c      	beq.n	8002eb6 <HAL_RCC_OscConfig+0x402>
    assert_param(IS_RCC_LSI(pOscInitStruct->LSIState));

    /* Update LSI configuration in Backup Domain control register    */

    /* Check the LSI State */
    if (pOscInitStruct->LSIState != RCC_LSI_OFF)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	699b      	ldr	r3, [r3, #24]
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d01c      	beq.n	8002e7e <HAL_RCC_OscConfig+0x3ca>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e44:	4b52      	ldr	r3, [pc, #328]	@ (8002f90 <HAL_RCC_OscConfig+0x4dc>)
 8002e46:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002e4a:	4a51      	ldr	r2, [pc, #324]	@ (8002f90 <HAL_RCC_OscConfig+0x4dc>)
 8002e4c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002e50:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e54:	f7fe ff54 	bl	8001d00 <HAL_GetTick>
 8002e58:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8002e5a:	e008      	b.n	8002e6e <HAL_RCC_OscConfig+0x3ba>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8002e5c:	f7fe ff50 	bl	8001d00 <HAL_GetTick>
 8002e60:	4602      	mov	r2, r0
 8002e62:	697b      	ldr	r3, [r7, #20]
 8002e64:	1ad3      	subs	r3, r2, r3
 8002e66:	2b02      	cmp	r3, #2
 8002e68:	d901      	bls.n	8002e6e <HAL_RCC_OscConfig+0x3ba>
        {
          return HAL_TIMEOUT;
 8002e6a:	2303      	movs	r3, #3
 8002e6c:	e254      	b.n	8003318 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8002e6e:	4b48      	ldr	r3, [pc, #288]	@ (8002f90 <HAL_RCC_OscConfig+0x4dc>)
 8002e70:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002e74:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d0ef      	beq.n	8002e5c <HAL_RCC_OscConfig+0x3a8>
 8002e7c:	e01b      	b.n	8002eb6 <HAL_RCC_OscConfig+0x402>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e7e:	4b44      	ldr	r3, [pc, #272]	@ (8002f90 <HAL_RCC_OscConfig+0x4dc>)
 8002e80:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002e84:	4a42      	ldr	r2, [pc, #264]	@ (8002f90 <HAL_RCC_OscConfig+0x4dc>)
 8002e86:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002e8a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e8e:	f7fe ff37 	bl	8001d00 <HAL_GetTick>
 8002e92:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8002e94:	e008      	b.n	8002ea8 <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8002e96:	f7fe ff33 	bl	8001d00 <HAL_GetTick>
 8002e9a:	4602      	mov	r2, r0
 8002e9c:	697b      	ldr	r3, [r7, #20]
 8002e9e:	1ad3      	subs	r3, r2, r3
 8002ea0:	2b02      	cmp	r3, #2
 8002ea2:	d901      	bls.n	8002ea8 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8002ea4:	2303      	movs	r3, #3
 8002ea6:	e237      	b.n	8003318 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8002ea8:	4b39      	ldr	r3, [pc, #228]	@ (8002f90 <HAL_RCC_OscConfig+0x4dc>)
 8002eaa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002eae:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d1ef      	bne.n	8002e96 <HAL_RCC_OscConfig+0x3e2>
      }
    }

  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f003 0304 	and.w	r3, r3, #4
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	f000 80d2 	beq.w	8003068 <HAL_RCC_OscConfig+0x5b4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pOscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain */
    if (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8002ec4:	4b34      	ldr	r3, [pc, #208]	@ (8002f98 <HAL_RCC_OscConfig+0x4e4>)
 8002ec6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ec8:	f003 0301 	and.w	r3, r3, #1
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d118      	bne.n	8002f02 <HAL_RCC_OscConfig+0x44e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 8002ed0:	4b31      	ldr	r3, [pc, #196]	@ (8002f98 <HAL_RCC_OscConfig+0x4e4>)
 8002ed2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ed4:	4a30      	ldr	r2, [pc, #192]	@ (8002f98 <HAL_RCC_OscConfig+0x4e4>)
 8002ed6:	f043 0301 	orr.w	r3, r3, #1
 8002eda:	6253      	str	r3, [r2, #36]	@ 0x24

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002edc:	f7fe ff10 	bl	8001d00 <HAL_GetTick>
 8002ee0:	6178      	str	r0, [r7, #20]

      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8002ee2:	e008      	b.n	8002ef6 <HAL_RCC_OscConfig+0x442>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ee4:	f7fe ff0c 	bl	8001d00 <HAL_GetTick>
 8002ee8:	4602      	mov	r2, r0
 8002eea:	697b      	ldr	r3, [r7, #20]
 8002eec:	1ad3      	subs	r3, r2, r3
 8002eee:	2b02      	cmp	r3, #2
 8002ef0:	d901      	bls.n	8002ef6 <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 8002ef2:	2303      	movs	r3, #3
 8002ef4:	e210      	b.n	8003318 <HAL_RCC_OscConfig+0x864>
      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8002ef6:	4b28      	ldr	r3, [pc, #160]	@ (8002f98 <HAL_RCC_OscConfig+0x4e4>)
 8002ef8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002efa:	f003 0301 	and.w	r3, r3, #1
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d0f0      	beq.n	8002ee4 <HAL_RCC_OscConfig+0x430>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(pOscInitStruct->LSEState);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	689b      	ldr	r3, [r3, #8]
 8002f06:	2b01      	cmp	r3, #1
 8002f08:	d108      	bne.n	8002f1c <HAL_RCC_OscConfig+0x468>
 8002f0a:	4b21      	ldr	r3, [pc, #132]	@ (8002f90 <HAL_RCC_OscConfig+0x4dc>)
 8002f0c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002f10:	4a1f      	ldr	r2, [pc, #124]	@ (8002f90 <HAL_RCC_OscConfig+0x4dc>)
 8002f12:	f043 0301 	orr.w	r3, r3, #1
 8002f16:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002f1a:	e074      	b.n	8003006 <HAL_RCC_OscConfig+0x552>
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	689b      	ldr	r3, [r3, #8]
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d118      	bne.n	8002f56 <HAL_RCC_OscConfig+0x4a2>
 8002f24:	4b1a      	ldr	r3, [pc, #104]	@ (8002f90 <HAL_RCC_OscConfig+0x4dc>)
 8002f26:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002f2a:	4a19      	ldr	r2, [pc, #100]	@ (8002f90 <HAL_RCC_OscConfig+0x4dc>)
 8002f2c:	f023 0301 	bic.w	r3, r3, #1
 8002f30:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002f34:	4b16      	ldr	r3, [pc, #88]	@ (8002f90 <HAL_RCC_OscConfig+0x4dc>)
 8002f36:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002f3a:	4a15      	ldr	r2, [pc, #84]	@ (8002f90 <HAL_RCC_OscConfig+0x4dc>)
 8002f3c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002f40:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002f44:	4b12      	ldr	r3, [pc, #72]	@ (8002f90 <HAL_RCC_OscConfig+0x4dc>)
 8002f46:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002f4a:	4a11      	ldr	r2, [pc, #68]	@ (8002f90 <HAL_RCC_OscConfig+0x4dc>)
 8002f4c:	f023 0304 	bic.w	r3, r3, #4
 8002f50:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002f54:	e057      	b.n	8003006 <HAL_RCC_OscConfig+0x552>
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	689b      	ldr	r3, [r3, #8]
 8002f5a:	2b05      	cmp	r3, #5
 8002f5c:	d11e      	bne.n	8002f9c <HAL_RCC_OscConfig+0x4e8>
 8002f5e:	4b0c      	ldr	r3, [pc, #48]	@ (8002f90 <HAL_RCC_OscConfig+0x4dc>)
 8002f60:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002f64:	4a0a      	ldr	r2, [pc, #40]	@ (8002f90 <HAL_RCC_OscConfig+0x4dc>)
 8002f66:	f043 0304 	orr.w	r3, r3, #4
 8002f6a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002f6e:	4b08      	ldr	r3, [pc, #32]	@ (8002f90 <HAL_RCC_OscConfig+0x4dc>)
 8002f70:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002f74:	4a06      	ldr	r2, [pc, #24]	@ (8002f90 <HAL_RCC_OscConfig+0x4dc>)
 8002f76:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002f7a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002f7e:	4b04      	ldr	r3, [pc, #16]	@ (8002f90 <HAL_RCC_OscConfig+0x4dc>)
 8002f80:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002f84:	4a02      	ldr	r2, [pc, #8]	@ (8002f90 <HAL_RCC_OscConfig+0x4dc>)
 8002f86:	f043 0301 	orr.w	r3, r3, #1
 8002f8a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002f8e:	e03a      	b.n	8003006 <HAL_RCC_OscConfig+0x552>
 8002f90:	44020c00 	.word	0x44020c00
 8002f94:	20000004 	.word	0x20000004
 8002f98:	44020800 	.word	0x44020800
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	689b      	ldr	r3, [r3, #8]
 8002fa0:	2b85      	cmp	r3, #133	@ 0x85
 8002fa2:	d118      	bne.n	8002fd6 <HAL_RCC_OscConfig+0x522>
 8002fa4:	4ba2      	ldr	r3, [pc, #648]	@ (8003230 <HAL_RCC_OscConfig+0x77c>)
 8002fa6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002faa:	4aa1      	ldr	r2, [pc, #644]	@ (8003230 <HAL_RCC_OscConfig+0x77c>)
 8002fac:	f043 0304 	orr.w	r3, r3, #4
 8002fb0:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002fb4:	4b9e      	ldr	r3, [pc, #632]	@ (8003230 <HAL_RCC_OscConfig+0x77c>)
 8002fb6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002fba:	4a9d      	ldr	r2, [pc, #628]	@ (8003230 <HAL_RCC_OscConfig+0x77c>)
 8002fbc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002fc0:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002fc4:	4b9a      	ldr	r3, [pc, #616]	@ (8003230 <HAL_RCC_OscConfig+0x77c>)
 8002fc6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002fca:	4a99      	ldr	r2, [pc, #612]	@ (8003230 <HAL_RCC_OscConfig+0x77c>)
 8002fcc:	f043 0301 	orr.w	r3, r3, #1
 8002fd0:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002fd4:	e017      	b.n	8003006 <HAL_RCC_OscConfig+0x552>
 8002fd6:	4b96      	ldr	r3, [pc, #600]	@ (8003230 <HAL_RCC_OscConfig+0x77c>)
 8002fd8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002fdc:	4a94      	ldr	r2, [pc, #592]	@ (8003230 <HAL_RCC_OscConfig+0x77c>)
 8002fde:	f023 0301 	bic.w	r3, r3, #1
 8002fe2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002fe6:	4b92      	ldr	r3, [pc, #584]	@ (8003230 <HAL_RCC_OscConfig+0x77c>)
 8002fe8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002fec:	4a90      	ldr	r2, [pc, #576]	@ (8003230 <HAL_RCC_OscConfig+0x77c>)
 8002fee:	f023 0304 	bic.w	r3, r3, #4
 8002ff2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002ff6:	4b8e      	ldr	r3, [pc, #568]	@ (8003230 <HAL_RCC_OscConfig+0x77c>)
 8002ff8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002ffc:	4a8c      	ldr	r2, [pc, #560]	@ (8003230 <HAL_RCC_OscConfig+0x77c>)
 8002ffe:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003002:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

    /* Check the LSE State */
    if (pOscInitStruct->LSEState != RCC_LSE_OFF)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	689b      	ldr	r3, [r3, #8]
 800300a:	2b00      	cmp	r3, #0
 800300c:	d016      	beq.n	800303c <HAL_RCC_OscConfig+0x588>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800300e:	f7fe fe77 	bl	8001d00 <HAL_GetTick>
 8003012:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003014:	e00a      	b.n	800302c <HAL_RCC_OscConfig+0x578>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003016:	f7fe fe73 	bl	8001d00 <HAL_GetTick>
 800301a:	4602      	mov	r2, r0
 800301c:	697b      	ldr	r3, [r7, #20]
 800301e:	1ad3      	subs	r3, r2, r3
 8003020:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003024:	4293      	cmp	r3, r2
 8003026:	d901      	bls.n	800302c <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 8003028:	2303      	movs	r3, #3
 800302a:	e175      	b.n	8003318 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800302c:	4b80      	ldr	r3, [pc, #512]	@ (8003230 <HAL_RCC_OscConfig+0x77c>)
 800302e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003032:	f003 0302 	and.w	r3, r3, #2
 8003036:	2b00      	cmp	r3, #0
 8003038:	d0ed      	beq.n	8003016 <HAL_RCC_OscConfig+0x562>
 800303a:	e015      	b.n	8003068 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800303c:	f7fe fe60 	bl	8001d00 <HAL_GetTick>
 8003040:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003042:	e00a      	b.n	800305a <HAL_RCC_OscConfig+0x5a6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003044:	f7fe fe5c 	bl	8001d00 <HAL_GetTick>
 8003048:	4602      	mov	r2, r0
 800304a:	697b      	ldr	r3, [r7, #20]
 800304c:	1ad3      	subs	r3, r2, r3
 800304e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003052:	4293      	cmp	r3, r2
 8003054:	d901      	bls.n	800305a <HAL_RCC_OscConfig+0x5a6>
        {
          return HAL_TIMEOUT;
 8003056:	2303      	movs	r3, #3
 8003058:	e15e      	b.n	8003318 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800305a:	4b75      	ldr	r3, [pc, #468]	@ (8003230 <HAL_RCC_OscConfig+0x77c>)
 800305c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003060:	f003 0302 	and.w	r3, r3, #2
 8003064:	2b00      	cmp	r3, #0
 8003066:	d1ed      	bne.n	8003044 <HAL_RCC_OscConfig+0x590>
      }
    }

  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f003 0320 	and.w	r3, r3, #32
 8003070:	2b00      	cmp	r3, #0
 8003072:	d036      	beq.n	80030e2 <HAL_RCC_OscConfig+0x62e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pOscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pOscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003078:	2b00      	cmp	r3, #0
 800307a:	d019      	beq.n	80030b0 <HAL_RCC_OscConfig+0x5fc>
    {
      /* Enable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800307c:	4b6c      	ldr	r3, [pc, #432]	@ (8003230 <HAL_RCC_OscConfig+0x77c>)
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	4a6b      	ldr	r2, [pc, #428]	@ (8003230 <HAL_RCC_OscConfig+0x77c>)
 8003082:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003086:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003088:	f7fe fe3a 	bl	8001d00 <HAL_GetTick>
 800308c:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800308e:	e008      	b.n	80030a2 <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 8003090:	f7fe fe36 	bl	8001d00 <HAL_GetTick>
 8003094:	4602      	mov	r2, r0
 8003096:	697b      	ldr	r3, [r7, #20]
 8003098:	1ad3      	subs	r3, r2, r3
 800309a:	2b02      	cmp	r3, #2
 800309c:	d901      	bls.n	80030a2 <HAL_RCC_OscConfig+0x5ee>
        {
          return HAL_TIMEOUT;
 800309e:	2303      	movs	r3, #3
 80030a0:	e13a      	b.n	8003318 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80030a2:	4b63      	ldr	r3, [pc, #396]	@ (8003230 <HAL_RCC_OscConfig+0x77c>)
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d0f0      	beq.n	8003090 <HAL_RCC_OscConfig+0x5dc>
 80030ae:	e018      	b.n	80030e2 <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80030b0:	4b5f      	ldr	r3, [pc, #380]	@ (8003230 <HAL_RCC_OscConfig+0x77c>)
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	4a5e      	ldr	r2, [pc, #376]	@ (8003230 <HAL_RCC_OscConfig+0x77c>)
 80030b6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80030ba:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030bc:	f7fe fe20 	bl	8001d00 <HAL_GetTick>
 80030c0:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80030c2:	e008      	b.n	80030d6 <HAL_RCC_OscConfig+0x622>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 80030c4:	f7fe fe1c 	bl	8001d00 <HAL_GetTick>
 80030c8:	4602      	mov	r2, r0
 80030ca:	697b      	ldr	r3, [r7, #20]
 80030cc:	1ad3      	subs	r3, r2, r3
 80030ce:	2b02      	cmp	r3, #2
 80030d0:	d901      	bls.n	80030d6 <HAL_RCC_OscConfig+0x622>
        {
          return HAL_TIMEOUT;
 80030d2:	2303      	movs	r3, #3
 80030d4:	e120      	b.n	8003318 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80030d6:	4b56      	ldr	r3, [pc, #344]	@ (8003230 <HAL_RCC_OscConfig+0x77c>)
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d1f0      	bne.n	80030c4 <HAL_RCC_OscConfig+0x610>

  /*-------------------------------- PLL1 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pOscInitStruct->PLL.PLLState));

  if ((pOscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	f000 8115 	beq.w	8003316 <HAL_RCC_OscConfig+0x862>
  {
    /* Check if the PLL1 is used as system clock or not */
    if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80030ec:	69fb      	ldr	r3, [r7, #28]
 80030ee:	2b18      	cmp	r3, #24
 80030f0:	f000 80af 	beq.w	8003252 <HAL_RCC_OscConfig+0x79e>
    {
      if ((pOscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030f8:	2b02      	cmp	r3, #2
 80030fa:	f040 8086 	bne.w	800320a <HAL_RCC_OscConfig+0x756>
        assert_param(IS_RCC_PLL1_DIVP_VALUE(pOscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLL1_DIVQ_VALUE(pOscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLL1_DIVR_VALUE(pOscInitStruct->PLL.PLLR));

        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 80030fe:	4b4c      	ldr	r3, [pc, #304]	@ (8003230 <HAL_RCC_OscConfig+0x77c>)
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	4a4b      	ldr	r2, [pc, #300]	@ (8003230 <HAL_RCC_OscConfig+0x77c>)
 8003104:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003108:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800310a:	f7fe fdf9 	bl	8001d00 <HAL_GetTick>
 800310e:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8003110:	e008      	b.n	8003124 <HAL_RCC_OscConfig+0x670>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8003112:	f7fe fdf5 	bl	8001d00 <HAL_GetTick>
 8003116:	4602      	mov	r2, r0
 8003118:	697b      	ldr	r3, [r7, #20]
 800311a:	1ad3      	subs	r3, r2, r3
 800311c:	2b02      	cmp	r3, #2
 800311e:	d901      	bls.n	8003124 <HAL_RCC_OscConfig+0x670>
          {
            return HAL_TIMEOUT;
 8003120:	2303      	movs	r3, #3
 8003122:	e0f9      	b.n	8003318 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8003124:	4b42      	ldr	r3, [pc, #264]	@ (8003230 <HAL_RCC_OscConfig+0x77c>)
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800312c:	2b00      	cmp	r3, #0
 800312e:	d1f0      	bne.n	8003112 <HAL_RCC_OscConfig+0x65e>
          }
        }

        /* Configure the PLL1 clock source, multiplication and division factors. */
        __HAL_RCC_PLL1_CONFIG(pOscInitStruct->PLL.PLLSource,
 8003130:	4b3f      	ldr	r3, [pc, #252]	@ (8003230 <HAL_RCC_OscConfig+0x77c>)
 8003132:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003134:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003138:	f023 0303 	bic.w	r3, r3, #3
 800313c:	687a      	ldr	r2, [r7, #4]
 800313e:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8003140:	687a      	ldr	r2, [r7, #4]
 8003142:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003144:	0212      	lsls	r2, r2, #8
 8003146:	430a      	orrs	r2, r1
 8003148:	4939      	ldr	r1, [pc, #228]	@ (8003230 <HAL_RCC_OscConfig+0x77c>)
 800314a:	4313      	orrs	r3, r2
 800314c:	628b      	str	r3, [r1, #40]	@ 0x28
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003152:	3b01      	subs	r3, #1
 8003154:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800315c:	3b01      	subs	r3, #1
 800315e:	025b      	lsls	r3, r3, #9
 8003160:	b29b      	uxth	r3, r3
 8003162:	431a      	orrs	r2, r3
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003168:	3b01      	subs	r3, #1
 800316a:	041b      	lsls	r3, r3, #16
 800316c:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8003170:	431a      	orrs	r2, r3
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003176:	3b01      	subs	r3, #1
 8003178:	061b      	lsls	r3, r3, #24
 800317a:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800317e:	492c      	ldr	r1, [pc, #176]	@ (8003230 <HAL_RCC_OscConfig+0x77c>)
 8003180:	4313      	orrs	r3, r2
 8003182:	634b      	str	r3, [r1, #52]	@ 0x34
                              pOscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 8003184:	4b2a      	ldr	r3, [pc, #168]	@ (8003230 <HAL_RCC_OscConfig+0x77c>)
 8003186:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003188:	4a29      	ldr	r2, [pc, #164]	@ (8003230 <HAL_RCC_OscConfig+0x77c>)
 800318a:	f023 0310 	bic.w	r3, r3, #16
 800318e:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003194:	4a26      	ldr	r2, [pc, #152]	@ (8003230 <HAL_RCC_OscConfig+0x77c>)
 8003196:	00db      	lsls	r3, r3, #3
 8003198:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 800319a:	4b25      	ldr	r3, [pc, #148]	@ (8003230 <HAL_RCC_OscConfig+0x77c>)
 800319c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800319e:	4a24      	ldr	r2, [pc, #144]	@ (8003230 <HAL_RCC_OscConfig+0x77c>)
 80031a0:	f043 0310 	orr.w	r3, r3, #16
 80031a4:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCIRGE_VALUE(pOscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL1_VCIRANGE(pOscInitStruct->PLL.PLLRGE) ;
 80031a6:	4b22      	ldr	r3, [pc, #136]	@ (8003230 <HAL_RCC_OscConfig+0x77c>)
 80031a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031aa:	f023 020c 	bic.w	r2, r3, #12
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031b2:	491f      	ldr	r1, [pc, #124]	@ (8003230 <HAL_RCC_OscConfig+0x77c>)
 80031b4:	4313      	orrs	r3, r2
 80031b6:	628b      	str	r3, [r1, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCORGE_VALUE(pOscInitStruct->PLL.PLLVCOSEL));

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL1_VCORANGE(pOscInitStruct->PLL.PLLVCOSEL) ;
 80031b8:	4b1d      	ldr	r3, [pc, #116]	@ (8003230 <HAL_RCC_OscConfig+0x77c>)
 80031ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031bc:	f023 0220 	bic.w	r2, r3, #32
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80031c4:	491a      	ldr	r1, [pc, #104]	@ (8003230 <HAL_RCC_OscConfig+0x77c>)
 80031c6:	4313      	orrs	r3, r2
 80031c8:	628b      	str	r3, [r1, #40]	@ 0x28

        /* Enable PLL1 System Clock output. */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVP);
 80031ca:	4b19      	ldr	r3, [pc, #100]	@ (8003230 <HAL_RCC_OscConfig+0x77c>)
 80031cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031ce:	4a18      	ldr	r2, [pc, #96]	@ (8003230 <HAL_RCC_OscConfig+0x77c>)
 80031d0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80031d4:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Enable the PLL1. */
        __HAL_RCC_PLL1_ENABLE();
 80031d6:	4b16      	ldr	r3, [pc, #88]	@ (8003230 <HAL_RCC_OscConfig+0x77c>)
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	4a15      	ldr	r2, [pc, #84]	@ (8003230 <HAL_RCC_OscConfig+0x77c>)
 80031dc:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80031e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031e2:	f7fe fd8d 	bl	8001d00 <HAL_GetTick>
 80031e6:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80031e8:	e008      	b.n	80031fc <HAL_RCC_OscConfig+0x748>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 80031ea:	f7fe fd89 	bl	8001d00 <HAL_GetTick>
 80031ee:	4602      	mov	r2, r0
 80031f0:	697b      	ldr	r3, [r7, #20]
 80031f2:	1ad3      	subs	r3, r2, r3
 80031f4:	2b02      	cmp	r3, #2
 80031f6:	d901      	bls.n	80031fc <HAL_RCC_OscConfig+0x748>
          {
            return HAL_TIMEOUT;
 80031f8:	2303      	movs	r3, #3
 80031fa:	e08d      	b.n	8003318 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80031fc:	4b0c      	ldr	r3, [pc, #48]	@ (8003230 <HAL_RCC_OscConfig+0x77c>)
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003204:	2b00      	cmp	r3, #0
 8003206:	d0f0      	beq.n	80031ea <HAL_RCC_OscConfig+0x736>
 8003208:	e085      	b.n	8003316 <HAL_RCC_OscConfig+0x862>
        }
      }
      else
      {
        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 800320a:	4b09      	ldr	r3, [pc, #36]	@ (8003230 <HAL_RCC_OscConfig+0x77c>)
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	4a08      	ldr	r2, [pc, #32]	@ (8003230 <HAL_RCC_OscConfig+0x77c>)
 8003210:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003214:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003216:	f7fe fd73 	bl	8001d00 <HAL_GetTick>
 800321a:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800321c:	e00a      	b.n	8003234 <HAL_RCC_OscConfig+0x780>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 800321e:	f7fe fd6f 	bl	8001d00 <HAL_GetTick>
 8003222:	4602      	mov	r2, r0
 8003224:	697b      	ldr	r3, [r7, #20]
 8003226:	1ad3      	subs	r3, r2, r3
 8003228:	2b02      	cmp	r3, #2
 800322a:	d903      	bls.n	8003234 <HAL_RCC_OscConfig+0x780>
          {
            return HAL_TIMEOUT;
 800322c:	2303      	movs	r3, #3
 800322e:	e073      	b.n	8003318 <HAL_RCC_OscConfig+0x864>
 8003230:	44020c00 	.word	0x44020c00
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8003234:	4b3a      	ldr	r3, [pc, #232]	@ (8003320 <HAL_RCC_OscConfig+0x86c>)
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800323c:	2b00      	cmp	r3, #0
 800323e:	d1ee      	bne.n	800321e <HAL_RCC_OscConfig+0x76a>
          }
        }

        /* Unselect PLL1 clock source and disable all PLL1 outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8003240:	4b37      	ldr	r3, [pc, #220]	@ (8003320 <HAL_RCC_OscConfig+0x86c>)
 8003242:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003244:	4a36      	ldr	r2, [pc, #216]	@ (8003320 <HAL_RCC_OscConfig+0x86c>)
 8003246:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 800324a:	f023 0303 	bic.w	r3, r3, #3
 800324e:	6293      	str	r3, [r2, #40]	@ 0x28
 8003250:	e061      	b.n	8003316 <HAL_RCC_OscConfig+0x862>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 8003252:	4b33      	ldr	r3, [pc, #204]	@ (8003320 <HAL_RCC_OscConfig+0x86c>)
 8003254:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003256:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003258:	4b31      	ldr	r3, [pc, #196]	@ (8003320 <HAL_RCC_OscConfig+0x86c>)
 800325a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800325c:	60fb      	str	r3, [r7, #12]
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003262:	2b01      	cmp	r3, #1
 8003264:	d031      	beq.n	80032ca <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 8003266:	693b      	ldr	r3, [r7, #16]
 8003268:	f003 0203 	and.w	r2, r3, #3
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003270:	429a      	cmp	r2, r3
 8003272:	d12a      	bne.n	80032ca <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8003274:	693b      	ldr	r3, [r7, #16]
 8003276:	0a1b      	lsrs	r3, r3, #8
 8003278:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 8003280:	429a      	cmp	r2, r3
 8003282:	d122      	bne.n	80032ca <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800328e:	3b01      	subs	r3, #1
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 8003290:	429a      	cmp	r2, r3
 8003292:	d11a      	bne.n	80032ca <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	0a5b      	lsrs	r3, r3, #9
 8003298:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032a0:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 80032a2:	429a      	cmp	r2, r3
 80032a4:	d111      	bne.n	80032ca <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	0c1b      	lsrs	r3, r3, #16
 80032aa:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032b2:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 80032b4:	429a      	cmp	r2, r3
 80032b6:	d108      	bne.n	80032ca <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	0e1b      	lsrs	r3, r3, #24
 80032bc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pOscInitStruct->PLL.PLLR - 1U)))
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032c4:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 80032c6:	429a      	cmp	r2, r3
 80032c8:	d001      	beq.n	80032ce <HAL_RCC_OscConfig+0x81a>
      {
        return HAL_ERROR;
 80032ca:	2301      	movs	r3, #1
 80032cc:	e024      	b.n	8003318 <HAL_RCC_OscConfig+0x864>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 80032ce:	4b14      	ldr	r3, [pc, #80]	@ (8003320 <HAL_RCC_OscConfig+0x86c>)
 80032d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032d2:	08db      	lsrs	r3, r3, #3
 80032d4:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pOscInitStruct->PLL.PLLFRACN))
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 80032dc:	429a      	cmp	r2, r3
 80032de:	d01a      	beq.n	8003316 <HAL_RCC_OscConfig+0x862>
      {
        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 80032e0:	4b0f      	ldr	r3, [pc, #60]	@ (8003320 <HAL_RCC_OscConfig+0x86c>)
 80032e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032e4:	4a0e      	ldr	r2, [pc, #56]	@ (8003320 <HAL_RCC_OscConfig+0x86c>)
 80032e6:	f023 0310 	bic.w	r3, r3, #16
 80032ea:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032ec:	f7fe fd08 	bl	8001d00 <HAL_GetTick>
 80032f0:	6178      	str	r0, [r7, #20]

        /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < RCC_PLL_FRAC_WAIT_VALUE)
 80032f2:	bf00      	nop
 80032f4:	f7fe fd04 	bl	8001d00 <HAL_GetTick>
 80032f8:	4602      	mov	r2, r0
 80032fa:	697b      	ldr	r3, [r7, #20]
 80032fc:	4293      	cmp	r3, r2
 80032fe:	d0f9      	beq.n	80032f4 <HAL_RCC_OscConfig+0x840>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003304:	4a06      	ldr	r2, [pc, #24]	@ (8003320 <HAL_RCC_OscConfig+0x86c>)
 8003306:	00db      	lsls	r3, r3, #3
 8003308:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 800330a:	4b05      	ldr	r3, [pc, #20]	@ (8003320 <HAL_RCC_OscConfig+0x86c>)
 800330c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800330e:	4a04      	ldr	r2, [pc, #16]	@ (8003320 <HAL_RCC_OscConfig+0x86c>)
 8003310:	f043 0310 	orr.w	r3, r3, #16
 8003314:	6293      	str	r3, [r2, #40]	@ 0x28
      }

    }
  }
  return HAL_OK;
 8003316:	2300      	movs	r3, #0
}
 8003318:	4618      	mov	r0, r3
 800331a:	3720      	adds	r7, #32
 800331c:	46bd      	mov	sp, r7
 800331e:	bd80      	pop	{r7, pc}
 8003320:	44020c00 	.word	0x44020c00

08003324 <HAL_RCC_ClockConfig>:
  *         currently used as system clock source.
  *
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *pClkInitStruct, uint32_t FLatency)
{
 8003324:	b580      	push	{r7, lr}
 8003326:	b084      	sub	sp, #16
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
 800332c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pClkInitStruct == NULL)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	2b00      	cmp	r3, #0
 8003332:	d101      	bne.n	8003338 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003334:	2301      	movs	r3, #1
 8003336:	e19e      	b.n	8003676 <HAL_RCC_ClockConfig+0x352>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003338:	4b83      	ldr	r3, [pc, #524]	@ (8003548 <HAL_RCC_ClockConfig+0x224>)
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f003 030f 	and.w	r3, r3, #15
 8003340:	683a      	ldr	r2, [r7, #0]
 8003342:	429a      	cmp	r2, r3
 8003344:	d910      	bls.n	8003368 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003346:	4b80      	ldr	r3, [pc, #512]	@ (8003548 <HAL_RCC_ClockConfig+0x224>)
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f023 020f 	bic.w	r2, r3, #15
 800334e:	497e      	ldr	r1, [pc, #504]	@ (8003548 <HAL_RCC_ClockConfig+0x224>)
 8003350:	683b      	ldr	r3, [r7, #0]
 8003352:	4313      	orrs	r3, r2
 8003354:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003356:	4b7c      	ldr	r3, [pc, #496]	@ (8003548 <HAL_RCC_ClockConfig+0x224>)
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f003 030f 	and.w	r3, r3, #15
 800335e:	683a      	ldr	r2, [r7, #0]
 8003360:	429a      	cmp	r2, r3
 8003362:	d001      	beq.n	8003368 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003364:	2301      	movs	r3, #1
 8003366:	e186      	b.n	8003676 <HAL_RCC_ClockConfig+0x352>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f003 0310 	and.w	r3, r3, #16
 8003370:	2b00      	cmp	r3, #0
 8003372:	d012      	beq.n	800339a <HAL_RCC_ClockConfig+0x76>
  {
    if ((pClkInitStruct->APB3CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	695a      	ldr	r2, [r3, #20]
 8003378:	4b74      	ldr	r3, [pc, #464]	@ (800354c <HAL_RCC_ClockConfig+0x228>)
 800337a:	6a1b      	ldr	r3, [r3, #32]
 800337c:	0a1b      	lsrs	r3, r3, #8
 800337e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003382:	429a      	cmp	r2, r3
 8003384:	d909      	bls.n	800339a <HAL_RCC_ClockConfig+0x76>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 8003386:	4b71      	ldr	r3, [pc, #452]	@ (800354c <HAL_RCC_ClockConfig+0x228>)
 8003388:	6a1b      	ldr	r3, [r3, #32]
 800338a:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	695b      	ldr	r3, [r3, #20]
 8003392:	021b      	lsls	r3, r3, #8
 8003394:	496d      	ldr	r1, [pc, #436]	@ (800354c <HAL_RCC_ClockConfig+0x228>)
 8003396:	4313      	orrs	r3, r2
 8003398:	620b      	str	r3, [r1, #32]
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f003 0308 	and.w	r3, r3, #8
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d012      	beq.n	80033cc <HAL_RCC_ClockConfig+0xa8>
  {
    if ((pClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	691a      	ldr	r2, [r3, #16]
 80033aa:	4b68      	ldr	r3, [pc, #416]	@ (800354c <HAL_RCC_ClockConfig+0x228>)
 80033ac:	6a1b      	ldr	r3, [r3, #32]
 80033ae:	091b      	lsrs	r3, r3, #4
 80033b0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80033b4:	429a      	cmp	r2, r3
 80033b6:	d909      	bls.n	80033cc <HAL_RCC_ClockConfig+0xa8>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 80033b8:	4b64      	ldr	r3, [pc, #400]	@ (800354c <HAL_RCC_ClockConfig+0x228>)
 80033ba:	6a1b      	ldr	r3, [r3, #32]
 80033bc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	691b      	ldr	r3, [r3, #16]
 80033c4:	011b      	lsls	r3, r3, #4
 80033c6:	4961      	ldr	r1, [pc, #388]	@ (800354c <HAL_RCC_ClockConfig+0x228>)
 80033c8:	4313      	orrs	r3, r2
 80033ca:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f003 0304 	and.w	r3, r3, #4
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d010      	beq.n	80033fa <HAL_RCC_ClockConfig+0xd6>
  {
    if ((pClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	68da      	ldr	r2, [r3, #12]
 80033dc:	4b5b      	ldr	r3, [pc, #364]	@ (800354c <HAL_RCC_ClockConfig+0x228>)
 80033de:	6a1b      	ldr	r3, [r3, #32]
 80033e0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80033e4:	429a      	cmp	r2, r3
 80033e6:	d908      	bls.n	80033fa <HAL_RCC_ClockConfig+0xd6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 80033e8:	4b58      	ldr	r3, [pc, #352]	@ (800354c <HAL_RCC_ClockConfig+0x228>)
 80033ea:	6a1b      	ldr	r3, [r3, #32]
 80033ec:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	68db      	ldr	r3, [r3, #12]
 80033f4:	4955      	ldr	r1, [pc, #340]	@ (800354c <HAL_RCC_ClockConfig+0x228>)
 80033f6:	4313      	orrs	r3, r2
 80033f8:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f003 0302 	and.w	r3, r3, #2
 8003402:	2b00      	cmp	r3, #0
 8003404:	d010      	beq.n	8003428 <HAL_RCC_ClockConfig+0x104>
  {
    if ((pClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	689a      	ldr	r2, [r3, #8]
 800340a:	4b50      	ldr	r3, [pc, #320]	@ (800354c <HAL_RCC_ClockConfig+0x228>)
 800340c:	6a1b      	ldr	r3, [r3, #32]
 800340e:	f003 030f 	and.w	r3, r3, #15
 8003412:	429a      	cmp	r2, r3
 8003414:	d908      	bls.n	8003428 <HAL_RCC_ClockConfig+0x104>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 8003416:	4b4d      	ldr	r3, [pc, #308]	@ (800354c <HAL_RCC_ClockConfig+0x228>)
 8003418:	6a1b      	ldr	r3, [r3, #32]
 800341a:	f023 020f 	bic.w	r2, r3, #15
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	689b      	ldr	r3, [r3, #8]
 8003422:	494a      	ldr	r1, [pc, #296]	@ (800354c <HAL_RCC_ClockConfig+0x228>)
 8003424:	4313      	orrs	r3, r2
 8003426:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f003 0301 	and.w	r3, r3, #1
 8003430:	2b00      	cmp	r3, #0
 8003432:	f000 8093 	beq.w	800355c <HAL_RCC_ClockConfig+0x238>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	685b      	ldr	r3, [r3, #4]
 800343a:	2b03      	cmp	r3, #3
 800343c:	d107      	bne.n	800344e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800343e:	4b43      	ldr	r3, [pc, #268]	@ (800354c <HAL_RCC_ClockConfig+0x228>)
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003446:	2b00      	cmp	r3, #0
 8003448:	d121      	bne.n	800348e <HAL_RCC_ClockConfig+0x16a>
      {
        return HAL_ERROR;
 800344a:	2301      	movs	r3, #1
 800344c:	e113      	b.n	8003676 <HAL_RCC_ClockConfig+0x352>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	685b      	ldr	r3, [r3, #4]
 8003452:	2b02      	cmp	r3, #2
 8003454:	d107      	bne.n	8003466 <HAL_RCC_ClockConfig+0x142>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003456:	4b3d      	ldr	r3, [pc, #244]	@ (800354c <HAL_RCC_ClockConfig+0x228>)
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800345e:	2b00      	cmp	r3, #0
 8003460:	d115      	bne.n	800348e <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8003462:	2301      	movs	r3, #1
 8003464:	e107      	b.n	8003676 <HAL_RCC_ClockConfig+0x352>
        }
      }
      /* CSI is selected as System Clock Source */
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	685b      	ldr	r3, [r3, #4]
 800346a:	2b01      	cmp	r3, #1
 800346c:	d107      	bne.n	800347e <HAL_RCC_ClockConfig+0x15a>
      {
        /* Check the CSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 800346e:	4b37      	ldr	r3, [pc, #220]	@ (800354c <HAL_RCC_ClockConfig+0x228>)
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003476:	2b00      	cmp	r3, #0
 8003478:	d109      	bne.n	800348e <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 800347a:	2301      	movs	r3, #1
 800347c:	e0fb      	b.n	8003676 <HAL_RCC_ClockConfig+0x352>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800347e:	4b33      	ldr	r3, [pc, #204]	@ (800354c <HAL_RCC_ClockConfig+0x228>)
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f003 0302 	and.w	r3, r3, #2
 8003486:	2b00      	cmp	r3, #0
 8003488:	d101      	bne.n	800348e <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 800348a:	2301      	movs	r3, #1
 800348c:	e0f3      	b.n	8003676 <HAL_RCC_ClockConfig+0x352>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pClkInitStruct->SYSCLKSource);
 800348e:	4b2f      	ldr	r3, [pc, #188]	@ (800354c <HAL_RCC_ClockConfig+0x228>)
 8003490:	69db      	ldr	r3, [r3, #28]
 8003492:	f023 0203 	bic.w	r2, r3, #3
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	685b      	ldr	r3, [r3, #4]
 800349a:	492c      	ldr	r1, [pc, #176]	@ (800354c <HAL_RCC_ClockConfig+0x228>)
 800349c:	4313      	orrs	r3, r2
 800349e:	61cb      	str	r3, [r1, #28]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80034a0:	f7fe fc2e 	bl	8001d00 <HAL_GetTick>
 80034a4:	60f8      	str	r0, [r7, #12]

    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	685b      	ldr	r3, [r3, #4]
 80034aa:	2b03      	cmp	r3, #3
 80034ac:	d112      	bne.n	80034d4 <HAL_RCC_ClockConfig+0x1b0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80034ae:	e00a      	b.n	80034c6 <HAL_RCC_ClockConfig+0x1a2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80034b0:	f7fe fc26 	bl	8001d00 <HAL_GetTick>
 80034b4:	4602      	mov	r2, r0
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	1ad3      	subs	r3, r2, r3
 80034ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 80034be:	4293      	cmp	r3, r2
 80034c0:	d901      	bls.n	80034c6 <HAL_RCC_ClockConfig+0x1a2>
        {
          return HAL_TIMEOUT;
 80034c2:	2303      	movs	r3, #3
 80034c4:	e0d7      	b.n	8003676 <HAL_RCC_ClockConfig+0x352>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80034c6:	4b21      	ldr	r3, [pc, #132]	@ (800354c <HAL_RCC_ClockConfig+0x228>)
 80034c8:	69db      	ldr	r3, [r3, #28]
 80034ca:	f003 0318 	and.w	r3, r3, #24
 80034ce:	2b18      	cmp	r3, #24
 80034d0:	d1ee      	bne.n	80034b0 <HAL_RCC_ClockConfig+0x18c>
 80034d2:	e043      	b.n	800355c <HAL_RCC_ClockConfig+0x238>
        }
      }
    }
    else
    {
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	685b      	ldr	r3, [r3, #4]
 80034d8:	2b02      	cmp	r3, #2
 80034da:	d112      	bne.n	8003502 <HAL_RCC_ClockConfig+0x1de>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80034dc:	e00a      	b.n	80034f4 <HAL_RCC_ClockConfig+0x1d0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80034de:	f7fe fc0f 	bl	8001d00 <HAL_GetTick>
 80034e2:	4602      	mov	r2, r0
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	1ad3      	subs	r3, r2, r3
 80034e8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80034ec:	4293      	cmp	r3, r2
 80034ee:	d901      	bls.n	80034f4 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80034f0:	2303      	movs	r3, #3
 80034f2:	e0c0      	b.n	8003676 <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80034f4:	4b15      	ldr	r3, [pc, #84]	@ (800354c <HAL_RCC_ClockConfig+0x228>)
 80034f6:	69db      	ldr	r3, [r3, #28]
 80034f8:	f003 0318 	and.w	r3, r3, #24
 80034fc:	2b10      	cmp	r3, #16
 80034fe:	d1ee      	bne.n	80034de <HAL_RCC_ClockConfig+0x1ba>
 8003500:	e02c      	b.n	800355c <HAL_RCC_ClockConfig+0x238>
          }
        }
      }
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	685b      	ldr	r3, [r3, #4]
 8003506:	2b01      	cmp	r3, #1
 8003508:	d122      	bne.n	8003550 <HAL_RCC_ClockConfig+0x22c>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 800350a:	e00a      	b.n	8003522 <HAL_RCC_ClockConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 800350c:	f7fe fbf8 	bl	8001d00 <HAL_GetTick>
 8003510:	4602      	mov	r2, r0
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	1ad3      	subs	r3, r2, r3
 8003516:	f241 3288 	movw	r2, #5000	@ 0x1388
 800351a:	4293      	cmp	r3, r2
 800351c:	d901      	bls.n	8003522 <HAL_RCC_ClockConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 800351e:	2303      	movs	r3, #3
 8003520:	e0a9      	b.n	8003676 <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 8003522:	4b0a      	ldr	r3, [pc, #40]	@ (800354c <HAL_RCC_ClockConfig+0x228>)
 8003524:	69db      	ldr	r3, [r3, #28]
 8003526:	f003 0318 	and.w	r3, r3, #24
 800352a:	2b08      	cmp	r3, #8
 800352c:	d1ee      	bne.n	800350c <HAL_RCC_ClockConfig+0x1e8>
 800352e:	e015      	b.n	800355c <HAL_RCC_ClockConfig+0x238>
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8003530:	f7fe fbe6 	bl	8001d00 <HAL_GetTick>
 8003534:	4602      	mov	r2, r0
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	1ad3      	subs	r3, r2, r3
 800353a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800353e:	4293      	cmp	r3, r2
 8003540:	d906      	bls.n	8003550 <HAL_RCC_ClockConfig+0x22c>
          {
            return HAL_TIMEOUT;
 8003542:	2303      	movs	r3, #3
 8003544:	e097      	b.n	8003676 <HAL_RCC_ClockConfig+0x352>
 8003546:	bf00      	nop
 8003548:	40022000 	.word	0x40022000
 800354c:	44020c00 	.word	0x44020c00
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003550:	4b4b      	ldr	r3, [pc, #300]	@ (8003680 <HAL_RCC_ClockConfig+0x35c>)
 8003552:	69db      	ldr	r3, [r3, #28]
 8003554:	f003 0318 	and.w	r3, r3, #24
 8003558:	2b00      	cmp	r3, #0
 800355a:	d1e9      	bne.n	8003530 <HAL_RCC_ClockConfig+0x20c>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f003 0302 	and.w	r3, r3, #2
 8003564:	2b00      	cmp	r3, #0
 8003566:	d010      	beq.n	800358a <HAL_RCC_ClockConfig+0x266>
  {
    if ((pClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	689a      	ldr	r2, [r3, #8]
 800356c:	4b44      	ldr	r3, [pc, #272]	@ (8003680 <HAL_RCC_ClockConfig+0x35c>)
 800356e:	6a1b      	ldr	r3, [r3, #32]
 8003570:	f003 030f 	and.w	r3, r3, #15
 8003574:	429a      	cmp	r2, r3
 8003576:	d208      	bcs.n	800358a <HAL_RCC_ClockConfig+0x266>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 8003578:	4b41      	ldr	r3, [pc, #260]	@ (8003680 <HAL_RCC_ClockConfig+0x35c>)
 800357a:	6a1b      	ldr	r3, [r3, #32]
 800357c:	f023 020f 	bic.w	r2, r3, #15
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	689b      	ldr	r3, [r3, #8]
 8003584:	493e      	ldr	r1, [pc, #248]	@ (8003680 <HAL_RCC_ClockConfig+0x35c>)
 8003586:	4313      	orrs	r3, r2
 8003588:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800358a:	4b3e      	ldr	r3, [pc, #248]	@ (8003684 <HAL_RCC_ClockConfig+0x360>)
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f003 030f 	and.w	r3, r3, #15
 8003592:	683a      	ldr	r2, [r7, #0]
 8003594:	429a      	cmp	r2, r3
 8003596:	d210      	bcs.n	80035ba <HAL_RCC_ClockConfig+0x296>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003598:	4b3a      	ldr	r3, [pc, #232]	@ (8003684 <HAL_RCC_ClockConfig+0x360>)
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f023 020f 	bic.w	r2, r3, #15
 80035a0:	4938      	ldr	r1, [pc, #224]	@ (8003684 <HAL_RCC_ClockConfig+0x360>)
 80035a2:	683b      	ldr	r3, [r7, #0]
 80035a4:	4313      	orrs	r3, r2
 80035a6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80035a8:	4b36      	ldr	r3, [pc, #216]	@ (8003684 <HAL_RCC_ClockConfig+0x360>)
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f003 030f 	and.w	r3, r3, #15
 80035b0:	683a      	ldr	r2, [r7, #0]
 80035b2:	429a      	cmp	r2, r3
 80035b4:	d001      	beq.n	80035ba <HAL_RCC_ClockConfig+0x296>
    {
      return HAL_ERROR;
 80035b6:	2301      	movs	r3, #1
 80035b8:	e05d      	b.n	8003676 <HAL_RCC_ClockConfig+0x352>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f003 0304 	and.w	r3, r3, #4
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d010      	beq.n	80035e8 <HAL_RCC_ClockConfig+0x2c4>
  {
    if ((pClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	68da      	ldr	r2, [r3, #12]
 80035ca:	4b2d      	ldr	r3, [pc, #180]	@ (8003680 <HAL_RCC_ClockConfig+0x35c>)
 80035cc:	6a1b      	ldr	r3, [r3, #32]
 80035ce:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80035d2:	429a      	cmp	r2, r3
 80035d4:	d208      	bcs.n	80035e8 <HAL_RCC_ClockConfig+0x2c4>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 80035d6:	4b2a      	ldr	r3, [pc, #168]	@ (8003680 <HAL_RCC_ClockConfig+0x35c>)
 80035d8:	6a1b      	ldr	r3, [r3, #32]
 80035da:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	68db      	ldr	r3, [r3, #12]
 80035e2:	4927      	ldr	r1, [pc, #156]	@ (8003680 <HAL_RCC_ClockConfig+0x35c>)
 80035e4:	4313      	orrs	r3, r2
 80035e6:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f003 0308 	and.w	r3, r3, #8
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d012      	beq.n	800361a <HAL_RCC_ClockConfig+0x2f6>
  {
    if ((pClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	691a      	ldr	r2, [r3, #16]
 80035f8:	4b21      	ldr	r3, [pc, #132]	@ (8003680 <HAL_RCC_ClockConfig+0x35c>)
 80035fa:	6a1b      	ldr	r3, [r3, #32]
 80035fc:	091b      	lsrs	r3, r3, #4
 80035fe:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003602:	429a      	cmp	r2, r3
 8003604:	d209      	bcs.n	800361a <HAL_RCC_ClockConfig+0x2f6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 8003606:	4b1e      	ldr	r3, [pc, #120]	@ (8003680 <HAL_RCC_ClockConfig+0x35c>)
 8003608:	6a1b      	ldr	r3, [r3, #32]
 800360a:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	691b      	ldr	r3, [r3, #16]
 8003612:	011b      	lsls	r3, r3, #4
 8003614:	491a      	ldr	r1, [pc, #104]	@ (8003680 <HAL_RCC_ClockConfig+0x35c>)
 8003616:	4313      	orrs	r3, r2
 8003618:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f003 0310 	and.w	r3, r3, #16
 8003622:	2b00      	cmp	r3, #0
 8003624:	d012      	beq.n	800364c <HAL_RCC_ClockConfig+0x328>
  {
    if ((pClkInitStruct->APB3CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	695a      	ldr	r2, [r3, #20]
 800362a:	4b15      	ldr	r3, [pc, #84]	@ (8003680 <HAL_RCC_ClockConfig+0x35c>)
 800362c:	6a1b      	ldr	r3, [r3, #32]
 800362e:	0a1b      	lsrs	r3, r3, #8
 8003630:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003634:	429a      	cmp	r2, r3
 8003636:	d209      	bcs.n	800364c <HAL_RCC_ClockConfig+0x328>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 8003638:	4b11      	ldr	r3, [pc, #68]	@ (8003680 <HAL_RCC_ClockConfig+0x35c>)
 800363a:	6a1b      	ldr	r3, [r3, #32]
 800363c:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	695b      	ldr	r3, [r3, #20]
 8003644:	021b      	lsls	r3, r3, #8
 8003646:	490e      	ldr	r1, [pc, #56]	@ (8003680 <HAL_RCC_ClockConfig+0x35c>)
 8003648:	4313      	orrs	r3, r2
 800364a:	620b      	str	r3, [r1, #32]
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800364c:	f000 f822 	bl	8003694 <HAL_RCC_GetSysClockFreq>
 8003650:	4602      	mov	r2, r0
 8003652:	4b0b      	ldr	r3, [pc, #44]	@ (8003680 <HAL_RCC_ClockConfig+0x35c>)
 8003654:	6a1b      	ldr	r3, [r3, #32]
 8003656:	f003 030f 	and.w	r3, r3, #15
 800365a:	490b      	ldr	r1, [pc, #44]	@ (8003688 <HAL_RCC_ClockConfig+0x364>)
 800365c:	5ccb      	ldrb	r3, [r1, r3]
 800365e:	fa22 f303 	lsr.w	r3, r2, r3
 8003662:	4a0a      	ldr	r2, [pc, #40]	@ (800368c <HAL_RCC_ClockConfig+0x368>)
 8003664:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8003666:	4b0a      	ldr	r3, [pc, #40]	@ (8003690 <HAL_RCC_ClockConfig+0x36c>)
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	4618      	mov	r0, r3
 800366c:	f7fe fabe 	bl	8001bec <HAL_InitTick>
 8003670:	4603      	mov	r3, r0
 8003672:	72fb      	strb	r3, [r7, #11]

  return halstatus;
 8003674:	7afb      	ldrb	r3, [r7, #11]
}
 8003676:	4618      	mov	r0, r3
 8003678:	3710      	adds	r7, #16
 800367a:	46bd      	mov	sp, r7
 800367c:	bd80      	pop	{r7, pc}
 800367e:	bf00      	nop
 8003680:	44020c00 	.word	0x44020c00
 8003684:	40022000 	.word	0x40022000
 8003688:	0800b268 	.word	0x0800b268
 800368c:	20000000 	.word	0x20000000
 8003690:	20000004 	.word	0x20000004

08003694 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003694:	b480      	push	{r7}
 8003696:	b089      	sub	sp, #36	@ 0x24
 8003698:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;
  uint32_t hsivalue;
  float_t fracn1;
  float_t pllvco;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_CSI)
 800369a:	4b8c      	ldr	r3, [pc, #560]	@ (80038cc <HAL_RCC_GetSysClockFreq+0x238>)
 800369c:	69db      	ldr	r3, [r3, #28]
 800369e:	f003 0318 	and.w	r3, r3, #24
 80036a2:	2b08      	cmp	r3, #8
 80036a4:	d102      	bne.n	80036ac <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80036a6:	4b8a      	ldr	r3, [pc, #552]	@ (80038d0 <HAL_RCC_GetSysClockFreq+0x23c>)
 80036a8:	61fb      	str	r3, [r7, #28]
 80036aa:	e107      	b.n	80038bc <HAL_RCC_GetSysClockFreq+0x228>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80036ac:	4b87      	ldr	r3, [pc, #540]	@ (80038cc <HAL_RCC_GetSysClockFreq+0x238>)
 80036ae:	69db      	ldr	r3, [r3, #28]
 80036b0:	f003 0318 	and.w	r3, r3, #24
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d112      	bne.n	80036de <HAL_RCC_GetSysClockFreq+0x4a>
  {
    /* HSI used as system clock source */
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 80036b8:	4b84      	ldr	r3, [pc, #528]	@ (80038cc <HAL_RCC_GetSysClockFreq+0x238>)
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f003 0320 	and.w	r3, r3, #32
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d009      	beq.n	80036d8 <HAL_RCC_GetSysClockFreq+0x44>
    {
      sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80036c4:	4b81      	ldr	r3, [pc, #516]	@ (80038cc <HAL_RCC_GetSysClockFreq+0x238>)
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	08db      	lsrs	r3, r3, #3
 80036ca:	f003 0303 	and.w	r3, r3, #3
 80036ce:	4a81      	ldr	r2, [pc, #516]	@ (80038d4 <HAL_RCC_GetSysClockFreq+0x240>)
 80036d0:	fa22 f303 	lsr.w	r3, r2, r3
 80036d4:	61fb      	str	r3, [r7, #28]
 80036d6:	e0f1      	b.n	80038bc <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = (uint32_t) HSI_VALUE;
 80036d8:	4b7e      	ldr	r3, [pc, #504]	@ (80038d4 <HAL_RCC_GetSysClockFreq+0x240>)
 80036da:	61fb      	str	r3, [r7, #28]
 80036dc:	e0ee      	b.n	80038bc <HAL_RCC_GetSysClockFreq+0x228>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80036de:	4b7b      	ldr	r3, [pc, #492]	@ (80038cc <HAL_RCC_GetSysClockFreq+0x238>)
 80036e0:	69db      	ldr	r3, [r3, #28]
 80036e2:	f003 0318 	and.w	r3, r3, #24
 80036e6:	2b10      	cmp	r3, #16
 80036e8:	d102      	bne.n	80036f0 <HAL_RCC_GetSysClockFreq+0x5c>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80036ea:	4b7b      	ldr	r3, [pc, #492]	@ (80038d8 <HAL_RCC_GetSysClockFreq+0x244>)
 80036ec:	61fb      	str	r3, [r7, #28]
 80036ee:	e0e5      	b.n	80038bc <HAL_RCC_GetSysClockFreq+0x228>
  }

  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80036f0:	4b76      	ldr	r3, [pc, #472]	@ (80038cc <HAL_RCC_GetSysClockFreq+0x238>)
 80036f2:	69db      	ldr	r3, [r3, #28]
 80036f4:	f003 0318 	and.w	r3, r3, #24
 80036f8:	2b18      	cmp	r3, #24
 80036fa:	f040 80dd 	bne.w	80038b8 <HAL_RCC_GetSysClockFreq+0x224>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 80036fe:	4b73      	ldr	r3, [pc, #460]	@ (80038cc <HAL_RCC_GetSysClockFreq+0x238>)
 8003700:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003702:	f003 0303 	and.w	r3, r3, #3
 8003706:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 8003708:	4b70      	ldr	r3, [pc, #448]	@ (80038cc <HAL_RCC_GetSysClockFreq+0x238>)
 800370a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800370c:	0a1b      	lsrs	r3, r3, #8
 800370e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003712:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8003714:	4b6d      	ldr	r3, [pc, #436]	@ (80038cc <HAL_RCC_GetSysClockFreq+0x238>)
 8003716:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003718:	091b      	lsrs	r3, r3, #4
 800371a:	f003 0301 	and.w	r3, r3, #1
 800371e:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 8003720:	4b6a      	ldr	r3, [pc, #424]	@ (80038cc <HAL_RCC_GetSysClockFreq+0x238>)
 8003722:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                               RCC_PLL1FRACR_PLL1FRACN) >> RCC_PLL1FRACR_PLL1FRACN_Pos));
 8003724:	08db      	lsrs	r3, r3, #3
 8003726:	f3c3 030c 	ubfx	r3, r3, #0, #13
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 800372a:	68fa      	ldr	r2, [r7, #12]
 800372c:	fb02 f303 	mul.w	r3, r2, r3
 8003730:	ee07 3a90 	vmov	s15, r3
 8003734:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003738:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800373c:	693b      	ldr	r3, [r7, #16]
 800373e:	2b00      	cmp	r3, #0
 8003740:	f000 80b7 	beq.w	80038b2 <HAL_RCC_GetSysClockFreq+0x21e>
    {
      switch (pllsource)
 8003744:	697b      	ldr	r3, [r7, #20]
 8003746:	2b01      	cmp	r3, #1
 8003748:	d003      	beq.n	8003752 <HAL_RCC_GetSysClockFreq+0xbe>
 800374a:	697b      	ldr	r3, [r7, #20]
 800374c:	2b03      	cmp	r3, #3
 800374e:	d056      	beq.n	80037fe <HAL_RCC_GetSysClockFreq+0x16a>
 8003750:	e077      	b.n	8003842 <HAL_RCC_GetSysClockFreq+0x1ae>
      {
        case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */

          if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 8003752:	4b5e      	ldr	r3, [pc, #376]	@ (80038cc <HAL_RCC_GetSysClockFreq+0x238>)
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f003 0320 	and.w	r3, r3, #32
 800375a:	2b00      	cmp	r3, #0
 800375c:	d02d      	beq.n	80037ba <HAL_RCC_GetSysClockFreq+0x126>
          {
            hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800375e:	4b5b      	ldr	r3, [pc, #364]	@ (80038cc <HAL_RCC_GetSysClockFreq+0x238>)
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	08db      	lsrs	r3, r3, #3
 8003764:	f003 0303 	and.w	r3, r3, #3
 8003768:	4a5a      	ldr	r2, [pc, #360]	@ (80038d4 <HAL_RCC_GetSysClockFreq+0x240>)
 800376a:	fa22 f303 	lsr.w	r3, r2, r3
 800376e:	607b      	str	r3, [r7, #4]
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	ee07 3a90 	vmov	s15, r3
 8003776:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800377a:	693b      	ldr	r3, [r7, #16]
 800377c:	ee07 3a90 	vmov	s15, r3
 8003780:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003784:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003788:	4b50      	ldr	r3, [pc, #320]	@ (80038cc <HAL_RCC_GetSysClockFreq+0x238>)
 800378a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800378c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003790:	ee07 3a90 	vmov	s15, r3
 8003794:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8003798:	ed97 6a02 	vldr	s12, [r7, #8]
 800379c:	eddf 5a4f 	vldr	s11, [pc, #316]	@ 80038dc <HAL_RCC_GetSysClockFreq+0x248>
 80037a0:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80037a4:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 80037a8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80037ac:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80037b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80037b4:	edc7 7a06 	vstr	s15, [r7, #24]
          {
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
          }

          break;
 80037b8:	e065      	b.n	8003886 <HAL_RCC_GetSysClockFreq+0x1f2>
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80037ba:	693b      	ldr	r3, [r7, #16]
 80037bc:	ee07 3a90 	vmov	s15, r3
 80037c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80037c4:	eddf 6a46 	vldr	s13, [pc, #280]	@ 80038e0 <HAL_RCC_GetSysClockFreq+0x24c>
 80037c8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80037cc:	4b3f      	ldr	r3, [pc, #252]	@ (80038cc <HAL_RCC_GetSysClockFreq+0x238>)
 80037ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80037d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80037d4:	ee07 3a90 	vmov	s15, r3
 80037d8:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 80037dc:	ed97 6a02 	vldr	s12, [r7, #8]
 80037e0:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 80038dc <HAL_RCC_GetSysClockFreq+0x248>
 80037e4:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80037e8:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 80037ec:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80037f0:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80037f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80037f8:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 80037fc:	e043      	b.n	8003886 <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80037fe:	693b      	ldr	r3, [r7, #16]
 8003800:	ee07 3a90 	vmov	s15, r3
 8003804:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003808:	eddf 6a36 	vldr	s13, [pc, #216]	@ 80038e4 <HAL_RCC_GetSysClockFreq+0x250>
 800380c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003810:	4b2e      	ldr	r3, [pc, #184]	@ (80038cc <HAL_RCC_GetSysClockFreq+0x238>)
 8003812:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003814:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003818:	ee07 3a90 	vmov	s15, r3
 800381c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8003820:	ed97 6a02 	vldr	s12, [r7, #8]
 8003824:	eddf 5a2d 	vldr	s11, [pc, #180]	@ 80038dc <HAL_RCC_GetSysClockFreq+0x248>
 8003828:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800382c:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8003830:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003834:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003838:	ee67 7a27 	vmul.f32	s15, s14, s15
 800383c:	edc7 7a06 	vstr	s15, [r7, #24]

          break;
 8003840:	e021      	b.n	8003886 <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        default:
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003842:	693b      	ldr	r3, [r7, #16]
 8003844:	ee07 3a90 	vmov	s15, r3
 8003848:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800384c:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80038e8 <HAL_RCC_GetSysClockFreq+0x254>
 8003850:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003854:	4b1d      	ldr	r3, [pc, #116]	@ (80038cc <HAL_RCC_GetSysClockFreq+0x238>)
 8003856:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003858:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800385c:	ee07 3a90 	vmov	s15, r3
 8003860:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8003864:	ed97 6a02 	vldr	s12, [r7, #8]
 8003868:	eddf 5a1c 	vldr	s11, [pc, #112]	@ 80038dc <HAL_RCC_GetSysClockFreq+0x248>
 800386c:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003870:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8003874:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003878:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800387c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003880:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 8003884:	bf00      	nop
      }

      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + 1U) ;
 8003886:	4b11      	ldr	r3, [pc, #68]	@ (80038cc <HAL_RCC_GetSysClockFreq+0x238>)
 8003888:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800388a:	0a5b      	lsrs	r3, r3, #9
 800388c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003890:	3301      	adds	r3, #1
 8003892:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8003894:	683b      	ldr	r3, [r7, #0]
 8003896:	ee07 3a90 	vmov	s15, r3
 800389a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800389e:	edd7 6a06 	vldr	s13, [r7, #24]
 80038a2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80038a6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80038aa:	ee17 3a90 	vmov	r3, s15
 80038ae:	61fb      	str	r3, [r7, #28]
 80038b0:	e004      	b.n	80038bc <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = 0;
 80038b2:	2300      	movs	r3, #0
 80038b4:	61fb      	str	r3, [r7, #28]
 80038b6:	e001      	b.n	80038bc <HAL_RCC_GetSysClockFreq+0x228>
  }

  else
  {
    /* HSI is the default system clock source */
    sysclockfreq = (uint32_t) HSI_VALUE;
 80038b8:	4b06      	ldr	r3, [pc, #24]	@ (80038d4 <HAL_RCC_GetSysClockFreq+0x240>)
 80038ba:	61fb      	str	r3, [r7, #28]
  }

  return sysclockfreq;
 80038bc:	69fb      	ldr	r3, [r7, #28]
}
 80038be:	4618      	mov	r0, r3
 80038c0:	3724      	adds	r7, #36	@ 0x24
 80038c2:	46bd      	mov	sp, r7
 80038c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c8:	4770      	bx	lr
 80038ca:	bf00      	nop
 80038cc:	44020c00 	.word	0x44020c00
 80038d0:	003d0900 	.word	0x003d0900
 80038d4:	03d09000 	.word	0x03d09000
 80038d8:	017d7840 	.word	0x017d7840
 80038dc:	46000000 	.word	0x46000000
 80038e0:	4c742400 	.word	0x4c742400
 80038e4:	4bbebc20 	.word	0x4bbebc20
 80038e8:	4a742400 	.word	0x4a742400

080038ec <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80038ec:	b580      	push	{r7, lr}
 80038ee:	af00      	add	r7, sp, #0

  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 80038f0:	f7ff fed0 	bl	8003694 <HAL_RCC_GetSysClockFreq>
 80038f4:	4602      	mov	r2, r0
 80038f6:	4b08      	ldr	r3, [pc, #32]	@ (8003918 <HAL_RCC_GetHCLKFreq+0x2c>)
 80038f8:	6a1b      	ldr	r3, [r3, #32]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 80038fa:	f003 030f 	and.w	r3, r3, #15
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 80038fe:	4907      	ldr	r1, [pc, #28]	@ (800391c <HAL_RCC_GetHCLKFreq+0x30>)
 8003900:	5ccb      	ldrb	r3, [r1, r3]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 8003902:	f003 031f 	and.w	r3, r3, #31
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8003906:	fa22 f303 	lsr.w	r3, r2, r3
 800390a:	4a05      	ldr	r2, [pc, #20]	@ (8003920 <HAL_RCC_GetHCLKFreq+0x34>)
 800390c:	6013      	str	r3, [r2, #0]

  return SystemCoreClock;
 800390e:	4b04      	ldr	r3, [pc, #16]	@ (8003920 <HAL_RCC_GetHCLKFreq+0x34>)
 8003910:	681b      	ldr	r3, [r3, #0]
}
 8003912:	4618      	mov	r0, r3
 8003914:	bd80      	pop	{r7, pc}
 8003916:	bf00      	nop
 8003918:	44020c00 	.word	0x44020c00
 800391c:	0800b268 	.word	0x0800b268
 8003920:	20000000 	.word	0x20000000

08003924 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003924:	b580      	push	{r7, lr}
 8003926:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]) & 0x1FU));
 8003928:	f7ff ffe0 	bl	80038ec <HAL_RCC_GetHCLKFreq>
 800392c:	4602      	mov	r2, r0
 800392e:	4b06      	ldr	r3, [pc, #24]	@ (8003948 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003930:	6a1b      	ldr	r3, [r3, #32]
 8003932:	091b      	lsrs	r3, r3, #4
 8003934:	f003 0307 	and.w	r3, r3, #7
 8003938:	4904      	ldr	r1, [pc, #16]	@ (800394c <HAL_RCC_GetPCLK1Freq+0x28>)
 800393a:	5ccb      	ldrb	r3, [r1, r3]
 800393c:	f003 031f 	and.w	r3, r3, #31
 8003940:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003944:	4618      	mov	r0, r3
 8003946:	bd80      	pop	{r7, pc}
 8003948:	44020c00 	.word	0x44020c00
 800394c:	0800b278 	.word	0x0800b278

08003950 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003950:	b580      	push	{r7, lr}
 8003952:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]) & 0x1FU));
 8003954:	f7ff ffca 	bl	80038ec <HAL_RCC_GetHCLKFreq>
 8003958:	4602      	mov	r2, r0
 800395a:	4b06      	ldr	r3, [pc, #24]	@ (8003974 <HAL_RCC_GetPCLK2Freq+0x24>)
 800395c:	6a1b      	ldr	r3, [r3, #32]
 800395e:	0a1b      	lsrs	r3, r3, #8
 8003960:	f003 0307 	and.w	r3, r3, #7
 8003964:	4904      	ldr	r1, [pc, #16]	@ (8003978 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003966:	5ccb      	ldrb	r3, [r1, r3]
 8003968:	f003 031f 	and.w	r3, r3, #31
 800396c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003970:	4618      	mov	r0, r3
 8003972:	bd80      	pop	{r7, pc}
 8003974:	44020c00 	.word	0x44020c00
 8003978:	0800b278 	.word	0x0800b278

0800397c <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 800397c:	b580      	push	{r7, lr}
 800397e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK3 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE3) >> RCC_CFGR2_PPRE3_Pos]) & 0x1FU));
 8003980:	f7ff ffb4 	bl	80038ec <HAL_RCC_GetHCLKFreq>
 8003984:	4602      	mov	r2, r0
 8003986:	4b06      	ldr	r3, [pc, #24]	@ (80039a0 <HAL_RCC_GetPCLK3Freq+0x24>)
 8003988:	6a1b      	ldr	r3, [r3, #32]
 800398a:	0b1b      	lsrs	r3, r3, #12
 800398c:	f003 0307 	and.w	r3, r3, #7
 8003990:	4904      	ldr	r1, [pc, #16]	@ (80039a4 <HAL_RCC_GetPCLK3Freq+0x28>)
 8003992:	5ccb      	ldrb	r3, [r1, r3]
 8003994:	f003 031f 	and.w	r3, r3, #31
 8003998:	fa22 f303 	lsr.w	r3, r2, r3
}
 800399c:	4618      	mov	r0, r3
 800399e:	bd80      	pop	{r7, pc}
 80039a0:	44020c00 	.word	0x44020c00
 80039a4:	0800b278 	.word	0x0800b278

080039a8 <HAL_RCCEx_PeriphCLKConfig>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 80039a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80039ac:	b0aa      	sub	sp, #168	@ 0xa8
 80039ae:	af00      	add	r7, sp, #0
 80039b0:	f8c7 0094 	str.w	r0, [r7, #148]	@ 0x94
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80039b4:	2300      	movs	r3, #0
 80039b6:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80039ba:	2300      	movs	r3, #0
 80039bc:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80039c0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80039c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039c8:	f002 7480 	and.w	r4, r2, #16777216	@ 0x1000000
 80039cc:	2500      	movs	r5, #0
 80039ce:	ea54 0305 	orrs.w	r3, r4, r5
 80039d2:	d00b      	beq.n	80039ec <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(pPeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(pPeriphClkInit->CkperClockSelection);
 80039d4:	4bb8      	ldr	r3, [pc, #736]	@ (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80039d6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80039da:	f023 4140 	bic.w	r1, r3, #3221225472	@ 0xc0000000
 80039de:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80039e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039e4:	4ab4      	ldr	r2, [pc, #720]	@ (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80039e6:	430b      	orrs	r3, r1
 80039e8:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80039ec:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80039f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039f4:	f002 0801 	and.w	r8, r2, #1
 80039f8:	f04f 0900 	mov.w	r9, #0
 80039fc:	ea58 0309 	orrs.w	r3, r8, r9
 8003a00:	d038      	beq.n	8003a74 <HAL_RCCEx_PeriphCLKConfig+0xcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    switch (pPeriphClkInit->Usart1ClockSelection)
 8003a02:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003a06:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a08:	2b05      	cmp	r3, #5
 8003a0a:	d819      	bhi.n	8003a40 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8003a0c:	a201      	add	r2, pc, #4	@ (adr r2, 8003a14 <HAL_RCCEx_PeriphCLKConfig+0x6c>)
 8003a0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a12:	bf00      	nop
 8003a14:	08003a49 	.word	0x08003a49
 8003a18:	08003a2d 	.word	0x08003a2d
 8003a1c:	08003a41 	.word	0x08003a41
 8003a20:	08003a49 	.word	0x08003a49
 8003a24:	08003a49 	.word	0x08003a49
 8003a28:	08003a49 	.word	0x08003a49
        /* USART1 clock source config set later after clock selection check */
        break;

      case RCC_USART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003a2c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003a30:	3308      	adds	r3, #8
 8003a32:	4618      	mov	r0, r3
 8003a34:	f001 ffee 	bl	8005a14 <RCCEx_PLL2_Config>
 8003a38:	4603      	mov	r3, r0
 8003a3a:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        /* USART1 clock source config set later after clock selection check */
        break;
 8003a3e:	e004      	b.n	8003a4a <HAL_RCCEx_PeriphCLKConfig+0xa2>
      case RCC_USART1CLKSOURCE_LSE:      /* LSE clock is used as source of USART1 clock*/
        /* USART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003a40:	2301      	movs	r3, #1
 8003a42:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8003a46:	e000      	b.n	8003a4a <HAL_RCCEx_PeriphCLKConfig+0xa2>
        break;
 8003a48:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a4a:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d10c      	bne.n	8003a6c <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      /* Set the source of USART1 clock*/
      __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 8003a52:	4b99      	ldr	r3, [pc, #612]	@ (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003a54:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003a58:	f023 0107 	bic.w	r1, r3, #7
 8003a5c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003a60:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a62:	4a95      	ldr	r2, [pc, #596]	@ (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003a64:	430b      	orrs	r3, r1
 8003a66:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8003a6a:	e003      	b.n	8003a74 <HAL_RCCEx_PeriphCLKConfig+0xcc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a6c:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003a70:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003a74:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003a78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a7c:	f002 0a02 	and.w	sl, r2, #2
 8003a80:	f04f 0b00 	mov.w	fp, #0
 8003a84:	ea5a 030b 	orrs.w	r3, sl, fp
 8003a88:	d03c      	beq.n	8003b04 <HAL_RCCEx_PeriphCLKConfig+0x15c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    switch (pPeriphClkInit->Usart2ClockSelection)
 8003a8a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003a8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a90:	2b28      	cmp	r3, #40	@ 0x28
 8003a92:	d01b      	beq.n	8003acc <HAL_RCCEx_PeriphCLKConfig+0x124>
 8003a94:	2b28      	cmp	r3, #40	@ 0x28
 8003a96:	d815      	bhi.n	8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x11c>
 8003a98:	2b20      	cmp	r3, #32
 8003a9a:	d019      	beq.n	8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x128>
 8003a9c:	2b20      	cmp	r3, #32
 8003a9e:	d811      	bhi.n	8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x11c>
 8003aa0:	2b18      	cmp	r3, #24
 8003aa2:	d017      	beq.n	8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
 8003aa4:	2b18      	cmp	r3, #24
 8003aa6:	d80d      	bhi.n	8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x11c>
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d015      	beq.n	8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x130>
 8003aac:	2b08      	cmp	r3, #8
 8003aae:	d109      	bne.n	8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x11c>
        /* USART2 clock source config set later after clock selection check */
        break;

      case RCC_USART2CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART2*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003ab0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003ab4:	3308      	adds	r3, #8
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	f001 ffac 	bl	8005a14 <RCCEx_PLL2_Config>
 8003abc:	4603      	mov	r3, r0
 8003abe:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        /* USART2 clock source config set later after clock selection check */
        break;
 8003ac2:	e00a      	b.n	8003ada <HAL_RCCEx_PeriphCLKConfig+0x132>
      case RCC_USART2CLKSOURCE_LSE:      /* LSE clock is used as source of USART2 clock*/
        /* USART2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003ac4:	2301      	movs	r3, #1
 8003ac6:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8003aca:	e006      	b.n	8003ada <HAL_RCCEx_PeriphCLKConfig+0x132>
        break;
 8003acc:	bf00      	nop
 8003ace:	e004      	b.n	8003ada <HAL_RCCEx_PeriphCLKConfig+0x132>
        break;
 8003ad0:	bf00      	nop
 8003ad2:	e002      	b.n	8003ada <HAL_RCCEx_PeriphCLKConfig+0x132>
        break;
 8003ad4:	bf00      	nop
 8003ad6:	e000      	b.n	8003ada <HAL_RCCEx_PeriphCLKConfig+0x132>
        break;
 8003ad8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003ada:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d10c      	bne.n	8003afc <HAL_RCCEx_PeriphCLKConfig+0x154>
    {
      /* Set the source of USART2 clock*/
      __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 8003ae2:	4b75      	ldr	r3, [pc, #468]	@ (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003ae4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003ae8:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8003aec:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003af0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003af2:	4a71      	ldr	r2, [pc, #452]	@ (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003af4:	430b      	orrs	r3, r1
 8003af6:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8003afa:	e003      	b.n	8003b04 <HAL_RCCEx_PeriphCLKConfig+0x15c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003afc:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003b00:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003b04:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003b08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b0c:	f002 0304 	and.w	r3, r2, #4
 8003b10:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003b14:	2300      	movs	r3, #0
 8003b16:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8003b1a:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8003b1e:	460b      	mov	r3, r1
 8003b20:	4313      	orrs	r3, r2
 8003b22:	d040      	beq.n	8003ba6 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    switch (pPeriphClkInit->Usart3ClockSelection)
 8003b24:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003b28:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b2a:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8003b2e:	d01e      	beq.n	8003b6e <HAL_RCCEx_PeriphCLKConfig+0x1c6>
 8003b30:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8003b34:	d817      	bhi.n	8003b66 <HAL_RCCEx_PeriphCLKConfig+0x1be>
 8003b36:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003b3a:	d01a      	beq.n	8003b72 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
 8003b3c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003b40:	d811      	bhi.n	8003b66 <HAL_RCCEx_PeriphCLKConfig+0x1be>
 8003b42:	2bc0      	cmp	r3, #192	@ 0xc0
 8003b44:	d017      	beq.n	8003b76 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 8003b46:	2bc0      	cmp	r3, #192	@ 0xc0
 8003b48:	d80d      	bhi.n	8003b66 <HAL_RCCEx_PeriphCLKConfig+0x1be>
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d015      	beq.n	8003b7a <HAL_RCCEx_PeriphCLKConfig+0x1d2>
 8003b4e:	2b40      	cmp	r3, #64	@ 0x40
 8003b50:	d109      	bne.n	8003b66 <HAL_RCCEx_PeriphCLKConfig+0x1be>
        /* USART3 clock source config set later after clock selection check */
        break;

      case RCC_USART3CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART3*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003b52:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003b56:	3308      	adds	r3, #8
 8003b58:	4618      	mov	r0, r3
 8003b5a:	f001 ff5b 	bl	8005a14 <RCCEx_PLL2_Config>
 8003b5e:	4603      	mov	r3, r0
 8003b60:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        /* USART3 clock source config set later after clock selection check */
        break;
 8003b64:	e00a      	b.n	8003b7c <HAL_RCCEx_PeriphCLKConfig+0x1d4>
      case RCC_USART3CLKSOURCE_LSE:      /* LSE clock is used as source of USART3 clock*/
        /* USART3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003b66:	2301      	movs	r3, #1
 8003b68:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8003b6c:	e006      	b.n	8003b7c <HAL_RCCEx_PeriphCLKConfig+0x1d4>
        break;
 8003b6e:	bf00      	nop
 8003b70:	e004      	b.n	8003b7c <HAL_RCCEx_PeriphCLKConfig+0x1d4>
        break;
 8003b72:	bf00      	nop
 8003b74:	e002      	b.n	8003b7c <HAL_RCCEx_PeriphCLKConfig+0x1d4>
        break;
 8003b76:	bf00      	nop
 8003b78:	e000      	b.n	8003b7c <HAL_RCCEx_PeriphCLKConfig+0x1d4>
        break;
 8003b7a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003b7c:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d10c      	bne.n	8003b9e <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Set the source of USART3 clock*/
      __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 8003b84:	4b4c      	ldr	r3, [pc, #304]	@ (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003b86:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003b8a:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8003b8e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003b92:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b94:	4a48      	ldr	r2, [pc, #288]	@ (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003b96:	430b      	orrs	r3, r1
 8003b98:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8003b9c:	e003      	b.n	8003ba6 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b9e:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003ba2:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }
#endif /* UART12 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003ba6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003baa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bae:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8003bb2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003bb6:	2300      	movs	r3, #0
 8003bb8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003bbc:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8003bc0:	460b      	mov	r3, r1
 8003bc2:	4313      	orrs	r3, r2
 8003bc4:	d043      	beq.n	8003c4e <HAL_RCCEx_PeriphCLKConfig+0x2a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    switch (pPeriphClkInit->Lpuart1ClockSelection)
 8003bc6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003bca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bcc:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8003bd0:	d021      	beq.n	8003c16 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8003bd2:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8003bd6:	d81a      	bhi.n	8003c0e <HAL_RCCEx_PeriphCLKConfig+0x266>
 8003bd8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003bdc:	d01d      	beq.n	8003c1a <HAL_RCCEx_PeriphCLKConfig+0x272>
 8003bde:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003be2:	d814      	bhi.n	8003c0e <HAL_RCCEx_PeriphCLKConfig+0x266>
 8003be4:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003be8:	d019      	beq.n	8003c1e <HAL_RCCEx_PeriphCLKConfig+0x276>
 8003bea:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003bee:	d80e      	bhi.n	8003c0e <HAL_RCCEx_PeriphCLKConfig+0x266>
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d016      	beq.n	8003c22 <HAL_RCCEx_PeriphCLKConfig+0x27a>
 8003bf4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003bf8:	d109      	bne.n	8003c0e <HAL_RCCEx_PeriphCLKConfig+0x266>
        /* LPUART1 clock source config set later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for LPUART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003bfa:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003bfe:	3308      	adds	r3, #8
 8003c00:	4618      	mov	r0, r3
 8003c02:	f001 ff07 	bl	8005a14 <RCCEx_PLL2_Config>
 8003c06:	4603      	mov	r3, r0
 8003c08:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        /* LPUART1 clock source config set later after clock selection check */
        break;
 8003c0c:	e00a      	b.n	8003c24 <HAL_RCCEx_PeriphCLKConfig+0x27c>
      case RCC_LPUART1CLKSOURCE_LSE:      /* LSE clock is used as source of LPUART1 clock*/
        /* LPUART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003c0e:	2301      	movs	r3, #1
 8003c10:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8003c14:	e006      	b.n	8003c24 <HAL_RCCEx_PeriphCLKConfig+0x27c>
        break;
 8003c16:	bf00      	nop
 8003c18:	e004      	b.n	8003c24 <HAL_RCCEx_PeriphCLKConfig+0x27c>
        break;
 8003c1a:	bf00      	nop
 8003c1c:	e002      	b.n	8003c24 <HAL_RCCEx_PeriphCLKConfig+0x27c>
        break;
 8003c1e:	bf00      	nop
 8003c20:	e000      	b.n	8003c24 <HAL_RCCEx_PeriphCLKConfig+0x27c>
        break;
 8003c22:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c24:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d10c      	bne.n	8003c46 <HAL_RCCEx_PeriphCLKConfig+0x29e>
    {
      /* Set the source of LPUART1 clock*/
      __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 8003c2c:	4b22      	ldr	r3, [pc, #136]	@ (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003c2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003c32:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8003c36:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003c3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c3c:	4a1e      	ldr	r2, [pc, #120]	@ (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003c3e:	430b      	orrs	r3, r1
 8003c40:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003c44:	e003      	b.n	8003c4e <HAL_RCCEx_PeriphCLKConfig+0x2a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c46:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003c4a:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003c4e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003c52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c56:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8003c5a:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003c5c:	2300      	movs	r3, #0
 8003c5e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003c60:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8003c64:	460b      	mov	r3, r1
 8003c66:	4313      	orrs	r3, r2
 8003c68:	d03e      	beq.n	8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x340>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    switch (pPeriphClkInit->I2c1ClockSelection)
 8003c6a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003c6e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c70:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003c74:	d01b      	beq.n	8003cae <HAL_RCCEx_PeriphCLKConfig+0x306>
 8003c76:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003c7a:	d814      	bhi.n	8003ca6 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
 8003c7c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003c80:	d017      	beq.n	8003cb2 <HAL_RCCEx_PeriphCLKConfig+0x30a>
 8003c82:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003c86:	d80e      	bhi.n	8003ca6 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d017      	beq.n	8003cbc <HAL_RCCEx_PeriphCLKConfig+0x314>
 8003c8c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003c90:	d109      	bne.n	8003ca6 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
#else
      case RCC_I2C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I2C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003c92:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003c96:	3308      	adds	r3, #8
 8003c98:	4618      	mov	r0, r3
 8003c9a:	f001 febb 	bl	8005a14 <RCCEx_PLL2_Config>
 8003c9e:	4603      	mov	r3, r0
 8003ca0:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
#endif /* RCC_I2C1CLKSOURCE_PLL3R */
        /* I2C1 clock source config set later after clock selection check */
        break;
 8003ca4:	e00b      	b.n	8003cbe <HAL_RCCEx_PeriphCLKConfig+0x316>
      case RCC_I2C1CLKSOURCE_CSI:      /* CSI clock is used as source of I2C1 clock*/
        /* I2C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003ca6:	2301      	movs	r3, #1
 8003ca8:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8003cac:	e007      	b.n	8003cbe <HAL_RCCEx_PeriphCLKConfig+0x316>
        break;
 8003cae:	bf00      	nop
 8003cb0:	e005      	b.n	8003cbe <HAL_RCCEx_PeriphCLKConfig+0x316>
        break;
 8003cb2:	bf00      	nop
 8003cb4:	e003      	b.n	8003cbe <HAL_RCCEx_PeriphCLKConfig+0x316>
 8003cb6:	bf00      	nop
 8003cb8:	44020c00 	.word	0x44020c00
        break;
 8003cbc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003cbe:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d10c      	bne.n	8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x338>
    {
      /* Set the source of I2C1 clock*/
      __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 8003cc6:	4ba5      	ldr	r3, [pc, #660]	@ (8003f5c <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8003cc8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003ccc:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8003cd0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003cd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003cd6:	4aa1      	ldr	r2, [pc, #644]	@ (8003f5c <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8003cd8:	430b      	orrs	r3, r1
 8003cda:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8003cde:	e003      	b.n	8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x340>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ce0:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003ce4:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003ce8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003cec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cf0:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8003cf4:	673b      	str	r3, [r7, #112]	@ 0x70
 8003cf6:	2300      	movs	r3, #0
 8003cf8:	677b      	str	r3, [r7, #116]	@ 0x74
 8003cfa:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8003cfe:	460b      	mov	r3, r1
 8003d00:	4313      	orrs	r3, r2
 8003d02:	d03b      	beq.n	8003d7c <HAL_RCCEx_PeriphCLKConfig+0x3d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    switch (pPeriphClkInit->I2c2ClockSelection)
 8003d04:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003d08:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003d0a:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003d0e:	d01b      	beq.n	8003d48 <HAL_RCCEx_PeriphCLKConfig+0x3a0>
 8003d10:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003d14:	d814      	bhi.n	8003d40 <HAL_RCCEx_PeriphCLKConfig+0x398>
 8003d16:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003d1a:	d017      	beq.n	8003d4c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 8003d1c:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003d20:	d80e      	bhi.n	8003d40 <HAL_RCCEx_PeriphCLKConfig+0x398>
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d014      	beq.n	8003d50 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
 8003d26:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003d2a:	d109      	bne.n	8003d40 <HAL_RCCEx_PeriphCLKConfig+0x398>
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
#else
      case RCC_I2C2CLKSOURCE_PLL2R:  /* PLL32 is used as clock source for I2C2*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003d2c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003d30:	3308      	adds	r3, #8
 8003d32:	4618      	mov	r0, r3
 8003d34:	f001 fe6e 	bl	8005a14 <RCCEx_PLL2_Config>
 8003d38:	4603      	mov	r3, r0
 8003d3a:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
#endif /* RCC_I2C2CLKSOURCE_PLL3R */
        /* I2C2 clock source config set later after clock selection check */
        break;
 8003d3e:	e008      	b.n	8003d52 <HAL_RCCEx_PeriphCLKConfig+0x3aa>
      case RCC_I2C2CLKSOURCE_CSI:      /* CSI clock is used as source of I2C2 clock*/
        /* I2C2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003d40:	2301      	movs	r3, #1
 8003d42:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8003d46:	e004      	b.n	8003d52 <HAL_RCCEx_PeriphCLKConfig+0x3aa>
        break;
 8003d48:	bf00      	nop
 8003d4a:	e002      	b.n	8003d52 <HAL_RCCEx_PeriphCLKConfig+0x3aa>
        break;
 8003d4c:	bf00      	nop
 8003d4e:	e000      	b.n	8003d52 <HAL_RCCEx_PeriphCLKConfig+0x3aa>
        break;
 8003d50:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d52:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d10c      	bne.n	8003d74 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
    {
      /* Set the source of I2C2 clock*/
      __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 8003d5a:	4b80      	ldr	r3, [pc, #512]	@ (8003f5c <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8003d5c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003d60:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 8003d64:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003d68:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003d6a:	4a7c      	ldr	r2, [pc, #496]	@ (8003f5c <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8003d6c:	430b      	orrs	r3, r1
 8003d6e:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8003d72:	e003      	b.n	8003d7c <HAL_RCCEx_PeriphCLKConfig+0x3d4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d74:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003d78:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }
#endif /* I2C4 */

  /*-------------------------- I3C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C1) == RCC_PERIPHCLK_I3C1)
 8003d7c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003d80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d84:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8003d88:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003d8a:	2300      	movs	r3, #0
 8003d8c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003d8e:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8003d92:	460b      	mov	r3, r1
 8003d94:	4313      	orrs	r3, r2
 8003d96:	d033      	beq.n	8003e00 <HAL_RCCEx_PeriphCLKConfig+0x458>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C1CLKSOURCE(pPeriphClkInit->I3c1ClockSelection));

    switch (pPeriphClkInit->I3c1ClockSelection)
 8003d98:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003d9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d9e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003da2:	d015      	beq.n	8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x428>
 8003da4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003da8:	d80e      	bhi.n	8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x420>
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d012      	beq.n	8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x42c>
 8003dae:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003db2:	d109      	bne.n	8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x420>
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
#else
      case RCC_I3C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I3C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003db4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003db8:	3308      	adds	r3, #8
 8003dba:	4618      	mov	r0, r3
 8003dbc:	f001 fe2a 	bl	8005a14 <RCCEx_PLL2_Config>
 8003dc0:	4603      	mov	r3, r0
 8003dc2:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
#endif /* RCC_I3C1CLKSOURCE_PLL3R */
        /* I3C1 clock source config set later after clock selection check */
        break;
 8003dc6:	e006      	b.n	8003dd6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
      case RCC_I3C1CLKSOURCE_HSI:      /* HSI clock is used as source of I3C1 clock*/
        /* I3C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003dc8:	2301      	movs	r3, #1
 8003dca:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8003dce:	e002      	b.n	8003dd6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
        break;
 8003dd0:	bf00      	nop
 8003dd2:	e000      	b.n	8003dd6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
        break;
 8003dd4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003dd6:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d10c      	bne.n	8003df8 <HAL_RCCEx_PeriphCLKConfig+0x450>
    {
      /* Set the source of I3C1 clock*/
      __HAL_RCC_I3C1_CONFIG(pPeriphClkInit->I3c1ClockSelection);
 8003dde:	4b5f      	ldr	r3, [pc, #380]	@ (8003f5c <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8003de0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003de4:	f023 7140 	bic.w	r1, r3, #50331648	@ 0x3000000
 8003de8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003dec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003dee:	4a5b      	ldr	r2, [pc, #364]	@ (8003f5c <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8003df0:	430b      	orrs	r3, r1
 8003df2:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8003df6:	e003      	b.n	8003e00 <HAL_RCCEx_PeriphCLKConfig+0x458>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003df8:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003dfc:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }

#if defined (I3C2)
  /*-------------------------- I3C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C2) == RCC_PERIPHCLK_I3C2)
 8003e00:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003e04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e08:	2100      	movs	r1, #0
 8003e0a:	6639      	str	r1, [r7, #96]	@ 0x60
 8003e0c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003e10:	667b      	str	r3, [r7, #100]	@ 0x64
 8003e12:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8003e16:	460b      	mov	r3, r1
 8003e18:	4313      	orrs	r3, r2
 8003e1a:	d033      	beq.n	8003e84 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C2CLKSOURCE(pPeriphClkInit->I3c2ClockSelection));

    switch (pPeriphClkInit->I3c2ClockSelection)
 8003e1c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003e20:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003e22:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003e26:	d015      	beq.n	8003e54 <HAL_RCCEx_PeriphCLKConfig+0x4ac>
 8003e28:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003e2c:	d80e      	bhi.n	8003e4c <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d012      	beq.n	8003e58 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8003e32:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003e36:	d109      	bne.n	8003e4c <HAL_RCCEx_PeriphCLKConfig+0x4a4>
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
#else
      case RCC_I3C2CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I3C2*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003e38:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003e3c:	3308      	adds	r3, #8
 8003e3e:	4618      	mov	r0, r3
 8003e40:	f001 fde8 	bl	8005a14 <RCCEx_PLL2_Config>
 8003e44:	4603      	mov	r3, r0
 8003e46:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
#endif /* RCC_I3C2CLKSOURCE_PLL3R */
        /* I3C2 clock source config set later after clock selection check */
        break;
 8003e4a:	e006      	b.n	8003e5a <HAL_RCCEx_PeriphCLKConfig+0x4b2>
      case RCC_I3C2CLKSOURCE_HSI:      /* HSI clock is used as source of I3C2 clock*/
        /* I3C2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003e4c:	2301      	movs	r3, #1
 8003e4e:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8003e52:	e002      	b.n	8003e5a <HAL_RCCEx_PeriphCLKConfig+0x4b2>
        break;
 8003e54:	bf00      	nop
 8003e56:	e000      	b.n	8003e5a <HAL_RCCEx_PeriphCLKConfig+0x4b2>
        break;
 8003e58:	bf00      	nop
    }
    if (ret == HAL_OK)
 8003e5a:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d10c      	bne.n	8003e7c <HAL_RCCEx_PeriphCLKConfig+0x4d4>
    {
      /* Set the source of I3C2 clock*/
      __HAL_RCC_I3C2_CONFIG(pPeriphClkInit->I3c2ClockSelection);
 8003e62:	4b3e      	ldr	r3, [pc, #248]	@ (8003f5c <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8003e64:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003e68:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8003e6c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003e70:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003e72:	4a3a      	ldr	r2, [pc, #232]	@ (8003f5c <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8003e74:	430b      	orrs	r3, r1
 8003e76:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8003e7a:	e003      	b.n	8003e84 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e7c:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003e80:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }
#endif /* I3C2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8003e84:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003e88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e8c:	2100      	movs	r1, #0
 8003e8e:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003e90:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003e94:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003e96:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8003e9a:	460b      	mov	r3, r1
 8003e9c:	4313      	orrs	r3, r2
 8003e9e:	d00e      	beq.n	8003ebe <HAL_RCCEx_PeriphCLKConfig+0x516>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(pPeriphClkInit->TimPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(pPeriphClkInit->TimPresSelection);
 8003ea0:	4b2e      	ldr	r3, [pc, #184]	@ (8003f5c <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8003ea2:	69db      	ldr	r3, [r3, #28]
 8003ea4:	4a2d      	ldr	r2, [pc, #180]	@ (8003f5c <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8003ea6:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8003eaa:	61d3      	str	r3, [r2, #28]
 8003eac:	4b2b      	ldr	r3, [pc, #172]	@ (8003f5c <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8003eae:	69d9      	ldr	r1, [r3, #28]
 8003eb0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003eb4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003eb8:	4a28      	ldr	r2, [pc, #160]	@ (8003f5c <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8003eba:	430b      	orrs	r3, r1
 8003ebc:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003ebe:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003ec2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ec6:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8003eca:	653b      	str	r3, [r7, #80]	@ 0x50
 8003ecc:	2300      	movs	r3, #0
 8003ece:	657b      	str	r3, [r7, #84]	@ 0x54
 8003ed0:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8003ed4:	460b      	mov	r3, r1
 8003ed6:	4313      	orrs	r3, r2
 8003ed8:	d046      	beq.n	8003f68 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));

    switch (pPeriphClkInit->Lptim1ClockSelection)
 8003eda:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003ede:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ee0:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8003ee4:	d021      	beq.n	8003f2a <HAL_RCCEx_PeriphCLKConfig+0x582>
 8003ee6:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8003eea:	d81a      	bhi.n	8003f22 <HAL_RCCEx_PeriphCLKConfig+0x57a>
 8003eec:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003ef0:	d01d      	beq.n	8003f2e <HAL_RCCEx_PeriphCLKConfig+0x586>
 8003ef2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003ef6:	d814      	bhi.n	8003f22 <HAL_RCCEx_PeriphCLKConfig+0x57a>
 8003ef8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003efc:	d019      	beq.n	8003f32 <HAL_RCCEx_PeriphCLKConfig+0x58a>
 8003efe:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003f02:	d80e      	bhi.n	8003f22 <HAL_RCCEx_PeriphCLKConfig+0x57a>
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d016      	beq.n	8003f36 <HAL_RCCEx_PeriphCLKConfig+0x58e>
 8003f08:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003f0c:	d109      	bne.n	8003f22 <HAL_RCCEx_PeriphCLKConfig+0x57a>
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003f0e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003f12:	3308      	adds	r3, #8
 8003f14:	4618      	mov	r0, r3
 8003f16:	f001 fd7d 	bl	8005a14 <RCCEx_PLL2_Config>
 8003f1a:	4603      	mov	r3, r0
 8003f1c:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 8003f20:	e00a      	b.n	8003f38 <HAL_RCCEx_PeriphCLKConfig+0x590>
      case RCC_LPTIM1CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM1 clock*/
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003f22:	2301      	movs	r3, #1
 8003f24:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8003f28:	e006      	b.n	8003f38 <HAL_RCCEx_PeriphCLKConfig+0x590>
        break;
 8003f2a:	bf00      	nop
 8003f2c:	e004      	b.n	8003f38 <HAL_RCCEx_PeriphCLKConfig+0x590>
        break;
 8003f2e:	bf00      	nop
 8003f30:	e002      	b.n	8003f38 <HAL_RCCEx_PeriphCLKConfig+0x590>
        break;
 8003f32:	bf00      	nop
 8003f34:	e000      	b.n	8003f38 <HAL_RCCEx_PeriphCLKConfig+0x590>
        break;
 8003f36:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f38:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d10f      	bne.n	8003f60 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 8003f40:	4b06      	ldr	r3, [pc, #24]	@ (8003f5c <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8003f42:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8003f46:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 8003f4a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003f4e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f50:	4a02      	ldr	r2, [pc, #8]	@ (8003f5c <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8003f52:	430b      	orrs	r3, r1
 8003f54:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8003f58:	e006      	b.n	8003f68 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8003f5a:	bf00      	nop
 8003f5c:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f60:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003f64:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }

  /*-------------------------- LPTIM2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003f68:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003f6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f70:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8003f74:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003f76:	2300      	movs	r3, #0
 8003f78:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003f7a:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8003f7e:	460b      	mov	r3, r1
 8003f80:	4313      	orrs	r3, r2
 8003f82:	d043      	beq.n	800400c <HAL_RCCEx_PeriphCLKConfig+0x664>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));

    switch (pPeriphClkInit->Lptim2ClockSelection)
 8003f84:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003f88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f8a:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8003f8e:	d021      	beq.n	8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x62c>
 8003f90:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8003f94:	d81a      	bhi.n	8003fcc <HAL_RCCEx_PeriphCLKConfig+0x624>
 8003f96:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003f9a:	d01d      	beq.n	8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x630>
 8003f9c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003fa0:	d814      	bhi.n	8003fcc <HAL_RCCEx_PeriphCLKConfig+0x624>
 8003fa2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003fa6:	d019      	beq.n	8003fdc <HAL_RCCEx_PeriphCLKConfig+0x634>
 8003fa8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003fac:	d80e      	bhi.n	8003fcc <HAL_RCCEx_PeriphCLKConfig+0x624>
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d016      	beq.n	8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x638>
 8003fb2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003fb6:	d109      	bne.n	8003fcc <HAL_RCCEx_PeriphCLKConfig+0x624>
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003fb8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003fbc:	3308      	adds	r3, #8
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	f001 fd28 	bl	8005a14 <RCCEx_PLL2_Config>
 8003fc4:	4603      	mov	r3, r0
 8003fc6:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 8003fca:	e00a      	b.n	8003fe2 <HAL_RCCEx_PeriphCLKConfig+0x63a>
      case RCC_LPTIM2CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM2 clock*/
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003fcc:	2301      	movs	r3, #1
 8003fce:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8003fd2:	e006      	b.n	8003fe2 <HAL_RCCEx_PeriphCLKConfig+0x63a>
        break;
 8003fd4:	bf00      	nop
 8003fd6:	e004      	b.n	8003fe2 <HAL_RCCEx_PeriphCLKConfig+0x63a>
        break;
 8003fd8:	bf00      	nop
 8003fda:	e002      	b.n	8003fe2 <HAL_RCCEx_PeriphCLKConfig+0x63a>
        break;
 8003fdc:	bf00      	nop
 8003fde:	e000      	b.n	8003fe2 <HAL_RCCEx_PeriphCLKConfig+0x63a>
        break;
 8003fe0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003fe2:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d10c      	bne.n	8004004 <HAL_RCCEx_PeriphCLKConfig+0x65c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 8003fea:	4bb6      	ldr	r3, [pc, #728]	@ (80042c4 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003fec:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8003ff0:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8003ff4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003ff8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ffa:	4ab2      	ldr	r2, [pc, #712]	@ (80042c4 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8003ffc:	430b      	orrs	r3, r1
 8003ffe:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8004002:	e003      	b.n	800400c <HAL_RCCEx_PeriphCLKConfig+0x664>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004004:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8004008:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }
#endif /* SAI2*/

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 800400c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004010:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004014:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8004018:	643b      	str	r3, [r7, #64]	@ 0x40
 800401a:	2300      	movs	r3, #0
 800401c:	647b      	str	r3, [r7, #68]	@ 0x44
 800401e:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8004022:	460b      	mov	r3, r1
 8004024:	4313      	orrs	r3, r2
 8004026:	d030      	beq.n	800408a <HAL_RCCEx_PeriphCLKConfig+0x6e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 8004028:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800402c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800402e:	2b05      	cmp	r3, #5
 8004030:	d80f      	bhi.n	8004052 <HAL_RCCEx_PeriphCLKConfig+0x6aa>
 8004032:	2b03      	cmp	r3, #3
 8004034:	d211      	bcs.n	800405a <HAL_RCCEx_PeriphCLKConfig+0x6b2>
 8004036:	2b01      	cmp	r3, #1
 8004038:	d911      	bls.n	800405e <HAL_RCCEx_PeriphCLKConfig+0x6b6>
 800403a:	2b02      	cmp	r3, #2
 800403c:	d109      	bne.n	8004052 <HAL_RCCEx_PeriphCLKConfig+0x6aa>
        /* ADCDAC clock source config set later after clock selection check */
        break;

      case RCC_ADCDACCLKSOURCE_PLL2R:
        /* PLL2 input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800403e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004042:	3308      	adds	r3, #8
 8004044:	4618      	mov	r0, r3
 8004046:	f001 fce5 	bl	8005a14 <RCCEx_PLL2_Config>
 800404a:	4603      	mov	r3, r0
 800404c:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8004050:	e006      	b.n	8004060 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
        /* ADCDAC clock source configuration done later after clock selection check */
        break;


      default:
        ret = HAL_ERROR;
 8004052:	2301      	movs	r3, #1
 8004054:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8004058:	e002      	b.n	8004060 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
        break;
 800405a:	bf00      	nop
 800405c:	e000      	b.n	8004060 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
        break;
 800405e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004060:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8004064:	2b00      	cmp	r3, #0
 8004066:	d10c      	bne.n	8004082 <HAL_RCCEx_PeriphCLKConfig+0x6da>
    {
      /* Configure the ADCDAC interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 8004068:	4b96      	ldr	r3, [pc, #600]	@ (80042c4 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 800406a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800406e:	f023 0107 	bic.w	r1, r3, #7
 8004072:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004076:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004078:	4a92      	ldr	r2, [pc, #584]	@ (80042c4 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 800407a:	430b      	orrs	r3, r1
 800407c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8004080:	e003      	b.n	800408a <HAL_RCCEx_PeriphCLKConfig+0x6e2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004082:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8004086:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }

  }

  /*-------------------------- DAC low-power clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC_LP) == RCC_PERIPHCLK_DAC_LP)
 800408a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800408e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004092:	2100      	movs	r1, #0
 8004094:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004096:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800409a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800409c:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80040a0:	460b      	mov	r3, r1
 80040a2:	4313      	orrs	r3, r2
 80040a4:	d022      	beq.n	80040ec <HAL_RCCEx_PeriphCLKConfig+0x744>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DACLPCLKSOURCE(pPeriphClkInit->DacLowPowerClockSelection));

    switch (pPeriphClkInit->DacLowPowerClockSelection)
 80040a6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80040aa:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d005      	beq.n	80040bc <HAL_RCCEx_PeriphCLKConfig+0x714>
 80040b0:	2b08      	cmp	r3, #8
 80040b2:	d005      	beq.n	80040c0 <HAL_RCCEx_PeriphCLKConfig+0x718>
        /* LSI is used as clock source for DAC low-power clock */
        /* DAC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80040b4:	2301      	movs	r3, #1
 80040b6:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 80040ba:	e002      	b.n	80040c2 <HAL_RCCEx_PeriphCLKConfig+0x71a>
        break;
 80040bc:	bf00      	nop
 80040be:	e000      	b.n	80040c2 <HAL_RCCEx_PeriphCLKConfig+0x71a>
        break;
 80040c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80040c2:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d10c      	bne.n	80040e4 <HAL_RCCEx_PeriphCLKConfig+0x73c>
    {
      /* Configure the DAC low-power interface clock source */
      __HAL_RCC_DAC_LP_CONFIG(pPeriphClkInit->DacLowPowerClockSelection);
 80040ca:	4b7e      	ldr	r3, [pc, #504]	@ (80042c4 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 80040cc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80040d0:	f023 0108 	bic.w	r1, r3, #8
 80040d4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80040d8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80040da:	4a7a      	ldr	r2, [pc, #488]	@ (80042c4 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 80040dc:	430b      	orrs	r3, r1
 80040de:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80040e2:	e003      	b.n	80040ec <HAL_RCCEx_PeriphCLKConfig+0x744>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040e4:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80040e8:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }

  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80040ec:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80040f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040f4:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80040f8:	633b      	str	r3, [r7, #48]	@ 0x30
 80040fa:	2300      	movs	r3, #0
 80040fc:	637b      	str	r3, [r7, #52]	@ 0x34
 80040fe:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8004102:	460b      	mov	r3, r1
 8004104:	4313      	orrs	r3, r2
 8004106:	f000 80b0 	beq.w	800426a <HAL_RCCEx_PeriphCLKConfig+0x8c2>

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 800410a:	4b6f      	ldr	r3, [pc, #444]	@ (80042c8 <HAL_RCCEx_PeriphCLKConfig+0x920>)
 800410c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800410e:	4a6e      	ldr	r2, [pc, #440]	@ (80042c8 <HAL_RCCEx_PeriphCLKConfig+0x920>)
 8004110:	f043 0301 	orr.w	r3, r3, #1
 8004114:	6253      	str	r3, [r2, #36]	@ 0x24

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004116:	f7fd fdf3 	bl	8001d00 <HAL_GetTick>
 800411a:	f8c7 009c 	str.w	r0, [r7, #156]	@ 0x9c

    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 800411e:	e00b      	b.n	8004138 <HAL_RCCEx_PeriphCLKConfig+0x790>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004120:	f7fd fdee 	bl	8001d00 <HAL_GetTick>
 8004124:	4602      	mov	r2, r0
 8004126:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800412a:	1ad3      	subs	r3, r2, r3
 800412c:	2b02      	cmp	r3, #2
 800412e:	d903      	bls.n	8004138 <HAL_RCCEx_PeriphCLKConfig+0x790>
      {
        ret = HAL_TIMEOUT;
 8004130:	2303      	movs	r3, #3
 8004132:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8004136:	e005      	b.n	8004144 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8004138:	4b63      	ldr	r3, [pc, #396]	@ (80042c8 <HAL_RCCEx_PeriphCLKConfig+0x920>)
 800413a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800413c:	f003 0301 	and.w	r3, r3, #1
 8004140:	2b00      	cmp	r3, #0
 8004142:	d0ed      	beq.n	8004120 <HAL_RCCEx_PeriphCLKConfig+0x778>
      }
    }

    if (ret == HAL_OK)
 8004144:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8004148:	2b00      	cmp	r3, #0
 800414a:	f040 808a 	bne.w	8004262 <HAL_RCCEx_PeriphCLKConfig+0x8ba>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800414e:	4b5d      	ldr	r3, [pc, #372]	@ (80042c4 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8004150:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004154:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004158:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 800415c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8004160:	2b00      	cmp	r3, #0
 8004162:	d022      	beq.n	80041aa <HAL_RCCEx_PeriphCLKConfig+0x802>
 8004164:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004168:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800416a:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 800416e:	429a      	cmp	r2, r3
 8004170:	d01b      	beq.n	80041aa <HAL_RCCEx_PeriphCLKConfig+0x802>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004172:	4b54      	ldr	r3, [pc, #336]	@ (80042c4 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8004174:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004178:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800417c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004180:	4b50      	ldr	r3, [pc, #320]	@ (80042c4 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8004182:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004186:	4a4f      	ldr	r2, [pc, #316]	@ (80042c4 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8004188:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800418c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004190:	4b4c      	ldr	r3, [pc, #304]	@ (80042c4 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8004192:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004196:	4a4b      	ldr	r2, [pc, #300]	@ (80042c4 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8004198:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800419c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80041a0:	4a48      	ldr	r2, [pc, #288]	@ (80042c4 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 80041a2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80041a6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80041aa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80041ae:	f003 0301 	and.w	r3, r3, #1
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d019      	beq.n	80041ea <HAL_RCCEx_PeriphCLKConfig+0x842>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041b6:	f7fd fda3 	bl	8001d00 <HAL_GetTick>
 80041ba:	f8c7 009c 	str.w	r0, [r7, #156]	@ 0x9c

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80041be:	e00d      	b.n	80041dc <HAL_RCCEx_PeriphCLKConfig+0x834>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80041c0:	f7fd fd9e 	bl	8001d00 <HAL_GetTick>
 80041c4:	4602      	mov	r2, r0
 80041c6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80041ca:	1ad3      	subs	r3, r2, r3
 80041cc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80041d0:	4293      	cmp	r3, r2
 80041d2:	d903      	bls.n	80041dc <HAL_RCCEx_PeriphCLKConfig+0x834>
          {
            ret = HAL_TIMEOUT;
 80041d4:	2303      	movs	r3, #3
 80041d6:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
            break;
 80041da:	e006      	b.n	80041ea <HAL_RCCEx_PeriphCLKConfig+0x842>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80041dc:	4b39      	ldr	r3, [pc, #228]	@ (80042c4 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 80041de:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80041e2:	f003 0302 	and.w	r3, r3, #2
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d0ea      	beq.n	80041c0 <HAL_RCCEx_PeriphCLKConfig+0x818>
          }
        }
      }

      if (ret == HAL_OK)
 80041ea:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d132      	bne.n	8004258 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 80041f2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80041f6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80041f8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80041fc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004200:	d10f      	bne.n	8004222 <HAL_RCCEx_PeriphCLKConfig+0x87a>
 8004202:	4b30      	ldr	r3, [pc, #192]	@ (80042c4 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8004204:	69db      	ldr	r3, [r3, #28]
 8004206:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 800420a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800420e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004210:	091b      	lsrs	r3, r3, #4
 8004212:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8004216:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 800421a:	4a2a      	ldr	r2, [pc, #168]	@ (80042c4 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 800421c:	430b      	orrs	r3, r1
 800421e:	61d3      	str	r3, [r2, #28]
 8004220:	e005      	b.n	800422e <HAL_RCCEx_PeriphCLKConfig+0x886>
 8004222:	4b28      	ldr	r3, [pc, #160]	@ (80042c4 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8004224:	69db      	ldr	r3, [r3, #28]
 8004226:	4a27      	ldr	r2, [pc, #156]	@ (80042c4 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8004228:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800422c:	61d3      	str	r3, [r2, #28]
 800422e:	4b25      	ldr	r3, [pc, #148]	@ (80042c4 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8004230:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004234:	4a23      	ldr	r2, [pc, #140]	@ (80042c4 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8004236:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800423a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800423e:	4b21      	ldr	r3, [pc, #132]	@ (80042c4 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8004240:	f8d3 10f0 	ldr.w	r1, [r3, #240]	@ 0xf0
 8004244:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004248:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800424a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800424e:	4a1d      	ldr	r2, [pc, #116]	@ (80042c4 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8004250:	430b      	orrs	r3, r1
 8004252:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8004256:	e008      	b.n	800426a <HAL_RCCEx_PeriphCLKConfig+0x8c2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004258:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 800425c:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
 8004260:	e003      	b.n	800426a <HAL_RCCEx_PeriphCLKConfig+0x8c2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004262:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8004266:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }

  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800426a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800426e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004272:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 8004276:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004278:	2300      	movs	r3, #0
 800427a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800427c:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8004280:	460b      	mov	r3, r1
 8004282:	4313      	orrs	r3, r2
 8004284:	d038      	beq.n	80042f8 <HAL_RCCEx_PeriphCLKConfig+0x950>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 8004286:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800428a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800428c:	2b30      	cmp	r3, #48	@ 0x30
 800428e:	d014      	beq.n	80042ba <HAL_RCCEx_PeriphCLKConfig+0x912>
 8004290:	2b30      	cmp	r3, #48	@ 0x30
 8004292:	d80e      	bhi.n	80042b2 <HAL_RCCEx_PeriphCLKConfig+0x90a>
 8004294:	2b20      	cmp	r3, #32
 8004296:	d012      	beq.n	80042be <HAL_RCCEx_PeriphCLKConfig+0x916>
 8004298:	2b20      	cmp	r3, #32
 800429a:	d80a      	bhi.n	80042b2 <HAL_RCCEx_PeriphCLKConfig+0x90a>
 800429c:	2b00      	cmp	r3, #0
 800429e:	d015      	beq.n	80042cc <HAL_RCCEx_PeriphCLKConfig+0x924>
 80042a0:	2b10      	cmp	r3, #16
 80042a2:	d106      	bne.n	80042b2 <HAL_RCCEx_PeriphCLKConfig+0x90a>
        /* RNG clock source configuration done later after clock selection check */
        break;

      case RCC_RNGCLKSOURCE_PLL1Q: /* PLL1 is used as clock source for RNG*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80042a4:	4b07      	ldr	r3, [pc, #28]	@ (80042c4 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 80042a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042a8:	4a06      	ldr	r2, [pc, #24]	@ (80042c4 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 80042aa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80042ae:	6293      	str	r3, [r2, #40]	@ 0x28
        /* RNG clock source configuration done later after clock selection check */
        break;
 80042b0:	e00d      	b.n	80042ce <HAL_RCCEx_PeriphCLKConfig+0x926>

        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80042b2:	2301      	movs	r3, #1
 80042b4:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 80042b8:	e009      	b.n	80042ce <HAL_RCCEx_PeriphCLKConfig+0x926>
        break;
 80042ba:	bf00      	nop
 80042bc:	e007      	b.n	80042ce <HAL_RCCEx_PeriphCLKConfig+0x926>
        break;
 80042be:	bf00      	nop
 80042c0:	e005      	b.n	80042ce <HAL_RCCEx_PeriphCLKConfig+0x926>
 80042c2:	bf00      	nop
 80042c4:	44020c00 	.word	0x44020c00
 80042c8:	44020800 	.word	0x44020800
        break;
 80042cc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80042ce:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d10c      	bne.n	80042f0 <HAL_RCCEx_PeriphCLKConfig+0x948>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 80042d6:	4bb5      	ldr	r3, [pc, #724]	@ (80045ac <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 80042d8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80042dc:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80042e0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80042e4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80042e6:	49b1      	ldr	r1, [pc, #708]	@ (80045ac <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 80042e8:	4313      	orrs	r3, r2
 80042ea:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
 80042ee:	e003      	b.n	80042f8 <HAL_RCCEx_PeriphCLKConfig+0x950>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042f0:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80042f4:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2

  }
#endif /* SDMMC2 */

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 80042f8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80042fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004300:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 8004304:	623b      	str	r3, [r7, #32]
 8004306:	2300      	movs	r3, #0
 8004308:	627b      	str	r3, [r7, #36]	@ 0x24
 800430a:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800430e:	460b      	mov	r3, r1
 8004310:	4313      	orrs	r3, r2
 8004312:	d03c      	beq.n	800438e <HAL_RCCEx_PeriphCLKConfig+0x9e6>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    switch (pPeriphClkInit->Spi1ClockSelection)
 8004314:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004318:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800431a:	2b04      	cmp	r3, #4
 800431c:	d81d      	bhi.n	800435a <HAL_RCCEx_PeriphCLKConfig+0x9b2>
 800431e:	a201      	add	r2, pc, #4	@ (adr r2, 8004324 <HAL_RCCEx_PeriphCLKConfig+0x97c>)
 8004320:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004324:	08004339 	.word	0x08004339
 8004328:	08004347 	.word	0x08004347
 800432c:	0800435b 	.word	0x0800435b
 8004330:	08004363 	.word	0x08004363
 8004334:	08004363 	.word	0x08004363
    {
      case RCC_SPI1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI1 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004338:	4b9c      	ldr	r3, [pc, #624]	@ (80045ac <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 800433a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800433c:	4a9b      	ldr	r2, [pc, #620]	@ (80045ac <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 800433e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004342:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8004344:	e00e      	b.n	8004364 <HAL_RCCEx_PeriphCLKConfig+0x9bc>

      case RCC_SPI1CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004346:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800434a:	3308      	adds	r3, #8
 800434c:	4618      	mov	r0, r3
 800434e:	f001 fb61 	bl	8005a14 <RCCEx_PLL2_Config>
 8004352:	4603      	mov	r3, r0
 8004354:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8004358:	e004      	b.n	8004364 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1 clock */
        /* SPI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800435a:	2301      	movs	r3, #1
 800435c:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8004360:	e000      	b.n	8004364 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
        break;
 8004362:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004364:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8004368:	2b00      	cmp	r3, #0
 800436a:	d10c      	bne.n	8004386 <HAL_RCCEx_PeriphCLKConfig+0x9de>
    {
      /* Configure the SPI1 clock source */
      __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 800436c:	4b8f      	ldr	r3, [pc, #572]	@ (80045ac <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 800436e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004372:	f023 0207 	bic.w	r2, r3, #7
 8004376:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800437a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800437c:	498b      	ldr	r1, [pc, #556]	@ (80045ac <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 800437e:	4313      	orrs	r3, r2
 8004380:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8004384:	e003      	b.n	800438e <HAL_RCCEx_PeriphCLKConfig+0x9e6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004386:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 800438a:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }

  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 800438e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004392:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004396:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 800439a:	61bb      	str	r3, [r7, #24]
 800439c:	2300      	movs	r3, #0
 800439e:	61fb      	str	r3, [r7, #28]
 80043a0:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80043a4:	460b      	mov	r3, r1
 80043a6:	4313      	orrs	r3, r2
 80043a8:	d03c      	beq.n	8004424 <HAL_RCCEx_PeriphCLKConfig+0xa7c>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    switch (pPeriphClkInit->Spi2ClockSelection)
 80043aa:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80043ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80043b0:	2b20      	cmp	r3, #32
 80043b2:	d01f      	beq.n	80043f4 <HAL_RCCEx_PeriphCLKConfig+0xa4c>
 80043b4:	2b20      	cmp	r3, #32
 80043b6:	d819      	bhi.n	80043ec <HAL_RCCEx_PeriphCLKConfig+0xa44>
 80043b8:	2b18      	cmp	r3, #24
 80043ba:	d01d      	beq.n	80043f8 <HAL_RCCEx_PeriphCLKConfig+0xa50>
 80043bc:	2b18      	cmp	r3, #24
 80043be:	d815      	bhi.n	80043ec <HAL_RCCEx_PeriphCLKConfig+0xa44>
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d002      	beq.n	80043ca <HAL_RCCEx_PeriphCLKConfig+0xa22>
 80043c4:	2b08      	cmp	r3, #8
 80043c6:	d007      	beq.n	80043d8 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 80043c8:	e010      	b.n	80043ec <HAL_RCCEx_PeriphCLKConfig+0xa44>
    {
      case RCC_SPI2CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI2 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80043ca:	4b78      	ldr	r3, [pc, #480]	@ (80045ac <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 80043cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043ce:	4a77      	ldr	r2, [pc, #476]	@ (80045ac <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 80043d0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80043d4:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 80043d6:	e010      	b.n	80043fa <HAL_RCCEx_PeriphCLKConfig+0xa52>

      case RCC_SPI2CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80043d8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80043dc:	3308      	adds	r3, #8
 80043de:	4618      	mov	r0, r3
 80043e0:	f001 fb18 	bl	8005a14 <RCCEx_PLL2_Config>
 80043e4:	4603      	mov	r3, r0
 80043e6:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 80043ea:	e006      	b.n	80043fa <HAL_RCCEx_PeriphCLKConfig+0xa52>
        /* HSI, HSE, or CSI oscillator is used as source of SPI2 clock */
        /* SPI2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80043ec:	2301      	movs	r3, #1
 80043ee:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 80043f2:	e002      	b.n	80043fa <HAL_RCCEx_PeriphCLKConfig+0xa52>
        break;
 80043f4:	bf00      	nop
 80043f6:	e000      	b.n	80043fa <HAL_RCCEx_PeriphCLKConfig+0xa52>
        break;
 80043f8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80043fa:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d10c      	bne.n	800441c <HAL_RCCEx_PeriphCLKConfig+0xa74>
    {
      /* Configure the SPI2 clock source */
      __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 8004402:	4b6a      	ldr	r3, [pc, #424]	@ (80045ac <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8004404:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004408:	f023 0238 	bic.w	r2, r3, #56	@ 0x38
 800440c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004410:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004412:	4966      	ldr	r1, [pc, #408]	@ (80045ac <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8004414:	4313      	orrs	r3, r2
 8004416:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 800441a:	e003      	b.n	8004424 <HAL_RCCEx_PeriphCLKConfig+0xa7c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800441c:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8004420:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }

  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8004424:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004428:	e9d3 2300 	ldrd	r2, r3, [r3]
 800442c:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8004430:	613b      	str	r3, [r7, #16]
 8004432:	2300      	movs	r3, #0
 8004434:	617b      	str	r3, [r7, #20]
 8004436:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800443a:	460b      	mov	r3, r1
 800443c:	4313      	orrs	r3, r2
 800443e:	d03e      	beq.n	80044be <HAL_RCCEx_PeriphCLKConfig+0xb16>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    switch (pPeriphClkInit->Spi3ClockSelection)
 8004440:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004444:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004446:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800444a:	d020      	beq.n	800448e <HAL_RCCEx_PeriphCLKConfig+0xae6>
 800444c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004450:	d819      	bhi.n	8004486 <HAL_RCCEx_PeriphCLKConfig+0xade>
 8004452:	2bc0      	cmp	r3, #192	@ 0xc0
 8004454:	d01d      	beq.n	8004492 <HAL_RCCEx_PeriphCLKConfig+0xaea>
 8004456:	2bc0      	cmp	r3, #192	@ 0xc0
 8004458:	d815      	bhi.n	8004486 <HAL_RCCEx_PeriphCLKConfig+0xade>
 800445a:	2b00      	cmp	r3, #0
 800445c:	d002      	beq.n	8004464 <HAL_RCCEx_PeriphCLKConfig+0xabc>
 800445e:	2b40      	cmp	r3, #64	@ 0x40
 8004460:	d007      	beq.n	8004472 <HAL_RCCEx_PeriphCLKConfig+0xaca>
 8004462:	e010      	b.n	8004486 <HAL_RCCEx_PeriphCLKConfig+0xade>
    {
      case RCC_SPI3CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI3 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004464:	4b51      	ldr	r3, [pc, #324]	@ (80045ac <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8004466:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004468:	4a50      	ldr	r2, [pc, #320]	@ (80045ac <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 800446a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800446e:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 8004470:	e010      	b.n	8004494 <HAL_RCCEx_PeriphCLKConfig+0xaec>

      case RCC_SPI3CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI3*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004472:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004476:	3308      	adds	r3, #8
 8004478:	4618      	mov	r0, r3
 800447a:	f001 facb 	bl	8005a14 <RCCEx_PLL2_Config>
 800447e:	4603      	mov	r3, r0
 8004480:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 8004484:	e006      	b.n	8004494 <HAL_RCCEx_PeriphCLKConfig+0xaec>
        /* HSI, HSE, or CSI oscillator is used as source of SPI3 clock */
        /* SPI3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004486:	2301      	movs	r3, #1
 8004488:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 800448c:	e002      	b.n	8004494 <HAL_RCCEx_PeriphCLKConfig+0xaec>
        break;
 800448e:	bf00      	nop
 8004490:	e000      	b.n	8004494 <HAL_RCCEx_PeriphCLKConfig+0xaec>
        break;
 8004492:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004494:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8004498:	2b00      	cmp	r3, #0
 800449a:	d10c      	bne.n	80044b6 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    {
      /* Configure the SPI3 clock source */
      __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 800449c:	4b43      	ldr	r3, [pc, #268]	@ (80045ac <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 800449e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80044a2:	f423 72e0 	bic.w	r2, r3, #448	@ 0x1c0
 80044a6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80044aa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80044ac:	493f      	ldr	r1, [pc, #252]	@ (80045ac <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 80044ae:	4313      	orrs	r3, r2
 80044b0:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 80044b4:	e003      	b.n	80044be <HAL_RCCEx_PeriphCLKConfig+0xb16>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044b6:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80044ba:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }
#endif /* OCTOSPI1*/

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80044be:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80044c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044c6:	2100      	movs	r1, #0
 80044c8:	60b9      	str	r1, [r7, #8]
 80044ca:	f003 0304 	and.w	r3, r3, #4
 80044ce:	60fb      	str	r3, [r7, #12]
 80044d0:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80044d4:	460b      	mov	r3, r1
 80044d6:	4313      	orrs	r3, r2
 80044d8:	d038      	beq.n	800454c <HAL_RCCEx_PeriphCLKConfig+0xba4>
  {
    assert_param(IS_RCC_FDCANCLK(pPeriphClkInit->FdcanClockSelection));

    switch (pPeriphClkInit->FdcanClockSelection)
 80044da:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80044de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80044e0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80044e4:	d00e      	beq.n	8004504 <HAL_RCCEx_PeriphCLKConfig+0xb5c>
 80044e6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80044ea:	d815      	bhi.n	8004518 <HAL_RCCEx_PeriphCLKConfig+0xb70>
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d017      	beq.n	8004520 <HAL_RCCEx_PeriphCLKConfig+0xb78>
 80044f0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80044f4:	d110      	bne.n	8004518 <HAL_RCCEx_PeriphCLKConfig+0xb70>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for FDCAN kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80044f6:	4b2d      	ldr	r3, [pc, #180]	@ (80045ac <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 80044f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044fa:	4a2c      	ldr	r2, [pc, #176]	@ (80045ac <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 80044fc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004500:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8004502:	e00e      	b.n	8004522 <HAL_RCCEx_PeriphCLKConfig+0xb7a>

      case RCC_FDCANCLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for FDCAN kernel clock*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004504:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004508:	3308      	adds	r3, #8
 800450a:	4618      	mov	r0, r3
 800450c:	f001 fa82 	bl	8005a14 <RCCEx_PLL2_Config>
 8004510:	4603      	mov	r3, r0
 8004512:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8004516:	e004      	b.n	8004522 <HAL_RCCEx_PeriphCLKConfig+0xb7a>

      default:
        ret = HAL_ERROR;
 8004518:	2301      	movs	r3, #1
 800451a:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 800451e:	e000      	b.n	8004522 <HAL_RCCEx_PeriphCLKConfig+0xb7a>
        break;
 8004520:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004522:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8004526:	2b00      	cmp	r3, #0
 8004528:	d10c      	bne.n	8004544 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(pPeriphClkInit->FdcanClockSelection);
 800452a:	4b20      	ldr	r3, [pc, #128]	@ (80045ac <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 800452c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004530:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004534:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004538:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800453a:	491c      	ldr	r1, [pc, #112]	@ (80045ac <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 800453c:	4313      	orrs	r3, r2
 800453e:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
 8004542:	e003      	b.n	800454c <HAL_RCCEx_PeriphCLKConfig+0xba4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004544:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8004548:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }

#if defined(USB_DRD_FS)
  /*------------------------------ USB Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800454c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004550:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004554:	2100      	movs	r1, #0
 8004556:	6039      	str	r1, [r7, #0]
 8004558:	f003 0310 	and.w	r3, r3, #16
 800455c:	607b      	str	r3, [r7, #4]
 800455e:	e9d7 1200 	ldrd	r1, r2, [r7]
 8004562:	460b      	mov	r3, r1
 8004564:	4313      	orrs	r3, r2
 8004566:	d039      	beq.n	80045dc <HAL_RCCEx_PeriphCLKConfig+0xc34>
  {

    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(pPeriphClkInit->UsbClockSelection));

    switch (pPeriphClkInit->UsbClockSelection)
 8004568:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800456c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800456e:	2b30      	cmp	r3, #48	@ 0x30
 8004570:	d01e      	beq.n	80045b0 <HAL_RCCEx_PeriphCLKConfig+0xc08>
 8004572:	2b30      	cmp	r3, #48	@ 0x30
 8004574:	d815      	bhi.n	80045a2 <HAL_RCCEx_PeriphCLKConfig+0xbfa>
 8004576:	2b10      	cmp	r3, #16
 8004578:	d002      	beq.n	8004580 <HAL_RCCEx_PeriphCLKConfig+0xbd8>
 800457a:	2b20      	cmp	r3, #32
 800457c:	d007      	beq.n	800458e <HAL_RCCEx_PeriphCLKConfig+0xbe6>
 800457e:	e010      	b.n	80045a2 <HAL_RCCEx_PeriphCLKConfig+0xbfa>
    {
      case RCC_USBCLKSOURCE_PLL1Q:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004580:	4b0a      	ldr	r3, [pc, #40]	@ (80045ac <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8004582:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004584:	4a09      	ldr	r2, [pc, #36]	@ (80045ac <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8004586:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800458a:	6293      	str	r3, [r2, #40]	@ 0x28

        /* USB clock source configuration done later after clock selection check */
        break;
 800458c:	e011      	b.n	80045b2 <HAL_RCCEx_PeriphCLKConfig+0xc0a>
        /* PLL3Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
#else
      case RCC_USBCLKSOURCE_PLL2Q: /* PLL2 is used as clock source for USB*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800458e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004592:	3308      	adds	r3, #8
 8004594:	4618      	mov	r0, r3
 8004596:	f001 fa3d 	bl	8005a14 <RCCEx_PLL2_Config>
 800459a:	4603      	mov	r3, r0
 800459c:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
#endif /* RCC_USBCLKSOURCE_PLL3Q */
        /* USB clock source configuration done later after clock selection check */
        break;
 80045a0:	e007      	b.n	80045b2 <HAL_RCCEx_PeriphCLKConfig+0xc0a>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80045a2:	2301      	movs	r3, #1
 80045a4:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 80045a8:	e003      	b.n	80045b2 <HAL_RCCEx_PeriphCLKConfig+0xc0a>
 80045aa:	bf00      	nop
 80045ac:	44020c00 	.word	0x44020c00
        break;
 80045b0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80045b2:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d10c      	bne.n	80045d4 <HAL_RCCEx_PeriphCLKConfig+0xc2c>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(pPeriphClkInit->UsbClockSelection);
 80045ba:	4b0c      	ldr	r3, [pc, #48]	@ (80045ec <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80045bc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80045c0:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80045c4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80045c8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80045ca:	4908      	ldr	r1, [pc, #32]	@ (80045ec <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80045cc:	4313      	orrs	r3, r2
 80045ce:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 80045d2:	e003      	b.n	80045dc <HAL_RCCEx_PeriphCLKConfig+0xc34>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045d4:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80045d8:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    __HAL_RCC_CEC_CONFIG(pPeriphClkInit->CecClockSelection);

  }
#endif /* CEC */

  return status;
 80045dc:	f897 30a2 	ldrb.w	r3, [r7, #162]	@ 0xa2
}
 80045e0:	4618      	mov	r0, r3
 80045e2:	37a8      	adds	r7, #168	@ 0xa8
 80045e4:	46bd      	mov	sp, r7
 80045e6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80045ea:	bf00      	nop
 80045ec:	44020c00 	.word	0x44020c00

080045f0 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL1_Clocks pointer to PLL1_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *pPLL1_Clocks)
{
 80045f0:	b480      	push	{r7}
 80045f2:	b08b      	sub	sp, #44	@ 0x2c
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	6078      	str	r0, [r7, #4]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL1M) * PLL1N
  PLL1xCLK = PLL1_VCO / PLL1x
  */

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 80045f8:	4bad      	ldr	r3, [pc, #692]	@ (80048b0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80045fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80045fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004600:	623b      	str	r3, [r7, #32]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8004602:	4bab      	ldr	r3, [pc, #684]	@ (80048b0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8004604:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004606:	f003 0303 	and.w	r3, r3, #3
 800460a:	61fb      	str	r3, [r7, #28]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 800460c:	4ba8      	ldr	r3, [pc, #672]	@ (80048b0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800460e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004610:	0a1b      	lsrs	r3, r3, #8
 8004612:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004616:	61bb      	str	r3, [r7, #24]
  pll1fracen = RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN;
 8004618:	4ba5      	ldr	r3, [pc, #660]	@ (80048b0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800461a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800461c:	f003 0310 	and.w	r3, r3, #16
 8004620:	617b      	str	r3, [r7, #20]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8004622:	4ba3      	ldr	r3, [pc, #652]	@ (80048b0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8004624:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004626:	08db      	lsrs	r3, r3, #3
 8004628:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800462c:	697a      	ldr	r2, [r7, #20]
 800462e:	fb02 f303 	mul.w	r3, r2, r3
 8004632:	ee07 3a90 	vmov	s15, r3
 8004636:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800463a:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  if (pll1m != 0U)
 800463e:	69bb      	ldr	r3, [r7, #24]
 8004640:	2b00      	cmp	r3, #0
 8004642:	f000 8126 	beq.w	8004892 <HAL_RCCEx_GetPLL1ClockFreq+0x2a2>
  {
    switch (pll1source)
 8004646:	69fb      	ldr	r3, [r7, #28]
 8004648:	2b03      	cmp	r3, #3
 800464a:	d053      	beq.n	80046f4 <HAL_RCCEx_GetPLL1ClockFreq+0x104>
 800464c:	69fb      	ldr	r3, [r7, #28]
 800464e:	2b03      	cmp	r3, #3
 8004650:	d86f      	bhi.n	8004732 <HAL_RCCEx_GetPLL1ClockFreq+0x142>
 8004652:	69fb      	ldr	r3, [r7, #28]
 8004654:	2b01      	cmp	r3, #1
 8004656:	d003      	beq.n	8004660 <HAL_RCCEx_GetPLL1ClockFreq+0x70>
 8004658:	69fb      	ldr	r3, [r7, #28]
 800465a:	2b02      	cmp	r3, #2
 800465c:	d02b      	beq.n	80046b6 <HAL_RCCEx_GetPLL1ClockFreq+0xc6>
 800465e:	e068      	b.n	8004732 <HAL_RCCEx_GetPLL1ClockFreq+0x142>
    {

      case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004660:	4b93      	ldr	r3, [pc, #588]	@ (80048b0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	08db      	lsrs	r3, r3, #3
 8004666:	f003 0303 	and.w	r3, r3, #3
 800466a:	4a92      	ldr	r2, [pc, #584]	@ (80048b4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 800466c:	fa22 f303 	lsr.w	r3, r2, r3
 8004670:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	ee07 3a90 	vmov	s15, r3
 8004678:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800467c:	69bb      	ldr	r3, [r7, #24]
 800467e:	ee07 3a90 	vmov	s15, r3
 8004682:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004686:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800468a:	6a3b      	ldr	r3, [r7, #32]
 800468c:	ee07 3a90 	vmov	s15, r3
 8004690:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004694:	ed97 6a04 	vldr	s12, [r7, #16]
 8004698:	eddf 5a87 	vldr	s11, [pc, #540]	@ 80048b8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 800469c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80046a0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80046a4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80046a8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80046ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80046b0:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 80046b4:	e068      	b.n	8004788 <HAL_RCCEx_GetPLL1ClockFreq+0x198>

      case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 80046b6:	69bb      	ldr	r3, [r7, #24]
 80046b8:	ee07 3a90 	vmov	s15, r3
 80046bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046c0:	eddf 6a7e 	vldr	s13, [pc, #504]	@ 80048bc <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 80046c4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80046c8:	6a3b      	ldr	r3, [r7, #32]
 80046ca:	ee07 3a90 	vmov	s15, r3
 80046ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80046d2:	ed97 6a04 	vldr	s12, [r7, #16]
 80046d6:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80048b8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 80046da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80046de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80046e2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80046e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80046ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80046ee:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 80046f2:	e049      	b.n	8004788 <HAL_RCCEx_GetPLL1ClockFreq+0x198>

      case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 80046f4:	69bb      	ldr	r3, [r7, #24]
 80046f6:	ee07 3a90 	vmov	s15, r3
 80046fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046fe:	eddf 6a70 	vldr	s13, [pc, #448]	@ 80048c0 <HAL_RCCEx_GetPLL1ClockFreq+0x2d0>
 8004702:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004706:	6a3b      	ldr	r3, [r7, #32]
 8004708:	ee07 3a90 	vmov	s15, r3
 800470c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004710:	ed97 6a04 	vldr	s12, [r7, #16]
 8004714:	eddf 5a68 	vldr	s11, [pc, #416]	@ 80048b8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 8004718:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800471c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004720:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004724:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004728:	ee67 7a27 	vmul.f32	s15, s14, s15
 800472c:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8004730:	e02a      	b.n	8004788 <HAL_RCCEx_GetPLL1ClockFreq+0x198>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004732:	4b5f      	ldr	r3, [pc, #380]	@ (80048b0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	08db      	lsrs	r3, r3, #3
 8004738:	f003 0303 	and.w	r3, r3, #3
 800473c:	4a5d      	ldr	r2, [pc, #372]	@ (80048b4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 800473e:	fa22 f303 	lsr.w	r3, r2, r3
 8004742:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	ee07 3a90 	vmov	s15, r3
 800474a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800474e:	69bb      	ldr	r3, [r7, #24]
 8004750:	ee07 3a90 	vmov	s15, r3
 8004754:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004758:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800475c:	6a3b      	ldr	r3, [r7, #32]
 800475e:	ee07 3a90 	vmov	s15, r3
 8004762:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004766:	ed97 6a04 	vldr	s12, [r7, #16]
 800476a:	eddf 5a53 	vldr	s11, [pc, #332]	@ 80048b8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 800476e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004772:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004776:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800477a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800477e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004782:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8004786:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004788:	4b49      	ldr	r3, [pc, #292]	@ (80048b0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004790:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004794:	d121      	bne.n	80047da <HAL_RCCEx_GetPLL1ClockFreq+0x1ea>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 8004796:	4b46      	ldr	r3, [pc, #280]	@ (80048b0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8004798:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800479a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d017      	beq.n	80047d2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      {
        pPLL1_Clocks->PLL1_P_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80047a2:	4b43      	ldr	r3, [pc, #268]	@ (80048b0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80047a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80047a6:	0a5b      	lsrs	r3, r3, #9
 80047a8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80047ac:	ee07 3a90 	vmov	s15, r3
 80047b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1P) >> \
                                                                                  RCC_PLL1DIVR_PLL1P_Pos) + \
 80047b4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80047b8:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 80047bc:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 80047c0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80047c4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80047c8:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_P_Frequency = \
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	601a      	str	r2, [r3, #0]
 80047d0:	e006      	b.n	80047e0 <HAL_RCCEx_GetPLL1ClockFreq+0x1f0>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_P_Frequency = 0U;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	2200      	movs	r2, #0
 80047d6:	601a      	str	r2, [r3, #0]
 80047d8:	e002      	b.n	80047e0 <HAL_RCCEx_GetPLL1ClockFreq+0x1f0>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_P_Frequency = 0U;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	2200      	movs	r2, #0
 80047de:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80047e0:	4b33      	ldr	r3, [pc, #204]	@ (80048b0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80047e8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80047ec:	d121      	bne.n	8004832 <HAL_RCCEx_GetPLL1ClockFreq+0x242>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 80047ee:	4b30      	ldr	r3, [pc, #192]	@ (80048b0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80047f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d017      	beq.n	800482a <HAL_RCCEx_GetPLL1ClockFreq+0x23a>
      {
        pPLL1_Clocks->PLL1_Q_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80047fa:	4b2d      	ldr	r3, [pc, #180]	@ (80048b0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80047fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80047fe:	0c1b      	lsrs	r3, r3, #16
 8004800:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004804:	ee07 3a90 	vmov	s15, r3
 8004808:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1Q) >> \
                                                                                  RCC_PLL1DIVR_PLL1Q_Pos) + \
 800480c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004810:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 8004814:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8004818:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800481c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004820:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_Q_Frequency = \
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	605a      	str	r2, [r3, #4]
 8004828:	e006      	b.n	8004838 <HAL_RCCEx_GetPLL1ClockFreq+0x248>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	2200      	movs	r2, #0
 800482e:	605a      	str	r2, [r3, #4]
 8004830:	e002      	b.n	8004838 <HAL_RCCEx_GetPLL1ClockFreq+0x248>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	2200      	movs	r2, #0
 8004836:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004838:	4b1d      	ldr	r3, [pc, #116]	@ (80048b0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004840:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004844:	d121      	bne.n	800488a <HAL_RCCEx_GetPLL1ClockFreq+0x29a>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 8004846:	4b1a      	ldr	r3, [pc, #104]	@ (80048b0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8004848:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800484a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800484e:	2b00      	cmp	r3, #0
 8004850:	d017      	beq.n	8004882 <HAL_RCCEx_GetPLL1ClockFreq+0x292>
      {
        pPLL1_Clocks->PLL1_R_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8004852:	4b17      	ldr	r3, [pc, #92]	@ (80048b0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8004854:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004856:	0e1b      	lsrs	r3, r3, #24
 8004858:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800485c:	ee07 3a90 	vmov	s15, r3
 8004860:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1R) >> \
                                                                                  RCC_PLL1DIVR_PLL1R_Pos) + \
 8004864:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004868:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 800486c:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8004870:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004874:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004878:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_R_Frequency = \
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	609a      	str	r2, [r3, #8]
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8004880:	e010      	b.n	80048a4 <HAL_RCCEx_GetPLL1ClockFreq+0x2b4>
        pPLL1_Clocks->PLL1_R_Frequency = 0U;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	2200      	movs	r2, #0
 8004886:	609a      	str	r2, [r3, #8]
}
 8004888:	e00c      	b.n	80048a4 <HAL_RCCEx_GetPLL1ClockFreq+0x2b4>
      pPLL1_Clocks->PLL1_R_Frequency = 0U;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	2200      	movs	r2, #0
 800488e:	609a      	str	r2, [r3, #8]
}
 8004890:	e008      	b.n	80048a4 <HAL_RCCEx_GetPLL1ClockFreq+0x2b4>
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	2200      	movs	r2, #0
 8004896:	601a      	str	r2, [r3, #0]
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	2200      	movs	r2, #0
 800489c:	605a      	str	r2, [r3, #4]
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	2200      	movs	r2, #0
 80048a2:	609a      	str	r2, [r3, #8]
}
 80048a4:	bf00      	nop
 80048a6:	372c      	adds	r7, #44	@ 0x2c
 80048a8:	46bd      	mov	sp, r7
 80048aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ae:	4770      	bx	lr
 80048b0:	44020c00 	.word	0x44020c00
 80048b4:	03d09000 	.word	0x03d09000
 80048b8:	46000000 	.word	0x46000000
 80048bc:	4a742400 	.word	0x4a742400
 80048c0:	4bbebc20 	.word	0x4bbebc20

080048c4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL2_Clocks pointer to PLL2_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *pPLL2_Clocks)
{
 80048c4:	b480      	push	{r7}
 80048c6:	b08b      	sub	sp, #44	@ 0x2c
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	6078      	str	r0, [r7, #4]
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
  PLL2xCLK = PLL2_VCO / PLL2x
  */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 80048cc:	4bad      	ldr	r3, [pc, #692]	@ (8004b84 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80048ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80048d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048d4:	623b      	str	r3, [r7, #32]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 80048d6:	4bab      	ldr	r3, [pc, #684]	@ (8004b84 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80048d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048da:	f003 0303 	and.w	r3, r3, #3
 80048de:	61fb      	str	r3, [r7, #28]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos);
 80048e0:	4ba8      	ldr	r3, [pc, #672]	@ (8004b84 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80048e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048e4:	0a1b      	lsrs	r3, r3, #8
 80048e6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80048ea:	61bb      	str	r3, [r7, #24]
  pll2fracen = RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN;
 80048ec:	4ba5      	ldr	r3, [pc, #660]	@ (8004b84 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80048ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048f0:	f003 0310 	and.w	r3, r3, #16
 80048f4:	617b      	str	r3, [r7, #20]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 80048f6:	4ba3      	ldr	r3, [pc, #652]	@ (8004b84 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80048f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048fa:	08db      	lsrs	r3, r3, #3
 80048fc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004900:	697a      	ldr	r2, [r7, #20]
 8004902:	fb02 f303 	mul.w	r3, r2, r3
 8004906:	ee07 3a90 	vmov	s15, r3
 800490a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800490e:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  if (pll2m != 0U)
 8004912:	69bb      	ldr	r3, [r7, #24]
 8004914:	2b00      	cmp	r3, #0
 8004916:	f000 8126 	beq.w	8004b66 <HAL_RCCEx_GetPLL2ClockFreq+0x2a2>
  {
    switch (pll2source)
 800491a:	69fb      	ldr	r3, [r7, #28]
 800491c:	2b03      	cmp	r3, #3
 800491e:	d053      	beq.n	80049c8 <HAL_RCCEx_GetPLL2ClockFreq+0x104>
 8004920:	69fb      	ldr	r3, [r7, #28]
 8004922:	2b03      	cmp	r3, #3
 8004924:	d86f      	bhi.n	8004a06 <HAL_RCCEx_GetPLL2ClockFreq+0x142>
 8004926:	69fb      	ldr	r3, [r7, #28]
 8004928:	2b01      	cmp	r3, #1
 800492a:	d003      	beq.n	8004934 <HAL_RCCEx_GetPLL2ClockFreq+0x70>
 800492c:	69fb      	ldr	r3, [r7, #28]
 800492e:	2b02      	cmp	r3, #2
 8004930:	d02b      	beq.n	800498a <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
 8004932:	e068      	b.n	8004a06 <HAL_RCCEx_GetPLL2ClockFreq+0x142>
    {
      case RCC_PLL2_SOURCE_HSI:  /* HSI used as PLL clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004934:	4b93      	ldr	r3, [pc, #588]	@ (8004b84 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	08db      	lsrs	r3, r3, #3
 800493a:	f003 0303 	and.w	r3, r3, #3
 800493e:	4a92      	ldr	r2, [pc, #584]	@ (8004b88 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8004940:	fa22 f303 	lsr.w	r3, r2, r3
 8004944:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	ee07 3a90 	vmov	s15, r3
 800494c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004950:	69bb      	ldr	r3, [r7, #24]
 8004952:	ee07 3a90 	vmov	s15, r3
 8004956:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800495a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800495e:	6a3b      	ldr	r3, [r7, #32]
 8004960:	ee07 3a90 	vmov	s15, r3
 8004964:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004968:	ed97 6a04 	vldr	s12, [r7, #16]
 800496c:	eddf 5a87 	vldr	s11, [pc, #540]	@ 8004b8c <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 8004970:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004974:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004978:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800497c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004980:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004984:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8004988:	e068      	b.n	8004a5c <HAL_RCCEx_GetPLL2ClockFreq+0x198>

      case RCC_PLL2_SOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 800498a:	69bb      	ldr	r3, [r7, #24]
 800498c:	ee07 3a90 	vmov	s15, r3
 8004990:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004994:	eddf 6a7e 	vldr	s13, [pc, #504]	@ 8004b90 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 8004998:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800499c:	6a3b      	ldr	r3, [r7, #32]
 800499e:	ee07 3a90 	vmov	s15, r3
 80049a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80049a6:	ed97 6a04 	vldr	s12, [r7, #16]
 80049aa:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8004b8c <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 80049ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80049b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80049b6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80049ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80049be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80049c2:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 80049c6:	e049      	b.n	8004a5c <HAL_RCCEx_GetPLL2ClockFreq+0x198>

      case RCC_PLL2_SOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 80049c8:	69bb      	ldr	r3, [r7, #24]
 80049ca:	ee07 3a90 	vmov	s15, r3
 80049ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049d2:	eddf 6a70 	vldr	s13, [pc, #448]	@ 8004b94 <HAL_RCCEx_GetPLL2ClockFreq+0x2d0>
 80049d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80049da:	6a3b      	ldr	r3, [r7, #32]
 80049dc:	ee07 3a90 	vmov	s15, r3
 80049e0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80049e4:	ed97 6a04 	vldr	s12, [r7, #16]
 80049e8:	eddf 5a68 	vldr	s11, [pc, #416]	@ 8004b8c <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 80049ec:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80049f0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80049f4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80049f8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80049fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a00:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8004a04:	e02a      	b.n	8004a5c <HAL_RCCEx_GetPLL2ClockFreq+0x198>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004a06:	4b5f      	ldr	r3, [pc, #380]	@ (8004b84 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	08db      	lsrs	r3, r3, #3
 8004a0c:	f003 0303 	and.w	r3, r3, #3
 8004a10:	4a5d      	ldr	r2, [pc, #372]	@ (8004b88 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8004a12:	fa22 f303 	lsr.w	r3, r2, r3
 8004a16:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	ee07 3a90 	vmov	s15, r3
 8004a1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a22:	69bb      	ldr	r3, [r7, #24]
 8004a24:	ee07 3a90 	vmov	s15, r3
 8004a28:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a2c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a30:	6a3b      	ldr	r3, [r7, #32]
 8004a32:	ee07 3a90 	vmov	s15, r3
 8004a36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a3a:	ed97 6a04 	vldr	s12, [r7, #16]
 8004a3e:	eddf 5a53 	vldr	s11, [pc, #332]	@ 8004b8c <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 8004a42:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004a46:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004a4a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004a4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004a52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a56:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8004a5a:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004a5c:	4b49      	ldr	r3, [pc, #292]	@ (8004b84 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004a64:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004a68:	d121      	bne.n	8004aae <HAL_RCCEx_GetPLL2ClockFreq+0x1ea>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 8004a6a:	4b46      	ldr	r3, [pc, #280]	@ (8004b84 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8004a6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a6e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d017      	beq.n	8004aa6 <HAL_RCCEx_GetPLL2ClockFreq+0x1e2>
      {
        pPLL2_Clocks->PLL2_P_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8004a76:	4b43      	ldr	r3, [pc, #268]	@ (8004b84 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8004a78:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a7a:	0a5b      	lsrs	r3, r3, #9
 8004a7c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004a80:	ee07 3a90 	vmov	s15, r3
 8004a84:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2P) >> \
                                                                                  RCC_PLL2DIVR_PLL2P_Pos) + \
 8004a88:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004a8c:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 8004a90:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8004a94:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004a98:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004a9c:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_P_Frequency = \
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	601a      	str	r2, [r3, #0]
 8004aa4:	e006      	b.n	8004ab4 <HAL_RCCEx_GetPLL2ClockFreq+0x1f0>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_P_Frequency = 0U;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	2200      	movs	r2, #0
 8004aaa:	601a      	str	r2, [r3, #0]
 8004aac:	e002      	b.n	8004ab4 <HAL_RCCEx_GetPLL2ClockFreq+0x1f0>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_P_Frequency = 0U;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	2200      	movs	r2, #0
 8004ab2:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004ab4:	4b33      	ldr	r3, [pc, #204]	@ (8004b84 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004abc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004ac0:	d121      	bne.n	8004b06 <HAL_RCCEx_GetPLL2ClockFreq+0x242>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 8004ac2:	4b30      	ldr	r3, [pc, #192]	@ (8004b84 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8004ac4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ac6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d017      	beq.n	8004afe <HAL_RCCEx_GetPLL2ClockFreq+0x23a>
      {
        pPLL2_Clocks->PLL2_Q_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8004ace:	4b2d      	ldr	r3, [pc, #180]	@ (8004b84 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8004ad0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ad2:	0c1b      	lsrs	r3, r3, #16
 8004ad4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004ad8:	ee07 3a90 	vmov	s15, r3
 8004adc:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2Q) >> \
                                                                                  RCC_PLL2DIVR_PLL2Q_Pos) + \
 8004ae0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004ae4:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 8004ae8:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8004aec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004af0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004af4:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_Q_Frequency = \
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	605a      	str	r2, [r3, #4]
 8004afc:	e006      	b.n	8004b0c <HAL_RCCEx_GetPLL2ClockFreq+0x248>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	2200      	movs	r2, #0
 8004b02:	605a      	str	r2, [r3, #4]
 8004b04:	e002      	b.n	8004b0c <HAL_RCCEx_GetPLL2ClockFreq+0x248>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	2200      	movs	r2, #0
 8004b0a:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004b0c:	4b1d      	ldr	r3, [pc, #116]	@ (8004b84 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004b14:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004b18:	d121      	bne.n	8004b5e <HAL_RCCEx_GetPLL2ClockFreq+0x29a>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 8004b1a:	4b1a      	ldr	r3, [pc, #104]	@ (8004b84 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8004b1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b1e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d017      	beq.n	8004b56 <HAL_RCCEx_GetPLL2ClockFreq+0x292>
      {
        pPLL2_Clocks->PLL2_R_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8004b26:	4b17      	ldr	r3, [pc, #92]	@ (8004b84 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8004b28:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b2a:	0e1b      	lsrs	r3, r3, #24
 8004b2c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004b30:	ee07 3a90 	vmov	s15, r3
 8004b34:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2R) >> \
                                                                                  RCC_PLL2DIVR_PLL2R_Pos) + \
 8004b38:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004b3c:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 8004b40:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8004b44:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004b48:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004b4c:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_R_Frequency = \
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	609a      	str	r2, [r3, #8]
  {
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8004b54:	e010      	b.n	8004b78 <HAL_RCCEx_GetPLL2ClockFreq+0x2b4>
        pPLL2_Clocks->PLL2_R_Frequency = 0U;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	2200      	movs	r2, #0
 8004b5a:	609a      	str	r2, [r3, #8]
}
 8004b5c:	e00c      	b.n	8004b78 <HAL_RCCEx_GetPLL2ClockFreq+0x2b4>
      pPLL2_Clocks->PLL2_R_Frequency = 0U;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	2200      	movs	r2, #0
 8004b62:	609a      	str	r2, [r3, #8]
}
 8004b64:	e008      	b.n	8004b78 <HAL_RCCEx_GetPLL2ClockFreq+0x2b4>
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	2200      	movs	r2, #0
 8004b6a:	601a      	str	r2, [r3, #0]
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	2200      	movs	r2, #0
 8004b70:	605a      	str	r2, [r3, #4]
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	2200      	movs	r2, #0
 8004b76:	609a      	str	r2, [r3, #8]
}
 8004b78:	bf00      	nop
 8004b7a:	372c      	adds	r7, #44	@ 0x2c
 8004b7c:	46bd      	mov	sp, r7
 8004b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b82:	4770      	bx	lr
 8004b84:	44020c00 	.word	0x44020c00
 8004b88:	03d09000 	.word	0x03d09000
 8004b8c:	46000000 	.word	0x46000000
 8004b90:	4a742400 	.word	0x4a742400
 8004b94:	4bbebc20 	.word	0x4bbebc20

08004b98 <HAL_RCCEx_GetPeriphCLKFreq>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8004b98:	b580      	push	{r7, lr}
 8004b9a:	b08c      	sub	sp, #48	@ 0x30
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 8004ba2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004ba6:	f102 417e 	add.w	r1, r2, #4261412864	@ 0xfe000000
 8004baa:	430b      	orrs	r3, r1
 8004bac:	d14b      	bne.n	8004c46 <HAL_RCCEx_GetPeriphCLKFreq+0xae>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8004bae:	4bc4      	ldr	r3, [pc, #784]	@ (8004ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 8004bb0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004bb4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004bb8:	62bb      	str	r3, [r7, #40]	@ 0x28

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 8004bba:	4bc1      	ldr	r3, [pc, #772]	@ (8004ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 8004bbc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004bc0:	f003 0302 	and.w	r3, r3, #2
 8004bc4:	2b02      	cmp	r3, #2
 8004bc6:	d108      	bne.n	8004bda <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 8004bc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bca:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004bce:	d104      	bne.n	8004bda <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 8004bd0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004bd4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004bd6:	f000 bf14 	b.w	8005a02 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 8004bda:	4bb9      	ldr	r3, [pc, #740]	@ (8004ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 8004bdc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004be0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004be4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004be8:	d108      	bne.n	8004bfc <HAL_RCCEx_GetPeriphCLKFreq+0x64>
 8004bea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004bf0:	d104      	bne.n	8004bfc <HAL_RCCEx_GetPeriphCLKFreq+0x64>
    {
      frequency = LSI_VALUE;
 8004bf2:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8004bf6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004bf8:	f000 bf03 	b.w	8005a02 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
    }
    /* Check if HSE is ready and if RTC clock selection is HSE_DIVx*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIVx))
 8004bfc:	4bb0      	ldr	r3, [pc, #704]	@ (8004ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c04:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004c08:	d119      	bne.n	8004c3e <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
 8004c0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c0c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004c10:	d115      	bne.n	8004c3e <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
    {
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 8004c12:	4bab      	ldr	r3, [pc, #684]	@ (8004ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 8004c14:	69db      	ldr	r3, [r3, #28]
 8004c16:	f403 537c 	and.w	r3, r3, #16128	@ 0x3f00
 8004c1a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004c1e:	d30a      	bcc.n	8004c36 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
      {
        frequency = (HSE_VALUE / ((uint32_t)(__HAL_RCC_GET_RTC_HSE_PRESCALER() >> RCC_CFGR1_RTCPRE_Pos)));
 8004c20:	4ba7      	ldr	r3, [pc, #668]	@ (8004ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 8004c22:	69db      	ldr	r3, [r3, #28]
 8004c24:	0a1b      	lsrs	r3, r3, #8
 8004c26:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004c2a:	4aa6      	ldr	r2, [pc, #664]	@ (8004ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x32c>)
 8004c2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c30:	62fb      	str	r3, [r7, #44]	@ 0x2c
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 8004c32:	f000 bee6 	b.w	8005a02 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
      }
      else
      {
        frequency = 0U;
 8004c36:	2300      	movs	r3, #0
 8004c38:	62fb      	str	r3, [r7, #44]	@ 0x2c
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 8004c3a:	f000 bee2 	b.w	8005a02 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 8004c3e:	2300      	movs	r3, #0
 8004c40:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004c42:	f000 bede 	b.w	8005a02 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    switch (PeriphClk)
 8004c46:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004c4a:	f5a3 5180 	sub.w	r1, r3, #4096	@ 0x1000
 8004c4e:	ea52 0301 	orrs.w	r3, r2, r1
 8004c52:	f000 838e 	beq.w	8005372 <HAL_RCCEx_GetPeriphCLKFreq+0x7da>
 8004c56:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004c5a:	2a01      	cmp	r2, #1
 8004c5c:	f573 5380 	sbcs.w	r3, r3, #4096	@ 0x1000
 8004c60:	f080 86cc 	bcs.w	80059fc <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8004c64:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004c68:	f5a3 7100 	sub.w	r1, r3, #512	@ 0x200
 8004c6c:	ea52 0301 	orrs.w	r3, r2, r1
 8004c70:	f000 82aa 	beq.w	80051c8 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
 8004c74:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004c78:	2a01      	cmp	r2, #1
 8004c7a:	f573 7300 	sbcs.w	r3, r3, #512	@ 0x200
 8004c7e:	f080 86bd 	bcs.w	80059fc <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8004c82:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004c86:	f1a3 0110 	sub.w	r1, r3, #16
 8004c8a:	ea52 0301 	orrs.w	r3, r2, r1
 8004c8e:	f000 8681 	beq.w	8005994 <HAL_RCCEx_GetPeriphCLKFreq+0xdfc>
 8004c92:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004c96:	2a01      	cmp	r2, #1
 8004c98:	f173 0310 	sbcs.w	r3, r3, #16
 8004c9c:	f080 86ae 	bcs.w	80059fc <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8004ca0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004ca4:	1f19      	subs	r1, r3, #4
 8004ca6:	ea52 0301 	orrs.w	r3, r2, r1
 8004caa:	f000 84b1 	beq.w	8005610 <HAL_RCCEx_GetPeriphCLKFreq+0xa78>
 8004cae:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004cb2:	2a01      	cmp	r2, #1
 8004cb4:	f173 0304 	sbcs.w	r3, r3, #4
 8004cb8:	f080 86a0 	bcs.w	80059fc <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8004cbc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004cc0:	f102 4160 	add.w	r1, r2, #3758096384	@ 0xe0000000
 8004cc4:	430b      	orrs	r3, r1
 8004cc6:	f000 85aa 	beq.w	800581e <HAL_RCCEx_GetPeriphCLKFreq+0xc86>
 8004cca:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004cce:	497e      	ldr	r1, [pc, #504]	@ (8004ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x330>)
 8004cd0:	428a      	cmp	r2, r1
 8004cd2:	f173 0300 	sbcs.w	r3, r3, #0
 8004cd6:	f080 8691 	bcs.w	80059fc <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8004cda:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004cde:	f102 4170 	add.w	r1, r2, #4026531840	@ 0xf0000000
 8004ce2:	430b      	orrs	r3, r1
 8004ce4:	f000 8532 	beq.w	800574c <HAL_RCCEx_GetPeriphCLKFreq+0xbb4>
 8004ce8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004cec:	4977      	ldr	r1, [pc, #476]	@ (8004ecc <HAL_RCCEx_GetPeriphCLKFreq+0x334>)
 8004cee:	428a      	cmp	r2, r1
 8004cf0:	f173 0300 	sbcs.w	r3, r3, #0
 8004cf4:	f080 8682 	bcs.w	80059fc <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8004cf8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004cfc:	f102 4178 	add.w	r1, r2, #4160749568	@ 0xf8000000
 8004d00:	430b      	orrs	r3, r1
 8004d02:	f000 84bc 	beq.w	800567e <HAL_RCCEx_GetPeriphCLKFreq+0xae6>
 8004d06:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004d0a:	4971      	ldr	r1, [pc, #452]	@ (8004ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x338>)
 8004d0c:	428a      	cmp	r2, r1
 8004d0e:	f173 0300 	sbcs.w	r3, r3, #0
 8004d12:	f080 8673 	bcs.w	80059fc <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8004d16:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004d1a:	f102 417c 	add.w	r1, r2, #4227858432	@ 0xfc000000
 8004d1e:	430b      	orrs	r3, r1
 8004d20:	f000 85f2 	beq.w	8005908 <HAL_RCCEx_GetPeriphCLKFreq+0xd70>
 8004d24:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004d28:	496a      	ldr	r1, [pc, #424]	@ (8004ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>)
 8004d2a:	428a      	cmp	r2, r1
 8004d2c:	f173 0300 	sbcs.w	r3, r3, #0
 8004d30:	f080 8664 	bcs.w	80059fc <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8004d34:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004d38:	f5a2 1100 	sub.w	r1, r2, #2097152	@ 0x200000
 8004d3c:	430b      	orrs	r3, r1
 8004d3e:	f000 81e5 	beq.w	800510c <HAL_RCCEx_GetPeriphCLKFreq+0x574>
 8004d42:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004d46:	4964      	ldr	r1, [pc, #400]	@ (8004ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x340>)
 8004d48:	428a      	cmp	r2, r1
 8004d4a:	f173 0300 	sbcs.w	r3, r3, #0
 8004d4e:	f080 8655 	bcs.w	80059fc <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8004d52:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004d56:	f5a2 2180 	sub.w	r1, r2, #262144	@ 0x40000
 8004d5a:	430b      	orrs	r3, r1
 8004d5c:	f000 83cc 	beq.w	80054f8 <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 8004d60:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004d64:	495d      	ldr	r1, [pc, #372]	@ (8004edc <HAL_RCCEx_GetPeriphCLKFreq+0x344>)
 8004d66:	428a      	cmp	r2, r1
 8004d68:	f173 0300 	sbcs.w	r3, r3, #0
 8004d6c:	f080 8646 	bcs.w	80059fc <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8004d70:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004d74:	f5a2 3100 	sub.w	r1, r2, #131072	@ 0x20000
 8004d78:	430b      	orrs	r3, r1
 8004d7a:	f000 8331 	beq.w	80053e0 <HAL_RCCEx_GetPeriphCLKFreq+0x848>
 8004d7e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004d82:	4957      	ldr	r1, [pc, #348]	@ (8004ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x348>)
 8004d84:	428a      	cmp	r2, r1
 8004d86:	f173 0300 	sbcs.w	r3, r3, #0
 8004d8a:	f080 8637 	bcs.w	80059fc <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8004d8e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004d92:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 8004d96:	430b      	orrs	r3, r1
 8004d98:	f000 82bb 	beq.w	8005312 <HAL_RCCEx_GetPeriphCLKFreq+0x77a>
 8004d9c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004da0:	f1b2 1f01 	cmp.w	r2, #65537	@ 0x10001
 8004da4:	f173 0300 	sbcs.w	r3, r3, #0
 8004da8:	f080 8628 	bcs.w	80059fc <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8004dac:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004db0:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 8004db4:	430b      	orrs	r3, r1
 8004db6:	f000 826d 	beq.w	8005294 <HAL_RCCEx_GetPeriphCLKFreq+0x6fc>
 8004dba:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004dbe:	f244 0101 	movw	r1, #16385	@ 0x4001
 8004dc2:	428a      	cmp	r2, r1
 8004dc4:	f173 0300 	sbcs.w	r3, r3, #0
 8004dc8:	f080 8618 	bcs.w	80059fc <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8004dcc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004dd0:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 8004dd4:	430b      	orrs	r3, r1
 8004dd6:	f000 821e 	beq.w	8005216 <HAL_RCCEx_GetPeriphCLKFreq+0x67e>
 8004dda:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004dde:	f242 0101 	movw	r1, #8193	@ 0x2001
 8004de2:	428a      	cmp	r2, r1
 8004de4:	f173 0300 	sbcs.w	r3, r3, #0
 8004de8:	f080 8608 	bcs.w	80059fc <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8004dec:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004df0:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 8004df4:	430b      	orrs	r3, r1
 8004df6:	f000 8137 	beq.w	8005068 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 8004dfa:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004dfe:	f241 0101 	movw	r1, #4097	@ 0x1001
 8004e02:	428a      	cmp	r2, r1
 8004e04:	f173 0300 	sbcs.w	r3, r3, #0
 8004e08:	f080 85f8 	bcs.w	80059fc <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8004e0c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004e10:	1f11      	subs	r1, r2, #4
 8004e12:	430b      	orrs	r3, r1
 8004e14:	f000 80d2 	beq.w	8004fbc <HAL_RCCEx_GetPeriphCLKFreq+0x424>
 8004e18:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004e1c:	2a05      	cmp	r2, #5
 8004e1e:	f173 0300 	sbcs.w	r3, r3, #0
 8004e22:	f080 85eb 	bcs.w	80059fc <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8004e26:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004e2a:	1e51      	subs	r1, r2, #1
 8004e2c:	430b      	orrs	r3, r1
 8004e2e:	d006      	beq.n	8004e3e <HAL_RCCEx_GetPeriphCLKFreq+0x2a6>
 8004e30:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004e34:	1e91      	subs	r1, r2, #2
 8004e36:	430b      	orrs	r3, r1
 8004e38:	d06c      	beq.n	8004f14 <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
 8004e3a:	f000 bddf 	b.w	80059fc <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
        break;
#endif /* SDMMC2 */

      case RCC_PERIPHCLK_USART1:
        /* Get the current USART1 source */
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8004e3e:	4b20      	ldr	r3, [pc, #128]	@ (8004ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 8004e40:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8004e44:	f003 0307 	and.w	r3, r3, #7
 8004e48:	62bb      	str	r3, [r7, #40]	@ 0x28

        if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 8004e4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d104      	bne.n	8004e5a <HAL_RCCEx_GetPeriphCLKFreq+0x2c2>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 8004e50:	f7fe fd7e 	bl	8003950 <HAL_RCC_GetPCLK2Freq>
 8004e54:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* Clock not enabled for USART1 */
        else
        {
          frequency = 0U;
        }
        break;
 8004e56:	f000 bdd4 	b.w	8005a02 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART1CLKSOURCE_PLL2Q))
 8004e5a:	4b19      	ldr	r3, [pc, #100]	@ (8004ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004e62:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004e66:	d10a      	bne.n	8004e7e <HAL_RCCEx_GetPeriphCLKFreq+0x2e6>
 8004e68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e6a:	2b01      	cmp	r3, #1
 8004e6c:	d107      	bne.n	8004e7e <HAL_RCCEx_GetPeriphCLKFreq+0x2e6>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004e6e:	f107 030c 	add.w	r3, r7, #12
 8004e72:	4618      	mov	r0, r3
 8004e74:	f7ff fd26 	bl	80048c4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8004e78:	693b      	ldr	r3, [r7, #16]
 8004e7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004e7c:	e048      	b.n	8004f10 <HAL_RCCEx_GetPeriphCLKFreq+0x378>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 8004e7e:	4b10      	ldr	r3, [pc, #64]	@ (8004ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	f003 0302 	and.w	r3, r3, #2
 8004e86:	2b02      	cmp	r3, #2
 8004e88:	d10c      	bne.n	8004ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x30c>
 8004e8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e8c:	2b03      	cmp	r3, #3
 8004e8e:	d109      	bne.n	8004ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x30c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004e90:	4b0b      	ldr	r3, [pc, #44]	@ (8004ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	08db      	lsrs	r3, r3, #3
 8004e96:	f003 0303 	and.w	r3, r3, #3
 8004e9a:	4a12      	ldr	r2, [pc, #72]	@ (8004ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8004e9c:	fa22 f303 	lsr.w	r3, r2, r3
 8004ea0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004ea2:	e035      	b.n	8004f10 <HAL_RCCEx_GetPeriphCLKFreq+0x378>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_CSI))
 8004ea4:	4b06      	ldr	r3, [pc, #24]	@ (8004ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004eac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004eb0:	d11c      	bne.n	8004eec <HAL_RCCEx_GetPeriphCLKFreq+0x354>
 8004eb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004eb4:	2b04      	cmp	r3, #4
 8004eb6:	d119      	bne.n	8004eec <HAL_RCCEx_GetPeriphCLKFreq+0x354>
          frequency = CSI_VALUE;
 8004eb8:	4b0b      	ldr	r3, [pc, #44]	@ (8004ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x350>)
 8004eba:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004ebc:	e028      	b.n	8004f10 <HAL_RCCEx_GetPeriphCLKFreq+0x378>
 8004ebe:	bf00      	nop
 8004ec0:	44020c00 	.word	0x44020c00
 8004ec4:	017d7840 	.word	0x017d7840
 8004ec8:	20000001 	.word	0x20000001
 8004ecc:	10000001 	.word	0x10000001
 8004ed0:	08000001 	.word	0x08000001
 8004ed4:	04000001 	.word	0x04000001
 8004ed8:	00200001 	.word	0x00200001
 8004edc:	00040001 	.word	0x00040001
 8004ee0:	00020001 	.word	0x00020001
 8004ee4:	03d09000 	.word	0x03d09000
 8004ee8:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 8004eec:	4b9f      	ldr	r3, [pc, #636]	@ (800516c <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8004eee:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004ef2:	f003 0302 	and.w	r3, r3, #2
 8004ef6:	2b02      	cmp	r3, #2
 8004ef8:	d106      	bne.n	8004f08 <HAL_RCCEx_GetPeriphCLKFreq+0x370>
 8004efa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004efc:	2b05      	cmp	r3, #5
 8004efe:	d103      	bne.n	8004f08 <HAL_RCCEx_GetPeriphCLKFreq+0x370>
          frequency = LSE_VALUE;
 8004f00:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004f04:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004f06:	e003      	b.n	8004f10 <HAL_RCCEx_GetPeriphCLKFreq+0x378>
          frequency = 0U;
 8004f08:	2300      	movs	r3, #0
 8004f0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004f0c:	f000 bd79 	b.w	8005a02 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8004f10:	f000 bd77 	b.w	8005a02 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_USART2:
        /* Get the current USART2 source */
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8004f14:	4b95      	ldr	r3, [pc, #596]	@ (800516c <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8004f16:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8004f1a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004f1e:	62bb      	str	r3, [r7, #40]	@ 0x28

        if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 8004f20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d104      	bne.n	8004f30 <HAL_RCCEx_GetPeriphCLKFreq+0x398>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8004f26:	f7fe fcfd 	bl	8003924 <HAL_RCC_GetPCLK1Freq>
 8004f2a:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* Clock not enabled for USART2 */
        else
        {
          frequency = 0U;
        }
        break;
 8004f2c:	f000 bd69 	b.w	8005a02 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART2CLKSOURCE_PLL2Q))
 8004f30:	4b8e      	ldr	r3, [pc, #568]	@ (800516c <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004f38:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004f3c:	d10a      	bne.n	8004f54 <HAL_RCCEx_GetPeriphCLKFreq+0x3bc>
 8004f3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f40:	2b08      	cmp	r3, #8
 8004f42:	d107      	bne.n	8004f54 <HAL_RCCEx_GetPeriphCLKFreq+0x3bc>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004f44:	f107 030c 	add.w	r3, r7, #12
 8004f48:	4618      	mov	r0, r3
 8004f4a:	f7ff fcbb 	bl	80048c4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8004f4e:	693b      	ldr	r3, [r7, #16]
 8004f50:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004f52:	e031      	b.n	8004fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x420>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 8004f54:	4b85      	ldr	r3, [pc, #532]	@ (800516c <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	f003 0302 	and.w	r3, r3, #2
 8004f5c:	2b02      	cmp	r3, #2
 8004f5e:	d10c      	bne.n	8004f7a <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 8004f60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f62:	2b18      	cmp	r3, #24
 8004f64:	d109      	bne.n	8004f7a <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004f66:	4b81      	ldr	r3, [pc, #516]	@ (800516c <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	08db      	lsrs	r3, r3, #3
 8004f6c:	f003 0303 	and.w	r3, r3, #3
 8004f70:	4a7f      	ldr	r2, [pc, #508]	@ (8005170 <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>)
 8004f72:	fa22 f303 	lsr.w	r3, r2, r3
 8004f76:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004f78:	e01e      	b.n	8004fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x420>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_CSI))
 8004f7a:	4b7c      	ldr	r3, [pc, #496]	@ (800516c <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004f82:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004f86:	d105      	bne.n	8004f94 <HAL_RCCEx_GetPeriphCLKFreq+0x3fc>
 8004f88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f8a:	2b20      	cmp	r3, #32
 8004f8c:	d102      	bne.n	8004f94 <HAL_RCCEx_GetPeriphCLKFreq+0x3fc>
          frequency = CSI_VALUE;
 8004f8e:	4b79      	ldr	r3, [pc, #484]	@ (8005174 <HAL_RCCEx_GetPeriphCLKFreq+0x5dc>)
 8004f90:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004f92:	e011      	b.n	8004fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x420>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 8004f94:	4b75      	ldr	r3, [pc, #468]	@ (800516c <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8004f96:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004f9a:	f003 0302 	and.w	r3, r3, #2
 8004f9e:	2b02      	cmp	r3, #2
 8004fa0:	d106      	bne.n	8004fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
 8004fa2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004fa4:	2b28      	cmp	r3, #40	@ 0x28
 8004fa6:	d103      	bne.n	8004fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
          frequency = LSE_VALUE;
 8004fa8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004fac:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004fae:	e003      	b.n	8004fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x420>
          frequency = 0U;
 8004fb0:	2300      	movs	r3, #0
 8004fb2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004fb4:	f000 bd25 	b.w	8005a02 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8004fb8:	f000 bd23 	b.w	8005a02 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_USART3:
        /* Get the current USART3 source */
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8004fbc:	4b6b      	ldr	r3, [pc, #428]	@ (800516c <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8004fbe:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8004fc2:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 8004fc6:	62bb      	str	r3, [r7, #40]	@ 0x28

        if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 8004fc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d104      	bne.n	8004fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x440>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8004fce:	f7fe fca9 	bl	8003924 <HAL_RCC_GetPCLK1Freq>
 8004fd2:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* Clock not enabled for USART3 */
        else
        {
          frequency = 0U;
        }
        break;
 8004fd4:	f000 bd15 	b.w	8005a02 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART3CLKSOURCE_PLL2Q))
 8004fd8:	4b64      	ldr	r3, [pc, #400]	@ (800516c <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004fe0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004fe4:	d10a      	bne.n	8004ffc <HAL_RCCEx_GetPeriphCLKFreq+0x464>
 8004fe6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004fe8:	2b40      	cmp	r3, #64	@ 0x40
 8004fea:	d107      	bne.n	8004ffc <HAL_RCCEx_GetPeriphCLKFreq+0x464>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004fec:	f107 030c 	add.w	r3, r7, #12
 8004ff0:	4618      	mov	r0, r3
 8004ff2:	f7ff fc67 	bl	80048c4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8004ff6:	693b      	ldr	r3, [r7, #16]
 8004ff8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004ffa:	e033      	b.n	8005064 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 8004ffc:	4b5b      	ldr	r3, [pc, #364]	@ (800516c <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	f003 0302 	and.w	r3, r3, #2
 8005004:	2b02      	cmp	r3, #2
 8005006:	d10c      	bne.n	8005022 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 8005008:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800500a:	2bc0      	cmp	r3, #192	@ 0xc0
 800500c:	d109      	bne.n	8005022 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800500e:	4b57      	ldr	r3, [pc, #348]	@ (800516c <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	08db      	lsrs	r3, r3, #3
 8005014:	f003 0303 	and.w	r3, r3, #3
 8005018:	4a55      	ldr	r2, [pc, #340]	@ (8005170 <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>)
 800501a:	fa22 f303 	lsr.w	r3, r2, r3
 800501e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005020:	e020      	b.n	8005064 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_CSI))
 8005022:	4b52      	ldr	r3, [pc, #328]	@ (800516c <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800502a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800502e:	d106      	bne.n	800503e <HAL_RCCEx_GetPeriphCLKFreq+0x4a6>
 8005030:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005032:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005036:	d102      	bne.n	800503e <HAL_RCCEx_GetPeriphCLKFreq+0x4a6>
          frequency = CSI_VALUE;
 8005038:	4b4e      	ldr	r3, [pc, #312]	@ (8005174 <HAL_RCCEx_GetPeriphCLKFreq+0x5dc>)
 800503a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800503c:	e012      	b.n	8005064 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 800503e:	4b4b      	ldr	r3, [pc, #300]	@ (800516c <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8005040:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005044:	f003 0302 	and.w	r3, r3, #2
 8005048:	2b02      	cmp	r3, #2
 800504a:	d107      	bne.n	800505c <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>
 800504c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800504e:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8005052:	d103      	bne.n	800505c <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>
          frequency = LSE_VALUE;
 8005054:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005058:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800505a:	e003      	b.n	8005064 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
          frequency = 0U;
 800505c:	2300      	movs	r3, #0
 800505e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8005060:	f000 bccf 	b.w	8005a02 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8005064:	f000 bccd 	b.w	8005a02 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        break;
#endif /* UART12 */

      case RCC_PERIPHCLK_LPUART1:
        /* Get the current LPUART1 source */
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8005068:	4b40      	ldr	r3, [pc, #256]	@ (800516c <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 800506a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800506e:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8005072:	62bb      	str	r3, [r7, #40]	@ 0x28

        if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 8005074:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005076:	2b00      	cmp	r3, #0
 8005078:	d104      	bne.n	8005084 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 800507a:	f7fe fc7f 	bl	800397c <HAL_RCC_GetPCLK3Freq>
 800507e:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* Clock not enabled for LPUART1 */
        else
        {
          frequency = 0U;
        }
        break;
 8005080:	f000 bcbf 	b.w	8005a02 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if (srcclk == RCC_LPUART1CLKSOURCE_PLL2Q)
 8005084:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005086:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800508a:	d108      	bne.n	800509e <HAL_RCCEx_GetPeriphCLKFreq+0x506>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800508c:	f107 030c 	add.w	r3, r7, #12
 8005090:	4618      	mov	r0, r3
 8005092:	f7ff fc17 	bl	80048c4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005096:	693b      	ldr	r3, [r7, #16]
 8005098:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800509a:	f000 bcb2 	b.w	8005a02 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 800509e:	4b33      	ldr	r3, [pc, #204]	@ (800516c <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	f003 0302 	and.w	r3, r3, #2
 80050a6:	2b02      	cmp	r3, #2
 80050a8:	d10d      	bne.n	80050c6 <HAL_RCCEx_GetPeriphCLKFreq+0x52e>
 80050aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050ac:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80050b0:	d109      	bne.n	80050c6 <HAL_RCCEx_GetPeriphCLKFreq+0x52e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80050b2:	4b2e      	ldr	r3, [pc, #184]	@ (800516c <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	08db      	lsrs	r3, r3, #3
 80050b8:	f003 0303 	and.w	r3, r3, #3
 80050bc:	4a2c      	ldr	r2, [pc, #176]	@ (8005170 <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>)
 80050be:	fa22 f303 	lsr.w	r3, r2, r3
 80050c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80050c4:	e020      	b.n	8005108 <HAL_RCCEx_GetPeriphCLKFreq+0x570>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_CSI))
 80050c6:	4b29      	ldr	r3, [pc, #164]	@ (800516c <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80050ce:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80050d2:	d106      	bne.n	80050e2 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
 80050d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050d6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80050da:	d102      	bne.n	80050e2 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
          frequency = CSI_VALUE;
 80050dc:	4b25      	ldr	r3, [pc, #148]	@ (8005174 <HAL_RCCEx_GetPeriphCLKFreq+0x5dc>)
 80050de:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80050e0:	e012      	b.n	8005108 <HAL_RCCEx_GetPeriphCLKFreq+0x570>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 80050e2:	4b22      	ldr	r3, [pc, #136]	@ (800516c <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 80050e4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80050e8:	f003 0302 	and.w	r3, r3, #2
 80050ec:	2b02      	cmp	r3, #2
 80050ee:	d107      	bne.n	8005100 <HAL_RCCEx_GetPeriphCLKFreq+0x568>
 80050f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050f2:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 80050f6:	d103      	bne.n	8005100 <HAL_RCCEx_GetPeriphCLKFreq+0x568>
          frequency = LSE_VALUE;
 80050f8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80050fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80050fe:	e003      	b.n	8005108 <HAL_RCCEx_GetPeriphCLKFreq+0x570>
          frequency = 0U;
 8005100:	2300      	movs	r3, #0
 8005102:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8005104:	f000 bc7d 	b.w	8005a02 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8005108:	f000 bc7b 	b.w	8005a02 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_ADCDAC:
        /* Get the current ADCDAC source */
        srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 800510c:	4b17      	ldr	r3, [pc, #92]	@ (800516c <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 800510e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005112:	f003 0307 	and.w	r3, r3, #7
 8005116:	62bb      	str	r3, [r7, #40]	@ 0x28

        if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 8005118:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800511a:	2b00      	cmp	r3, #0
 800511c:	d104      	bne.n	8005128 <HAL_RCCEx_GetPeriphCLKFreq+0x590>
        {
          frequency = HAL_RCC_GetHCLKFreq();
 800511e:	f7fe fbe5 	bl	80038ec <HAL_RCC_GetHCLKFreq>
 8005122:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* Clock not enabled for ADCDAC */
        else
        {
          frequency = 0U;
        }
        break;
 8005124:	f000 bc6d 	b.w	8005a02 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 8005128:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800512a:	2b01      	cmp	r3, #1
 800512c:	d104      	bne.n	8005138 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>
          frequency = HAL_RCC_GetSysClockFreq();
 800512e:	f7fe fab1 	bl	8003694 <HAL_RCC_GetSysClockFreq>
 8005132:	62f8      	str	r0, [r7, #44]	@ 0x2c
        break;
 8005134:	f000 bc65 	b.w	8005a02 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2R)
 8005138:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800513a:	2b02      	cmp	r3, #2
 800513c:	d108      	bne.n	8005150 <HAL_RCCEx_GetPeriphCLKFreq+0x5b8>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800513e:	f107 030c 	add.w	r3, r7, #12
 8005142:	4618      	mov	r0, r3
 8005144:	f7ff fbbe 	bl	80048c4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8005148:	697b      	ldr	r3, [r7, #20]
 800514a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800514c:	f000 bc59 	b.w	8005a02 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 8005150:	4b06      	ldr	r3, [pc, #24]	@ (800516c <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005158:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800515c:	d10e      	bne.n	800517c <HAL_RCCEx_GetPeriphCLKFreq+0x5e4>
 800515e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005160:	2b03      	cmp	r3, #3
 8005162:	d10b      	bne.n	800517c <HAL_RCCEx_GetPeriphCLKFreq+0x5e4>
          frequency = HSE_VALUE;
 8005164:	4b04      	ldr	r3, [pc, #16]	@ (8005178 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 8005166:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005168:	e02c      	b.n	80051c4 <HAL_RCCEx_GetPeriphCLKFreq+0x62c>
 800516a:	bf00      	nop
 800516c:	44020c00 	.word	0x44020c00
 8005170:	03d09000 	.word	0x03d09000
 8005174:	003d0900 	.word	0x003d0900
 8005178:	017d7840 	.word	0x017d7840
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 800517c:	4b95      	ldr	r3, [pc, #596]	@ (80053d4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	f003 0302 	and.w	r3, r3, #2
 8005184:	2b02      	cmp	r3, #2
 8005186:	d10c      	bne.n	80051a2 <HAL_RCCEx_GetPeriphCLKFreq+0x60a>
 8005188:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800518a:	2b04      	cmp	r3, #4
 800518c:	d109      	bne.n	80051a2 <HAL_RCCEx_GetPeriphCLKFreq+0x60a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800518e:	4b91      	ldr	r3, [pc, #580]	@ (80053d4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	08db      	lsrs	r3, r3, #3
 8005194:	f003 0303 	and.w	r3, r3, #3
 8005198:	4a8f      	ldr	r2, [pc, #572]	@ (80053d8 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800519a:	fa22 f303 	lsr.w	r3, r2, r3
 800519e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80051a0:	e010      	b.n	80051c4 <HAL_RCCEx_GetPeriphCLKFreq+0x62c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_CSI))
 80051a2:	4b8c      	ldr	r3, [pc, #560]	@ (80053d4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80051aa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80051ae:	d105      	bne.n	80051bc <HAL_RCCEx_GetPeriphCLKFreq+0x624>
 80051b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051b2:	2b05      	cmp	r3, #5
 80051b4:	d102      	bne.n	80051bc <HAL_RCCEx_GetPeriphCLKFreq+0x624>
          frequency = CSI_VALUE;
 80051b6:	4b89      	ldr	r3, [pc, #548]	@ (80053dc <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 80051b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80051ba:	e003      	b.n	80051c4 <HAL_RCCEx_GetPeriphCLKFreq+0x62c>
          frequency = 0U;
 80051bc:	2300      	movs	r3, #0
 80051be:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80051c0:	f000 bc1f 	b.w	8005a02 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 80051c4:	f000 bc1d 	b.w	8005a02 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>


      case RCC_PERIPHCLK_DAC_LP:
        /* Get the current DAC low-power source */
        srcclk = __HAL_RCC_GET_DAC_LP_SOURCE();
 80051c8:	4b82      	ldr	r3, [pc, #520]	@ (80053d4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80051ca:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80051ce:	f003 0308 	and.w	r3, r3, #8
 80051d2:	62bb      	str	r3, [r7, #40]	@ 0x28

        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSE))
 80051d4:	4b7f      	ldr	r3, [pc, #508]	@ (80053d4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80051d6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80051da:	f003 0302 	and.w	r3, r3, #2
 80051de:	2b02      	cmp	r3, #2
 80051e0:	d106      	bne.n	80051f0 <HAL_RCCEx_GetPeriphCLKFreq+0x658>
 80051e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d103      	bne.n	80051f0 <HAL_RCCEx_GetPeriphCLKFreq+0x658>
        {
          frequency = LSE_VALUE;
 80051e8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80051ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80051ee:	e011      	b.n	8005214 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSI))
 80051f0:	4b78      	ldr	r3, [pc, #480]	@ (80053d4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80051f2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80051f6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80051fa:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80051fe:	d106      	bne.n	800520e <HAL_RCCEx_GetPeriphCLKFreq+0x676>
 8005200:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005202:	2b08      	cmp	r3, #8
 8005204:	d103      	bne.n	800520e <HAL_RCCEx_GetPeriphCLKFreq+0x676>
        {
          frequency = LSI_VALUE;
 8005206:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800520a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800520c:	e002      	b.n	8005214 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        }

        /* Clock not enabled for DAC */
        else
        {
          frequency = 0U;
 800520e:	2300      	movs	r3, #0
 8005210:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        break;
 8005212:	e3f6      	b.n	8005a02 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8005214:	e3f5      	b.n	8005a02 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_I2C1:
        /* Get the current I2C1 source */
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8005216:	4b6f      	ldr	r3, [pc, #444]	@ (80053d4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8005218:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800521c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005220:	62bb      	str	r3, [r7, #40]	@ 0x28

        if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 8005222:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005224:	2b00      	cmp	r3, #0
 8005226:	d103      	bne.n	8005230 <HAL_RCCEx_GetPeriphCLKFreq+0x698>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8005228:	f7fe fb7c 	bl	8003924 <HAL_RCC_GetPCLK1Freq>
 800522c:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* Clock not enabled for I2C1 */
        else
        {
          frequency = 0U;
        }
        break;
 800522e:	e3e8      	b.n	8005a02 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if (srcclk ==  RCC_I2C1CLKSOURCE_PLL2R)
 8005230:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005232:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005236:	d107      	bne.n	8005248 <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005238:	f107 030c 	add.w	r3, r7, #12
 800523c:	4618      	mov	r0, r3
 800523e:	f7ff fb41 	bl	80048c4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8005242:	697b      	ldr	r3, [r7, #20]
 8005244:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8005246:	e3dc      	b.n	8005a02 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 8005248:	4b62      	ldr	r3, [pc, #392]	@ (80053d4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	f003 0302 	and.w	r3, r3, #2
 8005250:	2b02      	cmp	r3, #2
 8005252:	d10d      	bne.n	8005270 <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
 8005254:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005256:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800525a:	d109      	bne.n	8005270 <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800525c:	4b5d      	ldr	r3, [pc, #372]	@ (80053d4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	08db      	lsrs	r3, r3, #3
 8005262:	f003 0303 	and.w	r3, r3, #3
 8005266:	4a5c      	ldr	r2, [pc, #368]	@ (80053d8 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8005268:	fa22 f303 	lsr.w	r3, r2, r3
 800526c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800526e:	e010      	b.n	8005292 <HAL_RCCEx_GetPeriphCLKFreq+0x6fa>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C1CLKSOURCE_CSI))
 8005270:	4b58      	ldr	r3, [pc, #352]	@ (80053d4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005278:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800527c:	d106      	bne.n	800528c <HAL_RCCEx_GetPeriphCLKFreq+0x6f4>
 800527e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005280:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005284:	d102      	bne.n	800528c <HAL_RCCEx_GetPeriphCLKFreq+0x6f4>
          frequency = CSI_VALUE;
 8005286:	4b55      	ldr	r3, [pc, #340]	@ (80053dc <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8005288:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800528a:	e002      	b.n	8005292 <HAL_RCCEx_GetPeriphCLKFreq+0x6fa>
          frequency = 0U;
 800528c:	2300      	movs	r3, #0
 800528e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8005290:	e3b7      	b.n	8005a02 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8005292:	e3b6      	b.n	8005a02 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_I2C2:
        /* Get the current I2C2 source */
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8005294:	4b4f      	ldr	r3, [pc, #316]	@ (80053d4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8005296:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800529a:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 800529e:	62bb      	str	r3, [r7, #40]	@ 0x28

        if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 80052a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d103      	bne.n	80052ae <HAL_RCCEx_GetPeriphCLKFreq+0x716>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80052a6:	f7fe fb3d 	bl	8003924 <HAL_RCC_GetPCLK1Freq>
 80052aa:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* Clock not enabled for I2C2 */
        else
        {
          frequency = 0U;
        }
        break;
 80052ac:	e3a9      	b.n	8005a02 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if (srcclk ==  RCC_I2C2CLKSOURCE_PLL2R)
 80052ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052b0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80052b4:	d107      	bne.n	80052c6 <HAL_RCCEx_GetPeriphCLKFreq+0x72e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80052b6:	f107 030c 	add.w	r3, r7, #12
 80052ba:	4618      	mov	r0, r3
 80052bc:	f7ff fb02 	bl	80048c4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 80052c0:	697b      	ldr	r3, [r7, #20]
 80052c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80052c4:	e39d      	b.n	8005a02 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 80052c6:	4b43      	ldr	r3, [pc, #268]	@ (80053d4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	f003 0302 	and.w	r3, r3, #2
 80052ce:	2b02      	cmp	r3, #2
 80052d0:	d10d      	bne.n	80052ee <HAL_RCCEx_GetPeriphCLKFreq+0x756>
 80052d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052d4:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80052d8:	d109      	bne.n	80052ee <HAL_RCCEx_GetPeriphCLKFreq+0x756>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80052da:	4b3e      	ldr	r3, [pc, #248]	@ (80053d4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	08db      	lsrs	r3, r3, #3
 80052e0:	f003 0303 	and.w	r3, r3, #3
 80052e4:	4a3c      	ldr	r2, [pc, #240]	@ (80053d8 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80052e6:	fa22 f303 	lsr.w	r3, r2, r3
 80052ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80052ec:	e010      	b.n	8005310 <HAL_RCCEx_GetPeriphCLKFreq+0x778>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C2CLKSOURCE_CSI))
 80052ee:	4b39      	ldr	r3, [pc, #228]	@ (80053d4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80052f6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80052fa:	d106      	bne.n	800530a <HAL_RCCEx_GetPeriphCLKFreq+0x772>
 80052fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052fe:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8005302:	d102      	bne.n	800530a <HAL_RCCEx_GetPeriphCLKFreq+0x772>
          frequency = CSI_VALUE;
 8005304:	4b35      	ldr	r3, [pc, #212]	@ (80053dc <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8005306:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005308:	e002      	b.n	8005310 <HAL_RCCEx_GetPeriphCLKFreq+0x778>
          frequency = 0U;
 800530a:	2300      	movs	r3, #0
 800530c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800530e:	e378      	b.n	8005a02 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8005310:	e377      	b.n	8005a02 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        break;
#endif /* I2C4 */

      case RCC_PERIPHCLK_I3C1:
        /* Get the current I3C1 source */
        srcclk = __HAL_RCC_GET_I3C1_SOURCE();
 8005312:	4b30      	ldr	r3, [pc, #192]	@ (80053d4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8005314:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005318:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 800531c:	62bb      	str	r3, [r7, #40]	@ 0x28

        if (srcclk == RCC_I3C1CLKSOURCE_PCLK1)
 800531e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005320:	2b00      	cmp	r3, #0
 8005322:	d103      	bne.n	800532c <HAL_RCCEx_GetPeriphCLKFreq+0x794>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8005324:	f7fe fafe 	bl	8003924 <HAL_RCC_GetPCLK1Freq>
 8005328:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* Clock not enabled for I3C1 */
        else
        {
          frequency = 0U;
        }
        break;
 800532a:	e36a      	b.n	8005a02 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if (srcclk ==  RCC_I3C1CLKSOURCE_PLL2R)
 800532c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800532e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005332:	d107      	bne.n	8005344 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005334:	f107 030c 	add.w	r3, r7, #12
 8005338:	4618      	mov	r0, r3
 800533a:	f7ff fac3 	bl	80048c4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800533e:	697b      	ldr	r3, [r7, #20]
 8005340:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8005342:	e35e      	b.n	8005a02 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I3C1CLKSOURCE_HSI))
 8005344:	4b23      	ldr	r3, [pc, #140]	@ (80053d4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	f003 0302 	and.w	r3, r3, #2
 800534c:	2b02      	cmp	r3, #2
 800534e:	d10d      	bne.n	800536c <HAL_RCCEx_GetPeriphCLKFreq+0x7d4>
 8005350:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005352:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005356:	d109      	bne.n	800536c <HAL_RCCEx_GetPeriphCLKFreq+0x7d4>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005358:	4b1e      	ldr	r3, [pc, #120]	@ (80053d4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	08db      	lsrs	r3, r3, #3
 800535e:	f003 0303 	and.w	r3, r3, #3
 8005362:	4a1d      	ldr	r2, [pc, #116]	@ (80053d8 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8005364:	fa22 f303 	lsr.w	r3, r2, r3
 8005368:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800536a:	e34a      	b.n	8005a02 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
          frequency = 0U;
 800536c:	2300      	movs	r3, #0
 800536e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8005370:	e347      	b.n	8005a02 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

#if defined(I3C2)
      case RCC_PERIPHCLK_I3C2:
        /* Get the current I3C2 source */
        srcclk = __HAL_RCC_GET_I3C2_SOURCE();
 8005372:	4b18      	ldr	r3, [pc, #96]	@ (80053d4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8005374:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005378:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 800537c:	62bb      	str	r3, [r7, #40]	@ 0x28
        if (srcclk == RCC_I3C2CLKSOURCE_PCLK3)
 800537e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005380:	2b00      	cmp	r3, #0
 8005382:	d103      	bne.n	800538c <HAL_RCCEx_GetPeriphCLKFreq+0x7f4>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 8005384:	f7fe fafa 	bl	800397c <HAL_RCC_GetPCLK3Freq>
 8005388:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* Clock not enabled for I3C2 */
        else
        {
          frequency = 0U;
        }
        break;
 800538a:	e33a      	b.n	8005a02 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if (srcclk ==  RCC_I3C2CLKSOURCE_PLL2R)
 800538c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800538e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005392:	d107      	bne.n	80053a4 <HAL_RCCEx_GetPeriphCLKFreq+0x80c>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005394:	f107 030c 	add.w	r3, r7, #12
 8005398:	4618      	mov	r0, r3
 800539a:	f7ff fa93 	bl	80048c4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800539e:	697b      	ldr	r3, [r7, #20]
 80053a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80053a2:	e32e      	b.n	8005a02 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I3C2CLKSOURCE_HSI))
 80053a4:	4b0b      	ldr	r3, [pc, #44]	@ (80053d4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	f003 0302 	and.w	r3, r3, #2
 80053ac:	2b02      	cmp	r3, #2
 80053ae:	d10d      	bne.n	80053cc <HAL_RCCEx_GetPeriphCLKFreq+0x834>
 80053b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053b2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80053b6:	d109      	bne.n	80053cc <HAL_RCCEx_GetPeriphCLKFreq+0x834>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80053b8:	4b06      	ldr	r3, [pc, #24]	@ (80053d4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	08db      	lsrs	r3, r3, #3
 80053be:	f003 0303 	and.w	r3, r3, #3
 80053c2:	4a05      	ldr	r2, [pc, #20]	@ (80053d8 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80053c4:	fa22 f303 	lsr.w	r3, r2, r3
 80053c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80053ca:	e31a      	b.n	8005a02 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
          frequency = 0U;
 80053cc:	2300      	movs	r3, #0
 80053ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80053d0:	e317      	b.n	8005a02 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 80053d2:	bf00      	nop
 80053d4:	44020c00 	.word	0x44020c00
 80053d8:	03d09000 	.word	0x03d09000
 80053dc:	003d0900 	.word	0x003d0900
#endif /* I3C2*/

      case RCC_PERIPHCLK_LPTIM1:
        /* Get the current LPTIM1 source */
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 80053e0:	4b9b      	ldr	r3, [pc, #620]	@ (8005650 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 80053e2:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80053e6:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80053ea:	62bb      	str	r3, [r7, #40]	@ 0x28
 80053ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053ee:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 80053f2:	d044      	beq.n	800547e <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 80053f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053f6:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 80053fa:	d879      	bhi.n	80054f0 <HAL_RCCEx_GetPeriphCLKFreq+0x958>
 80053fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053fe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005402:	d02d      	beq.n	8005460 <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 8005404:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005406:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800540a:	d871      	bhi.n	80054f0 <HAL_RCCEx_GetPeriphCLKFreq+0x958>
 800540c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800540e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005412:	d017      	beq.n	8005444 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>
 8005414:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005416:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800541a:	d869      	bhi.n	80054f0 <HAL_RCCEx_GetPeriphCLKFreq+0x958>
 800541c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800541e:	2b00      	cmp	r3, #0
 8005420:	d004      	beq.n	800542c <HAL_RCCEx_GetPeriphCLKFreq+0x894>
 8005422:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005424:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005428:	d004      	beq.n	8005434 <HAL_RCCEx_GetPeriphCLKFreq+0x89c>
 800542a:	e061      	b.n	80054f0 <HAL_RCCEx_GetPeriphCLKFreq+0x958>

        switch (srcclk)
        {
          case RCC_LPTIM1CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 800542c:	f7fe faa6 	bl	800397c <HAL_RCC_GetPCLK3Freq>
 8005430:	62f8      	str	r0, [r7, #44]	@ 0x2c
            break;
 8005432:	e060      	b.n	80054f6 <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
          }
          case RCC_LPTIM1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005434:	f107 030c 	add.w	r3, r7, #12
 8005438:	4618      	mov	r0, r3
 800543a:	f7ff fa43 	bl	80048c4 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8005442:	e058      	b.n	80054f6 <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
            break;
          }
#endif /* RCC_LPTIM1CLKSOURCE_PLL3R */
          case RCC_LPTIM1CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005444:	4b82      	ldr	r3, [pc, #520]	@ (8005650 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8005446:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800544a:	f003 0302 	and.w	r3, r3, #2
 800544e:	2b02      	cmp	r3, #2
 8005450:	d103      	bne.n	800545a <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
            {
              frequency = LSE_VALUE;
 8005452:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005456:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }
            else
            {
              frequency = 0;
            }
            break;
 8005458:	e04d      	b.n	80054f6 <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
              frequency = 0;
 800545a:	2300      	movs	r3, #0
 800545c:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 800545e:	e04a      	b.n	80054f6 <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
          }
          case RCC_LPTIM1CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8005460:	4b7b      	ldr	r3, [pc, #492]	@ (8005650 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8005462:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005466:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800546a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800546e:	d103      	bne.n	8005478 <HAL_RCCEx_GetPeriphCLKFreq+0x8e0>
            {
              frequency = LSI_VALUE;
 8005470:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8005474:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }
            else
            {
              frequency = 0;
            }
            break;
 8005476:	e03e      	b.n	80054f6 <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
              frequency = 0;
 8005478:	2300      	movs	r3, #0
 800547a:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 800547c:	e03b      	b.n	80054f6 <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
          }
          case RCC_LPTIM1CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM1 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800547e:	4b74      	ldr	r3, [pc, #464]	@ (8005650 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8005480:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005484:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8005488:	627b      	str	r3, [r7, #36]	@ 0x24

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800548a:	4b71      	ldr	r3, [pc, #452]	@ (8005650 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	f003 0302 	and.w	r3, r3, #2
 8005492:	2b02      	cmp	r3, #2
 8005494:	d10c      	bne.n	80054b0 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
 8005496:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005498:	2b00      	cmp	r3, #0
 800549a:	d109      	bne.n	80054b0 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800549c:	4b6c      	ldr	r3, [pc, #432]	@ (8005650 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	08db      	lsrs	r3, r3, #3
 80054a2:	f003 0303 	and.w	r3, r3, #3
 80054a6:	4a6b      	ldr	r2, [pc, #428]	@ (8005654 <HAL_RCCEx_GetPeriphCLKFreq+0xabc>)
 80054a8:	fa22 f303 	lsr.w	r3, r2, r3
 80054ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80054ae:	e01e      	b.n	80054ee <HAL_RCCEx_GetPeriphCLKFreq+0x956>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80054b0:	4b67      	ldr	r3, [pc, #412]	@ (8005650 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80054b8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80054bc:	d106      	bne.n	80054cc <HAL_RCCEx_GetPeriphCLKFreq+0x934>
 80054be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054c0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80054c4:	d102      	bne.n	80054cc <HAL_RCCEx_GetPeriphCLKFreq+0x934>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 80054c6:	4b64      	ldr	r3, [pc, #400]	@ (8005658 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>)
 80054c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80054ca:	e010      	b.n	80054ee <HAL_RCCEx_GetPeriphCLKFreq+0x956>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80054cc:	4b60      	ldr	r3, [pc, #384]	@ (8005650 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80054d4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80054d8:	d106      	bne.n	80054e8 <HAL_RCCEx_GetPeriphCLKFreq+0x950>
 80054da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054dc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80054e0:	d102      	bne.n	80054e8 <HAL_RCCEx_GetPeriphCLKFreq+0x950>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 80054e2:	4b5e      	ldr	r3, [pc, #376]	@ (800565c <HAL_RCCEx_GetPeriphCLKFreq+0xac4>)
 80054e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80054e6:	e002      	b.n	80054ee <HAL_RCCEx_GetPeriphCLKFreq+0x956>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 80054e8:	2300      	movs	r3, #0
 80054ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }

            break;
 80054ec:	e003      	b.n	80054f6 <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
 80054ee:	e002      	b.n	80054f6 <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
          }
          default :
          {
            frequency = 0U;
 80054f0:	2300      	movs	r3, #0
 80054f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 80054f4:	bf00      	nop
          }
        }
        break;
 80054f6:	e284      	b.n	8005a02 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_LPTIM2:
        /* Get the current LPTIM2 source */
        srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 80054f8:	4b55      	ldr	r3, [pc, #340]	@ (8005650 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 80054fa:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80054fe:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8005502:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005504:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005506:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800550a:	d044      	beq.n	8005596 <HAL_RCCEx_GetPeriphCLKFreq+0x9fe>
 800550c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800550e:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8005512:	d879      	bhi.n	8005608 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
 8005514:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005516:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800551a:	d02d      	beq.n	8005578 <HAL_RCCEx_GetPeriphCLKFreq+0x9e0>
 800551c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800551e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005522:	d871      	bhi.n	8005608 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
 8005524:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005526:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800552a:	d017      	beq.n	800555c <HAL_RCCEx_GetPeriphCLKFreq+0x9c4>
 800552c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800552e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005532:	d869      	bhi.n	8005608 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
 8005534:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005536:	2b00      	cmp	r3, #0
 8005538:	d004      	beq.n	8005544 <HAL_RCCEx_GetPeriphCLKFreq+0x9ac>
 800553a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800553c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005540:	d004      	beq.n	800554c <HAL_RCCEx_GetPeriphCLKFreq+0x9b4>
 8005542:	e061      	b.n	8005608 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>

        switch (srcclk)
        {
          case RCC_LPTIM2CLKSOURCE_PCLK1:
          {
            frequency = HAL_RCC_GetPCLK1Freq();
 8005544:	f7fe f9ee 	bl	8003924 <HAL_RCC_GetPCLK1Freq>
 8005548:	62f8      	str	r0, [r7, #44]	@ 0x2c
            break;
 800554a:	e060      	b.n	800560e <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
          }
          case RCC_LPTIM2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800554c:	f107 030c 	add.w	r3, r7, #12
 8005550:	4618      	mov	r0, r3
 8005552:	f7ff f9b7 	bl	80048c4 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 800555a:	e058      	b.n	800560e <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
            break;
          }
#endif /* RCC_LPTIM2CLKSOURCE_PLL3R */
          case RCC_LPTIM2CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800555c:	4b3c      	ldr	r3, [pc, #240]	@ (8005650 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 800555e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005562:	f003 0302 	and.w	r3, r3, #2
 8005566:	2b02      	cmp	r3, #2
 8005568:	d103      	bne.n	8005572 <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
            {
              frequency = LSE_VALUE;
 800556a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800556e:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }
            else
            {
              frequency = 0;
            }
            break;
 8005570:	e04d      	b.n	800560e <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
              frequency = 0;
 8005572:	2300      	movs	r3, #0
 8005574:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8005576:	e04a      	b.n	800560e <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
          }
          case RCC_LPTIM2CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8005578:	4b35      	ldr	r3, [pc, #212]	@ (8005650 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 800557a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800557e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005582:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005586:	d103      	bne.n	8005590 <HAL_RCCEx_GetPeriphCLKFreq+0x9f8>
            {
              frequency = LSI_VALUE;
 8005588:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800558c:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }
            else
            {
              frequency = 0;
            }
            break;
 800558e:	e03e      	b.n	800560e <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
              frequency = 0;
 8005590:	2300      	movs	r3, #0
 8005592:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8005594:	e03b      	b.n	800560e <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
          }
          case RCC_LPTIM2CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM2 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005596:	4b2e      	ldr	r3, [pc, #184]	@ (8005650 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8005598:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800559c:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 80055a0:	627b      	str	r3, [r7, #36]	@ 0x24

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80055a2:	4b2b      	ldr	r3, [pc, #172]	@ (8005650 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	f003 0302 	and.w	r3, r3, #2
 80055aa:	2b02      	cmp	r3, #2
 80055ac:	d10c      	bne.n	80055c8 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
 80055ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d109      	bne.n	80055c8 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80055b4:	4b26      	ldr	r3, [pc, #152]	@ (8005650 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	08db      	lsrs	r3, r3, #3
 80055ba:	f003 0303 	and.w	r3, r3, #3
 80055be:	4a25      	ldr	r2, [pc, #148]	@ (8005654 <HAL_RCCEx_GetPeriphCLKFreq+0xabc>)
 80055c0:	fa22 f303 	lsr.w	r3, r2, r3
 80055c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80055c6:	e01e      	b.n	8005606 <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80055c8:	4b21      	ldr	r3, [pc, #132]	@ (8005650 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80055d0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80055d4:	d106      	bne.n	80055e4 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
 80055d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055d8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80055dc:	d102      	bne.n	80055e4 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 80055de:	4b1e      	ldr	r3, [pc, #120]	@ (8005658 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>)
 80055e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80055e2:	e010      	b.n	8005606 <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80055e4:	4b1a      	ldr	r3, [pc, #104]	@ (8005650 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80055ec:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80055f0:	d106      	bne.n	8005600 <HAL_RCCEx_GetPeriphCLKFreq+0xa68>
 80055f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055f4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80055f8:	d102      	bne.n	8005600 <HAL_RCCEx_GetPeriphCLKFreq+0xa68>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 80055fa:	4b18      	ldr	r3, [pc, #96]	@ (800565c <HAL_RCCEx_GetPeriphCLKFreq+0xac4>)
 80055fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80055fe:	e002      	b.n	8005606 <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8005600:	2300      	movs	r3, #0
 8005602:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }

            break;
 8005604:	e003      	b.n	800560e <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
 8005606:	e002      	b.n	800560e <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
          }
          default :
          {
            frequency = 0U;
 8005608:	2300      	movs	r3, #0
 800560a:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 800560c:	bf00      	nop
          }
        }
        break;
 800560e:	e1f8      	b.n	8005a02 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        break;
#endif /* LPTIM6 */

      case RCC_PERIPHCLK_FDCAN:
        /* Get the current FDCAN kernel source */
        srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8005610:	4b0f      	ldr	r3, [pc, #60]	@ (8005650 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8005612:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005616:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800561a:	62bb      	str	r3, [r7, #40]	@ 0x28

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCANCLKSOURCE_HSE))
 800561c:	4b0c      	ldr	r3, [pc, #48]	@ (8005650 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005624:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005628:	d105      	bne.n	8005636 <HAL_RCCEx_GetPeriphCLKFreq+0xa9e>
 800562a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800562c:	2b00      	cmp	r3, #0
 800562e:	d102      	bne.n	8005636 <HAL_RCCEx_GetPeriphCLKFreq+0xa9e>
        {
          frequency = HSE_VALUE;
 8005630:	4b0a      	ldr	r3, [pc, #40]	@ (800565c <HAL_RCCEx_GetPeriphCLKFreq+0xac4>)
 8005632:	62fb      	str	r3, [r7, #44]	@ 0x2c
        /* Clock not enabled for FDCAN */
        else
        {
          frequency = 0U;
        }
        break;
 8005634:	e1e5      	b.n	8005a02 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL1Q)
 8005636:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005638:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800563c:	d110      	bne.n	8005660 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800563e:	f107 0318 	add.w	r3, r7, #24
 8005642:	4618      	mov	r0, r3
 8005644:	f7fe ffd4 	bl	80045f0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005648:	69fb      	ldr	r3, [r7, #28]
 800564a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800564c:	e1d9      	b.n	8005a02 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 800564e:	bf00      	nop
 8005650:	44020c00 	.word	0x44020c00
 8005654:	03d09000 	.word	0x03d09000
 8005658:	003d0900 	.word	0x003d0900
 800565c:	017d7840 	.word	0x017d7840
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL2Q)
 8005660:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005662:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005666:	d107      	bne.n	8005678 <HAL_RCCEx_GetPeriphCLKFreq+0xae0>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005668:	f107 030c 	add.w	r3, r7, #12
 800566c:	4618      	mov	r0, r3
 800566e:	f7ff f929 	bl	80048c4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005672:	693b      	ldr	r3, [r7, #16]
 8005674:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8005676:	e1c4      	b.n	8005a02 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
          frequency = 0U;
 8005678:	2300      	movs	r3, #0
 800567a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800567c:	e1c1      	b.n	8005a02 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_SPI1:
        /* Get the current SPI1 kernel source */
        srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 800567e:	4b9d      	ldr	r3, [pc, #628]	@ (80058f4 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8005680:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005684:	f003 0307 	and.w	r3, r3, #7
 8005688:	62bb      	str	r3, [r7, #40]	@ 0x28
 800568a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800568c:	2b04      	cmp	r3, #4
 800568e:	d859      	bhi.n	8005744 <HAL_RCCEx_GetPeriphCLKFreq+0xbac>
 8005690:	a201      	add	r2, pc, #4	@ (adr r2, 8005698 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8005692:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005696:	bf00      	nop
 8005698:	080056ad 	.word	0x080056ad
 800569c:	080056bd 	.word	0x080056bd
 80056a0:	08005745 	.word	0x08005745
 80056a4:	080056cd 	.word	0x080056cd
 80056a8:	080056d3 	.word	0x080056d3
        switch (srcclk)
        {
          case RCC_SPI1CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80056ac:	f107 0318 	add.w	r3, r7, #24
 80056b0:	4618      	mov	r0, r3
 80056b2:	f7fe ff9d 	bl	80045f0 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 80056b6:	69fb      	ldr	r3, [r7, #28]
 80056b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 80056ba:	e046      	b.n	800574a <HAL_RCCEx_GetPeriphCLKFreq+0xbb2>
          }
          case RCC_SPI1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80056bc:	f107 030c 	add.w	r3, r7, #12
 80056c0:	4618      	mov	r0, r3
 80056c2:	f7ff f8ff 	bl	80048c4 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 80056ca:	e03e      	b.n	800574a <HAL_RCCEx_GetPeriphCLKFreq+0xbb2>
            break;
          }
#endif /* RCC_SPI1CLKSOURCE_PLL3P */
          case RCC_SPI1CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 80056cc:	4b8a      	ldr	r3, [pc, #552]	@ (80058f8 <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 80056ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 80056d0:	e03b      	b.n	800574a <HAL_RCCEx_GetPeriphCLKFreq+0xbb2>
          }
          case RCC_SPI1CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80056d2:	4b88      	ldr	r3, [pc, #544]	@ (80058f4 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80056d4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80056d8:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 80056dc:	627b      	str	r3, [r7, #36]	@ 0x24

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80056de:	4b85      	ldr	r3, [pc, #532]	@ (80058f4 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	f003 0302 	and.w	r3, r3, #2
 80056e6:	2b02      	cmp	r3, #2
 80056e8:	d10c      	bne.n	8005704 <HAL_RCCEx_GetPeriphCLKFreq+0xb6c>
 80056ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d109      	bne.n	8005704 <HAL_RCCEx_GetPeriphCLKFreq+0xb6c>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80056f0:	4b80      	ldr	r3, [pc, #512]	@ (80058f4 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	08db      	lsrs	r3, r3, #3
 80056f6:	f003 0303 	and.w	r3, r3, #3
 80056fa:	4a80      	ldr	r2, [pc, #512]	@ (80058fc <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 80056fc:	fa22 f303 	lsr.w	r3, r2, r3
 8005700:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005702:	e01e      	b.n	8005742 <HAL_RCCEx_GetPeriphCLKFreq+0xbaa>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005704:	4b7b      	ldr	r3, [pc, #492]	@ (80058f4 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800570c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005710:	d106      	bne.n	8005720 <HAL_RCCEx_GetPeriphCLKFreq+0xb88>
 8005712:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005714:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005718:	d102      	bne.n	8005720 <HAL_RCCEx_GetPeriphCLKFreq+0xb88>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800571a:	4b79      	ldr	r3, [pc, #484]	@ (8005900 <HAL_RCCEx_GetPeriphCLKFreq+0xd68>)
 800571c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800571e:	e010      	b.n	8005742 <HAL_RCCEx_GetPeriphCLKFreq+0xbaa>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005720:	4b74      	ldr	r3, [pc, #464]	@ (80058f4 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005728:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800572c:	d106      	bne.n	800573c <HAL_RCCEx_GetPeriphCLKFreq+0xba4>
 800572e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005730:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005734:	d102      	bne.n	800573c <HAL_RCCEx_GetPeriphCLKFreq+0xba4>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8005736:	4b73      	ldr	r3, [pc, #460]	@ (8005904 <HAL_RCCEx_GetPeriphCLKFreq+0xd6c>)
 8005738:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800573a:	e002      	b.n	8005742 <HAL_RCCEx_GetPeriphCLKFreq+0xbaa>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800573c:	2300      	movs	r3, #0
 800573e:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }

            break;
 8005740:	e003      	b.n	800574a <HAL_RCCEx_GetPeriphCLKFreq+0xbb2>
 8005742:	e002      	b.n	800574a <HAL_RCCEx_GetPeriphCLKFreq+0xbb2>
          }
          default:
          {
            frequency = 0;
 8005744:	2300      	movs	r3, #0
 8005746:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8005748:	bf00      	nop
          }
        }
        break;
 800574a:	e15a      	b.n	8005a02 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_SPI2:
        /* Get the current SPI2 kernel source */
        srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 800574c:	4b69      	ldr	r3, [pc, #420]	@ (80058f4 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800574e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005752:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005756:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005758:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800575a:	2b20      	cmp	r3, #32
 800575c:	d022      	beq.n	80057a4 <HAL_RCCEx_GetPeriphCLKFreq+0xc0c>
 800575e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005760:	2b20      	cmp	r3, #32
 8005762:	d858      	bhi.n	8005816 <HAL_RCCEx_GetPeriphCLKFreq+0xc7e>
 8005764:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005766:	2b18      	cmp	r3, #24
 8005768:	d019      	beq.n	800579e <HAL_RCCEx_GetPeriphCLKFreq+0xc06>
 800576a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800576c:	2b18      	cmp	r3, #24
 800576e:	d852      	bhi.n	8005816 <HAL_RCCEx_GetPeriphCLKFreq+0xc7e>
 8005770:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005772:	2b00      	cmp	r3, #0
 8005774:	d003      	beq.n	800577e <HAL_RCCEx_GetPeriphCLKFreq+0xbe6>
 8005776:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005778:	2b08      	cmp	r3, #8
 800577a:	d008      	beq.n	800578e <HAL_RCCEx_GetPeriphCLKFreq+0xbf6>
 800577c:	e04b      	b.n	8005816 <HAL_RCCEx_GetPeriphCLKFreq+0xc7e>
        switch (srcclk)
        {
          case RCC_SPI2CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800577e:	f107 0318 	add.w	r3, r7, #24
 8005782:	4618      	mov	r0, r3
 8005784:	f7fe ff34 	bl	80045f0 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8005788:	69fb      	ldr	r3, [r7, #28]
 800578a:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 800578c:	e046      	b.n	800581c <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
          }
          case RCC_SPI2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800578e:	f107 030c 	add.w	r3, r7, #12
 8005792:	4618      	mov	r0, r3
 8005794:	f7ff f896 	bl	80048c4 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 800579c:	e03e      	b.n	800581c <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
            break;
          }
#endif /* RCC_SPI2CLKSOURCE_PLL3P */
          case RCC_SPI2CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 800579e:	4b56      	ldr	r3, [pc, #344]	@ (80058f8 <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 80057a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 80057a2:	e03b      	b.n	800581c <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
          }
          case RCC_SPI2CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80057a4:	4b53      	ldr	r3, [pc, #332]	@ (80058f4 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80057a6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80057aa:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 80057ae:	627b      	str	r3, [r7, #36]	@ 0x24

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80057b0:	4b50      	ldr	r3, [pc, #320]	@ (80058f4 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	f003 0302 	and.w	r3, r3, #2
 80057b8:	2b02      	cmp	r3, #2
 80057ba:	d10c      	bne.n	80057d6 <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
 80057bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d109      	bne.n	80057d6 <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80057c2:	4b4c      	ldr	r3, [pc, #304]	@ (80058f4 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	08db      	lsrs	r3, r3, #3
 80057c8:	f003 0303 	and.w	r3, r3, #3
 80057cc:	4a4b      	ldr	r2, [pc, #300]	@ (80058fc <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 80057ce:	fa22 f303 	lsr.w	r3, r2, r3
 80057d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80057d4:	e01e      	b.n	8005814 <HAL_RCCEx_GetPeriphCLKFreq+0xc7c>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80057d6:	4b47      	ldr	r3, [pc, #284]	@ (80058f4 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80057de:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80057e2:	d106      	bne.n	80057f2 <HAL_RCCEx_GetPeriphCLKFreq+0xc5a>
 80057e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057e6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80057ea:	d102      	bne.n	80057f2 <HAL_RCCEx_GetPeriphCLKFreq+0xc5a>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 80057ec:	4b44      	ldr	r3, [pc, #272]	@ (8005900 <HAL_RCCEx_GetPeriphCLKFreq+0xd68>)
 80057ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80057f0:	e010      	b.n	8005814 <HAL_RCCEx_GetPeriphCLKFreq+0xc7c>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80057f2:	4b40      	ldr	r3, [pc, #256]	@ (80058f4 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80057fa:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80057fe:	d106      	bne.n	800580e <HAL_RCCEx_GetPeriphCLKFreq+0xc76>
 8005800:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005802:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005806:	d102      	bne.n	800580e <HAL_RCCEx_GetPeriphCLKFreq+0xc76>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8005808:	4b3e      	ldr	r3, [pc, #248]	@ (8005904 <HAL_RCCEx_GetPeriphCLKFreq+0xd6c>)
 800580a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800580c:	e002      	b.n	8005814 <HAL_RCCEx_GetPeriphCLKFreq+0xc7c>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800580e:	2300      	movs	r3, #0
 8005810:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }

            break;
 8005812:	e003      	b.n	800581c <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
 8005814:	e002      	b.n	800581c <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
          }
          default:
          {
            frequency = 0;
 8005816:	2300      	movs	r3, #0
 8005818:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 800581a:	bf00      	nop
          }
        }
        break;
 800581c:	e0f1      	b.n	8005a02 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_SPI3:
        /* Get the current SPI3 kernel source */
        srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 800581e:	4b35      	ldr	r3, [pc, #212]	@ (80058f4 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8005820:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005824:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 8005828:	62bb      	str	r3, [r7, #40]	@ 0x28
 800582a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800582c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005830:	d023      	beq.n	800587a <HAL_RCCEx_GetPeriphCLKFreq+0xce2>
 8005832:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005834:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005838:	d858      	bhi.n	80058ec <HAL_RCCEx_GetPeriphCLKFreq+0xd54>
 800583a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800583c:	2bc0      	cmp	r3, #192	@ 0xc0
 800583e:	d019      	beq.n	8005874 <HAL_RCCEx_GetPeriphCLKFreq+0xcdc>
 8005840:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005842:	2bc0      	cmp	r3, #192	@ 0xc0
 8005844:	d852      	bhi.n	80058ec <HAL_RCCEx_GetPeriphCLKFreq+0xd54>
 8005846:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005848:	2b00      	cmp	r3, #0
 800584a:	d003      	beq.n	8005854 <HAL_RCCEx_GetPeriphCLKFreq+0xcbc>
 800584c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800584e:	2b40      	cmp	r3, #64	@ 0x40
 8005850:	d008      	beq.n	8005864 <HAL_RCCEx_GetPeriphCLKFreq+0xccc>
 8005852:	e04b      	b.n	80058ec <HAL_RCCEx_GetPeriphCLKFreq+0xd54>
        switch (srcclk)
        {
          case RCC_SPI3CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005854:	f107 0318 	add.w	r3, r7, #24
 8005858:	4618      	mov	r0, r3
 800585a:	f7fe fec9 	bl	80045f0 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 800585e:	69fb      	ldr	r3, [r7, #28]
 8005860:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8005862:	e046      	b.n	80058f2 <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
          }
          case RCC_SPI3CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005864:	f107 030c 	add.w	r3, r7, #12
 8005868:	4618      	mov	r0, r3
 800586a:	f7ff f82b 	bl	80048c4 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8005872:	e03e      	b.n	80058f2 <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
            break;
          }
#endif /* RCC_SPI3CLKSOURCE_PLL3P */
          case RCC_SPI3CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8005874:	4b20      	ldr	r3, [pc, #128]	@ (80058f8 <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 8005876:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8005878:	e03b      	b.n	80058f2 <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
          }
          case RCC_SPI3CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800587a:	4b1e      	ldr	r3, [pc, #120]	@ (80058f4 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800587c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005880:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8005884:	627b      	str	r3, [r7, #36]	@ 0x24

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005886:	4b1b      	ldr	r3, [pc, #108]	@ (80058f4 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	f003 0302 	and.w	r3, r3, #2
 800588e:	2b02      	cmp	r3, #2
 8005890:	d10c      	bne.n	80058ac <HAL_RCCEx_GetPeriphCLKFreq+0xd14>
 8005892:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005894:	2b00      	cmp	r3, #0
 8005896:	d109      	bne.n	80058ac <HAL_RCCEx_GetPeriphCLKFreq+0xd14>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005898:	4b16      	ldr	r3, [pc, #88]	@ (80058f4 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	08db      	lsrs	r3, r3, #3
 800589e:	f003 0303 	and.w	r3, r3, #3
 80058a2:	4a16      	ldr	r2, [pc, #88]	@ (80058fc <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 80058a4:	fa22 f303 	lsr.w	r3, r2, r3
 80058a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80058aa:	e01e      	b.n	80058ea <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80058ac:	4b11      	ldr	r3, [pc, #68]	@ (80058f4 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80058b4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80058b8:	d106      	bne.n	80058c8 <HAL_RCCEx_GetPeriphCLKFreq+0xd30>
 80058ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058bc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80058c0:	d102      	bne.n	80058c8 <HAL_RCCEx_GetPeriphCLKFreq+0xd30>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 80058c2:	4b0f      	ldr	r3, [pc, #60]	@ (8005900 <HAL_RCCEx_GetPeriphCLKFreq+0xd68>)
 80058c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80058c6:	e010      	b.n	80058ea <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80058c8:	4b0a      	ldr	r3, [pc, #40]	@ (80058f4 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80058d0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80058d4:	d106      	bne.n	80058e4 <HAL_RCCEx_GetPeriphCLKFreq+0xd4c>
 80058d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058d8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80058dc:	d102      	bne.n	80058e4 <HAL_RCCEx_GetPeriphCLKFreq+0xd4c>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 80058de:	4b09      	ldr	r3, [pc, #36]	@ (8005904 <HAL_RCCEx_GetPeriphCLKFreq+0xd6c>)
 80058e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80058e2:	e002      	b.n	80058ea <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 80058e4:	2300      	movs	r3, #0
 80058e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }

            break;
 80058e8:	e003      	b.n	80058f2 <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
 80058ea:	e002      	b.n	80058f2 <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
          }
          default:
          {
            frequency = 0;
 80058ec:	2300      	movs	r3, #0
 80058ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 80058f0:	bf00      	nop
          }
        }
        break;
 80058f2:	e086      	b.n	8005a02 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 80058f4:	44020c00 	.word	0x44020c00
 80058f8:	00bb8000 	.word	0x00bb8000
 80058fc:	03d09000 	.word	0x03d09000
 8005900:	003d0900 	.word	0x003d0900
 8005904:	017d7840 	.word	0x017d7840
        break;
#endif /* CEC */

      case RCC_PERIPHCLK_RNG:
        /* Get the current RNG source */
        srcclk = __HAL_RCC_GET_RNG_SOURCE();
 8005908:	4b40      	ldr	r3, [pc, #256]	@ (8005a0c <HAL_RCCEx_GetPeriphCLKFreq+0xe74>)
 800590a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800590e:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005912:	62bb      	str	r3, [r7, #40]	@ 0x28

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 8005914:	4b3d      	ldr	r3, [pc, #244]	@ (8005a0c <HAL_RCCEx_GetPeriphCLKFreq+0xe74>)
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800591c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005920:	d105      	bne.n	800592e <HAL_RCCEx_GetPeriphCLKFreq+0xd96>
 8005922:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005924:	2b00      	cmp	r3, #0
 8005926:	d102      	bne.n	800592e <HAL_RCCEx_GetPeriphCLKFreq+0xd96>
        {
          frequency = HSI48_VALUE;
 8005928:	4b39      	ldr	r3, [pc, #228]	@ (8005a10 <HAL_RCCEx_GetPeriphCLKFreq+0xe78>)
 800592a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800592c:	e031      	b.n	8005992 <HAL_RCCEx_GetPeriphCLKFreq+0xdfa>
        }
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY)) && (srcclk == RCC_RNGCLKSOURCE_PLL1Q))
 800592e:	4b37      	ldr	r3, [pc, #220]	@ (8005a0c <HAL_RCCEx_GetPeriphCLKFreq+0xe74>)
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005936:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800593a:	d10a      	bne.n	8005952 <HAL_RCCEx_GetPeriphCLKFreq+0xdba>
 800593c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800593e:	2b10      	cmp	r3, #16
 8005940:	d107      	bne.n	8005952 <HAL_RCCEx_GetPeriphCLKFreq+0xdba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005942:	f107 0318 	add.w	r3, r7, #24
 8005946:	4618      	mov	r0, r3
 8005948:	f7fe fe52 	bl	80045f0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800594c:	69fb      	ldr	r3, [r7, #28]
 800594e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005950:	e01f      	b.n	8005992 <HAL_RCCEx_GetPeriphCLKFreq+0xdfa>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RNGCLKSOURCE_LSE))
 8005952:	4b2e      	ldr	r3, [pc, #184]	@ (8005a0c <HAL_RCCEx_GetPeriphCLKFreq+0xe74>)
 8005954:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005958:	f003 0302 	and.w	r3, r3, #2
 800595c:	2b02      	cmp	r3, #2
 800595e:	d106      	bne.n	800596e <HAL_RCCEx_GetPeriphCLKFreq+0xdd6>
 8005960:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005962:	2b20      	cmp	r3, #32
 8005964:	d103      	bne.n	800596e <HAL_RCCEx_GetPeriphCLKFreq+0xdd6>
        {
          frequency = LSE_VALUE;
 8005966:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800596a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800596c:	e011      	b.n	8005992 <HAL_RCCEx_GetPeriphCLKFreq+0xdfa>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_LSI))
 800596e:	4b27      	ldr	r3, [pc, #156]	@ (8005a0c <HAL_RCCEx_GetPeriphCLKFreq+0xe74>)
 8005970:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005974:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005978:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800597c:	d106      	bne.n	800598c <HAL_RCCEx_GetPeriphCLKFreq+0xdf4>
 800597e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005980:	2b30      	cmp	r3, #48	@ 0x30
 8005982:	d103      	bne.n	800598c <HAL_RCCEx_GetPeriphCLKFreq+0xdf4>
        {
          frequency = LSI_VALUE;
 8005984:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8005988:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800598a:	e002      	b.n	8005992 <HAL_RCCEx_GetPeriphCLKFreq+0xdfa>
        }

        /* Clock not enabled for RNG */
        else
        {
          frequency = 0U;
 800598c:	2300      	movs	r3, #0
 800598e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        break;
 8005990:	e037      	b.n	8005a02 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8005992:	e036      	b.n	8005a02 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

#if defined(USB_DRD_FS)
      case RCC_PERIPHCLK_USB:
        /* Get the current USB kernel source */
        srcclk = __HAL_RCC_GET_USB_SOURCE();
 8005994:	4b1d      	ldr	r3, [pc, #116]	@ (8005a0c <HAL_RCCEx_GetPeriphCLKFreq+0xe74>)
 8005996:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800599a:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800599e:	62bb      	str	r3, [r7, #40]	@ 0x28

        if (srcclk == RCC_USBCLKSOURCE_PLL1Q)
 80059a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059a2:	2b10      	cmp	r3, #16
 80059a4:	d107      	bne.n	80059b6 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80059a6:	f107 0318 	add.w	r3, r7, #24
 80059aa:	4618      	mov	r0, r3
 80059ac:	f7fe fe20 	bl	80045f0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80059b0:	69fb      	ldr	r3, [r7, #28]
 80059b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
          break;
 80059b4:	e025      	b.n	8005a02 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
          frequency = pll3_clocks.PLL3_Q_Frequency;
        }
#else
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USBCLKSOURCE_PLL2Q))
 80059b6:	4b15      	ldr	r3, [pc, #84]	@ (8005a0c <HAL_RCCEx_GetPeriphCLKFreq+0xe74>)
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80059be:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80059c2:	d10a      	bne.n	80059da <HAL_RCCEx_GetPeriphCLKFreq+0xe42>
 80059c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059c6:	2b20      	cmp	r3, #32
 80059c8:	d107      	bne.n	80059da <HAL_RCCEx_GetPeriphCLKFreq+0xe42>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80059ca:	f107 030c 	add.w	r3, r7, #12
 80059ce:	4618      	mov	r0, r3
 80059d0:	f7fe ff78 	bl	80048c4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80059d4:	693b      	ldr	r3, [r7, #16]
 80059d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80059d8:	e00f      	b.n	80059fa <HAL_RCCEx_GetPeriphCLKFreq+0xe62>
        }
#endif /* RCC_USBCLKSOURCE_PLL3 */
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_USBCLKSOURCE_HSI48))
 80059da:	4b0c      	ldr	r3, [pc, #48]	@ (8005a0c <HAL_RCCEx_GetPeriphCLKFreq+0xe74>)
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80059e2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80059e6:	d105      	bne.n	80059f4 <HAL_RCCEx_GetPeriphCLKFreq+0xe5c>
 80059e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059ea:	2b30      	cmp	r3, #48	@ 0x30
 80059ec:	d102      	bne.n	80059f4 <HAL_RCCEx_GetPeriphCLKFreq+0xe5c>
        {
          frequency = HSI48_VALUE;
 80059ee:	4b08      	ldr	r3, [pc, #32]	@ (8005a10 <HAL_RCCEx_GetPeriphCLKFreq+0xe78>)
 80059f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80059f2:	e002      	b.n	80059fa <HAL_RCCEx_GetPeriphCLKFreq+0xe62>
        }
        /* Clock not enabled for USB */
        else
        {
          frequency = 0U;
 80059f4:	2300      	movs	r3, #0
 80059f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }

        break;
 80059f8:	e003      	b.n	8005a02 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 80059fa:	e002      	b.n	8005a02 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>


      default:
        frequency = 0U;
 80059fc:	2300      	movs	r3, #0
 80059fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8005a00:	bf00      	nop
        }
        break;
#endif /* RCC_CCIPR4_ETHCLKSEL */
    }
  }
  return (frequency);
 8005a02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8005a04:	4618      	mov	r0, r3
 8005a06:	3730      	adds	r7, #48	@ 0x30
 8005a08:	46bd      	mov	sp, r7
 8005a0a:	bd80      	pop	{r7, pc}
 8005a0c:	44020c00 	.word	0x44020c00
 8005a10:	02dc6c00 	.word	0x02dc6c00

08005a14 <RCCEx_PLL2_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL2 output clocks dividers
  * @note   PLL2 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 8005a14:	b580      	push	{r7, lr}
 8005a16:	b084      	sub	sp, #16
 8005a18:	af00      	add	r7, sp, #0
 8005a1a:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL2_VCIRGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2_VCORGE_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLL2_FRACN_VALUE(pll2->PLL2FRACN));

  /* Disable  PLL2. */
  __HAL_RCC_PLL2_DISABLE();
 8005a1c:	4b48      	ldr	r3, [pc, #288]	@ (8005b40 <RCCEx_PLL2_Config+0x12c>)
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	4a47      	ldr	r2, [pc, #284]	@ (8005b40 <RCCEx_PLL2_Config+0x12c>)
 8005a22:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005a26:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005a28:	f7fc f96a 	bl	8001d00 <HAL_GetTick>
 8005a2c:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005a2e:	e008      	b.n	8005a42 <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005a30:	f7fc f966 	bl	8001d00 <HAL_GetTick>
 8005a34:	4602      	mov	r2, r0
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	1ad3      	subs	r3, r2, r3
 8005a3a:	2b02      	cmp	r3, #2
 8005a3c:	d901      	bls.n	8005a42 <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8005a3e:	2303      	movs	r3, #3
 8005a40:	e07a      	b.n	8005b38 <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005a42:	4b3f      	ldr	r3, [pc, #252]	@ (8005b40 <RCCEx_PLL2_Config+0x12c>)
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d1f0      	bne.n	8005a30 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors. */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 8005a4e:	4b3c      	ldr	r3, [pc, #240]	@ (8005b40 <RCCEx_PLL2_Config+0x12c>)
 8005a50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a52:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8005a56:	f023 0303 	bic.w	r3, r3, #3
 8005a5a:	687a      	ldr	r2, [r7, #4]
 8005a5c:	6811      	ldr	r1, [r2, #0]
 8005a5e:	687a      	ldr	r2, [r7, #4]
 8005a60:	6852      	ldr	r2, [r2, #4]
 8005a62:	0212      	lsls	r2, r2, #8
 8005a64:	430a      	orrs	r2, r1
 8005a66:	4936      	ldr	r1, [pc, #216]	@ (8005b40 <RCCEx_PLL2_Config+0x12c>)
 8005a68:	4313      	orrs	r3, r2
 8005a6a:	62cb      	str	r3, [r1, #44]	@ 0x2c
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	689b      	ldr	r3, [r3, #8]
 8005a70:	3b01      	subs	r3, #1
 8005a72:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	68db      	ldr	r3, [r3, #12]
 8005a7a:	3b01      	subs	r3, #1
 8005a7c:	025b      	lsls	r3, r3, #9
 8005a7e:	b29b      	uxth	r3, r3
 8005a80:	431a      	orrs	r2, r3
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	691b      	ldr	r3, [r3, #16]
 8005a86:	3b01      	subs	r3, #1
 8005a88:	041b      	lsls	r3, r3, #16
 8005a8a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8005a8e:	431a      	orrs	r2, r3
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	695b      	ldr	r3, [r3, #20]
 8005a94:	3b01      	subs	r3, #1
 8005a96:	061b      	lsls	r3, r3, #24
 8005a98:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8005a9c:	4928      	ldr	r1, [pc, #160]	@ (8005b40 <RCCEx_PLL2_Config+0x12c>)
 8005a9e:	4313      	orrs	r3, r2
 8005aa0:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 8005aa2:	4b27      	ldr	r3, [pc, #156]	@ (8005b40 <RCCEx_PLL2_Config+0x12c>)
 8005aa4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005aa6:	f023 020c 	bic.w	r2, r3, #12
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	699b      	ldr	r3, [r3, #24]
 8005aae:	4924      	ldr	r1, [pc, #144]	@ (8005b40 <RCCEx_PLL2_Config+0x12c>)
 8005ab0:	4313      	orrs	r3, r2
 8005ab2:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Select PLL2 output frequency range : VCO */
  __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL);
 8005ab4:	4b22      	ldr	r3, [pc, #136]	@ (8005b40 <RCCEx_PLL2_Config+0x12c>)
 8005ab6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ab8:	f023 0220 	bic.w	r2, r3, #32
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	69db      	ldr	r3, [r3, #28]
 8005ac0:	491f      	ldr	r1, [pc, #124]	@ (8005b40 <RCCEx_PLL2_Config+0x12c>)
 8005ac2:	4313      	orrs	r3, r2
 8005ac4:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2_CLKOUT_ENABLE(pll2->PLL2ClockOut);
 8005ac6:	4b1e      	ldr	r3, [pc, #120]	@ (8005b40 <RCCEx_PLL2_Config+0x12c>)
 8005ac8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ace:	491c      	ldr	r1, [pc, #112]	@ (8005b40 <RCCEx_PLL2_Config+0x12c>)
 8005ad0:	4313      	orrs	r3, r2
 8005ad2:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_DISABLE();
 8005ad4:	4b1a      	ldr	r3, [pc, #104]	@ (8005b40 <RCCEx_PLL2_Config+0x12c>)
 8005ad6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ad8:	4a19      	ldr	r2, [pc, #100]	@ (8005b40 <RCCEx_PLL2_Config+0x12c>)
 8005ada:	f023 0310 	bic.w	r3, r3, #16
 8005ade:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2_FRACN_CONFIG(pll2->PLL2FRACN);
 8005ae0:	4b17      	ldr	r3, [pc, #92]	@ (8005b40 <RCCEx_PLL2_Config+0x12c>)
 8005ae2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ae4:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005ae8:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8005aec:	687a      	ldr	r2, [r7, #4]
 8005aee:	6a12      	ldr	r2, [r2, #32]
 8005af0:	00d2      	lsls	r2, r2, #3
 8005af2:	4913      	ldr	r1, [pc, #76]	@ (8005b40 <RCCEx_PLL2_Config+0x12c>)
 8005af4:	4313      	orrs	r3, r2
 8005af6:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_ENABLE();
 8005af8:	4b11      	ldr	r3, [pc, #68]	@ (8005b40 <RCCEx_PLL2_Config+0x12c>)
 8005afa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005afc:	4a10      	ldr	r2, [pc, #64]	@ (8005b40 <RCCEx_PLL2_Config+0x12c>)
 8005afe:	f043 0310 	orr.w	r3, r3, #16
 8005b02:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2. */
  __HAL_RCC_PLL2_ENABLE();
 8005b04:	4b0e      	ldr	r3, [pc, #56]	@ (8005b40 <RCCEx_PLL2_Config+0x12c>)
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	4a0d      	ldr	r2, [pc, #52]	@ (8005b40 <RCCEx_PLL2_Config+0x12c>)
 8005b0a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005b0e:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005b10:	f7fc f8f6 	bl	8001d00 <HAL_GetTick>
 8005b14:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005b16:	e008      	b.n	8005b2a <RCCEx_PLL2_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005b18:	f7fc f8f2 	bl	8001d00 <HAL_GetTick>
 8005b1c:	4602      	mov	r2, r0
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	1ad3      	subs	r3, r2, r3
 8005b22:	2b02      	cmp	r3, #2
 8005b24:	d901      	bls.n	8005b2a <RCCEx_PLL2_Config+0x116>
    {
      return HAL_TIMEOUT;
 8005b26:	2303      	movs	r3, #3
 8005b28:	e006      	b.n	8005b38 <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005b2a:	4b05      	ldr	r3, [pc, #20]	@ (8005b40 <RCCEx_PLL2_Config+0x12c>)
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d0f0      	beq.n	8005b18 <RCCEx_PLL2_Config+0x104>
    }
  }
  return HAL_OK;
 8005b36:	2300      	movs	r3, #0

}
 8005b38:	4618      	mov	r0, r3
 8005b3a:	3710      	adds	r7, #16
 8005b3c:	46bd      	mov	sp, r7
 8005b3e:	bd80      	pop	{r7, pc}
 8005b40:	44020c00 	.word	0x44020c00

08005b44 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005b44:	b580      	push	{r7, lr}
 8005b46:	b082      	sub	sp, #8
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d101      	bne.n	8005b56 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005b52:	2301      	movs	r3, #1
 8005b54:	e042      	b.n	8005bdc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d106      	bne.n	8005b6e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	2200      	movs	r2, #0
 8005b64:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005b68:	6878      	ldr	r0, [r7, #4]
 8005b6a:	f7fb fd73 	bl	8001654 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	2224      	movs	r2, #36	@ 0x24
 8005b72:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	681a      	ldr	r2, [r3, #0]
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	f022 0201 	bic.w	r2, r2, #1
 8005b84:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d002      	beq.n	8005b94 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8005b8e:	6878      	ldr	r0, [r7, #4]
 8005b90:	f000 fc1c 	bl	80063cc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005b94:	6878      	ldr	r0, [r7, #4]
 8005b96:	f000 fa9b 	bl	80060d0 <UART_SetConfig>
 8005b9a:	4603      	mov	r3, r0
 8005b9c:	2b01      	cmp	r3, #1
 8005b9e:	d101      	bne.n	8005ba4 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8005ba0:	2301      	movs	r3, #1
 8005ba2:	e01b      	b.n	8005bdc <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	685a      	ldr	r2, [r3, #4]
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005bb2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	689a      	ldr	r2, [r3, #8]
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005bc2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	681a      	ldr	r2, [r3, #0]
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	f042 0201 	orr.w	r2, r2, #1
 8005bd2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005bd4:	6878      	ldr	r0, [r7, #4]
 8005bd6:	f000 fc9b 	bl	8006510 <UART_CheckIdleState>
 8005bda:	4603      	mov	r3, r0
}
 8005bdc:	4618      	mov	r0, r3
 8005bde:	3708      	adds	r7, #8
 8005be0:	46bd      	mov	sp, r7
 8005be2:	bd80      	pop	{r7, pc}

08005be4 <HAL_HalfDuplex_Init>:
  *        parameters in the UART_InitTypeDef and creates the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 8005be4:	b580      	push	{r7, lr}
 8005be6:	b082      	sub	sp, #8
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d101      	bne.n	8005bf6 <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 8005bf2:	2301      	movs	r3, #1
 8005bf4:	e04a      	b.n	8005c8c <HAL_HalfDuplex_Init+0xa8>
  }

  /* Check UART instance */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d106      	bne.n	8005c0e <HAL_HalfDuplex_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	2200      	movs	r2, #0
 8005c04:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005c08:	6878      	ldr	r0, [r7, #4]
 8005c0a:	f7fb fd23 	bl	8001654 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	2224      	movs	r2, #36	@ 0x24
 8005c12:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	681a      	ldr	r2, [r3, #0]
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	f022 0201 	bic.w	r2, r2, #1
 8005c24:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d002      	beq.n	8005c34 <HAL_HalfDuplex_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8005c2e:	6878      	ldr	r0, [r7, #4]
 8005c30:	f000 fbcc 	bl	80063cc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005c34:	6878      	ldr	r0, [r7, #4]
 8005c36:	f000 fa4b 	bl	80060d0 <UART_SetConfig>
 8005c3a:	4603      	mov	r3, r0
 8005c3c:	2b01      	cmp	r3, #1
 8005c3e:	d101      	bne.n	8005c44 <HAL_HalfDuplex_Init+0x60>
  {
    return HAL_ERROR;
 8005c40:	2301      	movs	r3, #1
 8005c42:	e023      	b.n	8005c8c <HAL_HalfDuplex_Init+0xa8>
  }

  /* In half-duplex mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	685a      	ldr	r2, [r3, #4]
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005c52:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	689a      	ldr	r2, [r3, #8]
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	f022 0222 	bic.w	r2, r2, #34	@ 0x22
 8005c62:	609a      	str	r2, [r3, #8]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	689a      	ldr	r2, [r3, #8]
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	f042 0208 	orr.w	r2, r2, #8
 8005c72:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	681a      	ldr	r2, [r3, #0]
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	f042 0201 	orr.w	r2, r2, #1
 8005c82:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005c84:	6878      	ldr	r0, [r7, #4]
 8005c86:	f000 fc43 	bl	8006510 <UART_CheckIdleState>
 8005c8a:	4603      	mov	r3, r0
}
 8005c8c:	4618      	mov	r0, r3
 8005c8e:	3708      	adds	r7, #8
 8005c90:	46bd      	mov	sp, r7
 8005c92:	bd80      	pop	{r7, pc}

08005c94 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005c94:	b580      	push	{r7, lr}
 8005c96:	b08a      	sub	sp, #40	@ 0x28
 8005c98:	af02      	add	r7, sp, #8
 8005c9a:	60f8      	str	r0, [r7, #12]
 8005c9c:	60b9      	str	r1, [r7, #8]
 8005c9e:	603b      	str	r3, [r7, #0]
 8005ca0:	4613      	mov	r3, r2
 8005ca2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005caa:	2b20      	cmp	r3, #32
 8005cac:	f040 808b 	bne.w	8005dc6 <HAL_UART_Transmit+0x132>
  {
    if ((pData == NULL) || (Size == 0U))
 8005cb0:	68bb      	ldr	r3, [r7, #8]
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d002      	beq.n	8005cbc <HAL_UART_Transmit+0x28>
 8005cb6:	88fb      	ldrh	r3, [r7, #6]
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d101      	bne.n	8005cc0 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8005cbc:	2301      	movs	r3, #1
 8005cbe:	e083      	b.n	8005dc8 <HAL_UART_Transmit+0x134>
    }

#if defined(USART_DMAREQUESTS_SW_WA)
    /* Disable the UART DMA Tx request if enabled */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	689b      	ldr	r3, [r3, #8]
 8005cc6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005cca:	2b80      	cmp	r3, #128	@ 0x80
 8005ccc:	d107      	bne.n	8005cde <HAL_UART_Transmit+0x4a>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	689a      	ldr	r2, [r3, #8]
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005cdc:	609a      	str	r2, [r3, #8]
    }

#endif /* USART_DMAREQUESTS_SW_WA */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	2200      	movs	r2, #0
 8005ce2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	2221      	movs	r2, #33	@ 0x21
 8005cea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005cee:	f7fc f807 	bl	8001d00 <HAL_GetTick>
 8005cf2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	88fa      	ldrh	r2, [r7, #6]
 8005cf8:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	88fa      	ldrh	r2, [r7, #6]
 8005d00:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	689b      	ldr	r3, [r3, #8]
 8005d08:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005d0c:	d108      	bne.n	8005d20 <HAL_UART_Transmit+0x8c>
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	691b      	ldr	r3, [r3, #16]
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d104      	bne.n	8005d20 <HAL_UART_Transmit+0x8c>
    {
      pdata8bits  = NULL;
 8005d16:	2300      	movs	r3, #0
 8005d18:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005d1a:	68bb      	ldr	r3, [r7, #8]
 8005d1c:	61bb      	str	r3, [r7, #24]
 8005d1e:	e003      	b.n	8005d28 <HAL_UART_Transmit+0x94>
    }
    else
    {
      pdata8bits  = pData;
 8005d20:	68bb      	ldr	r3, [r7, #8]
 8005d22:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005d24:	2300      	movs	r3, #0
 8005d26:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005d28:	e030      	b.n	8005d8c <HAL_UART_Transmit+0xf8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005d2a:	683b      	ldr	r3, [r7, #0]
 8005d2c:	9300      	str	r3, [sp, #0]
 8005d2e:	697b      	ldr	r3, [r7, #20]
 8005d30:	2200      	movs	r2, #0
 8005d32:	2180      	movs	r1, #128	@ 0x80
 8005d34:	68f8      	ldr	r0, [r7, #12]
 8005d36:	f000 fc95 	bl	8006664 <UART_WaitOnFlagUntilTimeout>
 8005d3a:	4603      	mov	r3, r0
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d005      	beq.n	8005d4c <HAL_UART_Transmit+0xb8>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	2220      	movs	r2, #32
 8005d44:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8005d48:	2303      	movs	r3, #3
 8005d4a:	e03d      	b.n	8005dc8 <HAL_UART_Transmit+0x134>
      }
      if (pdata8bits == NULL)
 8005d4c:	69fb      	ldr	r3, [r7, #28]
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d10b      	bne.n	8005d6a <HAL_UART_Transmit+0xd6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005d52:	69bb      	ldr	r3, [r7, #24]
 8005d54:	881b      	ldrh	r3, [r3, #0]
 8005d56:	461a      	mov	r2, r3
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005d60:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8005d62:	69bb      	ldr	r3, [r7, #24]
 8005d64:	3302      	adds	r3, #2
 8005d66:	61bb      	str	r3, [r7, #24]
 8005d68:	e007      	b.n	8005d7a <HAL_UART_Transmit+0xe6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005d6a:	69fb      	ldr	r3, [r7, #28]
 8005d6c:	781a      	ldrb	r2, [r3, #0]
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8005d74:	69fb      	ldr	r3, [r7, #28]
 8005d76:	3301      	adds	r3, #1
 8005d78:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8005d80:	b29b      	uxth	r3, r3
 8005d82:	3b01      	subs	r3, #1
 8005d84:	b29a      	uxth	r2, r3
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8005d92:	b29b      	uxth	r3, r3
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d1c8      	bne.n	8005d2a <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005d98:	683b      	ldr	r3, [r7, #0]
 8005d9a:	9300      	str	r3, [sp, #0]
 8005d9c:	697b      	ldr	r3, [r7, #20]
 8005d9e:	2200      	movs	r2, #0
 8005da0:	2140      	movs	r1, #64	@ 0x40
 8005da2:	68f8      	ldr	r0, [r7, #12]
 8005da4:	f000 fc5e 	bl	8006664 <UART_WaitOnFlagUntilTimeout>
 8005da8:	4603      	mov	r3, r0
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d005      	beq.n	8005dba <HAL_UART_Transmit+0x126>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	2220      	movs	r2, #32
 8005db2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8005db6:	2303      	movs	r3, #3
 8005db8:	e006      	b.n	8005dc8 <HAL_UART_Transmit+0x134>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	2220      	movs	r2, #32
 8005dbe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8005dc2:	2300      	movs	r3, #0
 8005dc4:	e000      	b.n	8005dc8 <HAL_UART_Transmit+0x134>
  }
  else
  {
    return HAL_BUSY;
 8005dc6:	2302      	movs	r3, #2
  }
}
 8005dc8:	4618      	mov	r0, r3
 8005dca:	3720      	adds	r7, #32
 8005dcc:	46bd      	mov	sp, r7
 8005dce:	bd80      	pop	{r7, pc}

08005dd0 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005dd0:	b580      	push	{r7, lr}
 8005dd2:	b08a      	sub	sp, #40	@ 0x28
 8005dd4:	af02      	add	r7, sp, #8
 8005dd6:	60f8      	str	r0, [r7, #12]
 8005dd8:	60b9      	str	r1, [r7, #8]
 8005dda:	603b      	str	r3, [r7, #0]
 8005ddc:	4613      	mov	r3, r2
 8005dde:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005de6:	2b20      	cmp	r3, #32
 8005de8:	f040 80c4 	bne.w	8005f74 <HAL_UART_Receive+0x1a4>
  {
    if ((pData == NULL) || (Size == 0U))
 8005dec:	68bb      	ldr	r3, [r7, #8]
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d002      	beq.n	8005df8 <HAL_UART_Receive+0x28>
 8005df2:	88fb      	ldrh	r3, [r7, #6]
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d101      	bne.n	8005dfc <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8005df8:	2301      	movs	r3, #1
 8005dfa:	e0bc      	b.n	8005f76 <HAL_UART_Receive+0x1a6>
    }

#if defined(USART_DMAREQUESTS_SW_WA)
    /* Disable the UART DMA Rx request if enabled */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	689b      	ldr	r3, [r3, #8]
 8005e02:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e06:	2b40      	cmp	r3, #64	@ 0x40
 8005e08:	d107      	bne.n	8005e1a <HAL_UART_Receive+0x4a>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	689a      	ldr	r2, [r3, #8]
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005e18:	609a      	str	r2, [r3, #8]
    }

#endif /* USART_DMAREQUESTS_SW_WA */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	2200      	movs	r2, #0
 8005e1e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	2222      	movs	r2, #34	@ 0x22
 8005e26:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	2200      	movs	r2, #0
 8005e2e:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005e30:	f7fb ff66 	bl	8001d00 <HAL_GetTick>
 8005e34:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	88fa      	ldrh	r2, [r7, #6]
 8005e3a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    huart->RxXferCount = Size;
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	88fa      	ldrh	r2, [r7, #6]
 8005e42:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	689b      	ldr	r3, [r3, #8]
 8005e4a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005e4e:	d10e      	bne.n	8005e6e <HAL_UART_Receive+0x9e>
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	691b      	ldr	r3, [r3, #16]
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d105      	bne.n	8005e64 <HAL_UART_Receive+0x94>
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8005e5e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8005e62:	e02d      	b.n	8005ec0 <HAL_UART_Receive+0xf0>
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	22ff      	movs	r2, #255	@ 0xff
 8005e68:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8005e6c:	e028      	b.n	8005ec0 <HAL_UART_Receive+0xf0>
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	689b      	ldr	r3, [r3, #8]
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d10d      	bne.n	8005e92 <HAL_UART_Receive+0xc2>
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	691b      	ldr	r3, [r3, #16]
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d104      	bne.n	8005e88 <HAL_UART_Receive+0xb8>
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	22ff      	movs	r2, #255	@ 0xff
 8005e82:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8005e86:	e01b      	b.n	8005ec0 <HAL_UART_Receive+0xf0>
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	227f      	movs	r2, #127	@ 0x7f
 8005e8c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8005e90:	e016      	b.n	8005ec0 <HAL_UART_Receive+0xf0>
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	689b      	ldr	r3, [r3, #8]
 8005e96:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005e9a:	d10d      	bne.n	8005eb8 <HAL_UART_Receive+0xe8>
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	691b      	ldr	r3, [r3, #16]
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d104      	bne.n	8005eae <HAL_UART_Receive+0xde>
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	227f      	movs	r2, #127	@ 0x7f
 8005ea8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8005eac:	e008      	b.n	8005ec0 <HAL_UART_Receive+0xf0>
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	223f      	movs	r2, #63	@ 0x3f
 8005eb2:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8005eb6:	e003      	b.n	8005ec0 <HAL_UART_Receive+0xf0>
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	2200      	movs	r2, #0
 8005ebc:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    uhMask = huart->Mask;
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8005ec6:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	689b      	ldr	r3, [r3, #8]
 8005ecc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005ed0:	d108      	bne.n	8005ee4 <HAL_UART_Receive+0x114>
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	691b      	ldr	r3, [r3, #16]
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d104      	bne.n	8005ee4 <HAL_UART_Receive+0x114>
    {
      pdata8bits  = NULL;
 8005eda:	2300      	movs	r3, #0
 8005edc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005ede:	68bb      	ldr	r3, [r7, #8]
 8005ee0:	61bb      	str	r3, [r7, #24]
 8005ee2:	e003      	b.n	8005eec <HAL_UART_Receive+0x11c>
    }
    else
    {
      pdata8bits  = pData;
 8005ee4:	68bb      	ldr	r3, [r7, #8]
 8005ee6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005ee8:	2300      	movs	r3, #0
 8005eea:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8005eec:	e036      	b.n	8005f5c <HAL_UART_Receive+0x18c>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8005eee:	683b      	ldr	r3, [r7, #0]
 8005ef0:	9300      	str	r3, [sp, #0]
 8005ef2:	697b      	ldr	r3, [r7, #20]
 8005ef4:	2200      	movs	r2, #0
 8005ef6:	2120      	movs	r1, #32
 8005ef8:	68f8      	ldr	r0, [r7, #12]
 8005efa:	f000 fbb3 	bl	8006664 <UART_WaitOnFlagUntilTimeout>
 8005efe:	4603      	mov	r3, r0
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d005      	beq.n	8005f10 <HAL_UART_Receive+0x140>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	2220      	movs	r2, #32
 8005f08:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        return HAL_TIMEOUT;
 8005f0c:	2303      	movs	r3, #3
 8005f0e:	e032      	b.n	8005f76 <HAL_UART_Receive+0x1a6>
      }
      if (pdata8bits == NULL)
 8005f10:	69fb      	ldr	r3, [r7, #28]
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d10c      	bne.n	8005f30 <HAL_UART_Receive+0x160>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f1c:	b29a      	uxth	r2, r3
 8005f1e:	8a7b      	ldrh	r3, [r7, #18]
 8005f20:	4013      	ands	r3, r2
 8005f22:	b29a      	uxth	r2, r3
 8005f24:	69bb      	ldr	r3, [r7, #24]
 8005f26:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8005f28:	69bb      	ldr	r3, [r7, #24]
 8005f2a:	3302      	adds	r3, #2
 8005f2c:	61bb      	str	r3, [r7, #24]
 8005f2e:	e00c      	b.n	8005f4a <HAL_UART_Receive+0x17a>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f36:	b2da      	uxtb	r2, r3
 8005f38:	8a7b      	ldrh	r3, [r7, #18]
 8005f3a:	b2db      	uxtb	r3, r3
 8005f3c:	4013      	ands	r3, r2
 8005f3e:	b2da      	uxtb	r2, r3
 8005f40:	69fb      	ldr	r3, [r7, #28]
 8005f42:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8005f44:	69fb      	ldr	r3, [r7, #28]
 8005f46:	3301      	adds	r3, #1
 8005f48:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005f50:	b29b      	uxth	r3, r3
 8005f52:	3b01      	subs	r3, #1
 8005f54:	b29a      	uxth	r2, r3
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    while (huart->RxXferCount > 0U)
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005f62:	b29b      	uxth	r3, r3
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d1c2      	bne.n	8005eee <HAL_UART_Receive+0x11e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	2220      	movs	r2, #32
 8005f6c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    return HAL_OK;
 8005f70:	2300      	movs	r3, #0
 8005f72:	e000      	b.n	8005f76 <HAL_UART_Receive+0x1a6>
  }
  else
  {
    return HAL_BUSY;
 8005f74:	2302      	movs	r3, #2
  }
}
 8005f76:	4618      	mov	r0, r3
 8005f78:	3720      	adds	r7, #32
 8005f7a:	46bd      	mov	sp, r7
 8005f7c:	bd80      	pop	{r7, pc}

08005f7e <HAL_HalfDuplex_EnableTransmitter>:
  * @brief  Enable the UART transmitter and disable the UART receiver.
  * @param  huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_EnableTransmitter(UART_HandleTypeDef *huart)
{
 8005f7e:	b480      	push	{r7}
 8005f80:	b08f      	sub	sp, #60	@ 0x3c
 8005f82:	af00      	add	r7, sp, #0
 8005f84:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(huart);
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005f8c:	2b01      	cmp	r3, #1
 8005f8e:	d101      	bne.n	8005f94 <HAL_HalfDuplex_EnableTransmitter+0x16>
 8005f90:	2302      	movs	r3, #2
 8005f92:	e042      	b.n	800601a <HAL_HalfDuplex_EnableTransmitter+0x9c>
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	2201      	movs	r2, #1
 8005f98:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84
  huart->gState = HAL_UART_STATE_BUSY;
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	2224      	movs	r2, #36	@ 0x24
 8005fa0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Clear TE and RE bits */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TE | USART_CR1_RE));
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005faa:	6a3b      	ldr	r3, [r7, #32]
 8005fac:	e853 3f00 	ldrex	r3, [r3]
 8005fb0:	61fb      	str	r3, [r7, #28]
   return(result);
 8005fb2:	69fb      	ldr	r3, [r7, #28]
 8005fb4:	f023 030c 	bic.w	r3, r3, #12
 8005fb8:	637b      	str	r3, [r7, #52]	@ 0x34
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	461a      	mov	r2, r3
 8005fc0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005fc2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005fc4:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fc6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005fc8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005fca:	e841 2300 	strex	r3, r2, [r1]
 8005fce:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005fd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d1e6      	bne.n	8005fa4 <HAL_HalfDuplex_EnableTransmitter+0x26>

  /* Enable the USART's transmit interface by setting the TE bit in the USART CR1 register */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TE);
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	e853 3f00 	ldrex	r3, [r3]
 8005fe2:	60bb      	str	r3, [r7, #8]
   return(result);
 8005fe4:	68bb      	ldr	r3, [r7, #8]
 8005fe6:	f043 0308 	orr.w	r3, r3, #8
 8005fea:	633b      	str	r3, [r7, #48]	@ 0x30
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	461a      	mov	r2, r3
 8005ff2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ff4:	61bb      	str	r3, [r7, #24]
 8005ff6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ff8:	6979      	ldr	r1, [r7, #20]
 8005ffa:	69ba      	ldr	r2, [r7, #24]
 8005ffc:	e841 2300 	strex	r3, r2, [r1]
 8006000:	613b      	str	r3, [r7, #16]
   return(result);
 8006002:	693b      	ldr	r3, [r7, #16]
 8006004:	2b00      	cmp	r3, #0
 8006006:	d1e6      	bne.n	8005fd6 <HAL_HalfDuplex_EnableTransmitter+0x58>

  huart->gState = HAL_UART_STATE_READY;
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	2220      	movs	r2, #32
 800600c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UNLOCK(huart);
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	2200      	movs	r2, #0
 8006014:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006018:	2300      	movs	r3, #0
}
 800601a:	4618      	mov	r0, r3
 800601c:	373c      	adds	r7, #60	@ 0x3c
 800601e:	46bd      	mov	sp, r7
 8006020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006024:	4770      	bx	lr

08006026 <HAL_HalfDuplex_EnableReceiver>:
  * @brief  Enable the UART receiver and disable the UART transmitter.
  * @param  huart UART handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_HalfDuplex_EnableReceiver(UART_HandleTypeDef *huart)
{
 8006026:	b480      	push	{r7}
 8006028:	b08f      	sub	sp, #60	@ 0x3c
 800602a:	af00      	add	r7, sp, #0
 800602c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(huart);
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006034:	2b01      	cmp	r3, #1
 8006036:	d101      	bne.n	800603c <HAL_HalfDuplex_EnableReceiver+0x16>
 8006038:	2302      	movs	r3, #2
 800603a:	e042      	b.n	80060c2 <HAL_HalfDuplex_EnableReceiver+0x9c>
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	2201      	movs	r2, #1
 8006040:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84
  huart->gState = HAL_UART_STATE_BUSY;
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	2224      	movs	r2, #36	@ 0x24
 8006048:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Clear TE and RE bits */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TE | USART_CR1_RE));
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006052:	6a3b      	ldr	r3, [r7, #32]
 8006054:	e853 3f00 	ldrex	r3, [r3]
 8006058:	61fb      	str	r3, [r7, #28]
   return(result);
 800605a:	69fb      	ldr	r3, [r7, #28]
 800605c:	f023 030c 	bic.w	r3, r3, #12
 8006060:	637b      	str	r3, [r7, #52]	@ 0x34
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	461a      	mov	r2, r3
 8006068:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800606a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800606c:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800606e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006070:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006072:	e841 2300 	strex	r3, r2, [r1]
 8006076:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006078:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800607a:	2b00      	cmp	r3, #0
 800607c:	d1e6      	bne.n	800604c <HAL_HalfDuplex_EnableReceiver+0x26>

  /* Enable the USART's receive interface by setting the RE bit in the USART CR1 register */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RE);
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	e853 3f00 	ldrex	r3, [r3]
 800608a:	60bb      	str	r3, [r7, #8]
   return(result);
 800608c:	68bb      	ldr	r3, [r7, #8]
 800608e:	f043 0304 	orr.w	r3, r3, #4
 8006092:	633b      	str	r3, [r7, #48]	@ 0x30
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	461a      	mov	r2, r3
 800609a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800609c:	61bb      	str	r3, [r7, #24]
 800609e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060a0:	6979      	ldr	r1, [r7, #20]
 80060a2:	69ba      	ldr	r2, [r7, #24]
 80060a4:	e841 2300 	strex	r3, r2, [r1]
 80060a8:	613b      	str	r3, [r7, #16]
   return(result);
 80060aa:	693b      	ldr	r3, [r7, #16]
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d1e6      	bne.n	800607e <HAL_HalfDuplex_EnableReceiver+0x58>

  huart->gState = HAL_UART_STATE_READY;
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	2220      	movs	r2, #32
 80060b4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UNLOCK(huart);
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	2200      	movs	r2, #0
 80060bc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80060c0:	2300      	movs	r3, #0
}
 80060c2:	4618      	mov	r0, r3
 80060c4:	373c      	adds	r7, #60	@ 0x3c
 80060c6:	46bd      	mov	sp, r7
 80060c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060cc:	4770      	bx	lr
	...

080060d0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80060d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80060d4:	b094      	sub	sp, #80	@ 0x50
 80060d6:	af00      	add	r7, sp, #0
 80060d8:	62f8      	str	r0, [r7, #44]	@ 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80060da:	2300      	movs	r3, #0
 80060dc:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80060e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80060e2:	689a      	ldr	r2, [r3, #8]
 80060e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80060e6:	691b      	ldr	r3, [r3, #16]
 80060e8:	431a      	orrs	r2, r3
 80060ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80060ec:	695b      	ldr	r3, [r3, #20]
 80060ee:	431a      	orrs	r2, r3
 80060f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80060f2:	69db      	ldr	r3, [r3, #28]
 80060f4:	4313      	orrs	r3, r2
 80060f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80060f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	498a      	ldr	r1, [pc, #552]	@ (8006328 <UART_SetConfig+0x258>)
 8006100:	4019      	ands	r1, r3
 8006102:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006104:	681a      	ldr	r2, [r3, #0]
 8006106:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006108:	430b      	orrs	r3, r1
 800610a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800610c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	685b      	ldr	r3, [r3, #4]
 8006112:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8006116:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006118:	68d9      	ldr	r1, [r3, #12]
 800611a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800611c:	681a      	ldr	r2, [r3, #0]
 800611e:	ea40 0301 	orr.w	r3, r0, r1
 8006122:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006124:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006126:	699b      	ldr	r3, [r3, #24]
 8006128:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800612a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800612c:	681a      	ldr	r2, [r3, #0]
 800612e:	4b7f      	ldr	r3, [pc, #508]	@ (800632c <UART_SetConfig+0x25c>)
 8006130:	429a      	cmp	r2, r3
 8006132:	d004      	beq.n	800613e <UART_SetConfig+0x6e>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006134:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006136:	6a1a      	ldr	r2, [r3, #32]
 8006138:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800613a:	4313      	orrs	r3, r2
 800613c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800613e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	689b      	ldr	r3, [r3, #8]
 8006144:	f023 416e 	bic.w	r1, r3, #3992977408	@ 0xee000000
 8006148:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
 800614c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800614e:	681a      	ldr	r2, [r3, #0]
 8006150:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006152:	430b      	orrs	r3, r1
 8006154:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006156:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800615c:	f023 000f 	bic.w	r0, r3, #15
 8006160:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006162:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8006164:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006166:	681a      	ldr	r2, [r3, #0]
 8006168:	ea40 0301 	orr.w	r3, r0, r1
 800616c:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800616e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006170:	681a      	ldr	r2, [r3, #0]
 8006172:	4b6f      	ldr	r3, [pc, #444]	@ (8006330 <UART_SetConfig+0x260>)
 8006174:	429a      	cmp	r2, r3
 8006176:	d102      	bne.n	800617e <UART_SetConfig+0xae>
 8006178:	2301      	movs	r3, #1
 800617a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800617c:	e01a      	b.n	80061b4 <UART_SetConfig+0xe4>
 800617e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006180:	681a      	ldr	r2, [r3, #0]
 8006182:	4b6c      	ldr	r3, [pc, #432]	@ (8006334 <UART_SetConfig+0x264>)
 8006184:	429a      	cmp	r2, r3
 8006186:	d102      	bne.n	800618e <UART_SetConfig+0xbe>
 8006188:	2302      	movs	r3, #2
 800618a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800618c:	e012      	b.n	80061b4 <UART_SetConfig+0xe4>
 800618e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006190:	681a      	ldr	r2, [r3, #0]
 8006192:	4b69      	ldr	r3, [pc, #420]	@ (8006338 <UART_SetConfig+0x268>)
 8006194:	429a      	cmp	r2, r3
 8006196:	d102      	bne.n	800619e <UART_SetConfig+0xce>
 8006198:	2304      	movs	r3, #4
 800619a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800619c:	e00a      	b.n	80061b4 <UART_SetConfig+0xe4>
 800619e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80061a0:	681a      	ldr	r2, [r3, #0]
 80061a2:	4b62      	ldr	r3, [pc, #392]	@ (800632c <UART_SetConfig+0x25c>)
 80061a4:	429a      	cmp	r2, r3
 80061a6:	d103      	bne.n	80061b0 <UART_SetConfig+0xe0>
 80061a8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80061ac:	64bb      	str	r3, [r7, #72]	@ 0x48
 80061ae:	e001      	b.n	80061b4 <UART_SetConfig+0xe4>
 80061b0:	2300      	movs	r3, #0
 80061b2:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80061b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80061b6:	681a      	ldr	r2, [r3, #0]
 80061b8:	4b5c      	ldr	r3, [pc, #368]	@ (800632c <UART_SetConfig+0x25c>)
 80061ba:	429a      	cmp	r2, r3
 80061bc:	d171      	bne.n	80062a2 <UART_SetConfig+0x1d2>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 80061be:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80061c0:	2200      	movs	r2, #0
 80061c2:	623b      	str	r3, [r7, #32]
 80061c4:	627a      	str	r2, [r7, #36]	@ 0x24
 80061c6:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80061ca:	f7fe fce5 	bl	8004b98 <HAL_RCCEx_GetPeriphCLKFreq>
 80061ce:	6438      	str	r0, [r7, #64]	@ 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 80061d0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	f000 80e2 	beq.w	800639c <UART_SetConfig+0x2cc>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80061d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80061da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061dc:	4a57      	ldr	r2, [pc, #348]	@ (800633c <UART_SetConfig+0x26c>)
 80061de:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80061e2:	461a      	mov	r2, r3
 80061e4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80061e6:	fbb3 f3f2 	udiv	r3, r3, r2
 80061ea:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80061ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80061ee:	685a      	ldr	r2, [r3, #4]
 80061f0:	4613      	mov	r3, r2
 80061f2:	005b      	lsls	r3, r3, #1
 80061f4:	4413      	add	r3, r2
 80061f6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80061f8:	429a      	cmp	r2, r3
 80061fa:	d305      	bcc.n	8006208 <UART_SetConfig+0x138>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80061fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80061fe:	685b      	ldr	r3, [r3, #4]
 8006200:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006202:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006204:	429a      	cmp	r2, r3
 8006206:	d903      	bls.n	8006210 <UART_SetConfig+0x140>
      {
        ret = HAL_ERROR;
 8006208:	2301      	movs	r3, #1
 800620a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800620e:	e0c5      	b.n	800639c <UART_SetConfig+0x2cc>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006210:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006212:	2200      	movs	r2, #0
 8006214:	61bb      	str	r3, [r7, #24]
 8006216:	61fa      	str	r2, [r7, #28]
 8006218:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800621a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800621c:	4a47      	ldr	r2, [pc, #284]	@ (800633c <UART_SetConfig+0x26c>)
 800621e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006222:	b29b      	uxth	r3, r3
 8006224:	2200      	movs	r2, #0
 8006226:	613b      	str	r3, [r7, #16]
 8006228:	617a      	str	r2, [r7, #20]
 800622a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800622e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8006232:	f7fa fd47 	bl	8000cc4 <__aeabi_uldivmod>
 8006236:	4602      	mov	r2, r0
 8006238:	460b      	mov	r3, r1
 800623a:	4610      	mov	r0, r2
 800623c:	4619      	mov	r1, r3
 800623e:	f04f 0200 	mov.w	r2, #0
 8006242:	f04f 0300 	mov.w	r3, #0
 8006246:	020b      	lsls	r3, r1, #8
 8006248:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800624c:	0202      	lsls	r2, r0, #8
 800624e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006250:	6849      	ldr	r1, [r1, #4]
 8006252:	0849      	lsrs	r1, r1, #1
 8006254:	2000      	movs	r0, #0
 8006256:	460c      	mov	r4, r1
 8006258:	4605      	mov	r5, r0
 800625a:	eb12 0804 	adds.w	r8, r2, r4
 800625e:	eb43 0905 	adc.w	r9, r3, r5
 8006262:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006264:	685b      	ldr	r3, [r3, #4]
 8006266:	2200      	movs	r2, #0
 8006268:	60bb      	str	r3, [r7, #8]
 800626a:	60fa      	str	r2, [r7, #12]
 800626c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006270:	4640      	mov	r0, r8
 8006272:	4649      	mov	r1, r9
 8006274:	f7fa fd26 	bl	8000cc4 <__aeabi_uldivmod>
 8006278:	4602      	mov	r2, r0
 800627a:	460b      	mov	r3, r1
 800627c:	4613      	mov	r3, r2
 800627e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006280:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006282:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006286:	d308      	bcc.n	800629a <UART_SetConfig+0x1ca>
 8006288:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800628a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800628e:	d204      	bcs.n	800629a <UART_SetConfig+0x1ca>
        {
          huart->Instance->BRR = usartdiv;
 8006290:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8006296:	60da      	str	r2, [r3, #12]
 8006298:	e080      	b.n	800639c <UART_SetConfig+0x2cc>
        }
        else
        {
          ret = HAL_ERROR;
 800629a:	2301      	movs	r3, #1
 800629c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 80062a0:	e07c      	b.n	800639c <UART_SetConfig+0x2cc>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80062a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80062a4:	69db      	ldr	r3, [r3, #28]
 80062a6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80062aa:	d149      	bne.n	8006340 <UART_SetConfig+0x270>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 80062ac:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80062ae:	2200      	movs	r2, #0
 80062b0:	603b      	str	r3, [r7, #0]
 80062b2:	607a      	str	r2, [r7, #4]
 80062b4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80062b8:	f7fe fc6e 	bl	8004b98 <HAL_RCCEx_GetPeriphCLKFreq>
 80062bc:	6438      	str	r0, [r7, #64]	@ 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80062be:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d06b      	beq.n	800639c <UART_SetConfig+0x2cc>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80062c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80062c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062c8:	4a1c      	ldr	r2, [pc, #112]	@ (800633c <UART_SetConfig+0x26c>)
 80062ca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80062ce:	461a      	mov	r2, r3
 80062d0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80062d2:	fbb3 f3f2 	udiv	r3, r3, r2
 80062d6:	005a      	lsls	r2, r3, #1
 80062d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80062da:	685b      	ldr	r3, [r3, #4]
 80062dc:	085b      	lsrs	r3, r3, #1
 80062de:	441a      	add	r2, r3
 80062e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80062e2:	685b      	ldr	r3, [r3, #4]
 80062e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80062e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80062ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80062ec:	2b0f      	cmp	r3, #15
 80062ee:	d916      	bls.n	800631e <UART_SetConfig+0x24e>
 80062f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80062f2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80062f6:	d212      	bcs.n	800631e <UART_SetConfig+0x24e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80062f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80062fa:	b29b      	uxth	r3, r3
 80062fc:	f023 030f 	bic.w	r3, r3, #15
 8006300:	877b      	strh	r3, [r7, #58]	@ 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006302:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006304:	085b      	lsrs	r3, r3, #1
 8006306:	b29b      	uxth	r3, r3
 8006308:	f003 0307 	and.w	r3, r3, #7
 800630c:	b29a      	uxth	r2, r3
 800630e:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8006310:	4313      	orrs	r3, r2
 8006312:	877b      	strh	r3, [r7, #58]	@ 0x3a
        huart->Instance->BRR = brrtemp;
 8006314:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 800631a:	60da      	str	r2, [r3, #12]
 800631c:	e03e      	b.n	800639c <UART_SetConfig+0x2cc>
      }
      else
      {
        ret = HAL_ERROR;
 800631e:	2301      	movs	r3, #1
 8006320:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8006324:	e03a      	b.n	800639c <UART_SetConfig+0x2cc>
 8006326:	bf00      	nop
 8006328:	cfff69f3 	.word	0xcfff69f3
 800632c:	44002400 	.word	0x44002400
 8006330:	40013800 	.word	0x40013800
 8006334:	40004400 	.word	0x40004400
 8006338:	40004800 	.word	0x40004800
 800633c:	0800b280 	.word	0x0800b280
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8006340:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006342:	2200      	movs	r2, #0
 8006344:	469a      	mov	sl, r3
 8006346:	4693      	mov	fp, r2
 8006348:	4650      	mov	r0, sl
 800634a:	4659      	mov	r1, fp
 800634c:	f7fe fc24 	bl	8004b98 <HAL_RCCEx_GetPeriphCLKFreq>
 8006350:	6438      	str	r0, [r7, #64]	@ 0x40

    if (pclk != 0U)
 8006352:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006354:	2b00      	cmp	r3, #0
 8006356:	d021      	beq.n	800639c <UART_SetConfig+0x2cc>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006358:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800635a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800635c:	4a1a      	ldr	r2, [pc, #104]	@ (80063c8 <UART_SetConfig+0x2f8>)
 800635e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006362:	461a      	mov	r2, r3
 8006364:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006366:	fbb3 f2f2 	udiv	r2, r3, r2
 800636a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800636c:	685b      	ldr	r3, [r3, #4]
 800636e:	085b      	lsrs	r3, r3, #1
 8006370:	441a      	add	r2, r3
 8006372:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006374:	685b      	ldr	r3, [r3, #4]
 8006376:	fbb2 f3f3 	udiv	r3, r2, r3
 800637a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800637c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800637e:	2b0f      	cmp	r3, #15
 8006380:	d909      	bls.n	8006396 <UART_SetConfig+0x2c6>
 8006382:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006384:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006388:	d205      	bcs.n	8006396 <UART_SetConfig+0x2c6>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800638a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800638c:	b29a      	uxth	r2, r3
 800638e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	60da      	str	r2, [r3, #12]
 8006394:	e002      	b.n	800639c <UART_SetConfig+0x2cc>
      }
      else
      {
        ret = HAL_ERROR;
 8006396:	2301      	movs	r3, #1
 8006398:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800639c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800639e:	2201      	movs	r2, #1
 80063a0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80063a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80063a6:	2201      	movs	r2, #1
 80063a8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80063ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80063ae:	2200      	movs	r2, #0
 80063b0:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80063b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80063b4:	2200      	movs	r2, #0
 80063b6:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80063b8:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 80063bc:	4618      	mov	r0, r3
 80063be:	3750      	adds	r7, #80	@ 0x50
 80063c0:	46bd      	mov	sp, r7
 80063c2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80063c6:	bf00      	nop
 80063c8:	0800b280 	.word	0x0800b280

080063cc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80063cc:	b480      	push	{r7}
 80063ce:	b083      	sub	sp, #12
 80063d0:	af00      	add	r7, sp, #0
 80063d2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80063d8:	f003 0308 	and.w	r3, r3, #8
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d00a      	beq.n	80063f6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	685b      	ldr	r3, [r3, #4]
 80063e6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	430a      	orrs	r2, r1
 80063f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80063fa:	f003 0301 	and.w	r3, r3, #1
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d00a      	beq.n	8006418 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	685b      	ldr	r3, [r3, #4]
 8006408:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	430a      	orrs	r2, r1
 8006416:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800641c:	f003 0302 	and.w	r3, r3, #2
 8006420:	2b00      	cmp	r3, #0
 8006422:	d00a      	beq.n	800643a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	685b      	ldr	r3, [r3, #4]
 800642a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	430a      	orrs	r2, r1
 8006438:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800643e:	f003 0304 	and.w	r3, r3, #4
 8006442:	2b00      	cmp	r3, #0
 8006444:	d00a      	beq.n	800645c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	685b      	ldr	r3, [r3, #4]
 800644c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	430a      	orrs	r2, r1
 800645a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006460:	f003 0310 	and.w	r3, r3, #16
 8006464:	2b00      	cmp	r3, #0
 8006466:	d00a      	beq.n	800647e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	689b      	ldr	r3, [r3, #8]
 800646e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	430a      	orrs	r2, r1
 800647c:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006482:	f003 0320 	and.w	r3, r3, #32
 8006486:	2b00      	cmp	r3, #0
 8006488:	d00a      	beq.n	80064a0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	689b      	ldr	r3, [r3, #8]
 8006490:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	430a      	orrs	r2, r1
 800649e:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d01a      	beq.n	80064e2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	685b      	ldr	r3, [r3, #4]
 80064b2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	430a      	orrs	r2, r1
 80064c0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80064c6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80064ca:	d10a      	bne.n	80064e2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	685b      	ldr	r3, [r3, #4]
 80064d2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	430a      	orrs	r2, r1
 80064e0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d00a      	beq.n	8006504 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	685b      	ldr	r3, [r3, #4]
 80064f4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	430a      	orrs	r2, r1
 8006502:	605a      	str	r2, [r3, #4]
  }
}
 8006504:	bf00      	nop
 8006506:	370c      	adds	r7, #12
 8006508:	46bd      	mov	sp, r7
 800650a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800650e:	4770      	bx	lr

08006510 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006510:	b580      	push	{r7, lr}
 8006512:	b098      	sub	sp, #96	@ 0x60
 8006514:	af02      	add	r7, sp, #8
 8006516:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	2200      	movs	r2, #0
 800651c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006520:	f7fb fbee 	bl	8001d00 <HAL_GetTick>
 8006524:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	f003 0308 	and.w	r3, r3, #8
 8006530:	2b08      	cmp	r3, #8
 8006532:	d12f      	bne.n	8006594 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006534:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006538:	9300      	str	r3, [sp, #0]
 800653a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800653c:	2200      	movs	r2, #0
 800653e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006542:	6878      	ldr	r0, [r7, #4]
 8006544:	f000 f88e 	bl	8006664 <UART_WaitOnFlagUntilTimeout>
 8006548:	4603      	mov	r3, r0
 800654a:	2b00      	cmp	r3, #0
 800654c:	d022      	beq.n	8006594 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006554:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006556:	e853 3f00 	ldrex	r3, [r3]
 800655a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800655c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800655e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006562:	653b      	str	r3, [r7, #80]	@ 0x50
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	461a      	mov	r2, r3
 800656a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800656c:	647b      	str	r3, [r7, #68]	@ 0x44
 800656e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006570:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006572:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006574:	e841 2300 	strex	r3, r2, [r1]
 8006578:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800657a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800657c:	2b00      	cmp	r3, #0
 800657e:	d1e6      	bne.n	800654e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	2220      	movs	r2, #32
 8006584:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	2200      	movs	r2, #0
 800658c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006590:	2303      	movs	r3, #3
 8006592:	e063      	b.n	800665c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	f003 0304 	and.w	r3, r3, #4
 800659e:	2b04      	cmp	r3, #4
 80065a0:	d149      	bne.n	8006636 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80065a2:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80065a6:	9300      	str	r3, [sp, #0]
 80065a8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80065aa:	2200      	movs	r2, #0
 80065ac:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80065b0:	6878      	ldr	r0, [r7, #4]
 80065b2:	f000 f857 	bl	8006664 <UART_WaitOnFlagUntilTimeout>
 80065b6:	4603      	mov	r3, r0
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d03c      	beq.n	8006636 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065c4:	e853 3f00 	ldrex	r3, [r3]
 80065c8:	623b      	str	r3, [r7, #32]
   return(result);
 80065ca:	6a3b      	ldr	r3, [r7, #32]
 80065cc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80065d0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	461a      	mov	r2, r3
 80065d8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80065da:	633b      	str	r3, [r7, #48]	@ 0x30
 80065dc:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065de:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80065e0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80065e2:	e841 2300 	strex	r3, r2, [r1]
 80065e6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80065e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d1e6      	bne.n	80065bc <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	3308      	adds	r3, #8
 80065f4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065f6:	693b      	ldr	r3, [r7, #16]
 80065f8:	e853 3f00 	ldrex	r3, [r3]
 80065fc:	60fb      	str	r3, [r7, #12]
   return(result);
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	f023 0301 	bic.w	r3, r3, #1
 8006604:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	3308      	adds	r3, #8
 800660c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800660e:	61fa      	str	r2, [r7, #28]
 8006610:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006612:	69b9      	ldr	r1, [r7, #24]
 8006614:	69fa      	ldr	r2, [r7, #28]
 8006616:	e841 2300 	strex	r3, r2, [r1]
 800661a:	617b      	str	r3, [r7, #20]
   return(result);
 800661c:	697b      	ldr	r3, [r7, #20]
 800661e:	2b00      	cmp	r3, #0
 8006620:	d1e5      	bne.n	80065ee <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	2220      	movs	r2, #32
 8006626:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	2200      	movs	r2, #0
 800662e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006632:	2303      	movs	r3, #3
 8006634:	e012      	b.n	800665c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	2220      	movs	r2, #32
 800663a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	2220      	movs	r2, #32
 8006642:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	2200      	movs	r2, #0
 800664a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	2200      	movs	r2, #0
 8006650:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	2200      	movs	r2, #0
 8006656:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800665a:	2300      	movs	r3, #0
}
 800665c:	4618      	mov	r0, r3
 800665e:	3758      	adds	r7, #88	@ 0x58
 8006660:	46bd      	mov	sp, r7
 8006662:	bd80      	pop	{r7, pc}

08006664 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006664:	b580      	push	{r7, lr}
 8006666:	b084      	sub	sp, #16
 8006668:	af00      	add	r7, sp, #0
 800666a:	60f8      	str	r0, [r7, #12]
 800666c:	60b9      	str	r1, [r7, #8]
 800666e:	603b      	str	r3, [r7, #0]
 8006670:	4613      	mov	r3, r2
 8006672:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006674:	e04f      	b.n	8006716 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006676:	69bb      	ldr	r3, [r7, #24]
 8006678:	f1b3 3fff 	cmp.w	r3, #4294967295
 800667c:	d04b      	beq.n	8006716 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800667e:	f7fb fb3f 	bl	8001d00 <HAL_GetTick>
 8006682:	4602      	mov	r2, r0
 8006684:	683b      	ldr	r3, [r7, #0]
 8006686:	1ad3      	subs	r3, r2, r3
 8006688:	69ba      	ldr	r2, [r7, #24]
 800668a:	429a      	cmp	r2, r3
 800668c:	d302      	bcc.n	8006694 <UART_WaitOnFlagUntilTimeout+0x30>
 800668e:	69bb      	ldr	r3, [r7, #24]
 8006690:	2b00      	cmp	r3, #0
 8006692:	d101      	bne.n	8006698 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006694:	2303      	movs	r3, #3
 8006696:	e04e      	b.n	8006736 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	f003 0304 	and.w	r3, r3, #4
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d037      	beq.n	8006716 <UART_WaitOnFlagUntilTimeout+0xb2>
 80066a6:	68bb      	ldr	r3, [r7, #8]
 80066a8:	2b80      	cmp	r3, #128	@ 0x80
 80066aa:	d034      	beq.n	8006716 <UART_WaitOnFlagUntilTimeout+0xb2>
 80066ac:	68bb      	ldr	r3, [r7, #8]
 80066ae:	2b40      	cmp	r3, #64	@ 0x40
 80066b0:	d031      	beq.n	8006716 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	69db      	ldr	r3, [r3, #28]
 80066b8:	f003 0308 	and.w	r3, r3, #8
 80066bc:	2b08      	cmp	r3, #8
 80066be:	d110      	bne.n	80066e2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	2208      	movs	r2, #8
 80066c6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80066c8:	68f8      	ldr	r0, [r7, #12]
 80066ca:	f000 f838 	bl	800673e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	2208      	movs	r2, #8
 80066d2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	2200      	movs	r2, #0
 80066da:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80066de:	2301      	movs	r3, #1
 80066e0:	e029      	b.n	8006736 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	69db      	ldr	r3, [r3, #28]
 80066e8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80066ec:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80066f0:	d111      	bne.n	8006716 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80066fa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80066fc:	68f8      	ldr	r0, [r7, #12]
 80066fe:	f000 f81e 	bl	800673e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	2220      	movs	r2, #32
 8006706:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	2200      	movs	r2, #0
 800670e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8006712:	2303      	movs	r3, #3
 8006714:	e00f      	b.n	8006736 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	69da      	ldr	r2, [r3, #28]
 800671c:	68bb      	ldr	r3, [r7, #8]
 800671e:	4013      	ands	r3, r2
 8006720:	68ba      	ldr	r2, [r7, #8]
 8006722:	429a      	cmp	r2, r3
 8006724:	bf0c      	ite	eq
 8006726:	2301      	moveq	r3, #1
 8006728:	2300      	movne	r3, #0
 800672a:	b2db      	uxtb	r3, r3
 800672c:	461a      	mov	r2, r3
 800672e:	79fb      	ldrb	r3, [r7, #7]
 8006730:	429a      	cmp	r2, r3
 8006732:	d0a0      	beq.n	8006676 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006734:	2300      	movs	r3, #0
}
 8006736:	4618      	mov	r0, r3
 8006738:	3710      	adds	r7, #16
 800673a:	46bd      	mov	sp, r7
 800673c:	bd80      	pop	{r7, pc}

0800673e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800673e:	b480      	push	{r7}
 8006740:	b095      	sub	sp, #84	@ 0x54
 8006742:	af00      	add	r7, sp, #0
 8006744:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800674c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800674e:	e853 3f00 	ldrex	r3, [r3]
 8006752:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006754:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006756:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800675a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	461a      	mov	r2, r3
 8006762:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006764:	643b      	str	r3, [r7, #64]	@ 0x40
 8006766:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006768:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800676a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800676c:	e841 2300 	strex	r3, r2, [r1]
 8006770:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006772:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006774:	2b00      	cmp	r3, #0
 8006776:	d1e6      	bne.n	8006746 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	3308      	adds	r3, #8
 800677e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006780:	6a3b      	ldr	r3, [r7, #32]
 8006782:	e853 3f00 	ldrex	r3, [r3]
 8006786:	61fb      	str	r3, [r7, #28]
   return(result);
 8006788:	69fb      	ldr	r3, [r7, #28]
 800678a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800678e:	f023 0301 	bic.w	r3, r3, #1
 8006792:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	3308      	adds	r3, #8
 800679a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800679c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800679e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067a0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80067a2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80067a4:	e841 2300 	strex	r3, r2, [r1]
 80067a8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80067aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d1e3      	bne.n	8006778 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80067b4:	2b01      	cmp	r3, #1
 80067b6:	d118      	bne.n	80067ea <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	e853 3f00 	ldrex	r3, [r3]
 80067c4:	60bb      	str	r3, [r7, #8]
   return(result);
 80067c6:	68bb      	ldr	r3, [r7, #8]
 80067c8:	f023 0310 	bic.w	r3, r3, #16
 80067cc:	647b      	str	r3, [r7, #68]	@ 0x44
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	461a      	mov	r2, r3
 80067d4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80067d6:	61bb      	str	r3, [r7, #24]
 80067d8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067da:	6979      	ldr	r1, [r7, #20]
 80067dc:	69ba      	ldr	r2, [r7, #24]
 80067de:	e841 2300 	strex	r3, r2, [r1]
 80067e2:	613b      	str	r3, [r7, #16]
   return(result);
 80067e4:	693b      	ldr	r3, [r7, #16]
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d1e6      	bne.n	80067b8 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	2220      	movs	r2, #32
 80067ee:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	2200      	movs	r2, #0
 80067f6:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	2200      	movs	r2, #0
 80067fc:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80067fe:	bf00      	nop
 8006800:	3754      	adds	r7, #84	@ 0x54
 8006802:	46bd      	mov	sp, r7
 8006804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006808:	4770      	bx	lr

0800680a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800680a:	b480      	push	{r7}
 800680c:	b085      	sub	sp, #20
 800680e:	af00      	add	r7, sp, #0
 8006810:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006818:	2b01      	cmp	r3, #1
 800681a:	d101      	bne.n	8006820 <HAL_UARTEx_DisableFifoMode+0x16>
 800681c:	2302      	movs	r3, #2
 800681e:	e027      	b.n	8006870 <HAL_UARTEx_DisableFifoMode+0x66>
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	2201      	movs	r2, #1
 8006824:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	2224      	movs	r2, #36	@ 0x24
 800682c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	681a      	ldr	r2, [r3, #0]
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	f022 0201 	bic.w	r2, r2, #1
 8006846:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800684e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	2200      	movs	r2, #0
 8006854:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	68fa      	ldr	r2, [r7, #12]
 800685c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	2220      	movs	r2, #32
 8006862:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	2200      	movs	r2, #0
 800686a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800686e:	2300      	movs	r3, #0
}
 8006870:	4618      	mov	r0, r3
 8006872:	3714      	adds	r7, #20
 8006874:	46bd      	mov	sp, r7
 8006876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800687a:	4770      	bx	lr

0800687c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800687c:	b580      	push	{r7, lr}
 800687e:	b084      	sub	sp, #16
 8006880:	af00      	add	r7, sp, #0
 8006882:	6078      	str	r0, [r7, #4]
 8006884:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800688c:	2b01      	cmp	r3, #1
 800688e:	d101      	bne.n	8006894 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006890:	2302      	movs	r3, #2
 8006892:	e02d      	b.n	80068f0 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	2201      	movs	r2, #1
 8006898:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	2224      	movs	r2, #36	@ 0x24
 80068a0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	681a      	ldr	r2, [r3, #0]
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	f022 0201 	bic.w	r2, r2, #1
 80068ba:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	689b      	ldr	r3, [r3, #8]
 80068c2:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	683a      	ldr	r2, [r7, #0]
 80068cc:	430a      	orrs	r2, r1
 80068ce:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80068d0:	6878      	ldr	r0, [r7, #4]
 80068d2:	f000 f84f 	bl	8006974 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	68fa      	ldr	r2, [r7, #12]
 80068dc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	2220      	movs	r2, #32
 80068e2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	2200      	movs	r2, #0
 80068ea:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80068ee:	2300      	movs	r3, #0
}
 80068f0:	4618      	mov	r0, r3
 80068f2:	3710      	adds	r7, #16
 80068f4:	46bd      	mov	sp, r7
 80068f6:	bd80      	pop	{r7, pc}

080068f8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80068f8:	b580      	push	{r7, lr}
 80068fa:	b084      	sub	sp, #16
 80068fc:	af00      	add	r7, sp, #0
 80068fe:	6078      	str	r0, [r7, #4]
 8006900:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006908:	2b01      	cmp	r3, #1
 800690a:	d101      	bne.n	8006910 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800690c:	2302      	movs	r3, #2
 800690e:	e02d      	b.n	800696c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	2201      	movs	r2, #1
 8006914:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	2224      	movs	r2, #36	@ 0x24
 800691c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	681a      	ldr	r2, [r3, #0]
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	f022 0201 	bic.w	r2, r2, #1
 8006936:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	689b      	ldr	r3, [r3, #8]
 800693e:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	683a      	ldr	r2, [r7, #0]
 8006948:	430a      	orrs	r2, r1
 800694a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800694c:	6878      	ldr	r0, [r7, #4]
 800694e:	f000 f811 	bl	8006974 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	68fa      	ldr	r2, [r7, #12]
 8006958:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	2220      	movs	r2, #32
 800695e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	2200      	movs	r2, #0
 8006966:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800696a:	2300      	movs	r3, #0
}
 800696c:	4618      	mov	r0, r3
 800696e:	3710      	adds	r7, #16
 8006970:	46bd      	mov	sp, r7
 8006972:	bd80      	pop	{r7, pc}

08006974 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006974:	b480      	push	{r7}
 8006976:	b085      	sub	sp, #20
 8006978:	af00      	add	r7, sp, #0
 800697a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006980:	2b00      	cmp	r3, #0
 8006982:	d108      	bne.n	8006996 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	2201      	movs	r2, #1
 8006988:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	2201      	movs	r2, #1
 8006990:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006994:	e031      	b.n	80069fa <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006996:	2308      	movs	r3, #8
 8006998:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800699a:	2308      	movs	r3, #8
 800699c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	689b      	ldr	r3, [r3, #8]
 80069a4:	0e5b      	lsrs	r3, r3, #25
 80069a6:	b2db      	uxtb	r3, r3
 80069a8:	f003 0307 	and.w	r3, r3, #7
 80069ac:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	689b      	ldr	r3, [r3, #8]
 80069b4:	0f5b      	lsrs	r3, r3, #29
 80069b6:	b2db      	uxtb	r3, r3
 80069b8:	f003 0307 	and.w	r3, r3, #7
 80069bc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80069be:	7bbb      	ldrb	r3, [r7, #14]
 80069c0:	7b3a      	ldrb	r2, [r7, #12]
 80069c2:	4911      	ldr	r1, [pc, #68]	@ (8006a08 <UARTEx_SetNbDataToProcess+0x94>)
 80069c4:	5c8a      	ldrb	r2, [r1, r2]
 80069c6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80069ca:	7b3a      	ldrb	r2, [r7, #12]
 80069cc:	490f      	ldr	r1, [pc, #60]	@ (8006a0c <UARTEx_SetNbDataToProcess+0x98>)
 80069ce:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80069d0:	fb93 f3f2 	sdiv	r3, r3, r2
 80069d4:	b29a      	uxth	r2, r3
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80069dc:	7bfb      	ldrb	r3, [r7, #15]
 80069de:	7b7a      	ldrb	r2, [r7, #13]
 80069e0:	4909      	ldr	r1, [pc, #36]	@ (8006a08 <UARTEx_SetNbDataToProcess+0x94>)
 80069e2:	5c8a      	ldrb	r2, [r1, r2]
 80069e4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80069e8:	7b7a      	ldrb	r2, [r7, #13]
 80069ea:	4908      	ldr	r1, [pc, #32]	@ (8006a0c <UARTEx_SetNbDataToProcess+0x98>)
 80069ec:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80069ee:	fb93 f3f2 	sdiv	r3, r3, r2
 80069f2:	b29a      	uxth	r2, r3
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80069fa:	bf00      	nop
 80069fc:	3714      	adds	r7, #20
 80069fe:	46bd      	mov	sp, r7
 8006a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a04:	4770      	bx	lr
 8006a06:	bf00      	nop
 8006a08:	0800b298 	.word	0x0800b298
 8006a0c:	0800b2a0 	.word	0x0800b2a0

08006a10 <__cvt>:
 8006a10:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006a14:	ec57 6b10 	vmov	r6, r7, d0
 8006a18:	2f00      	cmp	r7, #0
 8006a1a:	460c      	mov	r4, r1
 8006a1c:	4619      	mov	r1, r3
 8006a1e:	463b      	mov	r3, r7
 8006a20:	bfb4      	ite	lt
 8006a22:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8006a26:	2300      	movge	r3, #0
 8006a28:	4691      	mov	r9, r2
 8006a2a:	bfbf      	itttt	lt
 8006a2c:	4632      	movlt	r2, r6
 8006a2e:	461f      	movlt	r7, r3
 8006a30:	232d      	movlt	r3, #45	@ 0x2d
 8006a32:	4616      	movlt	r6, r2
 8006a34:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8006a38:	700b      	strb	r3, [r1, #0]
 8006a3a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006a3c:	f023 0820 	bic.w	r8, r3, #32
 8006a40:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006a44:	d005      	beq.n	8006a52 <__cvt+0x42>
 8006a46:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8006a4a:	d100      	bne.n	8006a4e <__cvt+0x3e>
 8006a4c:	3401      	adds	r4, #1
 8006a4e:	2102      	movs	r1, #2
 8006a50:	e000      	b.n	8006a54 <__cvt+0x44>
 8006a52:	2103      	movs	r1, #3
 8006a54:	ab03      	add	r3, sp, #12
 8006a56:	4622      	mov	r2, r4
 8006a58:	9301      	str	r3, [sp, #4]
 8006a5a:	ab02      	add	r3, sp, #8
 8006a5c:	ec47 6b10 	vmov	d0, r6, r7
 8006a60:	9300      	str	r3, [sp, #0]
 8006a62:	4653      	mov	r3, sl
 8006a64:	f001 f8a8 	bl	8007bb8 <_dtoa_r>
 8006a68:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8006a6c:	4605      	mov	r5, r0
 8006a6e:	d119      	bne.n	8006aa4 <__cvt+0x94>
 8006a70:	f019 0f01 	tst.w	r9, #1
 8006a74:	d00e      	beq.n	8006a94 <__cvt+0x84>
 8006a76:	eb00 0904 	add.w	r9, r0, r4
 8006a7a:	2200      	movs	r2, #0
 8006a7c:	2300      	movs	r3, #0
 8006a7e:	4630      	mov	r0, r6
 8006a80:	4639      	mov	r1, r7
 8006a82:	f7fa f83f 	bl	8000b04 <__aeabi_dcmpeq>
 8006a86:	b108      	cbz	r0, 8006a8c <__cvt+0x7c>
 8006a88:	f8cd 900c 	str.w	r9, [sp, #12]
 8006a8c:	2230      	movs	r2, #48	@ 0x30
 8006a8e:	9b03      	ldr	r3, [sp, #12]
 8006a90:	454b      	cmp	r3, r9
 8006a92:	d31e      	bcc.n	8006ad2 <__cvt+0xc2>
 8006a94:	9b03      	ldr	r3, [sp, #12]
 8006a96:	4628      	mov	r0, r5
 8006a98:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006a9a:	1b5b      	subs	r3, r3, r5
 8006a9c:	6013      	str	r3, [r2, #0]
 8006a9e:	b004      	add	sp, #16
 8006aa0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006aa4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006aa8:	eb00 0904 	add.w	r9, r0, r4
 8006aac:	d1e5      	bne.n	8006a7a <__cvt+0x6a>
 8006aae:	7803      	ldrb	r3, [r0, #0]
 8006ab0:	2b30      	cmp	r3, #48	@ 0x30
 8006ab2:	d10a      	bne.n	8006aca <__cvt+0xba>
 8006ab4:	2200      	movs	r2, #0
 8006ab6:	2300      	movs	r3, #0
 8006ab8:	4630      	mov	r0, r6
 8006aba:	4639      	mov	r1, r7
 8006abc:	f7fa f822 	bl	8000b04 <__aeabi_dcmpeq>
 8006ac0:	b918      	cbnz	r0, 8006aca <__cvt+0xba>
 8006ac2:	f1c4 0401 	rsb	r4, r4, #1
 8006ac6:	f8ca 4000 	str.w	r4, [sl]
 8006aca:	f8da 3000 	ldr.w	r3, [sl]
 8006ace:	4499      	add	r9, r3
 8006ad0:	e7d3      	b.n	8006a7a <__cvt+0x6a>
 8006ad2:	1c59      	adds	r1, r3, #1
 8006ad4:	9103      	str	r1, [sp, #12]
 8006ad6:	701a      	strb	r2, [r3, #0]
 8006ad8:	e7d9      	b.n	8006a8e <__cvt+0x7e>

08006ada <__exponent>:
 8006ada:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006adc:	2900      	cmp	r1, #0
 8006ade:	7002      	strb	r2, [r0, #0]
 8006ae0:	bfba      	itte	lt
 8006ae2:	4249      	neglt	r1, r1
 8006ae4:	232d      	movlt	r3, #45	@ 0x2d
 8006ae6:	232b      	movge	r3, #43	@ 0x2b
 8006ae8:	2909      	cmp	r1, #9
 8006aea:	7043      	strb	r3, [r0, #1]
 8006aec:	dd28      	ble.n	8006b40 <__exponent+0x66>
 8006aee:	f10d 0307 	add.w	r3, sp, #7
 8006af2:	270a      	movs	r7, #10
 8006af4:	461d      	mov	r5, r3
 8006af6:	461a      	mov	r2, r3
 8006af8:	3b01      	subs	r3, #1
 8006afa:	fbb1 f6f7 	udiv	r6, r1, r7
 8006afe:	fb07 1416 	mls	r4, r7, r6, r1
 8006b02:	3430      	adds	r4, #48	@ 0x30
 8006b04:	f802 4c01 	strb.w	r4, [r2, #-1]
 8006b08:	460c      	mov	r4, r1
 8006b0a:	4631      	mov	r1, r6
 8006b0c:	2c63      	cmp	r4, #99	@ 0x63
 8006b0e:	dcf2      	bgt.n	8006af6 <__exponent+0x1c>
 8006b10:	3130      	adds	r1, #48	@ 0x30
 8006b12:	1e94      	subs	r4, r2, #2
 8006b14:	f803 1c01 	strb.w	r1, [r3, #-1]
 8006b18:	1c41      	adds	r1, r0, #1
 8006b1a:	4623      	mov	r3, r4
 8006b1c:	42ab      	cmp	r3, r5
 8006b1e:	d30a      	bcc.n	8006b36 <__exponent+0x5c>
 8006b20:	f10d 0309 	add.w	r3, sp, #9
 8006b24:	1a9b      	subs	r3, r3, r2
 8006b26:	42ac      	cmp	r4, r5
 8006b28:	bf88      	it	hi
 8006b2a:	2300      	movhi	r3, #0
 8006b2c:	3302      	adds	r3, #2
 8006b2e:	4403      	add	r3, r0
 8006b30:	1a18      	subs	r0, r3, r0
 8006b32:	b003      	add	sp, #12
 8006b34:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006b36:	f813 6b01 	ldrb.w	r6, [r3], #1
 8006b3a:	f801 6f01 	strb.w	r6, [r1, #1]!
 8006b3e:	e7ed      	b.n	8006b1c <__exponent+0x42>
 8006b40:	2330      	movs	r3, #48	@ 0x30
 8006b42:	3130      	adds	r1, #48	@ 0x30
 8006b44:	7083      	strb	r3, [r0, #2]
 8006b46:	1d03      	adds	r3, r0, #4
 8006b48:	70c1      	strb	r1, [r0, #3]
 8006b4a:	e7f1      	b.n	8006b30 <__exponent+0x56>

08006b4c <_printf_float>:
 8006b4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b50:	b08d      	sub	sp, #52	@ 0x34
 8006b52:	460c      	mov	r4, r1
 8006b54:	4616      	mov	r6, r2
 8006b56:	461f      	mov	r7, r3
 8006b58:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8006b5c:	4605      	mov	r5, r0
 8006b5e:	f000 ff03 	bl	8007968 <_localeconv_r>
 8006b62:	6803      	ldr	r3, [r0, #0]
 8006b64:	4618      	mov	r0, r3
 8006b66:	9304      	str	r3, [sp, #16]
 8006b68:	f7f9 fba0 	bl	80002ac <strlen>
 8006b6c:	2300      	movs	r3, #0
 8006b6e:	9005      	str	r0, [sp, #20]
 8006b70:	930a      	str	r3, [sp, #40]	@ 0x28
 8006b72:	f8d8 3000 	ldr.w	r3, [r8]
 8006b76:	f894 a018 	ldrb.w	sl, [r4, #24]
 8006b7a:	3307      	adds	r3, #7
 8006b7c:	f8d4 b000 	ldr.w	fp, [r4]
 8006b80:	f023 0307 	bic.w	r3, r3, #7
 8006b84:	f103 0208 	add.w	r2, r3, #8
 8006b88:	f8c8 2000 	str.w	r2, [r8]
 8006b8c:	f04f 32ff 	mov.w	r2, #4294967295
 8006b90:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006b94:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8006b98:	f8cd 8018 	str.w	r8, [sp, #24]
 8006b9c:	9307      	str	r3, [sp, #28]
 8006b9e:	4b9d      	ldr	r3, [pc, #628]	@ (8006e14 <_printf_float+0x2c8>)
 8006ba0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006ba4:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8006ba8:	f7f9 ffde 	bl	8000b68 <__aeabi_dcmpun>
 8006bac:	bb70      	cbnz	r0, 8006c0c <_printf_float+0xc0>
 8006bae:	f04f 32ff 	mov.w	r2, #4294967295
 8006bb2:	4b98      	ldr	r3, [pc, #608]	@ (8006e14 <_printf_float+0x2c8>)
 8006bb4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006bb8:	f7f9 ffb8 	bl	8000b2c <__aeabi_dcmple>
 8006bbc:	bb30      	cbnz	r0, 8006c0c <_printf_float+0xc0>
 8006bbe:	2200      	movs	r2, #0
 8006bc0:	2300      	movs	r3, #0
 8006bc2:	4640      	mov	r0, r8
 8006bc4:	4649      	mov	r1, r9
 8006bc6:	f7f9 ffa7 	bl	8000b18 <__aeabi_dcmplt>
 8006bca:	b110      	cbz	r0, 8006bd2 <_printf_float+0x86>
 8006bcc:	232d      	movs	r3, #45	@ 0x2d
 8006bce:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006bd2:	4a91      	ldr	r2, [pc, #580]	@ (8006e18 <_printf_float+0x2cc>)
 8006bd4:	4b91      	ldr	r3, [pc, #580]	@ (8006e1c <_printf_float+0x2d0>)
 8006bd6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8006bda:	bf94      	ite	ls
 8006bdc:	4690      	movls	r8, r2
 8006bde:	4698      	movhi	r8, r3
 8006be0:	2303      	movs	r3, #3
 8006be2:	f04f 0900 	mov.w	r9, #0
 8006be6:	6123      	str	r3, [r4, #16]
 8006be8:	f02b 0304 	bic.w	r3, fp, #4
 8006bec:	6023      	str	r3, [r4, #0]
 8006bee:	4633      	mov	r3, r6
 8006bf0:	aa0b      	add	r2, sp, #44	@ 0x2c
 8006bf2:	4621      	mov	r1, r4
 8006bf4:	4628      	mov	r0, r5
 8006bf6:	9700      	str	r7, [sp, #0]
 8006bf8:	f000 f9d2 	bl	8006fa0 <_printf_common>
 8006bfc:	3001      	adds	r0, #1
 8006bfe:	f040 808d 	bne.w	8006d1c <_printf_float+0x1d0>
 8006c02:	f04f 30ff 	mov.w	r0, #4294967295
 8006c06:	b00d      	add	sp, #52	@ 0x34
 8006c08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c0c:	4642      	mov	r2, r8
 8006c0e:	464b      	mov	r3, r9
 8006c10:	4640      	mov	r0, r8
 8006c12:	4649      	mov	r1, r9
 8006c14:	f7f9 ffa8 	bl	8000b68 <__aeabi_dcmpun>
 8006c18:	b140      	cbz	r0, 8006c2c <_printf_float+0xe0>
 8006c1a:	464b      	mov	r3, r9
 8006c1c:	4a80      	ldr	r2, [pc, #512]	@ (8006e20 <_printf_float+0x2d4>)
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	bfbc      	itt	lt
 8006c22:	232d      	movlt	r3, #45	@ 0x2d
 8006c24:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8006c28:	4b7e      	ldr	r3, [pc, #504]	@ (8006e24 <_printf_float+0x2d8>)
 8006c2a:	e7d4      	b.n	8006bd6 <_printf_float+0x8a>
 8006c2c:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8006c30:	6863      	ldr	r3, [r4, #4]
 8006c32:	9206      	str	r2, [sp, #24]
 8006c34:	1c5a      	adds	r2, r3, #1
 8006c36:	d13b      	bne.n	8006cb0 <_printf_float+0x164>
 8006c38:	2306      	movs	r3, #6
 8006c3a:	6063      	str	r3, [r4, #4]
 8006c3c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8006c40:	2300      	movs	r3, #0
 8006c42:	4628      	mov	r0, r5
 8006c44:	6022      	str	r2, [r4, #0]
 8006c46:	9303      	str	r3, [sp, #12]
 8006c48:	ab0a      	add	r3, sp, #40	@ 0x28
 8006c4a:	e9cd a301 	strd	sl, r3, [sp, #4]
 8006c4e:	ab09      	add	r3, sp, #36	@ 0x24
 8006c50:	ec49 8b10 	vmov	d0, r8, r9
 8006c54:	9300      	str	r3, [sp, #0]
 8006c56:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8006c5a:	6861      	ldr	r1, [r4, #4]
 8006c5c:	f7ff fed8 	bl	8006a10 <__cvt>
 8006c60:	9b06      	ldr	r3, [sp, #24]
 8006c62:	4680      	mov	r8, r0
 8006c64:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006c66:	2b47      	cmp	r3, #71	@ 0x47
 8006c68:	d129      	bne.n	8006cbe <_printf_float+0x172>
 8006c6a:	1cc8      	adds	r0, r1, #3
 8006c6c:	db02      	blt.n	8006c74 <_printf_float+0x128>
 8006c6e:	6863      	ldr	r3, [r4, #4]
 8006c70:	4299      	cmp	r1, r3
 8006c72:	dd41      	ble.n	8006cf8 <_printf_float+0x1ac>
 8006c74:	f1aa 0a02 	sub.w	sl, sl, #2
 8006c78:	fa5f fa8a 	uxtb.w	sl, sl
 8006c7c:	3901      	subs	r1, #1
 8006c7e:	4652      	mov	r2, sl
 8006c80:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8006c84:	9109      	str	r1, [sp, #36]	@ 0x24
 8006c86:	f7ff ff28 	bl	8006ada <__exponent>
 8006c8a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006c8c:	4681      	mov	r9, r0
 8006c8e:	1813      	adds	r3, r2, r0
 8006c90:	2a01      	cmp	r2, #1
 8006c92:	6123      	str	r3, [r4, #16]
 8006c94:	dc02      	bgt.n	8006c9c <_printf_float+0x150>
 8006c96:	6822      	ldr	r2, [r4, #0]
 8006c98:	07d2      	lsls	r2, r2, #31
 8006c9a:	d501      	bpl.n	8006ca0 <_printf_float+0x154>
 8006c9c:	3301      	adds	r3, #1
 8006c9e:	6123      	str	r3, [r4, #16]
 8006ca0:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d0a2      	beq.n	8006bee <_printf_float+0xa2>
 8006ca8:	232d      	movs	r3, #45	@ 0x2d
 8006caa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006cae:	e79e      	b.n	8006bee <_printf_float+0xa2>
 8006cb0:	9a06      	ldr	r2, [sp, #24]
 8006cb2:	2a47      	cmp	r2, #71	@ 0x47
 8006cb4:	d1c2      	bne.n	8006c3c <_printf_float+0xf0>
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d1c0      	bne.n	8006c3c <_printf_float+0xf0>
 8006cba:	2301      	movs	r3, #1
 8006cbc:	e7bd      	b.n	8006c3a <_printf_float+0xee>
 8006cbe:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006cc2:	d9db      	bls.n	8006c7c <_printf_float+0x130>
 8006cc4:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8006cc8:	d118      	bne.n	8006cfc <_printf_float+0x1b0>
 8006cca:	2900      	cmp	r1, #0
 8006ccc:	6863      	ldr	r3, [r4, #4]
 8006cce:	dd0b      	ble.n	8006ce8 <_printf_float+0x19c>
 8006cd0:	6121      	str	r1, [r4, #16]
 8006cd2:	b913      	cbnz	r3, 8006cda <_printf_float+0x18e>
 8006cd4:	6822      	ldr	r2, [r4, #0]
 8006cd6:	07d0      	lsls	r0, r2, #31
 8006cd8:	d502      	bpl.n	8006ce0 <_printf_float+0x194>
 8006cda:	3301      	adds	r3, #1
 8006cdc:	440b      	add	r3, r1
 8006cde:	6123      	str	r3, [r4, #16]
 8006ce0:	f04f 0900 	mov.w	r9, #0
 8006ce4:	65a1      	str	r1, [r4, #88]	@ 0x58
 8006ce6:	e7db      	b.n	8006ca0 <_printf_float+0x154>
 8006ce8:	b913      	cbnz	r3, 8006cf0 <_printf_float+0x1a4>
 8006cea:	6822      	ldr	r2, [r4, #0]
 8006cec:	07d2      	lsls	r2, r2, #31
 8006cee:	d501      	bpl.n	8006cf4 <_printf_float+0x1a8>
 8006cf0:	3302      	adds	r3, #2
 8006cf2:	e7f4      	b.n	8006cde <_printf_float+0x192>
 8006cf4:	2301      	movs	r3, #1
 8006cf6:	e7f2      	b.n	8006cde <_printf_float+0x192>
 8006cf8:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8006cfc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006cfe:	4299      	cmp	r1, r3
 8006d00:	db05      	blt.n	8006d0e <_printf_float+0x1c2>
 8006d02:	6823      	ldr	r3, [r4, #0]
 8006d04:	6121      	str	r1, [r4, #16]
 8006d06:	07d8      	lsls	r0, r3, #31
 8006d08:	d5ea      	bpl.n	8006ce0 <_printf_float+0x194>
 8006d0a:	1c4b      	adds	r3, r1, #1
 8006d0c:	e7e7      	b.n	8006cde <_printf_float+0x192>
 8006d0e:	2900      	cmp	r1, #0
 8006d10:	bfd4      	ite	le
 8006d12:	f1c1 0202 	rsble	r2, r1, #2
 8006d16:	2201      	movgt	r2, #1
 8006d18:	4413      	add	r3, r2
 8006d1a:	e7e0      	b.n	8006cde <_printf_float+0x192>
 8006d1c:	6823      	ldr	r3, [r4, #0]
 8006d1e:	055a      	lsls	r2, r3, #21
 8006d20:	d407      	bmi.n	8006d32 <_printf_float+0x1e6>
 8006d22:	6923      	ldr	r3, [r4, #16]
 8006d24:	4642      	mov	r2, r8
 8006d26:	4631      	mov	r1, r6
 8006d28:	4628      	mov	r0, r5
 8006d2a:	47b8      	blx	r7
 8006d2c:	3001      	adds	r0, #1
 8006d2e:	d12b      	bne.n	8006d88 <_printf_float+0x23c>
 8006d30:	e767      	b.n	8006c02 <_printf_float+0xb6>
 8006d32:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006d36:	f240 80dd 	bls.w	8006ef4 <_printf_float+0x3a8>
 8006d3a:	2200      	movs	r2, #0
 8006d3c:	2300      	movs	r3, #0
 8006d3e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006d42:	f7f9 fedf 	bl	8000b04 <__aeabi_dcmpeq>
 8006d46:	2800      	cmp	r0, #0
 8006d48:	d033      	beq.n	8006db2 <_printf_float+0x266>
 8006d4a:	2301      	movs	r3, #1
 8006d4c:	4a36      	ldr	r2, [pc, #216]	@ (8006e28 <_printf_float+0x2dc>)
 8006d4e:	4631      	mov	r1, r6
 8006d50:	4628      	mov	r0, r5
 8006d52:	47b8      	blx	r7
 8006d54:	3001      	adds	r0, #1
 8006d56:	f43f af54 	beq.w	8006c02 <_printf_float+0xb6>
 8006d5a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8006d5e:	4543      	cmp	r3, r8
 8006d60:	db02      	blt.n	8006d68 <_printf_float+0x21c>
 8006d62:	6823      	ldr	r3, [r4, #0]
 8006d64:	07d8      	lsls	r0, r3, #31
 8006d66:	d50f      	bpl.n	8006d88 <_printf_float+0x23c>
 8006d68:	4631      	mov	r1, r6
 8006d6a:	4628      	mov	r0, r5
 8006d6c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006d70:	47b8      	blx	r7
 8006d72:	3001      	adds	r0, #1
 8006d74:	f43f af45 	beq.w	8006c02 <_printf_float+0xb6>
 8006d78:	f04f 0900 	mov.w	r9, #0
 8006d7c:	f108 38ff 	add.w	r8, r8, #4294967295
 8006d80:	f104 0a1a 	add.w	sl, r4, #26
 8006d84:	45c8      	cmp	r8, r9
 8006d86:	dc09      	bgt.n	8006d9c <_printf_float+0x250>
 8006d88:	6823      	ldr	r3, [r4, #0]
 8006d8a:	079b      	lsls	r3, r3, #30
 8006d8c:	f100 8103 	bmi.w	8006f96 <_printf_float+0x44a>
 8006d90:	68e0      	ldr	r0, [r4, #12]
 8006d92:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006d94:	4298      	cmp	r0, r3
 8006d96:	bfb8      	it	lt
 8006d98:	4618      	movlt	r0, r3
 8006d9a:	e734      	b.n	8006c06 <_printf_float+0xba>
 8006d9c:	2301      	movs	r3, #1
 8006d9e:	4652      	mov	r2, sl
 8006da0:	4631      	mov	r1, r6
 8006da2:	4628      	mov	r0, r5
 8006da4:	47b8      	blx	r7
 8006da6:	3001      	adds	r0, #1
 8006da8:	f43f af2b 	beq.w	8006c02 <_printf_float+0xb6>
 8006dac:	f109 0901 	add.w	r9, r9, #1
 8006db0:	e7e8      	b.n	8006d84 <_printf_float+0x238>
 8006db2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	dc39      	bgt.n	8006e2c <_printf_float+0x2e0>
 8006db8:	2301      	movs	r3, #1
 8006dba:	4a1b      	ldr	r2, [pc, #108]	@ (8006e28 <_printf_float+0x2dc>)
 8006dbc:	4631      	mov	r1, r6
 8006dbe:	4628      	mov	r0, r5
 8006dc0:	47b8      	blx	r7
 8006dc2:	3001      	adds	r0, #1
 8006dc4:	f43f af1d 	beq.w	8006c02 <_printf_float+0xb6>
 8006dc8:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8006dcc:	ea59 0303 	orrs.w	r3, r9, r3
 8006dd0:	d102      	bne.n	8006dd8 <_printf_float+0x28c>
 8006dd2:	6823      	ldr	r3, [r4, #0]
 8006dd4:	07d9      	lsls	r1, r3, #31
 8006dd6:	d5d7      	bpl.n	8006d88 <_printf_float+0x23c>
 8006dd8:	4631      	mov	r1, r6
 8006dda:	4628      	mov	r0, r5
 8006ddc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006de0:	47b8      	blx	r7
 8006de2:	3001      	adds	r0, #1
 8006de4:	f43f af0d 	beq.w	8006c02 <_printf_float+0xb6>
 8006de8:	f04f 0a00 	mov.w	sl, #0
 8006dec:	f104 0b1a 	add.w	fp, r4, #26
 8006df0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006df2:	425b      	negs	r3, r3
 8006df4:	4553      	cmp	r3, sl
 8006df6:	dc01      	bgt.n	8006dfc <_printf_float+0x2b0>
 8006df8:	464b      	mov	r3, r9
 8006dfa:	e793      	b.n	8006d24 <_printf_float+0x1d8>
 8006dfc:	2301      	movs	r3, #1
 8006dfe:	465a      	mov	r2, fp
 8006e00:	4631      	mov	r1, r6
 8006e02:	4628      	mov	r0, r5
 8006e04:	47b8      	blx	r7
 8006e06:	3001      	adds	r0, #1
 8006e08:	f43f aefb 	beq.w	8006c02 <_printf_float+0xb6>
 8006e0c:	f10a 0a01 	add.w	sl, sl, #1
 8006e10:	e7ee      	b.n	8006df0 <_printf_float+0x2a4>
 8006e12:	bf00      	nop
 8006e14:	7fefffff 	.word	0x7fefffff
 8006e18:	0800b2a8 	.word	0x0800b2a8
 8006e1c:	0800b2ac 	.word	0x0800b2ac
 8006e20:	0800b2b0 	.word	0x0800b2b0
 8006e24:	0800b2b4 	.word	0x0800b2b4
 8006e28:	0800b2b8 	.word	0x0800b2b8
 8006e2c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006e2e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006e32:	4553      	cmp	r3, sl
 8006e34:	bfa8      	it	ge
 8006e36:	4653      	movge	r3, sl
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	4699      	mov	r9, r3
 8006e3c:	dc36      	bgt.n	8006eac <_printf_float+0x360>
 8006e3e:	f04f 0b00 	mov.w	fp, #0
 8006e42:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006e46:	f104 021a 	add.w	r2, r4, #26
 8006e4a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006e4c:	9306      	str	r3, [sp, #24]
 8006e4e:	eba3 0309 	sub.w	r3, r3, r9
 8006e52:	455b      	cmp	r3, fp
 8006e54:	dc31      	bgt.n	8006eba <_printf_float+0x36e>
 8006e56:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006e58:	459a      	cmp	sl, r3
 8006e5a:	dc3a      	bgt.n	8006ed2 <_printf_float+0x386>
 8006e5c:	6823      	ldr	r3, [r4, #0]
 8006e5e:	07da      	lsls	r2, r3, #31
 8006e60:	d437      	bmi.n	8006ed2 <_printf_float+0x386>
 8006e62:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006e64:	ebaa 0903 	sub.w	r9, sl, r3
 8006e68:	9b06      	ldr	r3, [sp, #24]
 8006e6a:	ebaa 0303 	sub.w	r3, sl, r3
 8006e6e:	4599      	cmp	r9, r3
 8006e70:	bfa8      	it	ge
 8006e72:	4699      	movge	r9, r3
 8006e74:	f1b9 0f00 	cmp.w	r9, #0
 8006e78:	dc33      	bgt.n	8006ee2 <_printf_float+0x396>
 8006e7a:	f04f 0800 	mov.w	r8, #0
 8006e7e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006e82:	f104 0b1a 	add.w	fp, r4, #26
 8006e86:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006e88:	ebaa 0303 	sub.w	r3, sl, r3
 8006e8c:	eba3 0309 	sub.w	r3, r3, r9
 8006e90:	4543      	cmp	r3, r8
 8006e92:	f77f af79 	ble.w	8006d88 <_printf_float+0x23c>
 8006e96:	2301      	movs	r3, #1
 8006e98:	465a      	mov	r2, fp
 8006e9a:	4631      	mov	r1, r6
 8006e9c:	4628      	mov	r0, r5
 8006e9e:	47b8      	blx	r7
 8006ea0:	3001      	adds	r0, #1
 8006ea2:	f43f aeae 	beq.w	8006c02 <_printf_float+0xb6>
 8006ea6:	f108 0801 	add.w	r8, r8, #1
 8006eaa:	e7ec      	b.n	8006e86 <_printf_float+0x33a>
 8006eac:	4642      	mov	r2, r8
 8006eae:	4631      	mov	r1, r6
 8006eb0:	4628      	mov	r0, r5
 8006eb2:	47b8      	blx	r7
 8006eb4:	3001      	adds	r0, #1
 8006eb6:	d1c2      	bne.n	8006e3e <_printf_float+0x2f2>
 8006eb8:	e6a3      	b.n	8006c02 <_printf_float+0xb6>
 8006eba:	2301      	movs	r3, #1
 8006ebc:	4631      	mov	r1, r6
 8006ebe:	4628      	mov	r0, r5
 8006ec0:	9206      	str	r2, [sp, #24]
 8006ec2:	47b8      	blx	r7
 8006ec4:	3001      	adds	r0, #1
 8006ec6:	f43f ae9c 	beq.w	8006c02 <_printf_float+0xb6>
 8006eca:	f10b 0b01 	add.w	fp, fp, #1
 8006ece:	9a06      	ldr	r2, [sp, #24]
 8006ed0:	e7bb      	b.n	8006e4a <_printf_float+0x2fe>
 8006ed2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006ed6:	4631      	mov	r1, r6
 8006ed8:	4628      	mov	r0, r5
 8006eda:	47b8      	blx	r7
 8006edc:	3001      	adds	r0, #1
 8006ede:	d1c0      	bne.n	8006e62 <_printf_float+0x316>
 8006ee0:	e68f      	b.n	8006c02 <_printf_float+0xb6>
 8006ee2:	9a06      	ldr	r2, [sp, #24]
 8006ee4:	464b      	mov	r3, r9
 8006ee6:	4631      	mov	r1, r6
 8006ee8:	4628      	mov	r0, r5
 8006eea:	4442      	add	r2, r8
 8006eec:	47b8      	blx	r7
 8006eee:	3001      	adds	r0, #1
 8006ef0:	d1c3      	bne.n	8006e7a <_printf_float+0x32e>
 8006ef2:	e686      	b.n	8006c02 <_printf_float+0xb6>
 8006ef4:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006ef8:	f1ba 0f01 	cmp.w	sl, #1
 8006efc:	dc01      	bgt.n	8006f02 <_printf_float+0x3b6>
 8006efe:	07db      	lsls	r3, r3, #31
 8006f00:	d536      	bpl.n	8006f70 <_printf_float+0x424>
 8006f02:	2301      	movs	r3, #1
 8006f04:	4642      	mov	r2, r8
 8006f06:	4631      	mov	r1, r6
 8006f08:	4628      	mov	r0, r5
 8006f0a:	47b8      	blx	r7
 8006f0c:	3001      	adds	r0, #1
 8006f0e:	f43f ae78 	beq.w	8006c02 <_printf_float+0xb6>
 8006f12:	4631      	mov	r1, r6
 8006f14:	4628      	mov	r0, r5
 8006f16:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006f1a:	47b8      	blx	r7
 8006f1c:	3001      	adds	r0, #1
 8006f1e:	f43f ae70 	beq.w	8006c02 <_printf_float+0xb6>
 8006f22:	2200      	movs	r2, #0
 8006f24:	2300      	movs	r3, #0
 8006f26:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006f2a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006f2e:	f7f9 fde9 	bl	8000b04 <__aeabi_dcmpeq>
 8006f32:	b9c0      	cbnz	r0, 8006f66 <_printf_float+0x41a>
 8006f34:	4653      	mov	r3, sl
 8006f36:	f108 0201 	add.w	r2, r8, #1
 8006f3a:	4631      	mov	r1, r6
 8006f3c:	4628      	mov	r0, r5
 8006f3e:	47b8      	blx	r7
 8006f40:	3001      	adds	r0, #1
 8006f42:	d10c      	bne.n	8006f5e <_printf_float+0x412>
 8006f44:	e65d      	b.n	8006c02 <_printf_float+0xb6>
 8006f46:	2301      	movs	r3, #1
 8006f48:	465a      	mov	r2, fp
 8006f4a:	4631      	mov	r1, r6
 8006f4c:	4628      	mov	r0, r5
 8006f4e:	47b8      	blx	r7
 8006f50:	3001      	adds	r0, #1
 8006f52:	f43f ae56 	beq.w	8006c02 <_printf_float+0xb6>
 8006f56:	f108 0801 	add.w	r8, r8, #1
 8006f5a:	45d0      	cmp	r8, sl
 8006f5c:	dbf3      	blt.n	8006f46 <_printf_float+0x3fa>
 8006f5e:	464b      	mov	r3, r9
 8006f60:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8006f64:	e6df      	b.n	8006d26 <_printf_float+0x1da>
 8006f66:	f04f 0800 	mov.w	r8, #0
 8006f6a:	f104 0b1a 	add.w	fp, r4, #26
 8006f6e:	e7f4      	b.n	8006f5a <_printf_float+0x40e>
 8006f70:	2301      	movs	r3, #1
 8006f72:	4642      	mov	r2, r8
 8006f74:	e7e1      	b.n	8006f3a <_printf_float+0x3ee>
 8006f76:	2301      	movs	r3, #1
 8006f78:	464a      	mov	r2, r9
 8006f7a:	4631      	mov	r1, r6
 8006f7c:	4628      	mov	r0, r5
 8006f7e:	47b8      	blx	r7
 8006f80:	3001      	adds	r0, #1
 8006f82:	f43f ae3e 	beq.w	8006c02 <_printf_float+0xb6>
 8006f86:	f108 0801 	add.w	r8, r8, #1
 8006f8a:	68e3      	ldr	r3, [r4, #12]
 8006f8c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006f8e:	1a5b      	subs	r3, r3, r1
 8006f90:	4543      	cmp	r3, r8
 8006f92:	dcf0      	bgt.n	8006f76 <_printf_float+0x42a>
 8006f94:	e6fc      	b.n	8006d90 <_printf_float+0x244>
 8006f96:	f04f 0800 	mov.w	r8, #0
 8006f9a:	f104 0919 	add.w	r9, r4, #25
 8006f9e:	e7f4      	b.n	8006f8a <_printf_float+0x43e>

08006fa0 <_printf_common>:
 8006fa0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006fa4:	4616      	mov	r6, r2
 8006fa6:	4698      	mov	r8, r3
 8006fa8:	688a      	ldr	r2, [r1, #8]
 8006faa:	4607      	mov	r7, r0
 8006fac:	690b      	ldr	r3, [r1, #16]
 8006fae:	460c      	mov	r4, r1
 8006fb0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006fb4:	4293      	cmp	r3, r2
 8006fb6:	bfb8      	it	lt
 8006fb8:	4613      	movlt	r3, r2
 8006fba:	6033      	str	r3, [r6, #0]
 8006fbc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006fc0:	b10a      	cbz	r2, 8006fc6 <_printf_common+0x26>
 8006fc2:	3301      	adds	r3, #1
 8006fc4:	6033      	str	r3, [r6, #0]
 8006fc6:	6823      	ldr	r3, [r4, #0]
 8006fc8:	0699      	lsls	r1, r3, #26
 8006fca:	bf42      	ittt	mi
 8006fcc:	6833      	ldrmi	r3, [r6, #0]
 8006fce:	3302      	addmi	r3, #2
 8006fd0:	6033      	strmi	r3, [r6, #0]
 8006fd2:	6825      	ldr	r5, [r4, #0]
 8006fd4:	f015 0506 	ands.w	r5, r5, #6
 8006fd8:	d106      	bne.n	8006fe8 <_printf_common+0x48>
 8006fda:	f104 0a19 	add.w	sl, r4, #25
 8006fde:	68e3      	ldr	r3, [r4, #12]
 8006fe0:	6832      	ldr	r2, [r6, #0]
 8006fe2:	1a9b      	subs	r3, r3, r2
 8006fe4:	42ab      	cmp	r3, r5
 8006fe6:	dc2b      	bgt.n	8007040 <_printf_common+0xa0>
 8006fe8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006fec:	6822      	ldr	r2, [r4, #0]
 8006fee:	3b00      	subs	r3, #0
 8006ff0:	bf18      	it	ne
 8006ff2:	2301      	movne	r3, #1
 8006ff4:	0692      	lsls	r2, r2, #26
 8006ff6:	d430      	bmi.n	800705a <_printf_common+0xba>
 8006ff8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006ffc:	4641      	mov	r1, r8
 8006ffe:	4638      	mov	r0, r7
 8007000:	47c8      	blx	r9
 8007002:	3001      	adds	r0, #1
 8007004:	d023      	beq.n	800704e <_printf_common+0xae>
 8007006:	6823      	ldr	r3, [r4, #0]
 8007008:	341a      	adds	r4, #26
 800700a:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 800700e:	f003 0306 	and.w	r3, r3, #6
 8007012:	2b04      	cmp	r3, #4
 8007014:	bf0a      	itet	eq
 8007016:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
 800701a:	2500      	movne	r5, #0
 800701c:	6833      	ldreq	r3, [r6, #0]
 800701e:	f04f 0600 	mov.w	r6, #0
 8007022:	bf08      	it	eq
 8007024:	1aed      	subeq	r5, r5, r3
 8007026:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800702a:	bf08      	it	eq
 800702c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007030:	4293      	cmp	r3, r2
 8007032:	bfc4      	itt	gt
 8007034:	1a9b      	subgt	r3, r3, r2
 8007036:	18ed      	addgt	r5, r5, r3
 8007038:	42b5      	cmp	r5, r6
 800703a:	d11a      	bne.n	8007072 <_printf_common+0xd2>
 800703c:	2000      	movs	r0, #0
 800703e:	e008      	b.n	8007052 <_printf_common+0xb2>
 8007040:	2301      	movs	r3, #1
 8007042:	4652      	mov	r2, sl
 8007044:	4641      	mov	r1, r8
 8007046:	4638      	mov	r0, r7
 8007048:	47c8      	blx	r9
 800704a:	3001      	adds	r0, #1
 800704c:	d103      	bne.n	8007056 <_printf_common+0xb6>
 800704e:	f04f 30ff 	mov.w	r0, #4294967295
 8007052:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007056:	3501      	adds	r5, #1
 8007058:	e7c1      	b.n	8006fde <_printf_common+0x3e>
 800705a:	18e1      	adds	r1, r4, r3
 800705c:	1c5a      	adds	r2, r3, #1
 800705e:	2030      	movs	r0, #48	@ 0x30
 8007060:	3302      	adds	r3, #2
 8007062:	4422      	add	r2, r4
 8007064:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007068:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800706c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007070:	e7c2      	b.n	8006ff8 <_printf_common+0x58>
 8007072:	2301      	movs	r3, #1
 8007074:	4622      	mov	r2, r4
 8007076:	4641      	mov	r1, r8
 8007078:	4638      	mov	r0, r7
 800707a:	47c8      	blx	r9
 800707c:	3001      	adds	r0, #1
 800707e:	d0e6      	beq.n	800704e <_printf_common+0xae>
 8007080:	3601      	adds	r6, #1
 8007082:	e7d9      	b.n	8007038 <_printf_common+0x98>

08007084 <_printf_i>:
 8007084:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007088:	7e0f      	ldrb	r7, [r1, #24]
 800708a:	4691      	mov	r9, r2
 800708c:	4680      	mov	r8, r0
 800708e:	460c      	mov	r4, r1
 8007090:	2f78      	cmp	r7, #120	@ 0x78
 8007092:	469a      	mov	sl, r3
 8007094:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007096:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800709a:	d807      	bhi.n	80070ac <_printf_i+0x28>
 800709c:	2f62      	cmp	r7, #98	@ 0x62
 800709e:	d80a      	bhi.n	80070b6 <_printf_i+0x32>
 80070a0:	2f00      	cmp	r7, #0
 80070a2:	f000 80d2 	beq.w	800724a <_printf_i+0x1c6>
 80070a6:	2f58      	cmp	r7, #88	@ 0x58
 80070a8:	f000 80b9 	beq.w	800721e <_printf_i+0x19a>
 80070ac:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80070b0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80070b4:	e03a      	b.n	800712c <_printf_i+0xa8>
 80070b6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80070ba:	2b15      	cmp	r3, #21
 80070bc:	d8f6      	bhi.n	80070ac <_printf_i+0x28>
 80070be:	a101      	add	r1, pc, #4	@ (adr r1, 80070c4 <_printf_i+0x40>)
 80070c0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80070c4:	0800711d 	.word	0x0800711d
 80070c8:	08007131 	.word	0x08007131
 80070cc:	080070ad 	.word	0x080070ad
 80070d0:	080070ad 	.word	0x080070ad
 80070d4:	080070ad 	.word	0x080070ad
 80070d8:	080070ad 	.word	0x080070ad
 80070dc:	08007131 	.word	0x08007131
 80070e0:	080070ad 	.word	0x080070ad
 80070e4:	080070ad 	.word	0x080070ad
 80070e8:	080070ad 	.word	0x080070ad
 80070ec:	080070ad 	.word	0x080070ad
 80070f0:	08007231 	.word	0x08007231
 80070f4:	0800715b 	.word	0x0800715b
 80070f8:	080071eb 	.word	0x080071eb
 80070fc:	080070ad 	.word	0x080070ad
 8007100:	080070ad 	.word	0x080070ad
 8007104:	08007253 	.word	0x08007253
 8007108:	080070ad 	.word	0x080070ad
 800710c:	0800715b 	.word	0x0800715b
 8007110:	080070ad 	.word	0x080070ad
 8007114:	080070ad 	.word	0x080070ad
 8007118:	080071f3 	.word	0x080071f3
 800711c:	6833      	ldr	r3, [r6, #0]
 800711e:	1d1a      	adds	r2, r3, #4
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	6032      	str	r2, [r6, #0]
 8007124:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007128:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800712c:	2301      	movs	r3, #1
 800712e:	e09d      	b.n	800726c <_printf_i+0x1e8>
 8007130:	6833      	ldr	r3, [r6, #0]
 8007132:	6820      	ldr	r0, [r4, #0]
 8007134:	1d19      	adds	r1, r3, #4
 8007136:	6031      	str	r1, [r6, #0]
 8007138:	0606      	lsls	r6, r0, #24
 800713a:	d501      	bpl.n	8007140 <_printf_i+0xbc>
 800713c:	681d      	ldr	r5, [r3, #0]
 800713e:	e003      	b.n	8007148 <_printf_i+0xc4>
 8007140:	0645      	lsls	r5, r0, #25
 8007142:	d5fb      	bpl.n	800713c <_printf_i+0xb8>
 8007144:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007148:	2d00      	cmp	r5, #0
 800714a:	da03      	bge.n	8007154 <_printf_i+0xd0>
 800714c:	232d      	movs	r3, #45	@ 0x2d
 800714e:	426d      	negs	r5, r5
 8007150:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007154:	4859      	ldr	r0, [pc, #356]	@ (80072bc <_printf_i+0x238>)
 8007156:	230a      	movs	r3, #10
 8007158:	e011      	b.n	800717e <_printf_i+0xfa>
 800715a:	6821      	ldr	r1, [r4, #0]
 800715c:	6833      	ldr	r3, [r6, #0]
 800715e:	0608      	lsls	r0, r1, #24
 8007160:	f853 5b04 	ldr.w	r5, [r3], #4
 8007164:	d402      	bmi.n	800716c <_printf_i+0xe8>
 8007166:	0649      	lsls	r1, r1, #25
 8007168:	bf48      	it	mi
 800716a:	b2ad      	uxthmi	r5, r5
 800716c:	2f6f      	cmp	r7, #111	@ 0x6f
 800716e:	6033      	str	r3, [r6, #0]
 8007170:	4852      	ldr	r0, [pc, #328]	@ (80072bc <_printf_i+0x238>)
 8007172:	bf14      	ite	ne
 8007174:	230a      	movne	r3, #10
 8007176:	2308      	moveq	r3, #8
 8007178:	2100      	movs	r1, #0
 800717a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800717e:	6866      	ldr	r6, [r4, #4]
 8007180:	2e00      	cmp	r6, #0
 8007182:	60a6      	str	r6, [r4, #8]
 8007184:	bfa2      	ittt	ge
 8007186:	6821      	ldrge	r1, [r4, #0]
 8007188:	f021 0104 	bicge.w	r1, r1, #4
 800718c:	6021      	strge	r1, [r4, #0]
 800718e:	b90d      	cbnz	r5, 8007194 <_printf_i+0x110>
 8007190:	2e00      	cmp	r6, #0
 8007192:	d04b      	beq.n	800722c <_printf_i+0x1a8>
 8007194:	4616      	mov	r6, r2
 8007196:	fbb5 f1f3 	udiv	r1, r5, r3
 800719a:	fb03 5711 	mls	r7, r3, r1, r5
 800719e:	5dc7      	ldrb	r7, [r0, r7]
 80071a0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80071a4:	462f      	mov	r7, r5
 80071a6:	460d      	mov	r5, r1
 80071a8:	42bb      	cmp	r3, r7
 80071aa:	d9f4      	bls.n	8007196 <_printf_i+0x112>
 80071ac:	2b08      	cmp	r3, #8
 80071ae:	d10b      	bne.n	80071c8 <_printf_i+0x144>
 80071b0:	6823      	ldr	r3, [r4, #0]
 80071b2:	07df      	lsls	r7, r3, #31
 80071b4:	d508      	bpl.n	80071c8 <_printf_i+0x144>
 80071b6:	6923      	ldr	r3, [r4, #16]
 80071b8:	6861      	ldr	r1, [r4, #4]
 80071ba:	4299      	cmp	r1, r3
 80071bc:	bfde      	ittt	le
 80071be:	2330      	movle	r3, #48	@ 0x30
 80071c0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80071c4:	f106 36ff 	addle.w	r6, r6, #4294967295
 80071c8:	1b92      	subs	r2, r2, r6
 80071ca:	6122      	str	r2, [r4, #16]
 80071cc:	464b      	mov	r3, r9
 80071ce:	aa03      	add	r2, sp, #12
 80071d0:	4621      	mov	r1, r4
 80071d2:	4640      	mov	r0, r8
 80071d4:	f8cd a000 	str.w	sl, [sp]
 80071d8:	f7ff fee2 	bl	8006fa0 <_printf_common>
 80071dc:	3001      	adds	r0, #1
 80071de:	d14a      	bne.n	8007276 <_printf_i+0x1f2>
 80071e0:	f04f 30ff 	mov.w	r0, #4294967295
 80071e4:	b004      	add	sp, #16
 80071e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80071ea:	6823      	ldr	r3, [r4, #0]
 80071ec:	f043 0320 	orr.w	r3, r3, #32
 80071f0:	6023      	str	r3, [r4, #0]
 80071f2:	2778      	movs	r7, #120	@ 0x78
 80071f4:	4832      	ldr	r0, [pc, #200]	@ (80072c0 <_printf_i+0x23c>)
 80071f6:	6823      	ldr	r3, [r4, #0]
 80071f8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80071fc:	061f      	lsls	r7, r3, #24
 80071fe:	6831      	ldr	r1, [r6, #0]
 8007200:	f851 5b04 	ldr.w	r5, [r1], #4
 8007204:	d402      	bmi.n	800720c <_printf_i+0x188>
 8007206:	065f      	lsls	r7, r3, #25
 8007208:	bf48      	it	mi
 800720a:	b2ad      	uxthmi	r5, r5
 800720c:	6031      	str	r1, [r6, #0]
 800720e:	07d9      	lsls	r1, r3, #31
 8007210:	bf44      	itt	mi
 8007212:	f043 0320 	orrmi.w	r3, r3, #32
 8007216:	6023      	strmi	r3, [r4, #0]
 8007218:	b11d      	cbz	r5, 8007222 <_printf_i+0x19e>
 800721a:	2310      	movs	r3, #16
 800721c:	e7ac      	b.n	8007178 <_printf_i+0xf4>
 800721e:	4827      	ldr	r0, [pc, #156]	@ (80072bc <_printf_i+0x238>)
 8007220:	e7e9      	b.n	80071f6 <_printf_i+0x172>
 8007222:	6823      	ldr	r3, [r4, #0]
 8007224:	f023 0320 	bic.w	r3, r3, #32
 8007228:	6023      	str	r3, [r4, #0]
 800722a:	e7f6      	b.n	800721a <_printf_i+0x196>
 800722c:	4616      	mov	r6, r2
 800722e:	e7bd      	b.n	80071ac <_printf_i+0x128>
 8007230:	6833      	ldr	r3, [r6, #0]
 8007232:	6825      	ldr	r5, [r4, #0]
 8007234:	1d18      	adds	r0, r3, #4
 8007236:	6961      	ldr	r1, [r4, #20]
 8007238:	6030      	str	r0, [r6, #0]
 800723a:	062e      	lsls	r6, r5, #24
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	d501      	bpl.n	8007244 <_printf_i+0x1c0>
 8007240:	6019      	str	r1, [r3, #0]
 8007242:	e002      	b.n	800724a <_printf_i+0x1c6>
 8007244:	0668      	lsls	r0, r5, #25
 8007246:	d5fb      	bpl.n	8007240 <_printf_i+0x1bc>
 8007248:	8019      	strh	r1, [r3, #0]
 800724a:	2300      	movs	r3, #0
 800724c:	4616      	mov	r6, r2
 800724e:	6123      	str	r3, [r4, #16]
 8007250:	e7bc      	b.n	80071cc <_printf_i+0x148>
 8007252:	6833      	ldr	r3, [r6, #0]
 8007254:	2100      	movs	r1, #0
 8007256:	1d1a      	adds	r2, r3, #4
 8007258:	6032      	str	r2, [r6, #0]
 800725a:	681e      	ldr	r6, [r3, #0]
 800725c:	6862      	ldr	r2, [r4, #4]
 800725e:	4630      	mov	r0, r6
 8007260:	f000 fbf9 	bl	8007a56 <memchr>
 8007264:	b108      	cbz	r0, 800726a <_printf_i+0x1e6>
 8007266:	1b80      	subs	r0, r0, r6
 8007268:	6060      	str	r0, [r4, #4]
 800726a:	6863      	ldr	r3, [r4, #4]
 800726c:	6123      	str	r3, [r4, #16]
 800726e:	2300      	movs	r3, #0
 8007270:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007274:	e7aa      	b.n	80071cc <_printf_i+0x148>
 8007276:	6923      	ldr	r3, [r4, #16]
 8007278:	4632      	mov	r2, r6
 800727a:	4649      	mov	r1, r9
 800727c:	4640      	mov	r0, r8
 800727e:	47d0      	blx	sl
 8007280:	3001      	adds	r0, #1
 8007282:	d0ad      	beq.n	80071e0 <_printf_i+0x15c>
 8007284:	6823      	ldr	r3, [r4, #0]
 8007286:	079b      	lsls	r3, r3, #30
 8007288:	d413      	bmi.n	80072b2 <_printf_i+0x22e>
 800728a:	68e0      	ldr	r0, [r4, #12]
 800728c:	9b03      	ldr	r3, [sp, #12]
 800728e:	4298      	cmp	r0, r3
 8007290:	bfb8      	it	lt
 8007292:	4618      	movlt	r0, r3
 8007294:	e7a6      	b.n	80071e4 <_printf_i+0x160>
 8007296:	2301      	movs	r3, #1
 8007298:	4632      	mov	r2, r6
 800729a:	4649      	mov	r1, r9
 800729c:	4640      	mov	r0, r8
 800729e:	47d0      	blx	sl
 80072a0:	3001      	adds	r0, #1
 80072a2:	d09d      	beq.n	80071e0 <_printf_i+0x15c>
 80072a4:	3501      	adds	r5, #1
 80072a6:	68e3      	ldr	r3, [r4, #12]
 80072a8:	9903      	ldr	r1, [sp, #12]
 80072aa:	1a5b      	subs	r3, r3, r1
 80072ac:	42ab      	cmp	r3, r5
 80072ae:	dcf2      	bgt.n	8007296 <_printf_i+0x212>
 80072b0:	e7eb      	b.n	800728a <_printf_i+0x206>
 80072b2:	2500      	movs	r5, #0
 80072b4:	f104 0619 	add.w	r6, r4, #25
 80072b8:	e7f5      	b.n	80072a6 <_printf_i+0x222>
 80072ba:	bf00      	nop
 80072bc:	0800b2ba 	.word	0x0800b2ba
 80072c0:	0800b2cb 	.word	0x0800b2cb

080072c4 <_scanf_float>:
 80072c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072c8:	b087      	sub	sp, #28
 80072ca:	4617      	mov	r7, r2
 80072cc:	4680      	mov	r8, r0
 80072ce:	460c      	mov	r4, r1
 80072d0:	9303      	str	r3, [sp, #12]
 80072d2:	688b      	ldr	r3, [r1, #8]
 80072d4:	1e5a      	subs	r2, r3, #1
 80072d6:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 80072da:	460a      	mov	r2, r1
 80072dc:	bf89      	itett	hi
 80072de:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 80072e2:	f04f 0b00 	movls.w	fp, #0
 80072e6:	eb03 0b05 	addhi.w	fp, r3, r5
 80072ea:	f240 135d 	movwhi	r3, #349	@ 0x15d
 80072ee:	f04f 0500 	mov.w	r5, #0
 80072f2:	bf88      	it	hi
 80072f4:	608b      	strhi	r3, [r1, #8]
 80072f6:	680b      	ldr	r3, [r1, #0]
 80072f8:	46aa      	mov	sl, r5
 80072fa:	46a9      	mov	r9, r5
 80072fc:	9502      	str	r5, [sp, #8]
 80072fe:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8007302:	f842 3b1c 	str.w	r3, [r2], #28
 8007306:	4616      	mov	r6, r2
 8007308:	9201      	str	r2, [sp, #4]
 800730a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800730e:	68a2      	ldr	r2, [r4, #8]
 8007310:	b152      	cbz	r2, 8007328 <_scanf_float+0x64>
 8007312:	683b      	ldr	r3, [r7, #0]
 8007314:	781b      	ldrb	r3, [r3, #0]
 8007316:	2b4e      	cmp	r3, #78	@ 0x4e
 8007318:	d864      	bhi.n	80073e4 <_scanf_float+0x120>
 800731a:	2b40      	cmp	r3, #64	@ 0x40
 800731c:	d83c      	bhi.n	8007398 <_scanf_float+0xd4>
 800731e:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8007322:	b2c8      	uxtb	r0, r1
 8007324:	280e      	cmp	r0, #14
 8007326:	d93a      	bls.n	800739e <_scanf_float+0xda>
 8007328:	f1b9 0f00 	cmp.w	r9, #0
 800732c:	d003      	beq.n	8007336 <_scanf_float+0x72>
 800732e:	6823      	ldr	r3, [r4, #0]
 8007330:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007334:	6023      	str	r3, [r4, #0]
 8007336:	f10a 3aff 	add.w	sl, sl, #4294967295
 800733a:	f1ba 0f01 	cmp.w	sl, #1
 800733e:	f200 8117 	bhi.w	8007570 <_scanf_float+0x2ac>
 8007342:	9b01      	ldr	r3, [sp, #4]
 8007344:	429e      	cmp	r6, r3
 8007346:	f200 8108 	bhi.w	800755a <_scanf_float+0x296>
 800734a:	2001      	movs	r0, #1
 800734c:	b007      	add	sp, #28
 800734e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007352:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8007356:	2a0d      	cmp	r2, #13
 8007358:	d8e6      	bhi.n	8007328 <_scanf_float+0x64>
 800735a:	a101      	add	r1, pc, #4	@ (adr r1, 8007360 <_scanf_float+0x9c>)
 800735c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8007360:	080074a7 	.word	0x080074a7
 8007364:	08007329 	.word	0x08007329
 8007368:	08007329 	.word	0x08007329
 800736c:	08007329 	.word	0x08007329
 8007370:	08007507 	.word	0x08007507
 8007374:	080074df 	.word	0x080074df
 8007378:	08007329 	.word	0x08007329
 800737c:	08007329 	.word	0x08007329
 8007380:	080074b5 	.word	0x080074b5
 8007384:	08007329 	.word	0x08007329
 8007388:	08007329 	.word	0x08007329
 800738c:	08007329 	.word	0x08007329
 8007390:	08007329 	.word	0x08007329
 8007394:	0800746d 	.word	0x0800746d
 8007398:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800739c:	e7db      	b.n	8007356 <_scanf_float+0x92>
 800739e:	290e      	cmp	r1, #14
 80073a0:	d8c2      	bhi.n	8007328 <_scanf_float+0x64>
 80073a2:	a001      	add	r0, pc, #4	@ (adr r0, 80073a8 <_scanf_float+0xe4>)
 80073a4:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80073a8:	0800745d 	.word	0x0800745d
 80073ac:	08007329 	.word	0x08007329
 80073b0:	0800745d 	.word	0x0800745d
 80073b4:	080074f3 	.word	0x080074f3
 80073b8:	08007329 	.word	0x08007329
 80073bc:	08007405 	.word	0x08007405
 80073c0:	08007443 	.word	0x08007443
 80073c4:	08007443 	.word	0x08007443
 80073c8:	08007443 	.word	0x08007443
 80073cc:	08007443 	.word	0x08007443
 80073d0:	08007443 	.word	0x08007443
 80073d4:	08007443 	.word	0x08007443
 80073d8:	08007443 	.word	0x08007443
 80073dc:	08007443 	.word	0x08007443
 80073e0:	08007443 	.word	0x08007443
 80073e4:	2b6e      	cmp	r3, #110	@ 0x6e
 80073e6:	d809      	bhi.n	80073fc <_scanf_float+0x138>
 80073e8:	2b60      	cmp	r3, #96	@ 0x60
 80073ea:	d8b2      	bhi.n	8007352 <_scanf_float+0x8e>
 80073ec:	2b54      	cmp	r3, #84	@ 0x54
 80073ee:	d07b      	beq.n	80074e8 <_scanf_float+0x224>
 80073f0:	2b59      	cmp	r3, #89	@ 0x59
 80073f2:	d199      	bne.n	8007328 <_scanf_float+0x64>
 80073f4:	2d07      	cmp	r5, #7
 80073f6:	d197      	bne.n	8007328 <_scanf_float+0x64>
 80073f8:	2508      	movs	r5, #8
 80073fa:	e02c      	b.n	8007456 <_scanf_float+0x192>
 80073fc:	2b74      	cmp	r3, #116	@ 0x74
 80073fe:	d073      	beq.n	80074e8 <_scanf_float+0x224>
 8007400:	2b79      	cmp	r3, #121	@ 0x79
 8007402:	e7f6      	b.n	80073f2 <_scanf_float+0x12e>
 8007404:	6821      	ldr	r1, [r4, #0]
 8007406:	05c8      	lsls	r0, r1, #23
 8007408:	d51b      	bpl.n	8007442 <_scanf_float+0x17e>
 800740a:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800740e:	f109 0901 	add.w	r9, r9, #1
 8007412:	6021      	str	r1, [r4, #0]
 8007414:	f1bb 0f00 	cmp.w	fp, #0
 8007418:	d003      	beq.n	8007422 <_scanf_float+0x15e>
 800741a:	3201      	adds	r2, #1
 800741c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007420:	60a2      	str	r2, [r4, #8]
 8007422:	68a3      	ldr	r3, [r4, #8]
 8007424:	3b01      	subs	r3, #1
 8007426:	60a3      	str	r3, [r4, #8]
 8007428:	6923      	ldr	r3, [r4, #16]
 800742a:	3301      	adds	r3, #1
 800742c:	6123      	str	r3, [r4, #16]
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	3b01      	subs	r3, #1
 8007432:	2b00      	cmp	r3, #0
 8007434:	607b      	str	r3, [r7, #4]
 8007436:	f340 8087 	ble.w	8007548 <_scanf_float+0x284>
 800743a:	683b      	ldr	r3, [r7, #0]
 800743c:	3301      	adds	r3, #1
 800743e:	603b      	str	r3, [r7, #0]
 8007440:	e765      	b.n	800730e <_scanf_float+0x4a>
 8007442:	eb1a 0105 	adds.w	r1, sl, r5
 8007446:	f47f af6f 	bne.w	8007328 <_scanf_float+0x64>
 800744a:	6822      	ldr	r2, [r4, #0]
 800744c:	460d      	mov	r5, r1
 800744e:	468a      	mov	sl, r1
 8007450:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8007454:	6022      	str	r2, [r4, #0]
 8007456:	f806 3b01 	strb.w	r3, [r6], #1
 800745a:	e7e2      	b.n	8007422 <_scanf_float+0x15e>
 800745c:	6822      	ldr	r2, [r4, #0]
 800745e:	0610      	lsls	r0, r2, #24
 8007460:	f57f af62 	bpl.w	8007328 <_scanf_float+0x64>
 8007464:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007468:	6022      	str	r2, [r4, #0]
 800746a:	e7f4      	b.n	8007456 <_scanf_float+0x192>
 800746c:	f1ba 0f00 	cmp.w	sl, #0
 8007470:	d10e      	bne.n	8007490 <_scanf_float+0x1cc>
 8007472:	f1b9 0f00 	cmp.w	r9, #0
 8007476:	d10e      	bne.n	8007496 <_scanf_float+0x1d2>
 8007478:	6822      	ldr	r2, [r4, #0]
 800747a:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800747e:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8007482:	d108      	bne.n	8007496 <_scanf_float+0x1d2>
 8007484:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8007488:	f04f 0a01 	mov.w	sl, #1
 800748c:	6022      	str	r2, [r4, #0]
 800748e:	e7e2      	b.n	8007456 <_scanf_float+0x192>
 8007490:	f1ba 0f02 	cmp.w	sl, #2
 8007494:	d055      	beq.n	8007542 <_scanf_float+0x27e>
 8007496:	2d01      	cmp	r5, #1
 8007498:	d002      	beq.n	80074a0 <_scanf_float+0x1dc>
 800749a:	2d04      	cmp	r5, #4
 800749c:	f47f af44 	bne.w	8007328 <_scanf_float+0x64>
 80074a0:	3501      	adds	r5, #1
 80074a2:	b2ed      	uxtb	r5, r5
 80074a4:	e7d7      	b.n	8007456 <_scanf_float+0x192>
 80074a6:	f1ba 0f01 	cmp.w	sl, #1
 80074aa:	f47f af3d 	bne.w	8007328 <_scanf_float+0x64>
 80074ae:	f04f 0a02 	mov.w	sl, #2
 80074b2:	e7d0      	b.n	8007456 <_scanf_float+0x192>
 80074b4:	b97d      	cbnz	r5, 80074d6 <_scanf_float+0x212>
 80074b6:	f1b9 0f00 	cmp.w	r9, #0
 80074ba:	f47f af38 	bne.w	800732e <_scanf_float+0x6a>
 80074be:	6822      	ldr	r2, [r4, #0]
 80074c0:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80074c4:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80074c8:	f040 8107 	bne.w	80076da <_scanf_float+0x416>
 80074cc:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80074d0:	2501      	movs	r5, #1
 80074d2:	6022      	str	r2, [r4, #0]
 80074d4:	e7bf      	b.n	8007456 <_scanf_float+0x192>
 80074d6:	2d03      	cmp	r5, #3
 80074d8:	d0e2      	beq.n	80074a0 <_scanf_float+0x1dc>
 80074da:	2d05      	cmp	r5, #5
 80074dc:	e7de      	b.n	800749c <_scanf_float+0x1d8>
 80074de:	2d02      	cmp	r5, #2
 80074e0:	f47f af22 	bne.w	8007328 <_scanf_float+0x64>
 80074e4:	2503      	movs	r5, #3
 80074e6:	e7b6      	b.n	8007456 <_scanf_float+0x192>
 80074e8:	2d06      	cmp	r5, #6
 80074ea:	f47f af1d 	bne.w	8007328 <_scanf_float+0x64>
 80074ee:	2507      	movs	r5, #7
 80074f0:	e7b1      	b.n	8007456 <_scanf_float+0x192>
 80074f2:	6822      	ldr	r2, [r4, #0]
 80074f4:	0591      	lsls	r1, r2, #22
 80074f6:	f57f af17 	bpl.w	8007328 <_scanf_float+0x64>
 80074fa:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 80074fe:	f8cd 9008 	str.w	r9, [sp, #8]
 8007502:	6022      	str	r2, [r4, #0]
 8007504:	e7a7      	b.n	8007456 <_scanf_float+0x192>
 8007506:	6822      	ldr	r2, [r4, #0]
 8007508:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800750c:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8007510:	d006      	beq.n	8007520 <_scanf_float+0x25c>
 8007512:	0550      	lsls	r0, r2, #21
 8007514:	f57f af08 	bpl.w	8007328 <_scanf_float+0x64>
 8007518:	f1b9 0f00 	cmp.w	r9, #0
 800751c:	f000 80dd 	beq.w	80076da <_scanf_float+0x416>
 8007520:	0591      	lsls	r1, r2, #22
 8007522:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8007526:	bf58      	it	pl
 8007528:	9902      	ldrpl	r1, [sp, #8]
 800752a:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800752e:	bf58      	it	pl
 8007530:	eba9 0101 	subpl.w	r1, r9, r1
 8007534:	6022      	str	r2, [r4, #0]
 8007536:	f04f 0900 	mov.w	r9, #0
 800753a:	bf58      	it	pl
 800753c:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8007540:	e789      	b.n	8007456 <_scanf_float+0x192>
 8007542:	f04f 0a03 	mov.w	sl, #3
 8007546:	e786      	b.n	8007456 <_scanf_float+0x192>
 8007548:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800754c:	4639      	mov	r1, r7
 800754e:	4640      	mov	r0, r8
 8007550:	4798      	blx	r3
 8007552:	2800      	cmp	r0, #0
 8007554:	f43f aedb 	beq.w	800730e <_scanf_float+0x4a>
 8007558:	e6e6      	b.n	8007328 <_scanf_float+0x64>
 800755a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800755e:	463a      	mov	r2, r7
 8007560:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007564:	4640      	mov	r0, r8
 8007566:	4798      	blx	r3
 8007568:	6923      	ldr	r3, [r4, #16]
 800756a:	3b01      	subs	r3, #1
 800756c:	6123      	str	r3, [r4, #16]
 800756e:	e6e8      	b.n	8007342 <_scanf_float+0x7e>
 8007570:	1e6b      	subs	r3, r5, #1
 8007572:	2b06      	cmp	r3, #6
 8007574:	d824      	bhi.n	80075c0 <_scanf_float+0x2fc>
 8007576:	2d02      	cmp	r5, #2
 8007578:	d836      	bhi.n	80075e8 <_scanf_float+0x324>
 800757a:	9b01      	ldr	r3, [sp, #4]
 800757c:	429e      	cmp	r6, r3
 800757e:	f67f aee4 	bls.w	800734a <_scanf_float+0x86>
 8007582:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007586:	463a      	mov	r2, r7
 8007588:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800758c:	4640      	mov	r0, r8
 800758e:	4798      	blx	r3
 8007590:	6923      	ldr	r3, [r4, #16]
 8007592:	3b01      	subs	r3, #1
 8007594:	6123      	str	r3, [r4, #16]
 8007596:	e7f0      	b.n	800757a <_scanf_float+0x2b6>
 8007598:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800759c:	463a      	mov	r2, r7
 800759e:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 80075a2:	4640      	mov	r0, r8
 80075a4:	4798      	blx	r3
 80075a6:	6923      	ldr	r3, [r4, #16]
 80075a8:	3b01      	subs	r3, #1
 80075aa:	6123      	str	r3, [r4, #16]
 80075ac:	f10a 3aff 	add.w	sl, sl, #4294967295
 80075b0:	fa5f fa8a 	uxtb.w	sl, sl
 80075b4:	f1ba 0f02 	cmp.w	sl, #2
 80075b8:	d1ee      	bne.n	8007598 <_scanf_float+0x2d4>
 80075ba:	3d03      	subs	r5, #3
 80075bc:	b2ed      	uxtb	r5, r5
 80075be:	1b76      	subs	r6, r6, r5
 80075c0:	6823      	ldr	r3, [r4, #0]
 80075c2:	05da      	lsls	r2, r3, #23
 80075c4:	d52f      	bpl.n	8007626 <_scanf_float+0x362>
 80075c6:	055b      	lsls	r3, r3, #21
 80075c8:	d511      	bpl.n	80075ee <_scanf_float+0x32a>
 80075ca:	9b01      	ldr	r3, [sp, #4]
 80075cc:	429e      	cmp	r6, r3
 80075ce:	f67f aebc 	bls.w	800734a <_scanf_float+0x86>
 80075d2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80075d6:	463a      	mov	r2, r7
 80075d8:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80075dc:	4640      	mov	r0, r8
 80075de:	4798      	blx	r3
 80075e0:	6923      	ldr	r3, [r4, #16]
 80075e2:	3b01      	subs	r3, #1
 80075e4:	6123      	str	r3, [r4, #16]
 80075e6:	e7f0      	b.n	80075ca <_scanf_float+0x306>
 80075e8:	46aa      	mov	sl, r5
 80075ea:	46b3      	mov	fp, r6
 80075ec:	e7de      	b.n	80075ac <_scanf_float+0x2e8>
 80075ee:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80075f2:	1e75      	subs	r5, r6, #1
 80075f4:	6923      	ldr	r3, [r4, #16]
 80075f6:	2965      	cmp	r1, #101	@ 0x65
 80075f8:	f103 33ff 	add.w	r3, r3, #4294967295
 80075fc:	6123      	str	r3, [r4, #16]
 80075fe:	d00c      	beq.n	800761a <_scanf_float+0x356>
 8007600:	2945      	cmp	r1, #69	@ 0x45
 8007602:	d00a      	beq.n	800761a <_scanf_float+0x356>
 8007604:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007608:	463a      	mov	r2, r7
 800760a:	4640      	mov	r0, r8
 800760c:	1eb5      	subs	r5, r6, #2
 800760e:	4798      	blx	r3
 8007610:	6923      	ldr	r3, [r4, #16]
 8007612:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8007616:	3b01      	subs	r3, #1
 8007618:	6123      	str	r3, [r4, #16]
 800761a:	462e      	mov	r6, r5
 800761c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007620:	463a      	mov	r2, r7
 8007622:	4640      	mov	r0, r8
 8007624:	4798      	blx	r3
 8007626:	6822      	ldr	r2, [r4, #0]
 8007628:	f012 0210 	ands.w	r2, r2, #16
 800762c:	d001      	beq.n	8007632 <_scanf_float+0x36e>
 800762e:	2000      	movs	r0, #0
 8007630:	e68c      	b.n	800734c <_scanf_float+0x88>
 8007632:	7032      	strb	r2, [r6, #0]
 8007634:	6823      	ldr	r3, [r4, #0]
 8007636:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800763a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800763e:	d11c      	bne.n	800767a <_scanf_float+0x3b6>
 8007640:	9b02      	ldr	r3, [sp, #8]
 8007642:	454b      	cmp	r3, r9
 8007644:	eba3 0209 	sub.w	r2, r3, r9
 8007648:	d123      	bne.n	8007692 <_scanf_float+0x3ce>
 800764a:	2200      	movs	r2, #0
 800764c:	9901      	ldr	r1, [sp, #4]
 800764e:	4640      	mov	r0, r8
 8007650:	f002 fc36 	bl	8009ec0 <_strtod_r>
 8007654:	6821      	ldr	r1, [r4, #0]
 8007656:	9b03      	ldr	r3, [sp, #12]
 8007658:	f011 0f02 	tst.w	r1, #2
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	ec57 6b10 	vmov	r6, r7, d0
 8007662:	f103 0204 	add.w	r2, r3, #4
 8007666:	d01f      	beq.n	80076a8 <_scanf_float+0x3e4>
 8007668:	9903      	ldr	r1, [sp, #12]
 800766a:	600a      	str	r2, [r1, #0]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	e9c3 6700 	strd	r6, r7, [r3]
 8007672:	68e3      	ldr	r3, [r4, #12]
 8007674:	3301      	adds	r3, #1
 8007676:	60e3      	str	r3, [r4, #12]
 8007678:	e7d9      	b.n	800762e <_scanf_float+0x36a>
 800767a:	9b04      	ldr	r3, [sp, #16]
 800767c:	2b00      	cmp	r3, #0
 800767e:	d0e4      	beq.n	800764a <_scanf_float+0x386>
 8007680:	9905      	ldr	r1, [sp, #20]
 8007682:	230a      	movs	r3, #10
 8007684:	4640      	mov	r0, r8
 8007686:	3101      	adds	r1, #1
 8007688:	f002 fc9a 	bl	8009fc0 <_strtol_r>
 800768c:	9b04      	ldr	r3, [sp, #16]
 800768e:	9e05      	ldr	r6, [sp, #20]
 8007690:	1ac2      	subs	r2, r0, r3
 8007692:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8007696:	4912      	ldr	r1, [pc, #72]	@ (80076e0 <_scanf_float+0x41c>)
 8007698:	429e      	cmp	r6, r3
 800769a:	bf28      	it	cs
 800769c:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 80076a0:	4630      	mov	r0, r6
 80076a2:	f000 f8f5 	bl	8007890 <siprintf>
 80076a6:	e7d0      	b.n	800764a <_scanf_float+0x386>
 80076a8:	f011 0f04 	tst.w	r1, #4
 80076ac:	9903      	ldr	r1, [sp, #12]
 80076ae:	600a      	str	r2, [r1, #0]
 80076b0:	d1dc      	bne.n	800766c <_scanf_float+0x3a8>
 80076b2:	681d      	ldr	r5, [r3, #0]
 80076b4:	4632      	mov	r2, r6
 80076b6:	463b      	mov	r3, r7
 80076b8:	4630      	mov	r0, r6
 80076ba:	4639      	mov	r1, r7
 80076bc:	f7f9 fa54 	bl	8000b68 <__aeabi_dcmpun>
 80076c0:	b128      	cbz	r0, 80076ce <_scanf_float+0x40a>
 80076c2:	4808      	ldr	r0, [pc, #32]	@ (80076e4 <_scanf_float+0x420>)
 80076c4:	f000 f9e2 	bl	8007a8c <nanf>
 80076c8:	ed85 0a00 	vstr	s0, [r5]
 80076cc:	e7d1      	b.n	8007672 <_scanf_float+0x3ae>
 80076ce:	4630      	mov	r0, r6
 80076d0:	4639      	mov	r1, r7
 80076d2:	f7f9 faa7 	bl	8000c24 <__aeabi_d2f>
 80076d6:	6028      	str	r0, [r5, #0]
 80076d8:	e7cb      	b.n	8007672 <_scanf_float+0x3ae>
 80076da:	f04f 0900 	mov.w	r9, #0
 80076de:	e62a      	b.n	8007336 <_scanf_float+0x72>
 80076e0:	0800b2dc 	.word	0x0800b2dc
 80076e4:	0800b675 	.word	0x0800b675

080076e8 <std>:
 80076e8:	2300      	movs	r3, #0
 80076ea:	b510      	push	{r4, lr}
 80076ec:	4604      	mov	r4, r0
 80076ee:	6083      	str	r3, [r0, #8]
 80076f0:	8181      	strh	r1, [r0, #12]
 80076f2:	4619      	mov	r1, r3
 80076f4:	6643      	str	r3, [r0, #100]	@ 0x64
 80076f6:	81c2      	strh	r2, [r0, #14]
 80076f8:	2208      	movs	r2, #8
 80076fa:	6183      	str	r3, [r0, #24]
 80076fc:	e9c0 3300 	strd	r3, r3, [r0]
 8007700:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007704:	305c      	adds	r0, #92	@ 0x5c
 8007706:	f000 f926 	bl	8007956 <memset>
 800770a:	4b0d      	ldr	r3, [pc, #52]	@ (8007740 <std+0x58>)
 800770c:	6224      	str	r4, [r4, #32]
 800770e:	6263      	str	r3, [r4, #36]	@ 0x24
 8007710:	4b0c      	ldr	r3, [pc, #48]	@ (8007744 <std+0x5c>)
 8007712:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007714:	4b0c      	ldr	r3, [pc, #48]	@ (8007748 <std+0x60>)
 8007716:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007718:	4b0c      	ldr	r3, [pc, #48]	@ (800774c <std+0x64>)
 800771a:	6323      	str	r3, [r4, #48]	@ 0x30
 800771c:	4b0c      	ldr	r3, [pc, #48]	@ (8007750 <std+0x68>)
 800771e:	429c      	cmp	r4, r3
 8007720:	d006      	beq.n	8007730 <std+0x48>
 8007722:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007726:	4294      	cmp	r4, r2
 8007728:	d002      	beq.n	8007730 <std+0x48>
 800772a:	33d0      	adds	r3, #208	@ 0xd0
 800772c:	429c      	cmp	r4, r3
 800772e:	d105      	bne.n	800773c <std+0x54>
 8007730:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007734:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007738:	f000 b98a 	b.w	8007a50 <__retarget_lock_init_recursive>
 800773c:	bd10      	pop	{r4, pc}
 800773e:	bf00      	nop
 8007740:	080078d1 	.word	0x080078d1
 8007744:	080078f3 	.word	0x080078f3
 8007748:	0800792b 	.word	0x0800792b
 800774c:	0800794f 	.word	0x0800794f
 8007750:	20000578 	.word	0x20000578

08007754 <stdio_exit_handler>:
 8007754:	4a02      	ldr	r2, [pc, #8]	@ (8007760 <stdio_exit_handler+0xc>)
 8007756:	4903      	ldr	r1, [pc, #12]	@ (8007764 <stdio_exit_handler+0x10>)
 8007758:	4803      	ldr	r0, [pc, #12]	@ (8007768 <stdio_exit_handler+0x14>)
 800775a:	f000 b869 	b.w	8007830 <_fwalk_sglue>
 800775e:	bf00      	nop
 8007760:	2000000c 	.word	0x2000000c
 8007764:	0800a601 	.word	0x0800a601
 8007768:	2000001c 	.word	0x2000001c

0800776c <cleanup_stdio>:
 800776c:	6841      	ldr	r1, [r0, #4]
 800776e:	4b0c      	ldr	r3, [pc, #48]	@ (80077a0 <cleanup_stdio+0x34>)
 8007770:	4299      	cmp	r1, r3
 8007772:	b510      	push	{r4, lr}
 8007774:	4604      	mov	r4, r0
 8007776:	d001      	beq.n	800777c <cleanup_stdio+0x10>
 8007778:	f002 ff42 	bl	800a600 <_fflush_r>
 800777c:	68a1      	ldr	r1, [r4, #8]
 800777e:	4b09      	ldr	r3, [pc, #36]	@ (80077a4 <cleanup_stdio+0x38>)
 8007780:	4299      	cmp	r1, r3
 8007782:	d002      	beq.n	800778a <cleanup_stdio+0x1e>
 8007784:	4620      	mov	r0, r4
 8007786:	f002 ff3b 	bl	800a600 <_fflush_r>
 800778a:	68e1      	ldr	r1, [r4, #12]
 800778c:	4b06      	ldr	r3, [pc, #24]	@ (80077a8 <cleanup_stdio+0x3c>)
 800778e:	4299      	cmp	r1, r3
 8007790:	d004      	beq.n	800779c <cleanup_stdio+0x30>
 8007792:	4620      	mov	r0, r4
 8007794:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007798:	f002 bf32 	b.w	800a600 <_fflush_r>
 800779c:	bd10      	pop	{r4, pc}
 800779e:	bf00      	nop
 80077a0:	20000578 	.word	0x20000578
 80077a4:	200005e0 	.word	0x200005e0
 80077a8:	20000648 	.word	0x20000648

080077ac <global_stdio_init.part.0>:
 80077ac:	b510      	push	{r4, lr}
 80077ae:	4b0b      	ldr	r3, [pc, #44]	@ (80077dc <global_stdio_init.part.0+0x30>)
 80077b0:	2104      	movs	r1, #4
 80077b2:	4c0b      	ldr	r4, [pc, #44]	@ (80077e0 <global_stdio_init.part.0+0x34>)
 80077b4:	4a0b      	ldr	r2, [pc, #44]	@ (80077e4 <global_stdio_init.part.0+0x38>)
 80077b6:	4620      	mov	r0, r4
 80077b8:	601a      	str	r2, [r3, #0]
 80077ba:	2200      	movs	r2, #0
 80077bc:	f7ff ff94 	bl	80076e8 <std>
 80077c0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80077c4:	2201      	movs	r2, #1
 80077c6:	2109      	movs	r1, #9
 80077c8:	f7ff ff8e 	bl	80076e8 <std>
 80077cc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80077d0:	2202      	movs	r2, #2
 80077d2:	2112      	movs	r1, #18
 80077d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80077d8:	f7ff bf86 	b.w	80076e8 <std>
 80077dc:	200006b0 	.word	0x200006b0
 80077e0:	20000578 	.word	0x20000578
 80077e4:	08007755 	.word	0x08007755

080077e8 <__sfp_lock_acquire>:
 80077e8:	4801      	ldr	r0, [pc, #4]	@ (80077f0 <__sfp_lock_acquire+0x8>)
 80077ea:	f000 b932 	b.w	8007a52 <__retarget_lock_acquire_recursive>
 80077ee:	bf00      	nop
 80077f0:	200006b9 	.word	0x200006b9

080077f4 <__sfp_lock_release>:
 80077f4:	4801      	ldr	r0, [pc, #4]	@ (80077fc <__sfp_lock_release+0x8>)
 80077f6:	f000 b92d 	b.w	8007a54 <__retarget_lock_release_recursive>
 80077fa:	bf00      	nop
 80077fc:	200006b9 	.word	0x200006b9

08007800 <__sinit>:
 8007800:	b510      	push	{r4, lr}
 8007802:	4604      	mov	r4, r0
 8007804:	f7ff fff0 	bl	80077e8 <__sfp_lock_acquire>
 8007808:	6a23      	ldr	r3, [r4, #32]
 800780a:	b11b      	cbz	r3, 8007814 <__sinit+0x14>
 800780c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007810:	f7ff bff0 	b.w	80077f4 <__sfp_lock_release>
 8007814:	4b04      	ldr	r3, [pc, #16]	@ (8007828 <__sinit+0x28>)
 8007816:	6223      	str	r3, [r4, #32]
 8007818:	4b04      	ldr	r3, [pc, #16]	@ (800782c <__sinit+0x2c>)
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	2b00      	cmp	r3, #0
 800781e:	d1f5      	bne.n	800780c <__sinit+0xc>
 8007820:	f7ff ffc4 	bl	80077ac <global_stdio_init.part.0>
 8007824:	e7f2      	b.n	800780c <__sinit+0xc>
 8007826:	bf00      	nop
 8007828:	0800776d 	.word	0x0800776d
 800782c:	200006b0 	.word	0x200006b0

08007830 <_fwalk_sglue>:
 8007830:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007834:	4607      	mov	r7, r0
 8007836:	4688      	mov	r8, r1
 8007838:	4614      	mov	r4, r2
 800783a:	2600      	movs	r6, #0
 800783c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007840:	f1b9 0901 	subs.w	r9, r9, #1
 8007844:	d505      	bpl.n	8007852 <_fwalk_sglue+0x22>
 8007846:	6824      	ldr	r4, [r4, #0]
 8007848:	2c00      	cmp	r4, #0
 800784a:	d1f7      	bne.n	800783c <_fwalk_sglue+0xc>
 800784c:	4630      	mov	r0, r6
 800784e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007852:	89ab      	ldrh	r3, [r5, #12]
 8007854:	2b01      	cmp	r3, #1
 8007856:	d907      	bls.n	8007868 <_fwalk_sglue+0x38>
 8007858:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800785c:	3301      	adds	r3, #1
 800785e:	d003      	beq.n	8007868 <_fwalk_sglue+0x38>
 8007860:	4629      	mov	r1, r5
 8007862:	4638      	mov	r0, r7
 8007864:	47c0      	blx	r8
 8007866:	4306      	orrs	r6, r0
 8007868:	3568      	adds	r5, #104	@ 0x68
 800786a:	e7e9      	b.n	8007840 <_fwalk_sglue+0x10>

0800786c <iprintf>:
 800786c:	b40f      	push	{r0, r1, r2, r3}
 800786e:	b507      	push	{r0, r1, r2, lr}
 8007870:	4906      	ldr	r1, [pc, #24]	@ (800788c <iprintf+0x20>)
 8007872:	ab04      	add	r3, sp, #16
 8007874:	6808      	ldr	r0, [r1, #0]
 8007876:	f853 2b04 	ldr.w	r2, [r3], #4
 800787a:	6881      	ldr	r1, [r0, #8]
 800787c:	9301      	str	r3, [sp, #4]
 800787e:	f002 fd23 	bl	800a2c8 <_vfiprintf_r>
 8007882:	b003      	add	sp, #12
 8007884:	f85d eb04 	ldr.w	lr, [sp], #4
 8007888:	b004      	add	sp, #16
 800788a:	4770      	bx	lr
 800788c:	20000018 	.word	0x20000018

08007890 <siprintf>:
 8007890:	b40e      	push	{r1, r2, r3}
 8007892:	b500      	push	{lr}
 8007894:	b09c      	sub	sp, #112	@ 0x70
 8007896:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800789a:	ab1d      	add	r3, sp, #116	@ 0x74
 800789c:	9002      	str	r0, [sp, #8]
 800789e:	9006      	str	r0, [sp, #24]
 80078a0:	9107      	str	r1, [sp, #28]
 80078a2:	9104      	str	r1, [sp, #16]
 80078a4:	4808      	ldr	r0, [pc, #32]	@ (80078c8 <siprintf+0x38>)
 80078a6:	4909      	ldr	r1, [pc, #36]	@ (80078cc <siprintf+0x3c>)
 80078a8:	f853 2b04 	ldr.w	r2, [r3], #4
 80078ac:	9105      	str	r1, [sp, #20]
 80078ae:	a902      	add	r1, sp, #8
 80078b0:	6800      	ldr	r0, [r0, #0]
 80078b2:	9301      	str	r3, [sp, #4]
 80078b4:	f002 fbe2 	bl	800a07c <_svfiprintf_r>
 80078b8:	9b02      	ldr	r3, [sp, #8]
 80078ba:	2200      	movs	r2, #0
 80078bc:	701a      	strb	r2, [r3, #0]
 80078be:	b01c      	add	sp, #112	@ 0x70
 80078c0:	f85d eb04 	ldr.w	lr, [sp], #4
 80078c4:	b003      	add	sp, #12
 80078c6:	4770      	bx	lr
 80078c8:	20000018 	.word	0x20000018
 80078cc:	ffff0208 	.word	0xffff0208

080078d0 <__sread>:
 80078d0:	b510      	push	{r4, lr}
 80078d2:	460c      	mov	r4, r1
 80078d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80078d8:	f000 f86c 	bl	80079b4 <_read_r>
 80078dc:	2800      	cmp	r0, #0
 80078de:	bfab      	itete	ge
 80078e0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80078e2:	89a3      	ldrhlt	r3, [r4, #12]
 80078e4:	181b      	addge	r3, r3, r0
 80078e6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80078ea:	bfac      	ite	ge
 80078ec:	6563      	strge	r3, [r4, #84]	@ 0x54
 80078ee:	81a3      	strhlt	r3, [r4, #12]
 80078f0:	bd10      	pop	{r4, pc}

080078f2 <__swrite>:
 80078f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80078f6:	461f      	mov	r7, r3
 80078f8:	898b      	ldrh	r3, [r1, #12]
 80078fa:	4605      	mov	r5, r0
 80078fc:	460c      	mov	r4, r1
 80078fe:	05db      	lsls	r3, r3, #23
 8007900:	4616      	mov	r6, r2
 8007902:	d505      	bpl.n	8007910 <__swrite+0x1e>
 8007904:	2302      	movs	r3, #2
 8007906:	2200      	movs	r2, #0
 8007908:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800790c:	f000 f840 	bl	8007990 <_lseek_r>
 8007910:	89a3      	ldrh	r3, [r4, #12]
 8007912:	4632      	mov	r2, r6
 8007914:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007918:	4628      	mov	r0, r5
 800791a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800791e:	81a3      	strh	r3, [r4, #12]
 8007920:	463b      	mov	r3, r7
 8007922:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007926:	f000 b857 	b.w	80079d8 <_write_r>

0800792a <__sseek>:
 800792a:	b510      	push	{r4, lr}
 800792c:	460c      	mov	r4, r1
 800792e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007932:	f000 f82d 	bl	8007990 <_lseek_r>
 8007936:	1c43      	adds	r3, r0, #1
 8007938:	89a3      	ldrh	r3, [r4, #12]
 800793a:	bf15      	itete	ne
 800793c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800793e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007942:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007946:	81a3      	strheq	r3, [r4, #12]
 8007948:	bf18      	it	ne
 800794a:	81a3      	strhne	r3, [r4, #12]
 800794c:	bd10      	pop	{r4, pc}

0800794e <__sclose>:
 800794e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007952:	f000 b80d 	b.w	8007970 <_close_r>

08007956 <memset>:
 8007956:	4402      	add	r2, r0
 8007958:	4603      	mov	r3, r0
 800795a:	4293      	cmp	r3, r2
 800795c:	d100      	bne.n	8007960 <memset+0xa>
 800795e:	4770      	bx	lr
 8007960:	f803 1b01 	strb.w	r1, [r3], #1
 8007964:	e7f9      	b.n	800795a <memset+0x4>
	...

08007968 <_localeconv_r>:
 8007968:	4800      	ldr	r0, [pc, #0]	@ (800796c <_localeconv_r+0x4>)
 800796a:	4770      	bx	lr
 800796c:	20000158 	.word	0x20000158

08007970 <_close_r>:
 8007970:	b538      	push	{r3, r4, r5, lr}
 8007972:	2300      	movs	r3, #0
 8007974:	4d05      	ldr	r5, [pc, #20]	@ (800798c <_close_r+0x1c>)
 8007976:	4604      	mov	r4, r0
 8007978:	4608      	mov	r0, r1
 800797a:	602b      	str	r3, [r5, #0]
 800797c:	f7fa f808 	bl	8001990 <_close>
 8007980:	1c43      	adds	r3, r0, #1
 8007982:	d102      	bne.n	800798a <_close_r+0x1a>
 8007984:	682b      	ldr	r3, [r5, #0]
 8007986:	b103      	cbz	r3, 800798a <_close_r+0x1a>
 8007988:	6023      	str	r3, [r4, #0]
 800798a:	bd38      	pop	{r3, r4, r5, pc}
 800798c:	200006b4 	.word	0x200006b4

08007990 <_lseek_r>:
 8007990:	b538      	push	{r3, r4, r5, lr}
 8007992:	4604      	mov	r4, r0
 8007994:	4d06      	ldr	r5, [pc, #24]	@ (80079b0 <_lseek_r+0x20>)
 8007996:	4608      	mov	r0, r1
 8007998:	4611      	mov	r1, r2
 800799a:	2200      	movs	r2, #0
 800799c:	602a      	str	r2, [r5, #0]
 800799e:	461a      	mov	r2, r3
 80079a0:	f7fa f81d 	bl	80019de <_lseek>
 80079a4:	1c43      	adds	r3, r0, #1
 80079a6:	d102      	bne.n	80079ae <_lseek_r+0x1e>
 80079a8:	682b      	ldr	r3, [r5, #0]
 80079aa:	b103      	cbz	r3, 80079ae <_lseek_r+0x1e>
 80079ac:	6023      	str	r3, [r4, #0]
 80079ae:	bd38      	pop	{r3, r4, r5, pc}
 80079b0:	200006b4 	.word	0x200006b4

080079b4 <_read_r>:
 80079b4:	b538      	push	{r3, r4, r5, lr}
 80079b6:	4604      	mov	r4, r0
 80079b8:	4d06      	ldr	r5, [pc, #24]	@ (80079d4 <_read_r+0x20>)
 80079ba:	4608      	mov	r0, r1
 80079bc:	4611      	mov	r1, r2
 80079be:	2200      	movs	r2, #0
 80079c0:	602a      	str	r2, [r5, #0]
 80079c2:	461a      	mov	r2, r3
 80079c4:	f7f9 ffab 	bl	800191e <_read>
 80079c8:	1c43      	adds	r3, r0, #1
 80079ca:	d102      	bne.n	80079d2 <_read_r+0x1e>
 80079cc:	682b      	ldr	r3, [r5, #0]
 80079ce:	b103      	cbz	r3, 80079d2 <_read_r+0x1e>
 80079d0:	6023      	str	r3, [r4, #0]
 80079d2:	bd38      	pop	{r3, r4, r5, pc}
 80079d4:	200006b4 	.word	0x200006b4

080079d8 <_write_r>:
 80079d8:	b538      	push	{r3, r4, r5, lr}
 80079da:	4604      	mov	r4, r0
 80079dc:	4d06      	ldr	r5, [pc, #24]	@ (80079f8 <_write_r+0x20>)
 80079de:	4608      	mov	r0, r1
 80079e0:	4611      	mov	r1, r2
 80079e2:	2200      	movs	r2, #0
 80079e4:	602a      	str	r2, [r5, #0]
 80079e6:	461a      	mov	r2, r3
 80079e8:	f7f9 ffb6 	bl	8001958 <_write>
 80079ec:	1c43      	adds	r3, r0, #1
 80079ee:	d102      	bne.n	80079f6 <_write_r+0x1e>
 80079f0:	682b      	ldr	r3, [r5, #0]
 80079f2:	b103      	cbz	r3, 80079f6 <_write_r+0x1e>
 80079f4:	6023      	str	r3, [r4, #0]
 80079f6:	bd38      	pop	{r3, r4, r5, pc}
 80079f8:	200006b4 	.word	0x200006b4

080079fc <__errno>:
 80079fc:	4b01      	ldr	r3, [pc, #4]	@ (8007a04 <__errno+0x8>)
 80079fe:	6818      	ldr	r0, [r3, #0]
 8007a00:	4770      	bx	lr
 8007a02:	bf00      	nop
 8007a04:	20000018 	.word	0x20000018

08007a08 <__libc_init_array>:
 8007a08:	b570      	push	{r4, r5, r6, lr}
 8007a0a:	4d0d      	ldr	r5, [pc, #52]	@ (8007a40 <__libc_init_array+0x38>)
 8007a0c:	2600      	movs	r6, #0
 8007a0e:	4c0d      	ldr	r4, [pc, #52]	@ (8007a44 <__libc_init_array+0x3c>)
 8007a10:	1b64      	subs	r4, r4, r5
 8007a12:	10a4      	asrs	r4, r4, #2
 8007a14:	42a6      	cmp	r6, r4
 8007a16:	d109      	bne.n	8007a2c <__libc_init_array+0x24>
 8007a18:	4d0b      	ldr	r5, [pc, #44]	@ (8007a48 <__libc_init_array+0x40>)
 8007a1a:	2600      	movs	r6, #0
 8007a1c:	4c0b      	ldr	r4, [pc, #44]	@ (8007a4c <__libc_init_array+0x44>)
 8007a1e:	f003 fb8d 	bl	800b13c <_init>
 8007a22:	1b64      	subs	r4, r4, r5
 8007a24:	10a4      	asrs	r4, r4, #2
 8007a26:	42a6      	cmp	r6, r4
 8007a28:	d105      	bne.n	8007a36 <__libc_init_array+0x2e>
 8007a2a:	bd70      	pop	{r4, r5, r6, pc}
 8007a2c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007a30:	3601      	adds	r6, #1
 8007a32:	4798      	blx	r3
 8007a34:	e7ee      	b.n	8007a14 <__libc_init_array+0xc>
 8007a36:	f855 3b04 	ldr.w	r3, [r5], #4
 8007a3a:	3601      	adds	r6, #1
 8007a3c:	4798      	blx	r3
 8007a3e:	e7f2      	b.n	8007a26 <__libc_init_array+0x1e>
 8007a40:	0800b6e0 	.word	0x0800b6e0
 8007a44:	0800b6e0 	.word	0x0800b6e0
 8007a48:	0800b6e0 	.word	0x0800b6e0
 8007a4c:	0800b6e4 	.word	0x0800b6e4

08007a50 <__retarget_lock_init_recursive>:
 8007a50:	4770      	bx	lr

08007a52 <__retarget_lock_acquire_recursive>:
 8007a52:	4770      	bx	lr

08007a54 <__retarget_lock_release_recursive>:
 8007a54:	4770      	bx	lr

08007a56 <memchr>:
 8007a56:	b2c9      	uxtb	r1, r1
 8007a58:	4603      	mov	r3, r0
 8007a5a:	4402      	add	r2, r0
 8007a5c:	b510      	push	{r4, lr}
 8007a5e:	4293      	cmp	r3, r2
 8007a60:	4618      	mov	r0, r3
 8007a62:	d101      	bne.n	8007a68 <memchr+0x12>
 8007a64:	2000      	movs	r0, #0
 8007a66:	e003      	b.n	8007a70 <memchr+0x1a>
 8007a68:	7804      	ldrb	r4, [r0, #0]
 8007a6a:	3301      	adds	r3, #1
 8007a6c:	428c      	cmp	r4, r1
 8007a6e:	d1f6      	bne.n	8007a5e <memchr+0x8>
 8007a70:	bd10      	pop	{r4, pc}

08007a72 <memcpy>:
 8007a72:	440a      	add	r2, r1
 8007a74:	1e43      	subs	r3, r0, #1
 8007a76:	4291      	cmp	r1, r2
 8007a78:	d100      	bne.n	8007a7c <memcpy+0xa>
 8007a7a:	4770      	bx	lr
 8007a7c:	b510      	push	{r4, lr}
 8007a7e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007a82:	4291      	cmp	r1, r2
 8007a84:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007a88:	d1f9      	bne.n	8007a7e <memcpy+0xc>
 8007a8a:	bd10      	pop	{r4, pc}

08007a8c <nanf>:
 8007a8c:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8007a94 <nanf+0x8>
 8007a90:	4770      	bx	lr
 8007a92:	bf00      	nop
 8007a94:	7fc00000 	.word	0x7fc00000

08007a98 <quorem>:
 8007a98:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a9c:	6903      	ldr	r3, [r0, #16]
 8007a9e:	4607      	mov	r7, r0
 8007aa0:	690c      	ldr	r4, [r1, #16]
 8007aa2:	42a3      	cmp	r3, r4
 8007aa4:	f2c0 8083 	blt.w	8007bae <quorem+0x116>
 8007aa8:	3c01      	subs	r4, #1
 8007aaa:	f100 0514 	add.w	r5, r0, #20
 8007aae:	f101 0814 	add.w	r8, r1, #20
 8007ab2:	00a3      	lsls	r3, r4, #2
 8007ab4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007ab8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007abc:	9300      	str	r3, [sp, #0]
 8007abe:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007ac2:	9301      	str	r3, [sp, #4]
 8007ac4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007ac8:	3301      	adds	r3, #1
 8007aca:	429a      	cmp	r2, r3
 8007acc:	fbb2 f6f3 	udiv	r6, r2, r3
 8007ad0:	d331      	bcc.n	8007b36 <quorem+0x9e>
 8007ad2:	f04f 0a00 	mov.w	sl, #0
 8007ad6:	46c4      	mov	ip, r8
 8007ad8:	46ae      	mov	lr, r5
 8007ada:	46d3      	mov	fp, sl
 8007adc:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007ae0:	b298      	uxth	r0, r3
 8007ae2:	45e1      	cmp	r9, ip
 8007ae4:	ea4f 4313 	mov.w	r3, r3, lsr #16
 8007ae8:	fb06 a000 	mla	r0, r6, r0, sl
 8007aec:	ea4f 4210 	mov.w	r2, r0, lsr #16
 8007af0:	b280      	uxth	r0, r0
 8007af2:	fb06 2303 	mla	r3, r6, r3, r2
 8007af6:	f8de 2000 	ldr.w	r2, [lr]
 8007afa:	b292      	uxth	r2, r2
 8007afc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007b00:	eba2 0200 	sub.w	r2, r2, r0
 8007b04:	b29b      	uxth	r3, r3
 8007b06:	f8de 0000 	ldr.w	r0, [lr]
 8007b0a:	445a      	add	r2, fp
 8007b0c:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8007b10:	b292      	uxth	r2, r2
 8007b12:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8007b16:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8007b1a:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8007b1e:	f84e 2b04 	str.w	r2, [lr], #4
 8007b22:	d2db      	bcs.n	8007adc <quorem+0x44>
 8007b24:	9b00      	ldr	r3, [sp, #0]
 8007b26:	58eb      	ldr	r3, [r5, r3]
 8007b28:	b92b      	cbnz	r3, 8007b36 <quorem+0x9e>
 8007b2a:	9b01      	ldr	r3, [sp, #4]
 8007b2c:	3b04      	subs	r3, #4
 8007b2e:	429d      	cmp	r5, r3
 8007b30:	461a      	mov	r2, r3
 8007b32:	d330      	bcc.n	8007b96 <quorem+0xfe>
 8007b34:	613c      	str	r4, [r7, #16]
 8007b36:	4638      	mov	r0, r7
 8007b38:	f001 f9c8 	bl	8008ecc <__mcmp>
 8007b3c:	2800      	cmp	r0, #0
 8007b3e:	db26      	blt.n	8007b8e <quorem+0xf6>
 8007b40:	4629      	mov	r1, r5
 8007b42:	2000      	movs	r0, #0
 8007b44:	f858 2b04 	ldr.w	r2, [r8], #4
 8007b48:	f8d1 c000 	ldr.w	ip, [r1]
 8007b4c:	fa1f fe82 	uxth.w	lr, r2
 8007b50:	45c1      	cmp	r9, r8
 8007b52:	fa1f f38c 	uxth.w	r3, ip
 8007b56:	ea4f 4212 	mov.w	r2, r2, lsr #16
 8007b5a:	eba3 030e 	sub.w	r3, r3, lr
 8007b5e:	4403      	add	r3, r0
 8007b60:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8007b64:	b29b      	uxth	r3, r3
 8007b66:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8007b6a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007b6e:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007b72:	f841 3b04 	str.w	r3, [r1], #4
 8007b76:	d2e5      	bcs.n	8007b44 <quorem+0xac>
 8007b78:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007b7c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007b80:	b922      	cbnz	r2, 8007b8c <quorem+0xf4>
 8007b82:	3b04      	subs	r3, #4
 8007b84:	429d      	cmp	r5, r3
 8007b86:	461a      	mov	r2, r3
 8007b88:	d30b      	bcc.n	8007ba2 <quorem+0x10a>
 8007b8a:	613c      	str	r4, [r7, #16]
 8007b8c:	3601      	adds	r6, #1
 8007b8e:	4630      	mov	r0, r6
 8007b90:	b003      	add	sp, #12
 8007b92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b96:	6812      	ldr	r2, [r2, #0]
 8007b98:	3b04      	subs	r3, #4
 8007b9a:	2a00      	cmp	r2, #0
 8007b9c:	d1ca      	bne.n	8007b34 <quorem+0x9c>
 8007b9e:	3c01      	subs	r4, #1
 8007ba0:	e7c5      	b.n	8007b2e <quorem+0x96>
 8007ba2:	6812      	ldr	r2, [r2, #0]
 8007ba4:	3b04      	subs	r3, #4
 8007ba6:	2a00      	cmp	r2, #0
 8007ba8:	d1ef      	bne.n	8007b8a <quorem+0xf2>
 8007baa:	3c01      	subs	r4, #1
 8007bac:	e7ea      	b.n	8007b84 <quorem+0xec>
 8007bae:	2000      	movs	r0, #0
 8007bb0:	e7ee      	b.n	8007b90 <quorem+0xf8>
 8007bb2:	0000      	movs	r0, r0
 8007bb4:	0000      	movs	r0, r0
	...

08007bb8 <_dtoa_r>:
 8007bb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007bbc:	69c7      	ldr	r7, [r0, #28]
 8007bbe:	b099      	sub	sp, #100	@ 0x64
 8007bc0:	4683      	mov	fp, r0
 8007bc2:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8007bc4:	9109      	str	r1, [sp, #36]	@ 0x24
 8007bc6:	920e      	str	r2, [sp, #56]	@ 0x38
 8007bc8:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007bca:	ec55 4b10 	vmov	r4, r5, d0
 8007bce:	ed8d 0b02 	vstr	d0, [sp, #8]
 8007bd2:	b97f      	cbnz	r7, 8007bf4 <_dtoa_r+0x3c>
 8007bd4:	2010      	movs	r0, #16
 8007bd6:	f000 fdfd 	bl	80087d4 <malloc>
 8007bda:	4602      	mov	r2, r0
 8007bdc:	f8cb 001c 	str.w	r0, [fp, #28]
 8007be0:	b920      	cbnz	r0, 8007bec <_dtoa_r+0x34>
 8007be2:	4ba7      	ldr	r3, [pc, #668]	@ (8007e80 <_dtoa_r+0x2c8>)
 8007be4:	21ef      	movs	r1, #239	@ 0xef
 8007be6:	48a7      	ldr	r0, [pc, #668]	@ (8007e84 <_dtoa_r+0x2cc>)
 8007be8:	f002 fe0a 	bl	800a800 <__assert_func>
 8007bec:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8007bf0:	6007      	str	r7, [r0, #0]
 8007bf2:	60c7      	str	r7, [r0, #12]
 8007bf4:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007bf8:	6819      	ldr	r1, [r3, #0]
 8007bfa:	b159      	cbz	r1, 8007c14 <_dtoa_r+0x5c>
 8007bfc:	685a      	ldr	r2, [r3, #4]
 8007bfe:	2301      	movs	r3, #1
 8007c00:	4658      	mov	r0, fp
 8007c02:	4093      	lsls	r3, r2
 8007c04:	604a      	str	r2, [r1, #4]
 8007c06:	608b      	str	r3, [r1, #8]
 8007c08:	f000 feda 	bl	80089c0 <_Bfree>
 8007c0c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007c10:	2200      	movs	r2, #0
 8007c12:	601a      	str	r2, [r3, #0]
 8007c14:	1e2b      	subs	r3, r5, #0
 8007c16:	bfb7      	itett	lt
 8007c18:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8007c1c:	2300      	movge	r3, #0
 8007c1e:	2201      	movlt	r2, #1
 8007c20:	9303      	strlt	r3, [sp, #12]
 8007c22:	bfa8      	it	ge
 8007c24:	6033      	strge	r3, [r6, #0]
 8007c26:	9f03      	ldr	r7, [sp, #12]
 8007c28:	4b97      	ldr	r3, [pc, #604]	@ (8007e88 <_dtoa_r+0x2d0>)
 8007c2a:	bfb8      	it	lt
 8007c2c:	6032      	strlt	r2, [r6, #0]
 8007c2e:	43bb      	bics	r3, r7
 8007c30:	d112      	bne.n	8007c58 <_dtoa_r+0xa0>
 8007c32:	f242 730f 	movw	r3, #9999	@ 0x270f
 8007c36:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8007c38:	6013      	str	r3, [r2, #0]
 8007c3a:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007c3e:	4323      	orrs	r3, r4
 8007c40:	f000 854c 	beq.w	80086dc <_dtoa_r+0xb24>
 8007c44:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007c46:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8007e9c <_dtoa_r+0x2e4>
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	f000 854e 	beq.w	80086ec <_dtoa_r+0xb34>
 8007c50:	f10a 0303 	add.w	r3, sl, #3
 8007c54:	f000 bd48 	b.w	80086e8 <_dtoa_r+0xb30>
 8007c58:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007c5c:	2200      	movs	r2, #0
 8007c5e:	2300      	movs	r3, #0
 8007c60:	ec51 0b17 	vmov	r0, r1, d7
 8007c64:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8007c68:	f7f8 ff4c 	bl	8000b04 <__aeabi_dcmpeq>
 8007c6c:	4680      	mov	r8, r0
 8007c6e:	b158      	cbz	r0, 8007c88 <_dtoa_r+0xd0>
 8007c70:	2301      	movs	r3, #1
 8007c72:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8007c74:	6013      	str	r3, [r2, #0]
 8007c76:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007c78:	b113      	cbz	r3, 8007c80 <_dtoa_r+0xc8>
 8007c7a:	4b84      	ldr	r3, [pc, #528]	@ (8007e8c <_dtoa_r+0x2d4>)
 8007c7c:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8007c7e:	6013      	str	r3, [r2, #0]
 8007c80:	f8df a21c 	ldr.w	sl, [pc, #540]	@ 8007ea0 <_dtoa_r+0x2e8>
 8007c84:	f000 bd32 	b.w	80086ec <_dtoa_r+0xb34>
 8007c88:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8007c8c:	aa16      	add	r2, sp, #88	@ 0x58
 8007c8e:	a917      	add	r1, sp, #92	@ 0x5c
 8007c90:	4658      	mov	r0, fp
 8007c92:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8007c96:	f001 fa41 	bl	800911c <__d2b>
 8007c9a:	4681      	mov	r9, r0
 8007c9c:	2e00      	cmp	r6, #0
 8007c9e:	d075      	beq.n	8007d8c <_dtoa_r+0x1d4>
 8007ca0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007ca2:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8007ca6:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8007caa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007cae:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8007cb2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007cb6:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8007cba:	4619      	mov	r1, r3
 8007cbc:	2200      	movs	r2, #0
 8007cbe:	4b74      	ldr	r3, [pc, #464]	@ (8007e90 <_dtoa_r+0x2d8>)
 8007cc0:	f7f8 fb00 	bl	80002c4 <__aeabi_dsub>
 8007cc4:	a368      	add	r3, pc, #416	@ (adr r3, 8007e68 <_dtoa_r+0x2b0>)
 8007cc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cca:	f7f8 fcb3 	bl	8000634 <__aeabi_dmul>
 8007cce:	a368      	add	r3, pc, #416	@ (adr r3, 8007e70 <_dtoa_r+0x2b8>)
 8007cd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cd4:	f7f8 faf8 	bl	80002c8 <__adddf3>
 8007cd8:	4604      	mov	r4, r0
 8007cda:	460d      	mov	r5, r1
 8007cdc:	4630      	mov	r0, r6
 8007cde:	f7f8 fc3f 	bl	8000560 <__aeabi_i2d>
 8007ce2:	a365      	add	r3, pc, #404	@ (adr r3, 8007e78 <_dtoa_r+0x2c0>)
 8007ce4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ce8:	f7f8 fca4 	bl	8000634 <__aeabi_dmul>
 8007cec:	4602      	mov	r2, r0
 8007cee:	460b      	mov	r3, r1
 8007cf0:	4620      	mov	r0, r4
 8007cf2:	4629      	mov	r1, r5
 8007cf4:	f7f8 fae8 	bl	80002c8 <__adddf3>
 8007cf8:	4604      	mov	r4, r0
 8007cfa:	460d      	mov	r5, r1
 8007cfc:	f7f8 ff4a 	bl	8000b94 <__aeabi_d2iz>
 8007d00:	2200      	movs	r2, #0
 8007d02:	4607      	mov	r7, r0
 8007d04:	2300      	movs	r3, #0
 8007d06:	4620      	mov	r0, r4
 8007d08:	4629      	mov	r1, r5
 8007d0a:	f7f8 ff05 	bl	8000b18 <__aeabi_dcmplt>
 8007d0e:	b140      	cbz	r0, 8007d22 <_dtoa_r+0x16a>
 8007d10:	4638      	mov	r0, r7
 8007d12:	f7f8 fc25 	bl	8000560 <__aeabi_i2d>
 8007d16:	4622      	mov	r2, r4
 8007d18:	462b      	mov	r3, r5
 8007d1a:	f7f8 fef3 	bl	8000b04 <__aeabi_dcmpeq>
 8007d1e:	b900      	cbnz	r0, 8007d22 <_dtoa_r+0x16a>
 8007d20:	3f01      	subs	r7, #1
 8007d22:	2f16      	cmp	r7, #22
 8007d24:	d851      	bhi.n	8007dca <_dtoa_r+0x212>
 8007d26:	4b5b      	ldr	r3, [pc, #364]	@ (8007e94 <_dtoa_r+0x2dc>)
 8007d28:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007d2c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007d30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d34:	f7f8 fef0 	bl	8000b18 <__aeabi_dcmplt>
 8007d38:	2800      	cmp	r0, #0
 8007d3a:	d048      	beq.n	8007dce <_dtoa_r+0x216>
 8007d3c:	3f01      	subs	r7, #1
 8007d3e:	2300      	movs	r3, #0
 8007d40:	9312      	str	r3, [sp, #72]	@ 0x48
 8007d42:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8007d44:	1b9b      	subs	r3, r3, r6
 8007d46:	1e5a      	subs	r2, r3, #1
 8007d48:	bf46      	itte	mi
 8007d4a:	f1c3 0801 	rsbmi	r8, r3, #1
 8007d4e:	2300      	movmi	r3, #0
 8007d50:	f04f 0800 	movpl.w	r8, #0
 8007d54:	9208      	str	r2, [sp, #32]
 8007d56:	bf48      	it	mi
 8007d58:	9308      	strmi	r3, [sp, #32]
 8007d5a:	2f00      	cmp	r7, #0
 8007d5c:	db39      	blt.n	8007dd2 <_dtoa_r+0x21a>
 8007d5e:	9b08      	ldr	r3, [sp, #32]
 8007d60:	970f      	str	r7, [sp, #60]	@ 0x3c
 8007d62:	443b      	add	r3, r7
 8007d64:	9308      	str	r3, [sp, #32]
 8007d66:	2300      	movs	r3, #0
 8007d68:	930a      	str	r3, [sp, #40]	@ 0x28
 8007d6a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007d6c:	2b09      	cmp	r3, #9
 8007d6e:	d864      	bhi.n	8007e3a <_dtoa_r+0x282>
 8007d70:	2b05      	cmp	r3, #5
 8007d72:	bfc5      	ittet	gt
 8007d74:	3b04      	subgt	r3, #4
 8007d76:	2400      	movgt	r4, #0
 8007d78:	2401      	movle	r4, #1
 8007d7a:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8007d7c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007d7e:	3b02      	subs	r3, #2
 8007d80:	2b03      	cmp	r3, #3
 8007d82:	d865      	bhi.n	8007e50 <_dtoa_r+0x298>
 8007d84:	e8df f003 	tbb	[pc, r3]
 8007d88:	5737392c 	.word	0x5737392c
 8007d8c:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8007d90:	441e      	add	r6, r3
 8007d92:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8007d96:	2b20      	cmp	r3, #32
 8007d98:	bfc9      	itett	gt
 8007d9a:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8007d9e:	f1c3 0320 	rsble	r3, r3, #32
 8007da2:	409f      	lslgt	r7, r3
 8007da4:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8007da8:	bfd8      	it	le
 8007daa:	fa04 f003 	lslle.w	r0, r4, r3
 8007dae:	f106 36ff 	add.w	r6, r6, #4294967295
 8007db2:	bfc4      	itt	gt
 8007db4:	fa24 f303 	lsrgt.w	r3, r4, r3
 8007db8:	ea47 0003 	orrgt.w	r0, r7, r3
 8007dbc:	f7f8 fbc0 	bl	8000540 <__aeabi_ui2d>
 8007dc0:	2201      	movs	r2, #1
 8007dc2:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8007dc6:	9214      	str	r2, [sp, #80]	@ 0x50
 8007dc8:	e777      	b.n	8007cba <_dtoa_r+0x102>
 8007dca:	2301      	movs	r3, #1
 8007dcc:	e7b8      	b.n	8007d40 <_dtoa_r+0x188>
 8007dce:	9012      	str	r0, [sp, #72]	@ 0x48
 8007dd0:	e7b7      	b.n	8007d42 <_dtoa_r+0x18a>
 8007dd2:	427b      	negs	r3, r7
 8007dd4:	eba8 0807 	sub.w	r8, r8, r7
 8007dd8:	930a      	str	r3, [sp, #40]	@ 0x28
 8007dda:	2300      	movs	r3, #0
 8007ddc:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007dde:	e7c4      	b.n	8007d6a <_dtoa_r+0x1b2>
 8007de0:	2300      	movs	r3, #0
 8007de2:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007de4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	dc35      	bgt.n	8007e56 <_dtoa_r+0x29e>
 8007dea:	2301      	movs	r3, #1
 8007dec:	461a      	mov	r2, r3
 8007dee:	9300      	str	r3, [sp, #0]
 8007df0:	9307      	str	r3, [sp, #28]
 8007df2:	920e      	str	r2, [sp, #56]	@ 0x38
 8007df4:	e00b      	b.n	8007e0e <_dtoa_r+0x256>
 8007df6:	2301      	movs	r3, #1
 8007df8:	e7f3      	b.n	8007de2 <_dtoa_r+0x22a>
 8007dfa:	2300      	movs	r3, #0
 8007dfc:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007dfe:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007e00:	18fb      	adds	r3, r7, r3
 8007e02:	9300      	str	r3, [sp, #0]
 8007e04:	3301      	adds	r3, #1
 8007e06:	2b01      	cmp	r3, #1
 8007e08:	9307      	str	r3, [sp, #28]
 8007e0a:	bfb8      	it	lt
 8007e0c:	2301      	movlt	r3, #1
 8007e0e:	f8db 001c 	ldr.w	r0, [fp, #28]
 8007e12:	2100      	movs	r1, #0
 8007e14:	2204      	movs	r2, #4
 8007e16:	f102 0514 	add.w	r5, r2, #20
 8007e1a:	429d      	cmp	r5, r3
 8007e1c:	d91f      	bls.n	8007e5e <_dtoa_r+0x2a6>
 8007e1e:	6041      	str	r1, [r0, #4]
 8007e20:	4658      	mov	r0, fp
 8007e22:	f000 fd8d 	bl	8008940 <_Balloc>
 8007e26:	4682      	mov	sl, r0
 8007e28:	2800      	cmp	r0, #0
 8007e2a:	d13b      	bne.n	8007ea4 <_dtoa_r+0x2ec>
 8007e2c:	4b1a      	ldr	r3, [pc, #104]	@ (8007e98 <_dtoa_r+0x2e0>)
 8007e2e:	4602      	mov	r2, r0
 8007e30:	f240 11af 	movw	r1, #431	@ 0x1af
 8007e34:	e6d7      	b.n	8007be6 <_dtoa_r+0x2e>
 8007e36:	2301      	movs	r3, #1
 8007e38:	e7e0      	b.n	8007dfc <_dtoa_r+0x244>
 8007e3a:	2401      	movs	r4, #1
 8007e3c:	2300      	movs	r3, #0
 8007e3e:	940b      	str	r4, [sp, #44]	@ 0x2c
 8007e40:	9309      	str	r3, [sp, #36]	@ 0x24
 8007e42:	f04f 33ff 	mov.w	r3, #4294967295
 8007e46:	2200      	movs	r2, #0
 8007e48:	9300      	str	r3, [sp, #0]
 8007e4a:	9307      	str	r3, [sp, #28]
 8007e4c:	2312      	movs	r3, #18
 8007e4e:	e7d0      	b.n	8007df2 <_dtoa_r+0x23a>
 8007e50:	2301      	movs	r3, #1
 8007e52:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007e54:	e7f5      	b.n	8007e42 <_dtoa_r+0x28a>
 8007e56:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007e58:	9300      	str	r3, [sp, #0]
 8007e5a:	9307      	str	r3, [sp, #28]
 8007e5c:	e7d7      	b.n	8007e0e <_dtoa_r+0x256>
 8007e5e:	3101      	adds	r1, #1
 8007e60:	0052      	lsls	r2, r2, #1
 8007e62:	e7d8      	b.n	8007e16 <_dtoa_r+0x25e>
 8007e64:	f3af 8000 	nop.w
 8007e68:	636f4361 	.word	0x636f4361
 8007e6c:	3fd287a7 	.word	0x3fd287a7
 8007e70:	8b60c8b3 	.word	0x8b60c8b3
 8007e74:	3fc68a28 	.word	0x3fc68a28
 8007e78:	509f79fb 	.word	0x509f79fb
 8007e7c:	3fd34413 	.word	0x3fd34413
 8007e80:	0800b2ee 	.word	0x0800b2ee
 8007e84:	0800b305 	.word	0x0800b305
 8007e88:	7ff00000 	.word	0x7ff00000
 8007e8c:	0800b2b9 	.word	0x0800b2b9
 8007e90:	3ff80000 	.word	0x3ff80000
 8007e94:	0800b400 	.word	0x0800b400
 8007e98:	0800b35d 	.word	0x0800b35d
 8007e9c:	0800b2ea 	.word	0x0800b2ea
 8007ea0:	0800b2b8 	.word	0x0800b2b8
 8007ea4:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007ea8:	6018      	str	r0, [r3, #0]
 8007eaa:	9b07      	ldr	r3, [sp, #28]
 8007eac:	2b0e      	cmp	r3, #14
 8007eae:	f200 80a4 	bhi.w	8007ffa <_dtoa_r+0x442>
 8007eb2:	2c00      	cmp	r4, #0
 8007eb4:	f000 80a1 	beq.w	8007ffa <_dtoa_r+0x442>
 8007eb8:	2f00      	cmp	r7, #0
 8007eba:	dd33      	ble.n	8007f24 <_dtoa_r+0x36c>
 8007ebc:	f007 020f 	and.w	r2, r7, #15
 8007ec0:	4bac      	ldr	r3, [pc, #688]	@ (8008174 <_dtoa_r+0x5bc>)
 8007ec2:	05f8      	lsls	r0, r7, #23
 8007ec4:	ea4f 1427 	mov.w	r4, r7, asr #4
 8007ec8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007ecc:	ed93 7b00 	vldr	d7, [r3]
 8007ed0:	ed8d 7b04 	vstr	d7, [sp, #16]
 8007ed4:	d516      	bpl.n	8007f04 <_dtoa_r+0x34c>
 8007ed6:	4ba8      	ldr	r3, [pc, #672]	@ (8008178 <_dtoa_r+0x5c0>)
 8007ed8:	f004 040f 	and.w	r4, r4, #15
 8007edc:	2603      	movs	r6, #3
 8007ede:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007ee2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007ee6:	f7f8 fccf 	bl	8000888 <__aeabi_ddiv>
 8007eea:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007eee:	4da2      	ldr	r5, [pc, #648]	@ (8008178 <_dtoa_r+0x5c0>)
 8007ef0:	b954      	cbnz	r4, 8007f08 <_dtoa_r+0x350>
 8007ef2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007ef6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007efa:	f7f8 fcc5 	bl	8000888 <__aeabi_ddiv>
 8007efe:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007f02:	e028      	b.n	8007f56 <_dtoa_r+0x39e>
 8007f04:	2602      	movs	r6, #2
 8007f06:	e7f2      	b.n	8007eee <_dtoa_r+0x336>
 8007f08:	07e1      	lsls	r1, r4, #31
 8007f0a:	d508      	bpl.n	8007f1e <_dtoa_r+0x366>
 8007f0c:	3601      	adds	r6, #1
 8007f0e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007f12:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007f16:	f7f8 fb8d 	bl	8000634 <__aeabi_dmul>
 8007f1a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007f1e:	1064      	asrs	r4, r4, #1
 8007f20:	3508      	adds	r5, #8
 8007f22:	e7e5      	b.n	8007ef0 <_dtoa_r+0x338>
 8007f24:	f000 80d2 	beq.w	80080cc <_dtoa_r+0x514>
 8007f28:	427c      	negs	r4, r7
 8007f2a:	4b92      	ldr	r3, [pc, #584]	@ (8008174 <_dtoa_r+0x5bc>)
 8007f2c:	4d92      	ldr	r5, [pc, #584]	@ (8008178 <_dtoa_r+0x5c0>)
 8007f2e:	2602      	movs	r6, #2
 8007f30:	f004 020f 	and.w	r2, r4, #15
 8007f34:	1124      	asrs	r4, r4, #4
 8007f36:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007f3a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007f3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f42:	f7f8 fb77 	bl	8000634 <__aeabi_dmul>
 8007f46:	2300      	movs	r3, #0
 8007f48:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007f4c:	2c00      	cmp	r4, #0
 8007f4e:	f040 80b2 	bne.w	80080b6 <_dtoa_r+0x4fe>
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d1d3      	bne.n	8007efe <_dtoa_r+0x346>
 8007f56:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007f58:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	f000 80b7 	beq.w	80080d0 <_dtoa_r+0x518>
 8007f62:	2200      	movs	r2, #0
 8007f64:	4b85      	ldr	r3, [pc, #532]	@ (800817c <_dtoa_r+0x5c4>)
 8007f66:	4620      	mov	r0, r4
 8007f68:	4629      	mov	r1, r5
 8007f6a:	f7f8 fdd5 	bl	8000b18 <__aeabi_dcmplt>
 8007f6e:	2800      	cmp	r0, #0
 8007f70:	f000 80ae 	beq.w	80080d0 <_dtoa_r+0x518>
 8007f74:	9b07      	ldr	r3, [sp, #28]
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	f000 80aa 	beq.w	80080d0 <_dtoa_r+0x518>
 8007f7c:	9b00      	ldr	r3, [sp, #0]
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	dd37      	ble.n	8007ff2 <_dtoa_r+0x43a>
 8007f82:	1e7b      	subs	r3, r7, #1
 8007f84:	4620      	mov	r0, r4
 8007f86:	2200      	movs	r2, #0
 8007f88:	4629      	mov	r1, r5
 8007f8a:	9304      	str	r3, [sp, #16]
 8007f8c:	3601      	adds	r6, #1
 8007f8e:	4b7c      	ldr	r3, [pc, #496]	@ (8008180 <_dtoa_r+0x5c8>)
 8007f90:	f7f8 fb50 	bl	8000634 <__aeabi_dmul>
 8007f94:	9c00      	ldr	r4, [sp, #0]
 8007f96:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007f9a:	4630      	mov	r0, r6
 8007f9c:	f7f8 fae0 	bl	8000560 <__aeabi_i2d>
 8007fa0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007fa4:	f7f8 fb46 	bl	8000634 <__aeabi_dmul>
 8007fa8:	2200      	movs	r2, #0
 8007faa:	4b76      	ldr	r3, [pc, #472]	@ (8008184 <_dtoa_r+0x5cc>)
 8007fac:	f7f8 f98c 	bl	80002c8 <__adddf3>
 8007fb0:	4605      	mov	r5, r0
 8007fb2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8007fb6:	2c00      	cmp	r4, #0
 8007fb8:	f040 808d 	bne.w	80080d6 <_dtoa_r+0x51e>
 8007fbc:	2200      	movs	r2, #0
 8007fbe:	4b72      	ldr	r3, [pc, #456]	@ (8008188 <_dtoa_r+0x5d0>)
 8007fc0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007fc4:	f7f8 f97e 	bl	80002c4 <__aeabi_dsub>
 8007fc8:	4602      	mov	r2, r0
 8007fca:	460b      	mov	r3, r1
 8007fcc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007fd0:	462a      	mov	r2, r5
 8007fd2:	4633      	mov	r3, r6
 8007fd4:	f7f8 fdbe 	bl	8000b54 <__aeabi_dcmpgt>
 8007fd8:	2800      	cmp	r0, #0
 8007fda:	f040 828b 	bne.w	80084f4 <_dtoa_r+0x93c>
 8007fde:	462a      	mov	r2, r5
 8007fe0:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8007fe4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007fe8:	f7f8 fd96 	bl	8000b18 <__aeabi_dcmplt>
 8007fec:	2800      	cmp	r0, #0
 8007fee:	f040 8128 	bne.w	8008242 <_dtoa_r+0x68a>
 8007ff2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8007ff6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8007ffa:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	f2c0 815a 	blt.w	80082b6 <_dtoa_r+0x6fe>
 8008002:	2f0e      	cmp	r7, #14
 8008004:	f300 8157 	bgt.w	80082b6 <_dtoa_r+0x6fe>
 8008008:	4b5a      	ldr	r3, [pc, #360]	@ (8008174 <_dtoa_r+0x5bc>)
 800800a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800800e:	ed93 7b00 	vldr	d7, [r3]
 8008012:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008014:	2b00      	cmp	r3, #0
 8008016:	ed8d 7b00 	vstr	d7, [sp]
 800801a:	da03      	bge.n	8008024 <_dtoa_r+0x46c>
 800801c:	9b07      	ldr	r3, [sp, #28]
 800801e:	2b00      	cmp	r3, #0
 8008020:	f340 8101 	ble.w	8008226 <_dtoa_r+0x66e>
 8008024:	4656      	mov	r6, sl
 8008026:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800802a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800802e:	4620      	mov	r0, r4
 8008030:	4629      	mov	r1, r5
 8008032:	f7f8 fc29 	bl	8000888 <__aeabi_ddiv>
 8008036:	f7f8 fdad 	bl	8000b94 <__aeabi_d2iz>
 800803a:	4680      	mov	r8, r0
 800803c:	f7f8 fa90 	bl	8000560 <__aeabi_i2d>
 8008040:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008044:	f7f8 faf6 	bl	8000634 <__aeabi_dmul>
 8008048:	4602      	mov	r2, r0
 800804a:	4620      	mov	r0, r4
 800804c:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8008050:	460b      	mov	r3, r1
 8008052:	4629      	mov	r1, r5
 8008054:	f7f8 f936 	bl	80002c4 <__aeabi_dsub>
 8008058:	9d07      	ldr	r5, [sp, #28]
 800805a:	f806 4b01 	strb.w	r4, [r6], #1
 800805e:	eba6 040a 	sub.w	r4, r6, sl
 8008062:	4602      	mov	r2, r0
 8008064:	460b      	mov	r3, r1
 8008066:	42a5      	cmp	r5, r4
 8008068:	f040 8117 	bne.w	800829a <_dtoa_r+0x6e2>
 800806c:	f7f8 f92c 	bl	80002c8 <__adddf3>
 8008070:	4604      	mov	r4, r0
 8008072:	460d      	mov	r5, r1
 8008074:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008078:	f7f8 fd6c 	bl	8000b54 <__aeabi_dcmpgt>
 800807c:	2800      	cmp	r0, #0
 800807e:	f040 80f9 	bne.w	8008274 <_dtoa_r+0x6bc>
 8008082:	4620      	mov	r0, r4
 8008084:	4629      	mov	r1, r5
 8008086:	e9dd 2300 	ldrd	r2, r3, [sp]
 800808a:	f7f8 fd3b 	bl	8000b04 <__aeabi_dcmpeq>
 800808e:	b118      	cbz	r0, 8008098 <_dtoa_r+0x4e0>
 8008090:	f018 0f01 	tst.w	r8, #1
 8008094:	f040 80ee 	bne.w	8008274 <_dtoa_r+0x6bc>
 8008098:	4649      	mov	r1, r9
 800809a:	4658      	mov	r0, fp
 800809c:	f000 fc90 	bl	80089c0 <_Bfree>
 80080a0:	2300      	movs	r3, #0
 80080a2:	3701      	adds	r7, #1
 80080a4:	7033      	strb	r3, [r6, #0]
 80080a6:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80080a8:	601f      	str	r7, [r3, #0]
 80080aa:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	f000 831d 	beq.w	80086ec <_dtoa_r+0xb34>
 80080b2:	601e      	str	r6, [r3, #0]
 80080b4:	e31a      	b.n	80086ec <_dtoa_r+0xb34>
 80080b6:	07e2      	lsls	r2, r4, #31
 80080b8:	d505      	bpl.n	80080c6 <_dtoa_r+0x50e>
 80080ba:	3601      	adds	r6, #1
 80080bc:	e9d5 2300 	ldrd	r2, r3, [r5]
 80080c0:	f7f8 fab8 	bl	8000634 <__aeabi_dmul>
 80080c4:	2301      	movs	r3, #1
 80080c6:	1064      	asrs	r4, r4, #1
 80080c8:	3508      	adds	r5, #8
 80080ca:	e73f      	b.n	8007f4c <_dtoa_r+0x394>
 80080cc:	2602      	movs	r6, #2
 80080ce:	e742      	b.n	8007f56 <_dtoa_r+0x39e>
 80080d0:	9c07      	ldr	r4, [sp, #28]
 80080d2:	9704      	str	r7, [sp, #16]
 80080d4:	e761      	b.n	8007f9a <_dtoa_r+0x3e2>
 80080d6:	4b27      	ldr	r3, [pc, #156]	@ (8008174 <_dtoa_r+0x5bc>)
 80080d8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80080da:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80080de:	4454      	add	r4, sl
 80080e0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80080e4:	2900      	cmp	r1, #0
 80080e6:	d053      	beq.n	8008190 <_dtoa_r+0x5d8>
 80080e8:	2000      	movs	r0, #0
 80080ea:	4928      	ldr	r1, [pc, #160]	@ (800818c <_dtoa_r+0x5d4>)
 80080ec:	f7f8 fbcc 	bl	8000888 <__aeabi_ddiv>
 80080f0:	4633      	mov	r3, r6
 80080f2:	4656      	mov	r6, sl
 80080f4:	462a      	mov	r2, r5
 80080f6:	f7f8 f8e5 	bl	80002c4 <__aeabi_dsub>
 80080fa:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80080fe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008102:	f7f8 fd47 	bl	8000b94 <__aeabi_d2iz>
 8008106:	4605      	mov	r5, r0
 8008108:	f7f8 fa2a 	bl	8000560 <__aeabi_i2d>
 800810c:	4602      	mov	r2, r0
 800810e:	460b      	mov	r3, r1
 8008110:	3530      	adds	r5, #48	@ 0x30
 8008112:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008116:	f7f8 f8d5 	bl	80002c4 <__aeabi_dsub>
 800811a:	4602      	mov	r2, r0
 800811c:	460b      	mov	r3, r1
 800811e:	f806 5b01 	strb.w	r5, [r6], #1
 8008122:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008126:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800812a:	f7f8 fcf5 	bl	8000b18 <__aeabi_dcmplt>
 800812e:	2800      	cmp	r0, #0
 8008130:	d171      	bne.n	8008216 <_dtoa_r+0x65e>
 8008132:	2000      	movs	r0, #0
 8008134:	4911      	ldr	r1, [pc, #68]	@ (800817c <_dtoa_r+0x5c4>)
 8008136:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800813a:	f7f8 f8c3 	bl	80002c4 <__aeabi_dsub>
 800813e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008142:	f7f8 fce9 	bl	8000b18 <__aeabi_dcmplt>
 8008146:	2800      	cmp	r0, #0
 8008148:	f040 8095 	bne.w	8008276 <_dtoa_r+0x6be>
 800814c:	42a6      	cmp	r6, r4
 800814e:	f43f af50 	beq.w	8007ff2 <_dtoa_r+0x43a>
 8008152:	2200      	movs	r2, #0
 8008154:	4b0a      	ldr	r3, [pc, #40]	@ (8008180 <_dtoa_r+0x5c8>)
 8008156:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800815a:	f7f8 fa6b 	bl	8000634 <__aeabi_dmul>
 800815e:	2200      	movs	r2, #0
 8008160:	4b07      	ldr	r3, [pc, #28]	@ (8008180 <_dtoa_r+0x5c8>)
 8008162:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008166:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800816a:	f7f8 fa63 	bl	8000634 <__aeabi_dmul>
 800816e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008172:	e7c4      	b.n	80080fe <_dtoa_r+0x546>
 8008174:	0800b400 	.word	0x0800b400
 8008178:	0800b3d8 	.word	0x0800b3d8
 800817c:	3ff00000 	.word	0x3ff00000
 8008180:	40240000 	.word	0x40240000
 8008184:	401c0000 	.word	0x401c0000
 8008188:	40140000 	.word	0x40140000
 800818c:	3fe00000 	.word	0x3fe00000
 8008190:	4631      	mov	r1, r6
 8008192:	4656      	mov	r6, sl
 8008194:	4628      	mov	r0, r5
 8008196:	f7f8 fa4d 	bl	8000634 <__aeabi_dmul>
 800819a:	9415      	str	r4, [sp, #84]	@ 0x54
 800819c:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80081a0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80081a4:	f7f8 fcf6 	bl	8000b94 <__aeabi_d2iz>
 80081a8:	4605      	mov	r5, r0
 80081aa:	f7f8 f9d9 	bl	8000560 <__aeabi_i2d>
 80081ae:	4602      	mov	r2, r0
 80081b0:	3530      	adds	r5, #48	@ 0x30
 80081b2:	460b      	mov	r3, r1
 80081b4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80081b8:	f7f8 f884 	bl	80002c4 <__aeabi_dsub>
 80081bc:	f806 5b01 	strb.w	r5, [r6], #1
 80081c0:	4602      	mov	r2, r0
 80081c2:	460b      	mov	r3, r1
 80081c4:	42a6      	cmp	r6, r4
 80081c6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80081ca:	f04f 0200 	mov.w	r2, #0
 80081ce:	d124      	bne.n	800821a <_dtoa_r+0x662>
 80081d0:	4bac      	ldr	r3, [pc, #688]	@ (8008484 <_dtoa_r+0x8cc>)
 80081d2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80081d6:	f7f8 f877 	bl	80002c8 <__adddf3>
 80081da:	4602      	mov	r2, r0
 80081dc:	460b      	mov	r3, r1
 80081de:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80081e2:	f7f8 fcb7 	bl	8000b54 <__aeabi_dcmpgt>
 80081e6:	2800      	cmp	r0, #0
 80081e8:	d145      	bne.n	8008276 <_dtoa_r+0x6be>
 80081ea:	2000      	movs	r0, #0
 80081ec:	49a5      	ldr	r1, [pc, #660]	@ (8008484 <_dtoa_r+0x8cc>)
 80081ee:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80081f2:	f7f8 f867 	bl	80002c4 <__aeabi_dsub>
 80081f6:	4602      	mov	r2, r0
 80081f8:	460b      	mov	r3, r1
 80081fa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80081fe:	f7f8 fc8b 	bl	8000b18 <__aeabi_dcmplt>
 8008202:	2800      	cmp	r0, #0
 8008204:	f43f aef5 	beq.w	8007ff2 <_dtoa_r+0x43a>
 8008208:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800820a:	1e73      	subs	r3, r6, #1
 800820c:	9315      	str	r3, [sp, #84]	@ 0x54
 800820e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008212:	2b30      	cmp	r3, #48	@ 0x30
 8008214:	d0f8      	beq.n	8008208 <_dtoa_r+0x650>
 8008216:	9f04      	ldr	r7, [sp, #16]
 8008218:	e73e      	b.n	8008098 <_dtoa_r+0x4e0>
 800821a:	4b9b      	ldr	r3, [pc, #620]	@ (8008488 <_dtoa_r+0x8d0>)
 800821c:	f7f8 fa0a 	bl	8000634 <__aeabi_dmul>
 8008220:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008224:	e7bc      	b.n	80081a0 <_dtoa_r+0x5e8>
 8008226:	d10c      	bne.n	8008242 <_dtoa_r+0x68a>
 8008228:	2200      	movs	r2, #0
 800822a:	4b98      	ldr	r3, [pc, #608]	@ (800848c <_dtoa_r+0x8d4>)
 800822c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008230:	f7f8 fa00 	bl	8000634 <__aeabi_dmul>
 8008234:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008238:	f7f8 fc82 	bl	8000b40 <__aeabi_dcmpge>
 800823c:	2800      	cmp	r0, #0
 800823e:	f000 8157 	beq.w	80084f0 <_dtoa_r+0x938>
 8008242:	2400      	movs	r4, #0
 8008244:	4625      	mov	r5, r4
 8008246:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008248:	4656      	mov	r6, sl
 800824a:	43db      	mvns	r3, r3
 800824c:	9304      	str	r3, [sp, #16]
 800824e:	2700      	movs	r7, #0
 8008250:	4621      	mov	r1, r4
 8008252:	4658      	mov	r0, fp
 8008254:	f000 fbb4 	bl	80089c0 <_Bfree>
 8008258:	2d00      	cmp	r5, #0
 800825a:	d0dc      	beq.n	8008216 <_dtoa_r+0x65e>
 800825c:	b12f      	cbz	r7, 800826a <_dtoa_r+0x6b2>
 800825e:	42af      	cmp	r7, r5
 8008260:	d003      	beq.n	800826a <_dtoa_r+0x6b2>
 8008262:	4639      	mov	r1, r7
 8008264:	4658      	mov	r0, fp
 8008266:	f000 fbab 	bl	80089c0 <_Bfree>
 800826a:	4629      	mov	r1, r5
 800826c:	4658      	mov	r0, fp
 800826e:	f000 fba7 	bl	80089c0 <_Bfree>
 8008272:	e7d0      	b.n	8008216 <_dtoa_r+0x65e>
 8008274:	9704      	str	r7, [sp, #16]
 8008276:	4633      	mov	r3, r6
 8008278:	461e      	mov	r6, r3
 800827a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800827e:	2a39      	cmp	r2, #57	@ 0x39
 8008280:	d107      	bne.n	8008292 <_dtoa_r+0x6da>
 8008282:	459a      	cmp	sl, r3
 8008284:	d1f8      	bne.n	8008278 <_dtoa_r+0x6c0>
 8008286:	9a04      	ldr	r2, [sp, #16]
 8008288:	3201      	adds	r2, #1
 800828a:	9204      	str	r2, [sp, #16]
 800828c:	2230      	movs	r2, #48	@ 0x30
 800828e:	f88a 2000 	strb.w	r2, [sl]
 8008292:	781a      	ldrb	r2, [r3, #0]
 8008294:	3201      	adds	r2, #1
 8008296:	701a      	strb	r2, [r3, #0]
 8008298:	e7bd      	b.n	8008216 <_dtoa_r+0x65e>
 800829a:	2200      	movs	r2, #0
 800829c:	4b7a      	ldr	r3, [pc, #488]	@ (8008488 <_dtoa_r+0x8d0>)
 800829e:	f7f8 f9c9 	bl	8000634 <__aeabi_dmul>
 80082a2:	2200      	movs	r2, #0
 80082a4:	2300      	movs	r3, #0
 80082a6:	4604      	mov	r4, r0
 80082a8:	460d      	mov	r5, r1
 80082aa:	f7f8 fc2b 	bl	8000b04 <__aeabi_dcmpeq>
 80082ae:	2800      	cmp	r0, #0
 80082b0:	f43f aebb 	beq.w	800802a <_dtoa_r+0x472>
 80082b4:	e6f0      	b.n	8008098 <_dtoa_r+0x4e0>
 80082b6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80082b8:	2a00      	cmp	r2, #0
 80082ba:	f000 80db 	beq.w	8008474 <_dtoa_r+0x8bc>
 80082be:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80082c0:	2a01      	cmp	r2, #1
 80082c2:	f300 80bf 	bgt.w	8008444 <_dtoa_r+0x88c>
 80082c6:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80082c8:	2a00      	cmp	r2, #0
 80082ca:	f000 80b7 	beq.w	800843c <_dtoa_r+0x884>
 80082ce:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80082d2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80082d4:	4646      	mov	r6, r8
 80082d6:	9a08      	ldr	r2, [sp, #32]
 80082d8:	2101      	movs	r1, #1
 80082da:	4658      	mov	r0, fp
 80082dc:	4498      	add	r8, r3
 80082de:	441a      	add	r2, r3
 80082e0:	9208      	str	r2, [sp, #32]
 80082e2:	f000 fc6d 	bl	8008bc0 <__i2b>
 80082e6:	4605      	mov	r5, r0
 80082e8:	b15e      	cbz	r6, 8008302 <_dtoa_r+0x74a>
 80082ea:	9b08      	ldr	r3, [sp, #32]
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	dd08      	ble.n	8008302 <_dtoa_r+0x74a>
 80082f0:	42b3      	cmp	r3, r6
 80082f2:	9a08      	ldr	r2, [sp, #32]
 80082f4:	bfa8      	it	ge
 80082f6:	4633      	movge	r3, r6
 80082f8:	eba8 0803 	sub.w	r8, r8, r3
 80082fc:	1af6      	subs	r6, r6, r3
 80082fe:	1ad3      	subs	r3, r2, r3
 8008300:	9308      	str	r3, [sp, #32]
 8008302:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008304:	b1f3      	cbz	r3, 8008344 <_dtoa_r+0x78c>
 8008306:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008308:	2b00      	cmp	r3, #0
 800830a:	f000 80b7 	beq.w	800847c <_dtoa_r+0x8c4>
 800830e:	b18c      	cbz	r4, 8008334 <_dtoa_r+0x77c>
 8008310:	4629      	mov	r1, r5
 8008312:	4622      	mov	r2, r4
 8008314:	4658      	mov	r0, fp
 8008316:	f000 fd13 	bl	8008d40 <__pow5mult>
 800831a:	464a      	mov	r2, r9
 800831c:	4601      	mov	r1, r0
 800831e:	4605      	mov	r5, r0
 8008320:	4658      	mov	r0, fp
 8008322:	f000 fc63 	bl	8008bec <__multiply>
 8008326:	4649      	mov	r1, r9
 8008328:	9004      	str	r0, [sp, #16]
 800832a:	4658      	mov	r0, fp
 800832c:	f000 fb48 	bl	80089c0 <_Bfree>
 8008330:	9b04      	ldr	r3, [sp, #16]
 8008332:	4699      	mov	r9, r3
 8008334:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008336:	1b1a      	subs	r2, r3, r4
 8008338:	d004      	beq.n	8008344 <_dtoa_r+0x78c>
 800833a:	4649      	mov	r1, r9
 800833c:	4658      	mov	r0, fp
 800833e:	f000 fcff 	bl	8008d40 <__pow5mult>
 8008342:	4681      	mov	r9, r0
 8008344:	2101      	movs	r1, #1
 8008346:	4658      	mov	r0, fp
 8008348:	f000 fc3a 	bl	8008bc0 <__i2b>
 800834c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800834e:	4604      	mov	r4, r0
 8008350:	2b00      	cmp	r3, #0
 8008352:	f000 81cf 	beq.w	80086f4 <_dtoa_r+0xb3c>
 8008356:	461a      	mov	r2, r3
 8008358:	4601      	mov	r1, r0
 800835a:	4658      	mov	r0, fp
 800835c:	f000 fcf0 	bl	8008d40 <__pow5mult>
 8008360:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008362:	4604      	mov	r4, r0
 8008364:	2b01      	cmp	r3, #1
 8008366:	f300 8095 	bgt.w	8008494 <_dtoa_r+0x8dc>
 800836a:	9b02      	ldr	r3, [sp, #8]
 800836c:	2b00      	cmp	r3, #0
 800836e:	f040 8087 	bne.w	8008480 <_dtoa_r+0x8c8>
 8008372:	9b03      	ldr	r3, [sp, #12]
 8008374:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008378:	2b00      	cmp	r3, #0
 800837a:	f040 8089 	bne.w	8008490 <_dtoa_r+0x8d8>
 800837e:	9b03      	ldr	r3, [sp, #12]
 8008380:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008384:	0d1b      	lsrs	r3, r3, #20
 8008386:	051b      	lsls	r3, r3, #20
 8008388:	b12b      	cbz	r3, 8008396 <_dtoa_r+0x7de>
 800838a:	9b08      	ldr	r3, [sp, #32]
 800838c:	f108 0801 	add.w	r8, r8, #1
 8008390:	3301      	adds	r3, #1
 8008392:	9308      	str	r3, [sp, #32]
 8008394:	2301      	movs	r3, #1
 8008396:	930a      	str	r3, [sp, #40]	@ 0x28
 8008398:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800839a:	2b00      	cmp	r3, #0
 800839c:	f000 81b0 	beq.w	8008700 <_dtoa_r+0xb48>
 80083a0:	6923      	ldr	r3, [r4, #16]
 80083a2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80083a6:	6918      	ldr	r0, [r3, #16]
 80083a8:	f000 fbbe 	bl	8008b28 <__hi0bits>
 80083ac:	f1c0 0020 	rsb	r0, r0, #32
 80083b0:	9b08      	ldr	r3, [sp, #32]
 80083b2:	4418      	add	r0, r3
 80083b4:	f010 001f 	ands.w	r0, r0, #31
 80083b8:	d077      	beq.n	80084aa <_dtoa_r+0x8f2>
 80083ba:	f1c0 0320 	rsb	r3, r0, #32
 80083be:	2b04      	cmp	r3, #4
 80083c0:	dd6b      	ble.n	800849a <_dtoa_r+0x8e2>
 80083c2:	f1c0 001c 	rsb	r0, r0, #28
 80083c6:	9b08      	ldr	r3, [sp, #32]
 80083c8:	4480      	add	r8, r0
 80083ca:	4403      	add	r3, r0
 80083cc:	4406      	add	r6, r0
 80083ce:	9308      	str	r3, [sp, #32]
 80083d0:	f1b8 0f00 	cmp.w	r8, #0
 80083d4:	dd05      	ble.n	80083e2 <_dtoa_r+0x82a>
 80083d6:	4649      	mov	r1, r9
 80083d8:	4642      	mov	r2, r8
 80083da:	4658      	mov	r0, fp
 80083dc:	f000 fd0a 	bl	8008df4 <__lshift>
 80083e0:	4681      	mov	r9, r0
 80083e2:	9b08      	ldr	r3, [sp, #32]
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	dd05      	ble.n	80083f4 <_dtoa_r+0x83c>
 80083e8:	4621      	mov	r1, r4
 80083ea:	461a      	mov	r2, r3
 80083ec:	4658      	mov	r0, fp
 80083ee:	f000 fd01 	bl	8008df4 <__lshift>
 80083f2:	4604      	mov	r4, r0
 80083f4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d059      	beq.n	80084ae <_dtoa_r+0x8f6>
 80083fa:	4621      	mov	r1, r4
 80083fc:	4648      	mov	r0, r9
 80083fe:	f000 fd65 	bl	8008ecc <__mcmp>
 8008402:	2800      	cmp	r0, #0
 8008404:	da53      	bge.n	80084ae <_dtoa_r+0x8f6>
 8008406:	1e7b      	subs	r3, r7, #1
 8008408:	4649      	mov	r1, r9
 800840a:	220a      	movs	r2, #10
 800840c:	4658      	mov	r0, fp
 800840e:	9304      	str	r3, [sp, #16]
 8008410:	2300      	movs	r3, #0
 8008412:	f000 faf7 	bl	8008a04 <__multadd>
 8008416:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008418:	4681      	mov	r9, r0
 800841a:	2b00      	cmp	r3, #0
 800841c:	f000 8172 	beq.w	8008704 <_dtoa_r+0xb4c>
 8008420:	2300      	movs	r3, #0
 8008422:	4629      	mov	r1, r5
 8008424:	220a      	movs	r2, #10
 8008426:	4658      	mov	r0, fp
 8008428:	f000 faec 	bl	8008a04 <__multadd>
 800842c:	9b00      	ldr	r3, [sp, #0]
 800842e:	4605      	mov	r5, r0
 8008430:	2b00      	cmp	r3, #0
 8008432:	dc67      	bgt.n	8008504 <_dtoa_r+0x94c>
 8008434:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008436:	2b02      	cmp	r3, #2
 8008438:	dc41      	bgt.n	80084be <_dtoa_r+0x906>
 800843a:	e063      	b.n	8008504 <_dtoa_r+0x94c>
 800843c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800843e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8008442:	e746      	b.n	80082d2 <_dtoa_r+0x71a>
 8008444:	9b07      	ldr	r3, [sp, #28]
 8008446:	1e5c      	subs	r4, r3, #1
 8008448:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800844a:	42a3      	cmp	r3, r4
 800844c:	bfb7      	itett	lt
 800844e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8008450:	1b1c      	subge	r4, r3, r4
 8008452:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8008454:	1ae3      	sublt	r3, r4, r3
 8008456:	bfbe      	ittt	lt
 8008458:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800845a:	2400      	movlt	r4, #0
 800845c:	18d2      	addlt	r2, r2, r3
 800845e:	9b07      	ldr	r3, [sp, #28]
 8008460:	bfb8      	it	lt
 8008462:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8008464:	2b00      	cmp	r3, #0
 8008466:	bfb5      	itete	lt
 8008468:	eba8 0603 	sublt.w	r6, r8, r3
 800846c:	4646      	movge	r6, r8
 800846e:	2300      	movlt	r3, #0
 8008470:	9b07      	ldrge	r3, [sp, #28]
 8008472:	e730      	b.n	80082d6 <_dtoa_r+0x71e>
 8008474:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8008476:	4646      	mov	r6, r8
 8008478:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800847a:	e735      	b.n	80082e8 <_dtoa_r+0x730>
 800847c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800847e:	e75c      	b.n	800833a <_dtoa_r+0x782>
 8008480:	2300      	movs	r3, #0
 8008482:	e788      	b.n	8008396 <_dtoa_r+0x7de>
 8008484:	3fe00000 	.word	0x3fe00000
 8008488:	40240000 	.word	0x40240000
 800848c:	40140000 	.word	0x40140000
 8008490:	9b02      	ldr	r3, [sp, #8]
 8008492:	e780      	b.n	8008396 <_dtoa_r+0x7de>
 8008494:	2300      	movs	r3, #0
 8008496:	930a      	str	r3, [sp, #40]	@ 0x28
 8008498:	e782      	b.n	80083a0 <_dtoa_r+0x7e8>
 800849a:	d099      	beq.n	80083d0 <_dtoa_r+0x818>
 800849c:	331c      	adds	r3, #28
 800849e:	9a08      	ldr	r2, [sp, #32]
 80084a0:	441a      	add	r2, r3
 80084a2:	4498      	add	r8, r3
 80084a4:	441e      	add	r6, r3
 80084a6:	9208      	str	r2, [sp, #32]
 80084a8:	e792      	b.n	80083d0 <_dtoa_r+0x818>
 80084aa:	4603      	mov	r3, r0
 80084ac:	e7f6      	b.n	800849c <_dtoa_r+0x8e4>
 80084ae:	9b07      	ldr	r3, [sp, #28]
 80084b0:	9704      	str	r7, [sp, #16]
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	dc20      	bgt.n	80084f8 <_dtoa_r+0x940>
 80084b6:	9300      	str	r3, [sp, #0]
 80084b8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80084ba:	2b02      	cmp	r3, #2
 80084bc:	dd1e      	ble.n	80084fc <_dtoa_r+0x944>
 80084be:	9b00      	ldr	r3, [sp, #0]
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	f47f aec0 	bne.w	8008246 <_dtoa_r+0x68e>
 80084c6:	4621      	mov	r1, r4
 80084c8:	2205      	movs	r2, #5
 80084ca:	4658      	mov	r0, fp
 80084cc:	f000 fa9a 	bl	8008a04 <__multadd>
 80084d0:	4601      	mov	r1, r0
 80084d2:	4604      	mov	r4, r0
 80084d4:	4648      	mov	r0, r9
 80084d6:	f000 fcf9 	bl	8008ecc <__mcmp>
 80084da:	2800      	cmp	r0, #0
 80084dc:	f77f aeb3 	ble.w	8008246 <_dtoa_r+0x68e>
 80084e0:	2331      	movs	r3, #49	@ 0x31
 80084e2:	4656      	mov	r6, sl
 80084e4:	f806 3b01 	strb.w	r3, [r6], #1
 80084e8:	9b04      	ldr	r3, [sp, #16]
 80084ea:	3301      	adds	r3, #1
 80084ec:	9304      	str	r3, [sp, #16]
 80084ee:	e6ae      	b.n	800824e <_dtoa_r+0x696>
 80084f0:	9c07      	ldr	r4, [sp, #28]
 80084f2:	9704      	str	r7, [sp, #16]
 80084f4:	4625      	mov	r5, r4
 80084f6:	e7f3      	b.n	80084e0 <_dtoa_r+0x928>
 80084f8:	9b07      	ldr	r3, [sp, #28]
 80084fa:	9300      	str	r3, [sp, #0]
 80084fc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80084fe:	2b00      	cmp	r3, #0
 8008500:	f000 8104 	beq.w	800870c <_dtoa_r+0xb54>
 8008504:	2e00      	cmp	r6, #0
 8008506:	dd05      	ble.n	8008514 <_dtoa_r+0x95c>
 8008508:	4629      	mov	r1, r5
 800850a:	4632      	mov	r2, r6
 800850c:	4658      	mov	r0, fp
 800850e:	f000 fc71 	bl	8008df4 <__lshift>
 8008512:	4605      	mov	r5, r0
 8008514:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008516:	2b00      	cmp	r3, #0
 8008518:	d05a      	beq.n	80085d0 <_dtoa_r+0xa18>
 800851a:	6869      	ldr	r1, [r5, #4]
 800851c:	4658      	mov	r0, fp
 800851e:	f000 fa0f 	bl	8008940 <_Balloc>
 8008522:	4606      	mov	r6, r0
 8008524:	b928      	cbnz	r0, 8008532 <_dtoa_r+0x97a>
 8008526:	4b84      	ldr	r3, [pc, #528]	@ (8008738 <_dtoa_r+0xb80>)
 8008528:	4602      	mov	r2, r0
 800852a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800852e:	f7ff bb5a 	b.w	8007be6 <_dtoa_r+0x2e>
 8008532:	692a      	ldr	r2, [r5, #16]
 8008534:	f105 010c 	add.w	r1, r5, #12
 8008538:	300c      	adds	r0, #12
 800853a:	3202      	adds	r2, #2
 800853c:	0092      	lsls	r2, r2, #2
 800853e:	f7ff fa98 	bl	8007a72 <memcpy>
 8008542:	2201      	movs	r2, #1
 8008544:	4631      	mov	r1, r6
 8008546:	4658      	mov	r0, fp
 8008548:	f000 fc54 	bl	8008df4 <__lshift>
 800854c:	f10a 0301 	add.w	r3, sl, #1
 8008550:	462f      	mov	r7, r5
 8008552:	4605      	mov	r5, r0
 8008554:	9307      	str	r3, [sp, #28]
 8008556:	9b00      	ldr	r3, [sp, #0]
 8008558:	4453      	add	r3, sl
 800855a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800855c:	9b02      	ldr	r3, [sp, #8]
 800855e:	f003 0301 	and.w	r3, r3, #1
 8008562:	930a      	str	r3, [sp, #40]	@ 0x28
 8008564:	9b07      	ldr	r3, [sp, #28]
 8008566:	4621      	mov	r1, r4
 8008568:	4648      	mov	r0, r9
 800856a:	3b01      	subs	r3, #1
 800856c:	9300      	str	r3, [sp, #0]
 800856e:	f7ff fa93 	bl	8007a98 <quorem>
 8008572:	4639      	mov	r1, r7
 8008574:	9002      	str	r0, [sp, #8]
 8008576:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800857a:	4648      	mov	r0, r9
 800857c:	f000 fca6 	bl	8008ecc <__mcmp>
 8008580:	462a      	mov	r2, r5
 8008582:	9008      	str	r0, [sp, #32]
 8008584:	4621      	mov	r1, r4
 8008586:	4658      	mov	r0, fp
 8008588:	f000 fcbc 	bl	8008f04 <__mdiff>
 800858c:	68c2      	ldr	r2, [r0, #12]
 800858e:	4606      	mov	r6, r0
 8008590:	bb02      	cbnz	r2, 80085d4 <_dtoa_r+0xa1c>
 8008592:	4601      	mov	r1, r0
 8008594:	4648      	mov	r0, r9
 8008596:	f000 fc99 	bl	8008ecc <__mcmp>
 800859a:	4602      	mov	r2, r0
 800859c:	4631      	mov	r1, r6
 800859e:	4658      	mov	r0, fp
 80085a0:	920e      	str	r2, [sp, #56]	@ 0x38
 80085a2:	f000 fa0d 	bl	80089c0 <_Bfree>
 80085a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80085a8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80085aa:	9e07      	ldr	r6, [sp, #28]
 80085ac:	ea43 0102 	orr.w	r1, r3, r2
 80085b0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80085b2:	4319      	orrs	r1, r3
 80085b4:	d110      	bne.n	80085d8 <_dtoa_r+0xa20>
 80085b6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80085ba:	d029      	beq.n	8008610 <_dtoa_r+0xa58>
 80085bc:	9b08      	ldr	r3, [sp, #32]
 80085be:	2b00      	cmp	r3, #0
 80085c0:	dd02      	ble.n	80085c8 <_dtoa_r+0xa10>
 80085c2:	9b02      	ldr	r3, [sp, #8]
 80085c4:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 80085c8:	9b00      	ldr	r3, [sp, #0]
 80085ca:	f883 8000 	strb.w	r8, [r3]
 80085ce:	e63f      	b.n	8008250 <_dtoa_r+0x698>
 80085d0:	4628      	mov	r0, r5
 80085d2:	e7bb      	b.n	800854c <_dtoa_r+0x994>
 80085d4:	2201      	movs	r2, #1
 80085d6:	e7e1      	b.n	800859c <_dtoa_r+0x9e4>
 80085d8:	9b08      	ldr	r3, [sp, #32]
 80085da:	2b00      	cmp	r3, #0
 80085dc:	db04      	blt.n	80085e8 <_dtoa_r+0xa30>
 80085de:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80085e0:	430b      	orrs	r3, r1
 80085e2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80085e4:	430b      	orrs	r3, r1
 80085e6:	d120      	bne.n	800862a <_dtoa_r+0xa72>
 80085e8:	2a00      	cmp	r2, #0
 80085ea:	dded      	ble.n	80085c8 <_dtoa_r+0xa10>
 80085ec:	4649      	mov	r1, r9
 80085ee:	2201      	movs	r2, #1
 80085f0:	4658      	mov	r0, fp
 80085f2:	f000 fbff 	bl	8008df4 <__lshift>
 80085f6:	4621      	mov	r1, r4
 80085f8:	4681      	mov	r9, r0
 80085fa:	f000 fc67 	bl	8008ecc <__mcmp>
 80085fe:	2800      	cmp	r0, #0
 8008600:	dc03      	bgt.n	800860a <_dtoa_r+0xa52>
 8008602:	d1e1      	bne.n	80085c8 <_dtoa_r+0xa10>
 8008604:	f018 0f01 	tst.w	r8, #1
 8008608:	d0de      	beq.n	80085c8 <_dtoa_r+0xa10>
 800860a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800860e:	d1d8      	bne.n	80085c2 <_dtoa_r+0xa0a>
 8008610:	2339      	movs	r3, #57	@ 0x39
 8008612:	9a00      	ldr	r2, [sp, #0]
 8008614:	7013      	strb	r3, [r2, #0]
 8008616:	4633      	mov	r3, r6
 8008618:	461e      	mov	r6, r3
 800861a:	3b01      	subs	r3, #1
 800861c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8008620:	2a39      	cmp	r2, #57	@ 0x39
 8008622:	d052      	beq.n	80086ca <_dtoa_r+0xb12>
 8008624:	3201      	adds	r2, #1
 8008626:	701a      	strb	r2, [r3, #0]
 8008628:	e612      	b.n	8008250 <_dtoa_r+0x698>
 800862a:	2a00      	cmp	r2, #0
 800862c:	dd07      	ble.n	800863e <_dtoa_r+0xa86>
 800862e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008632:	d0ed      	beq.n	8008610 <_dtoa_r+0xa58>
 8008634:	f108 0301 	add.w	r3, r8, #1
 8008638:	9a00      	ldr	r2, [sp, #0]
 800863a:	7013      	strb	r3, [r2, #0]
 800863c:	e608      	b.n	8008250 <_dtoa_r+0x698>
 800863e:	9b07      	ldr	r3, [sp, #28]
 8008640:	9a07      	ldr	r2, [sp, #28]
 8008642:	f803 8c01 	strb.w	r8, [r3, #-1]
 8008646:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008648:	4293      	cmp	r3, r2
 800864a:	d028      	beq.n	800869e <_dtoa_r+0xae6>
 800864c:	4649      	mov	r1, r9
 800864e:	2300      	movs	r3, #0
 8008650:	220a      	movs	r2, #10
 8008652:	4658      	mov	r0, fp
 8008654:	f000 f9d6 	bl	8008a04 <__multadd>
 8008658:	42af      	cmp	r7, r5
 800865a:	4681      	mov	r9, r0
 800865c:	f04f 0300 	mov.w	r3, #0
 8008660:	f04f 020a 	mov.w	r2, #10
 8008664:	4639      	mov	r1, r7
 8008666:	4658      	mov	r0, fp
 8008668:	d107      	bne.n	800867a <_dtoa_r+0xac2>
 800866a:	f000 f9cb 	bl	8008a04 <__multadd>
 800866e:	4607      	mov	r7, r0
 8008670:	4605      	mov	r5, r0
 8008672:	9b07      	ldr	r3, [sp, #28]
 8008674:	3301      	adds	r3, #1
 8008676:	9307      	str	r3, [sp, #28]
 8008678:	e774      	b.n	8008564 <_dtoa_r+0x9ac>
 800867a:	f000 f9c3 	bl	8008a04 <__multadd>
 800867e:	4629      	mov	r1, r5
 8008680:	4607      	mov	r7, r0
 8008682:	2300      	movs	r3, #0
 8008684:	220a      	movs	r2, #10
 8008686:	4658      	mov	r0, fp
 8008688:	f000 f9bc 	bl	8008a04 <__multadd>
 800868c:	4605      	mov	r5, r0
 800868e:	e7f0      	b.n	8008672 <_dtoa_r+0xaba>
 8008690:	9b00      	ldr	r3, [sp, #0]
 8008692:	2700      	movs	r7, #0
 8008694:	2b00      	cmp	r3, #0
 8008696:	bfcc      	ite	gt
 8008698:	461e      	movgt	r6, r3
 800869a:	2601      	movle	r6, #1
 800869c:	4456      	add	r6, sl
 800869e:	4649      	mov	r1, r9
 80086a0:	2201      	movs	r2, #1
 80086a2:	4658      	mov	r0, fp
 80086a4:	f000 fba6 	bl	8008df4 <__lshift>
 80086a8:	4621      	mov	r1, r4
 80086aa:	4681      	mov	r9, r0
 80086ac:	f000 fc0e 	bl	8008ecc <__mcmp>
 80086b0:	2800      	cmp	r0, #0
 80086b2:	dcb0      	bgt.n	8008616 <_dtoa_r+0xa5e>
 80086b4:	d102      	bne.n	80086bc <_dtoa_r+0xb04>
 80086b6:	f018 0f01 	tst.w	r8, #1
 80086ba:	d1ac      	bne.n	8008616 <_dtoa_r+0xa5e>
 80086bc:	4633      	mov	r3, r6
 80086be:	461e      	mov	r6, r3
 80086c0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80086c4:	2a30      	cmp	r2, #48	@ 0x30
 80086c6:	d0fa      	beq.n	80086be <_dtoa_r+0xb06>
 80086c8:	e5c2      	b.n	8008250 <_dtoa_r+0x698>
 80086ca:	459a      	cmp	sl, r3
 80086cc:	d1a4      	bne.n	8008618 <_dtoa_r+0xa60>
 80086ce:	9b04      	ldr	r3, [sp, #16]
 80086d0:	3301      	adds	r3, #1
 80086d2:	9304      	str	r3, [sp, #16]
 80086d4:	2331      	movs	r3, #49	@ 0x31
 80086d6:	f88a 3000 	strb.w	r3, [sl]
 80086da:	e5b9      	b.n	8008250 <_dtoa_r+0x698>
 80086dc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80086de:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800873c <_dtoa_r+0xb84>
 80086e2:	b11b      	cbz	r3, 80086ec <_dtoa_r+0xb34>
 80086e4:	f10a 0308 	add.w	r3, sl, #8
 80086e8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80086ea:	6013      	str	r3, [r2, #0]
 80086ec:	4650      	mov	r0, sl
 80086ee:	b019      	add	sp, #100	@ 0x64
 80086f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80086f4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80086f6:	2b01      	cmp	r3, #1
 80086f8:	f77f ae37 	ble.w	800836a <_dtoa_r+0x7b2>
 80086fc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80086fe:	930a      	str	r3, [sp, #40]	@ 0x28
 8008700:	2001      	movs	r0, #1
 8008702:	e655      	b.n	80083b0 <_dtoa_r+0x7f8>
 8008704:	9b00      	ldr	r3, [sp, #0]
 8008706:	2b00      	cmp	r3, #0
 8008708:	f77f aed6 	ble.w	80084b8 <_dtoa_r+0x900>
 800870c:	4656      	mov	r6, sl
 800870e:	4621      	mov	r1, r4
 8008710:	4648      	mov	r0, r9
 8008712:	f7ff f9c1 	bl	8007a98 <quorem>
 8008716:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800871a:	9b00      	ldr	r3, [sp, #0]
 800871c:	f806 8b01 	strb.w	r8, [r6], #1
 8008720:	eba6 020a 	sub.w	r2, r6, sl
 8008724:	4293      	cmp	r3, r2
 8008726:	ddb3      	ble.n	8008690 <_dtoa_r+0xad8>
 8008728:	4649      	mov	r1, r9
 800872a:	2300      	movs	r3, #0
 800872c:	220a      	movs	r2, #10
 800872e:	4658      	mov	r0, fp
 8008730:	f000 f968 	bl	8008a04 <__multadd>
 8008734:	4681      	mov	r9, r0
 8008736:	e7ea      	b.n	800870e <_dtoa_r+0xb56>
 8008738:	0800b35d 	.word	0x0800b35d
 800873c:	0800b2e1 	.word	0x0800b2e1

08008740 <_free_r>:
 8008740:	b538      	push	{r3, r4, r5, lr}
 8008742:	4605      	mov	r5, r0
 8008744:	2900      	cmp	r1, #0
 8008746:	d041      	beq.n	80087cc <_free_r+0x8c>
 8008748:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800874c:	1f0c      	subs	r4, r1, #4
 800874e:	2b00      	cmp	r3, #0
 8008750:	bfb8      	it	lt
 8008752:	18e4      	addlt	r4, r4, r3
 8008754:	f000 f8e8 	bl	8008928 <__malloc_lock>
 8008758:	4a1d      	ldr	r2, [pc, #116]	@ (80087d0 <_free_r+0x90>)
 800875a:	6813      	ldr	r3, [r2, #0]
 800875c:	b933      	cbnz	r3, 800876c <_free_r+0x2c>
 800875e:	6063      	str	r3, [r4, #4]
 8008760:	6014      	str	r4, [r2, #0]
 8008762:	4628      	mov	r0, r5
 8008764:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008768:	f000 b8e4 	b.w	8008934 <__malloc_unlock>
 800876c:	42a3      	cmp	r3, r4
 800876e:	d908      	bls.n	8008782 <_free_r+0x42>
 8008770:	6820      	ldr	r0, [r4, #0]
 8008772:	1821      	adds	r1, r4, r0
 8008774:	428b      	cmp	r3, r1
 8008776:	bf01      	itttt	eq
 8008778:	6819      	ldreq	r1, [r3, #0]
 800877a:	685b      	ldreq	r3, [r3, #4]
 800877c:	1809      	addeq	r1, r1, r0
 800877e:	6021      	streq	r1, [r4, #0]
 8008780:	e7ed      	b.n	800875e <_free_r+0x1e>
 8008782:	461a      	mov	r2, r3
 8008784:	685b      	ldr	r3, [r3, #4]
 8008786:	b10b      	cbz	r3, 800878c <_free_r+0x4c>
 8008788:	42a3      	cmp	r3, r4
 800878a:	d9fa      	bls.n	8008782 <_free_r+0x42>
 800878c:	6811      	ldr	r1, [r2, #0]
 800878e:	1850      	adds	r0, r2, r1
 8008790:	42a0      	cmp	r0, r4
 8008792:	d10b      	bne.n	80087ac <_free_r+0x6c>
 8008794:	6820      	ldr	r0, [r4, #0]
 8008796:	4401      	add	r1, r0
 8008798:	1850      	adds	r0, r2, r1
 800879a:	6011      	str	r1, [r2, #0]
 800879c:	4283      	cmp	r3, r0
 800879e:	d1e0      	bne.n	8008762 <_free_r+0x22>
 80087a0:	6818      	ldr	r0, [r3, #0]
 80087a2:	685b      	ldr	r3, [r3, #4]
 80087a4:	4408      	add	r0, r1
 80087a6:	6053      	str	r3, [r2, #4]
 80087a8:	6010      	str	r0, [r2, #0]
 80087aa:	e7da      	b.n	8008762 <_free_r+0x22>
 80087ac:	d902      	bls.n	80087b4 <_free_r+0x74>
 80087ae:	230c      	movs	r3, #12
 80087b0:	602b      	str	r3, [r5, #0]
 80087b2:	e7d6      	b.n	8008762 <_free_r+0x22>
 80087b4:	6820      	ldr	r0, [r4, #0]
 80087b6:	1821      	adds	r1, r4, r0
 80087b8:	428b      	cmp	r3, r1
 80087ba:	bf02      	ittt	eq
 80087bc:	6819      	ldreq	r1, [r3, #0]
 80087be:	685b      	ldreq	r3, [r3, #4]
 80087c0:	1809      	addeq	r1, r1, r0
 80087c2:	6063      	str	r3, [r4, #4]
 80087c4:	bf08      	it	eq
 80087c6:	6021      	streq	r1, [r4, #0]
 80087c8:	6054      	str	r4, [r2, #4]
 80087ca:	e7ca      	b.n	8008762 <_free_r+0x22>
 80087cc:	bd38      	pop	{r3, r4, r5, pc}
 80087ce:	bf00      	nop
 80087d0:	200006c0 	.word	0x200006c0

080087d4 <malloc>:
 80087d4:	4b02      	ldr	r3, [pc, #8]	@ (80087e0 <malloc+0xc>)
 80087d6:	4601      	mov	r1, r0
 80087d8:	6818      	ldr	r0, [r3, #0]
 80087da:	f000 b825 	b.w	8008828 <_malloc_r>
 80087de:	bf00      	nop
 80087e0:	20000018 	.word	0x20000018

080087e4 <sbrk_aligned>:
 80087e4:	b570      	push	{r4, r5, r6, lr}
 80087e6:	4e0f      	ldr	r6, [pc, #60]	@ (8008824 <sbrk_aligned+0x40>)
 80087e8:	460c      	mov	r4, r1
 80087ea:	4605      	mov	r5, r0
 80087ec:	6831      	ldr	r1, [r6, #0]
 80087ee:	b911      	cbnz	r1, 80087f6 <sbrk_aligned+0x12>
 80087f0:	f001 ffee 	bl	800a7d0 <_sbrk_r>
 80087f4:	6030      	str	r0, [r6, #0]
 80087f6:	4621      	mov	r1, r4
 80087f8:	4628      	mov	r0, r5
 80087fa:	f001 ffe9 	bl	800a7d0 <_sbrk_r>
 80087fe:	1c43      	adds	r3, r0, #1
 8008800:	d103      	bne.n	800880a <sbrk_aligned+0x26>
 8008802:	f04f 34ff 	mov.w	r4, #4294967295
 8008806:	4620      	mov	r0, r4
 8008808:	bd70      	pop	{r4, r5, r6, pc}
 800880a:	1cc4      	adds	r4, r0, #3
 800880c:	f024 0403 	bic.w	r4, r4, #3
 8008810:	42a0      	cmp	r0, r4
 8008812:	d0f8      	beq.n	8008806 <sbrk_aligned+0x22>
 8008814:	1a21      	subs	r1, r4, r0
 8008816:	4628      	mov	r0, r5
 8008818:	f001 ffda 	bl	800a7d0 <_sbrk_r>
 800881c:	3001      	adds	r0, #1
 800881e:	d1f2      	bne.n	8008806 <sbrk_aligned+0x22>
 8008820:	e7ef      	b.n	8008802 <sbrk_aligned+0x1e>
 8008822:	bf00      	nop
 8008824:	200006bc 	.word	0x200006bc

08008828 <_malloc_r>:
 8008828:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800882c:	1ccd      	adds	r5, r1, #3
 800882e:	4606      	mov	r6, r0
 8008830:	f025 0503 	bic.w	r5, r5, #3
 8008834:	3508      	adds	r5, #8
 8008836:	2d0c      	cmp	r5, #12
 8008838:	bf38      	it	cc
 800883a:	250c      	movcc	r5, #12
 800883c:	2d00      	cmp	r5, #0
 800883e:	db01      	blt.n	8008844 <_malloc_r+0x1c>
 8008840:	42a9      	cmp	r1, r5
 8008842:	d904      	bls.n	800884e <_malloc_r+0x26>
 8008844:	230c      	movs	r3, #12
 8008846:	6033      	str	r3, [r6, #0]
 8008848:	2000      	movs	r0, #0
 800884a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800884e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008924 <_malloc_r+0xfc>
 8008852:	f000 f869 	bl	8008928 <__malloc_lock>
 8008856:	f8d8 3000 	ldr.w	r3, [r8]
 800885a:	461c      	mov	r4, r3
 800885c:	bb44      	cbnz	r4, 80088b0 <_malloc_r+0x88>
 800885e:	4629      	mov	r1, r5
 8008860:	4630      	mov	r0, r6
 8008862:	f7ff ffbf 	bl	80087e4 <sbrk_aligned>
 8008866:	1c43      	adds	r3, r0, #1
 8008868:	4604      	mov	r4, r0
 800886a:	d158      	bne.n	800891e <_malloc_r+0xf6>
 800886c:	f8d8 4000 	ldr.w	r4, [r8]
 8008870:	4627      	mov	r7, r4
 8008872:	2f00      	cmp	r7, #0
 8008874:	d143      	bne.n	80088fe <_malloc_r+0xd6>
 8008876:	2c00      	cmp	r4, #0
 8008878:	d04b      	beq.n	8008912 <_malloc_r+0xea>
 800887a:	6823      	ldr	r3, [r4, #0]
 800887c:	4639      	mov	r1, r7
 800887e:	4630      	mov	r0, r6
 8008880:	eb04 0903 	add.w	r9, r4, r3
 8008884:	f001 ffa4 	bl	800a7d0 <_sbrk_r>
 8008888:	4581      	cmp	r9, r0
 800888a:	d142      	bne.n	8008912 <_malloc_r+0xea>
 800888c:	6821      	ldr	r1, [r4, #0]
 800888e:	4630      	mov	r0, r6
 8008890:	1a6d      	subs	r5, r5, r1
 8008892:	4629      	mov	r1, r5
 8008894:	f7ff ffa6 	bl	80087e4 <sbrk_aligned>
 8008898:	3001      	adds	r0, #1
 800889a:	d03a      	beq.n	8008912 <_malloc_r+0xea>
 800889c:	6823      	ldr	r3, [r4, #0]
 800889e:	442b      	add	r3, r5
 80088a0:	6023      	str	r3, [r4, #0]
 80088a2:	f8d8 3000 	ldr.w	r3, [r8]
 80088a6:	685a      	ldr	r2, [r3, #4]
 80088a8:	bb62      	cbnz	r2, 8008904 <_malloc_r+0xdc>
 80088aa:	f8c8 7000 	str.w	r7, [r8]
 80088ae:	e00f      	b.n	80088d0 <_malloc_r+0xa8>
 80088b0:	6822      	ldr	r2, [r4, #0]
 80088b2:	1b52      	subs	r2, r2, r5
 80088b4:	d420      	bmi.n	80088f8 <_malloc_r+0xd0>
 80088b6:	2a0b      	cmp	r2, #11
 80088b8:	d917      	bls.n	80088ea <_malloc_r+0xc2>
 80088ba:	1961      	adds	r1, r4, r5
 80088bc:	42a3      	cmp	r3, r4
 80088be:	6025      	str	r5, [r4, #0]
 80088c0:	bf18      	it	ne
 80088c2:	6059      	strne	r1, [r3, #4]
 80088c4:	6863      	ldr	r3, [r4, #4]
 80088c6:	bf08      	it	eq
 80088c8:	f8c8 1000 	streq.w	r1, [r8]
 80088cc:	5162      	str	r2, [r4, r5]
 80088ce:	604b      	str	r3, [r1, #4]
 80088d0:	4630      	mov	r0, r6
 80088d2:	f000 f82f 	bl	8008934 <__malloc_unlock>
 80088d6:	f104 000b 	add.w	r0, r4, #11
 80088da:	1d23      	adds	r3, r4, #4
 80088dc:	f020 0007 	bic.w	r0, r0, #7
 80088e0:	1ac2      	subs	r2, r0, r3
 80088e2:	bf1c      	itt	ne
 80088e4:	1a1b      	subne	r3, r3, r0
 80088e6:	50a3      	strne	r3, [r4, r2]
 80088e8:	e7af      	b.n	800884a <_malloc_r+0x22>
 80088ea:	6862      	ldr	r2, [r4, #4]
 80088ec:	42a3      	cmp	r3, r4
 80088ee:	bf0c      	ite	eq
 80088f0:	f8c8 2000 	streq.w	r2, [r8]
 80088f4:	605a      	strne	r2, [r3, #4]
 80088f6:	e7eb      	b.n	80088d0 <_malloc_r+0xa8>
 80088f8:	4623      	mov	r3, r4
 80088fa:	6864      	ldr	r4, [r4, #4]
 80088fc:	e7ae      	b.n	800885c <_malloc_r+0x34>
 80088fe:	463c      	mov	r4, r7
 8008900:	687f      	ldr	r7, [r7, #4]
 8008902:	e7b6      	b.n	8008872 <_malloc_r+0x4a>
 8008904:	461a      	mov	r2, r3
 8008906:	685b      	ldr	r3, [r3, #4]
 8008908:	42a3      	cmp	r3, r4
 800890a:	d1fb      	bne.n	8008904 <_malloc_r+0xdc>
 800890c:	2300      	movs	r3, #0
 800890e:	6053      	str	r3, [r2, #4]
 8008910:	e7de      	b.n	80088d0 <_malloc_r+0xa8>
 8008912:	230c      	movs	r3, #12
 8008914:	4630      	mov	r0, r6
 8008916:	6033      	str	r3, [r6, #0]
 8008918:	f000 f80c 	bl	8008934 <__malloc_unlock>
 800891c:	e794      	b.n	8008848 <_malloc_r+0x20>
 800891e:	6005      	str	r5, [r0, #0]
 8008920:	e7d6      	b.n	80088d0 <_malloc_r+0xa8>
 8008922:	bf00      	nop
 8008924:	200006c0 	.word	0x200006c0

08008928 <__malloc_lock>:
 8008928:	4801      	ldr	r0, [pc, #4]	@ (8008930 <__malloc_lock+0x8>)
 800892a:	f7ff b892 	b.w	8007a52 <__retarget_lock_acquire_recursive>
 800892e:	bf00      	nop
 8008930:	200006b8 	.word	0x200006b8

08008934 <__malloc_unlock>:
 8008934:	4801      	ldr	r0, [pc, #4]	@ (800893c <__malloc_unlock+0x8>)
 8008936:	f7ff b88d 	b.w	8007a54 <__retarget_lock_release_recursive>
 800893a:	bf00      	nop
 800893c:	200006b8 	.word	0x200006b8

08008940 <_Balloc>:
 8008940:	b570      	push	{r4, r5, r6, lr}
 8008942:	69c6      	ldr	r6, [r0, #28]
 8008944:	4604      	mov	r4, r0
 8008946:	460d      	mov	r5, r1
 8008948:	b976      	cbnz	r6, 8008968 <_Balloc+0x28>
 800894a:	2010      	movs	r0, #16
 800894c:	f7ff ff42 	bl	80087d4 <malloc>
 8008950:	4602      	mov	r2, r0
 8008952:	61e0      	str	r0, [r4, #28]
 8008954:	b920      	cbnz	r0, 8008960 <_Balloc+0x20>
 8008956:	4b18      	ldr	r3, [pc, #96]	@ (80089b8 <_Balloc+0x78>)
 8008958:	216b      	movs	r1, #107	@ 0x6b
 800895a:	4818      	ldr	r0, [pc, #96]	@ (80089bc <_Balloc+0x7c>)
 800895c:	f001 ff50 	bl	800a800 <__assert_func>
 8008960:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008964:	6006      	str	r6, [r0, #0]
 8008966:	60c6      	str	r6, [r0, #12]
 8008968:	69e6      	ldr	r6, [r4, #28]
 800896a:	68f3      	ldr	r3, [r6, #12]
 800896c:	b183      	cbz	r3, 8008990 <_Balloc+0x50>
 800896e:	69e3      	ldr	r3, [r4, #28]
 8008970:	68db      	ldr	r3, [r3, #12]
 8008972:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008976:	b9b8      	cbnz	r0, 80089a8 <_Balloc+0x68>
 8008978:	2101      	movs	r1, #1
 800897a:	4620      	mov	r0, r4
 800897c:	fa01 f605 	lsl.w	r6, r1, r5
 8008980:	1d72      	adds	r2, r6, #5
 8008982:	0092      	lsls	r2, r2, #2
 8008984:	f001 ff5a 	bl	800a83c <_calloc_r>
 8008988:	b160      	cbz	r0, 80089a4 <_Balloc+0x64>
 800898a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800898e:	e00e      	b.n	80089ae <_Balloc+0x6e>
 8008990:	2221      	movs	r2, #33	@ 0x21
 8008992:	2104      	movs	r1, #4
 8008994:	4620      	mov	r0, r4
 8008996:	f001 ff51 	bl	800a83c <_calloc_r>
 800899a:	69e3      	ldr	r3, [r4, #28]
 800899c:	60f0      	str	r0, [r6, #12]
 800899e:	68db      	ldr	r3, [r3, #12]
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	d1e4      	bne.n	800896e <_Balloc+0x2e>
 80089a4:	2000      	movs	r0, #0
 80089a6:	bd70      	pop	{r4, r5, r6, pc}
 80089a8:	6802      	ldr	r2, [r0, #0]
 80089aa:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80089ae:	2300      	movs	r3, #0
 80089b0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80089b4:	e7f7      	b.n	80089a6 <_Balloc+0x66>
 80089b6:	bf00      	nop
 80089b8:	0800b2ee 	.word	0x0800b2ee
 80089bc:	0800b36e 	.word	0x0800b36e

080089c0 <_Bfree>:
 80089c0:	b570      	push	{r4, r5, r6, lr}
 80089c2:	69c6      	ldr	r6, [r0, #28]
 80089c4:	4605      	mov	r5, r0
 80089c6:	460c      	mov	r4, r1
 80089c8:	b976      	cbnz	r6, 80089e8 <_Bfree+0x28>
 80089ca:	2010      	movs	r0, #16
 80089cc:	f7ff ff02 	bl	80087d4 <malloc>
 80089d0:	4602      	mov	r2, r0
 80089d2:	61e8      	str	r0, [r5, #28]
 80089d4:	b920      	cbnz	r0, 80089e0 <_Bfree+0x20>
 80089d6:	4b09      	ldr	r3, [pc, #36]	@ (80089fc <_Bfree+0x3c>)
 80089d8:	218f      	movs	r1, #143	@ 0x8f
 80089da:	4809      	ldr	r0, [pc, #36]	@ (8008a00 <_Bfree+0x40>)
 80089dc:	f001 ff10 	bl	800a800 <__assert_func>
 80089e0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80089e4:	6006      	str	r6, [r0, #0]
 80089e6:	60c6      	str	r6, [r0, #12]
 80089e8:	b13c      	cbz	r4, 80089fa <_Bfree+0x3a>
 80089ea:	69eb      	ldr	r3, [r5, #28]
 80089ec:	6862      	ldr	r2, [r4, #4]
 80089ee:	68db      	ldr	r3, [r3, #12]
 80089f0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80089f4:	6021      	str	r1, [r4, #0]
 80089f6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80089fa:	bd70      	pop	{r4, r5, r6, pc}
 80089fc:	0800b2ee 	.word	0x0800b2ee
 8008a00:	0800b36e 	.word	0x0800b36e

08008a04 <__multadd>:
 8008a04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a08:	f101 0c14 	add.w	ip, r1, #20
 8008a0c:	4607      	mov	r7, r0
 8008a0e:	460c      	mov	r4, r1
 8008a10:	461e      	mov	r6, r3
 8008a12:	690d      	ldr	r5, [r1, #16]
 8008a14:	2000      	movs	r0, #0
 8008a16:	f8dc 3000 	ldr.w	r3, [ip]
 8008a1a:	3001      	adds	r0, #1
 8008a1c:	b299      	uxth	r1, r3
 8008a1e:	4285      	cmp	r5, r0
 8008a20:	fb02 6101 	mla	r1, r2, r1, r6
 8008a24:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008a28:	ea4f 4311 	mov.w	r3, r1, lsr #16
 8008a2c:	b289      	uxth	r1, r1
 8008a2e:	fb02 3306 	mla	r3, r2, r6, r3
 8008a32:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008a36:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008a3a:	f84c 1b04 	str.w	r1, [ip], #4
 8008a3e:	dcea      	bgt.n	8008a16 <__multadd+0x12>
 8008a40:	b30e      	cbz	r6, 8008a86 <__multadd+0x82>
 8008a42:	68a3      	ldr	r3, [r4, #8]
 8008a44:	42ab      	cmp	r3, r5
 8008a46:	dc19      	bgt.n	8008a7c <__multadd+0x78>
 8008a48:	6861      	ldr	r1, [r4, #4]
 8008a4a:	4638      	mov	r0, r7
 8008a4c:	3101      	adds	r1, #1
 8008a4e:	f7ff ff77 	bl	8008940 <_Balloc>
 8008a52:	4680      	mov	r8, r0
 8008a54:	b928      	cbnz	r0, 8008a62 <__multadd+0x5e>
 8008a56:	4602      	mov	r2, r0
 8008a58:	4b0c      	ldr	r3, [pc, #48]	@ (8008a8c <__multadd+0x88>)
 8008a5a:	21ba      	movs	r1, #186	@ 0xba
 8008a5c:	480c      	ldr	r0, [pc, #48]	@ (8008a90 <__multadd+0x8c>)
 8008a5e:	f001 fecf 	bl	800a800 <__assert_func>
 8008a62:	6922      	ldr	r2, [r4, #16]
 8008a64:	f104 010c 	add.w	r1, r4, #12
 8008a68:	300c      	adds	r0, #12
 8008a6a:	3202      	adds	r2, #2
 8008a6c:	0092      	lsls	r2, r2, #2
 8008a6e:	f7ff f800 	bl	8007a72 <memcpy>
 8008a72:	4621      	mov	r1, r4
 8008a74:	4644      	mov	r4, r8
 8008a76:	4638      	mov	r0, r7
 8008a78:	f7ff ffa2 	bl	80089c0 <_Bfree>
 8008a7c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008a80:	3501      	adds	r5, #1
 8008a82:	615e      	str	r6, [r3, #20]
 8008a84:	6125      	str	r5, [r4, #16]
 8008a86:	4620      	mov	r0, r4
 8008a88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008a8c:	0800b35d 	.word	0x0800b35d
 8008a90:	0800b36e 	.word	0x0800b36e

08008a94 <__s2b>:
 8008a94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008a98:	4615      	mov	r5, r2
 8008a9a:	461f      	mov	r7, r3
 8008a9c:	2209      	movs	r2, #9
 8008a9e:	3308      	adds	r3, #8
 8008aa0:	460c      	mov	r4, r1
 8008aa2:	4606      	mov	r6, r0
 8008aa4:	2100      	movs	r1, #0
 8008aa6:	fb93 f3f2 	sdiv	r3, r3, r2
 8008aaa:	2201      	movs	r2, #1
 8008aac:	429a      	cmp	r2, r3
 8008aae:	db09      	blt.n	8008ac4 <__s2b+0x30>
 8008ab0:	4630      	mov	r0, r6
 8008ab2:	f7ff ff45 	bl	8008940 <_Balloc>
 8008ab6:	b940      	cbnz	r0, 8008aca <__s2b+0x36>
 8008ab8:	4602      	mov	r2, r0
 8008aba:	4b19      	ldr	r3, [pc, #100]	@ (8008b20 <__s2b+0x8c>)
 8008abc:	21d3      	movs	r1, #211	@ 0xd3
 8008abe:	4819      	ldr	r0, [pc, #100]	@ (8008b24 <__s2b+0x90>)
 8008ac0:	f001 fe9e 	bl	800a800 <__assert_func>
 8008ac4:	0052      	lsls	r2, r2, #1
 8008ac6:	3101      	adds	r1, #1
 8008ac8:	e7f0      	b.n	8008aac <__s2b+0x18>
 8008aca:	9b08      	ldr	r3, [sp, #32]
 8008acc:	2d09      	cmp	r5, #9
 8008ace:	6143      	str	r3, [r0, #20]
 8008ad0:	f04f 0301 	mov.w	r3, #1
 8008ad4:	6103      	str	r3, [r0, #16]
 8008ad6:	dd16      	ble.n	8008b06 <__s2b+0x72>
 8008ad8:	f104 0909 	add.w	r9, r4, #9
 8008adc:	442c      	add	r4, r5
 8008ade:	46c8      	mov	r8, r9
 8008ae0:	f818 3b01 	ldrb.w	r3, [r8], #1
 8008ae4:	4601      	mov	r1, r0
 8008ae6:	220a      	movs	r2, #10
 8008ae8:	4630      	mov	r0, r6
 8008aea:	3b30      	subs	r3, #48	@ 0x30
 8008aec:	f7ff ff8a 	bl	8008a04 <__multadd>
 8008af0:	45a0      	cmp	r8, r4
 8008af2:	d1f5      	bne.n	8008ae0 <__s2b+0x4c>
 8008af4:	f1a5 0408 	sub.w	r4, r5, #8
 8008af8:	444c      	add	r4, r9
 8008afa:	1b2d      	subs	r5, r5, r4
 8008afc:	1963      	adds	r3, r4, r5
 8008afe:	42bb      	cmp	r3, r7
 8008b00:	db04      	blt.n	8008b0c <__s2b+0x78>
 8008b02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008b06:	340a      	adds	r4, #10
 8008b08:	2509      	movs	r5, #9
 8008b0a:	e7f6      	b.n	8008afa <__s2b+0x66>
 8008b0c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008b10:	4601      	mov	r1, r0
 8008b12:	220a      	movs	r2, #10
 8008b14:	4630      	mov	r0, r6
 8008b16:	3b30      	subs	r3, #48	@ 0x30
 8008b18:	f7ff ff74 	bl	8008a04 <__multadd>
 8008b1c:	e7ee      	b.n	8008afc <__s2b+0x68>
 8008b1e:	bf00      	nop
 8008b20:	0800b35d 	.word	0x0800b35d
 8008b24:	0800b36e 	.word	0x0800b36e

08008b28 <__hi0bits>:
 8008b28:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8008b2c:	4603      	mov	r3, r0
 8008b2e:	bf36      	itet	cc
 8008b30:	0403      	lslcc	r3, r0, #16
 8008b32:	2000      	movcs	r0, #0
 8008b34:	2010      	movcc	r0, #16
 8008b36:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008b3a:	bf3c      	itt	cc
 8008b3c:	021b      	lslcc	r3, r3, #8
 8008b3e:	3008      	addcc	r0, #8
 8008b40:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008b44:	bf3c      	itt	cc
 8008b46:	011b      	lslcc	r3, r3, #4
 8008b48:	3004      	addcc	r0, #4
 8008b4a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008b4e:	bf3c      	itt	cc
 8008b50:	009b      	lslcc	r3, r3, #2
 8008b52:	3002      	addcc	r0, #2
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	db05      	blt.n	8008b64 <__hi0bits+0x3c>
 8008b58:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8008b5c:	f100 0001 	add.w	r0, r0, #1
 8008b60:	bf08      	it	eq
 8008b62:	2020      	moveq	r0, #32
 8008b64:	4770      	bx	lr

08008b66 <__lo0bits>:
 8008b66:	6803      	ldr	r3, [r0, #0]
 8008b68:	4602      	mov	r2, r0
 8008b6a:	f013 0007 	ands.w	r0, r3, #7
 8008b6e:	d00b      	beq.n	8008b88 <__lo0bits+0x22>
 8008b70:	07d9      	lsls	r1, r3, #31
 8008b72:	d421      	bmi.n	8008bb8 <__lo0bits+0x52>
 8008b74:	0798      	lsls	r0, r3, #30
 8008b76:	bf47      	ittee	mi
 8008b78:	085b      	lsrmi	r3, r3, #1
 8008b7a:	2001      	movmi	r0, #1
 8008b7c:	089b      	lsrpl	r3, r3, #2
 8008b7e:	2002      	movpl	r0, #2
 8008b80:	bf4c      	ite	mi
 8008b82:	6013      	strmi	r3, [r2, #0]
 8008b84:	6013      	strpl	r3, [r2, #0]
 8008b86:	4770      	bx	lr
 8008b88:	b299      	uxth	r1, r3
 8008b8a:	b909      	cbnz	r1, 8008b90 <__lo0bits+0x2a>
 8008b8c:	0c1b      	lsrs	r3, r3, #16
 8008b8e:	2010      	movs	r0, #16
 8008b90:	b2d9      	uxtb	r1, r3
 8008b92:	b909      	cbnz	r1, 8008b98 <__lo0bits+0x32>
 8008b94:	3008      	adds	r0, #8
 8008b96:	0a1b      	lsrs	r3, r3, #8
 8008b98:	0719      	lsls	r1, r3, #28
 8008b9a:	bf04      	itt	eq
 8008b9c:	091b      	lsreq	r3, r3, #4
 8008b9e:	3004      	addeq	r0, #4
 8008ba0:	0799      	lsls	r1, r3, #30
 8008ba2:	bf04      	itt	eq
 8008ba4:	089b      	lsreq	r3, r3, #2
 8008ba6:	3002      	addeq	r0, #2
 8008ba8:	07d9      	lsls	r1, r3, #31
 8008baa:	d403      	bmi.n	8008bb4 <__lo0bits+0x4e>
 8008bac:	085b      	lsrs	r3, r3, #1
 8008bae:	f100 0001 	add.w	r0, r0, #1
 8008bb2:	d003      	beq.n	8008bbc <__lo0bits+0x56>
 8008bb4:	6013      	str	r3, [r2, #0]
 8008bb6:	4770      	bx	lr
 8008bb8:	2000      	movs	r0, #0
 8008bba:	4770      	bx	lr
 8008bbc:	2020      	movs	r0, #32
 8008bbe:	4770      	bx	lr

08008bc0 <__i2b>:
 8008bc0:	b510      	push	{r4, lr}
 8008bc2:	460c      	mov	r4, r1
 8008bc4:	2101      	movs	r1, #1
 8008bc6:	f7ff febb 	bl	8008940 <_Balloc>
 8008bca:	4602      	mov	r2, r0
 8008bcc:	b928      	cbnz	r0, 8008bda <__i2b+0x1a>
 8008bce:	4b05      	ldr	r3, [pc, #20]	@ (8008be4 <__i2b+0x24>)
 8008bd0:	f240 1145 	movw	r1, #325	@ 0x145
 8008bd4:	4804      	ldr	r0, [pc, #16]	@ (8008be8 <__i2b+0x28>)
 8008bd6:	f001 fe13 	bl	800a800 <__assert_func>
 8008bda:	2301      	movs	r3, #1
 8008bdc:	6144      	str	r4, [r0, #20]
 8008bde:	6103      	str	r3, [r0, #16]
 8008be0:	bd10      	pop	{r4, pc}
 8008be2:	bf00      	nop
 8008be4:	0800b35d 	.word	0x0800b35d
 8008be8:	0800b36e 	.word	0x0800b36e

08008bec <__multiply>:
 8008bec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008bf0:	4614      	mov	r4, r2
 8008bf2:	690a      	ldr	r2, [r1, #16]
 8008bf4:	460f      	mov	r7, r1
 8008bf6:	b085      	sub	sp, #20
 8008bf8:	6923      	ldr	r3, [r4, #16]
 8008bfa:	429a      	cmp	r2, r3
 8008bfc:	bfa2      	ittt	ge
 8008bfe:	4623      	movge	r3, r4
 8008c00:	460c      	movge	r4, r1
 8008c02:	461f      	movge	r7, r3
 8008c04:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8008c08:	68a3      	ldr	r3, [r4, #8]
 8008c0a:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8008c0e:	6861      	ldr	r1, [r4, #4]
 8008c10:	eb0a 0609 	add.w	r6, sl, r9
 8008c14:	42b3      	cmp	r3, r6
 8008c16:	bfb8      	it	lt
 8008c18:	3101      	addlt	r1, #1
 8008c1a:	f7ff fe91 	bl	8008940 <_Balloc>
 8008c1e:	b930      	cbnz	r0, 8008c2e <__multiply+0x42>
 8008c20:	4602      	mov	r2, r0
 8008c22:	4b45      	ldr	r3, [pc, #276]	@ (8008d38 <__multiply+0x14c>)
 8008c24:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8008c28:	4844      	ldr	r0, [pc, #272]	@ (8008d3c <__multiply+0x150>)
 8008c2a:	f001 fde9 	bl	800a800 <__assert_func>
 8008c2e:	f100 0514 	add.w	r5, r0, #20
 8008c32:	2200      	movs	r2, #0
 8008c34:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008c38:	462b      	mov	r3, r5
 8008c3a:	4543      	cmp	r3, r8
 8008c3c:	d321      	bcc.n	8008c82 <__multiply+0x96>
 8008c3e:	f107 0114 	add.w	r1, r7, #20
 8008c42:	f104 0214 	add.w	r2, r4, #20
 8008c46:	f104 0715 	add.w	r7, r4, #21
 8008c4a:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8008c4e:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8008c52:	9302      	str	r3, [sp, #8]
 8008c54:	1b13      	subs	r3, r2, r4
 8008c56:	3b15      	subs	r3, #21
 8008c58:	f023 0303 	bic.w	r3, r3, #3
 8008c5c:	3304      	adds	r3, #4
 8008c5e:	42ba      	cmp	r2, r7
 8008c60:	bf38      	it	cc
 8008c62:	2304      	movcc	r3, #4
 8008c64:	9301      	str	r3, [sp, #4]
 8008c66:	9b02      	ldr	r3, [sp, #8]
 8008c68:	9103      	str	r1, [sp, #12]
 8008c6a:	428b      	cmp	r3, r1
 8008c6c:	d80c      	bhi.n	8008c88 <__multiply+0x9c>
 8008c6e:	2e00      	cmp	r6, #0
 8008c70:	dd03      	ble.n	8008c7a <__multiply+0x8e>
 8008c72:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d05b      	beq.n	8008d32 <__multiply+0x146>
 8008c7a:	6106      	str	r6, [r0, #16]
 8008c7c:	b005      	add	sp, #20
 8008c7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c82:	f843 2b04 	str.w	r2, [r3], #4
 8008c86:	e7d8      	b.n	8008c3a <__multiply+0x4e>
 8008c88:	f8b1 a000 	ldrh.w	sl, [r1]
 8008c8c:	f1ba 0f00 	cmp.w	sl, #0
 8008c90:	d024      	beq.n	8008cdc <__multiply+0xf0>
 8008c92:	f104 0e14 	add.w	lr, r4, #20
 8008c96:	46a9      	mov	r9, r5
 8008c98:	f04f 0c00 	mov.w	ip, #0
 8008c9c:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008ca0:	f8d9 3000 	ldr.w	r3, [r9]
 8008ca4:	fa1f fb87 	uxth.w	fp, r7
 8008ca8:	4572      	cmp	r2, lr
 8008caa:	b29b      	uxth	r3, r3
 8008cac:	fb0a 330b 	mla	r3, sl, fp, r3
 8008cb0:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8008cb4:	f8d9 7000 	ldr.w	r7, [r9]
 8008cb8:	4463      	add	r3, ip
 8008cba:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8008cbe:	fb0a c70b 	mla	r7, sl, fp, ip
 8008cc2:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8008cc6:	b29b      	uxth	r3, r3
 8008cc8:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8008ccc:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008cd0:	f849 3b04 	str.w	r3, [r9], #4
 8008cd4:	d8e2      	bhi.n	8008c9c <__multiply+0xb0>
 8008cd6:	9b01      	ldr	r3, [sp, #4]
 8008cd8:	f845 c003 	str.w	ip, [r5, r3]
 8008cdc:	9b03      	ldr	r3, [sp, #12]
 8008cde:	3104      	adds	r1, #4
 8008ce0:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8008ce4:	f1b9 0f00 	cmp.w	r9, #0
 8008ce8:	d021      	beq.n	8008d2e <__multiply+0x142>
 8008cea:	682b      	ldr	r3, [r5, #0]
 8008cec:	f104 0c14 	add.w	ip, r4, #20
 8008cf0:	46ae      	mov	lr, r5
 8008cf2:	f04f 0a00 	mov.w	sl, #0
 8008cf6:	f8bc b000 	ldrh.w	fp, [ip]
 8008cfa:	b29b      	uxth	r3, r3
 8008cfc:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8008d00:	fb09 770b 	mla	r7, r9, fp, r7
 8008d04:	4457      	add	r7, sl
 8008d06:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008d0a:	f84e 3b04 	str.w	r3, [lr], #4
 8008d0e:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008d12:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008d16:	f8be 3000 	ldrh.w	r3, [lr]
 8008d1a:	4562      	cmp	r2, ip
 8008d1c:	fb09 330a 	mla	r3, r9, sl, r3
 8008d20:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8008d24:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008d28:	d8e5      	bhi.n	8008cf6 <__multiply+0x10a>
 8008d2a:	9f01      	ldr	r7, [sp, #4]
 8008d2c:	51eb      	str	r3, [r5, r7]
 8008d2e:	3504      	adds	r5, #4
 8008d30:	e799      	b.n	8008c66 <__multiply+0x7a>
 8008d32:	3e01      	subs	r6, #1
 8008d34:	e79b      	b.n	8008c6e <__multiply+0x82>
 8008d36:	bf00      	nop
 8008d38:	0800b35d 	.word	0x0800b35d
 8008d3c:	0800b36e 	.word	0x0800b36e

08008d40 <__pow5mult>:
 8008d40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008d44:	4615      	mov	r5, r2
 8008d46:	f012 0203 	ands.w	r2, r2, #3
 8008d4a:	4607      	mov	r7, r0
 8008d4c:	460e      	mov	r6, r1
 8008d4e:	d007      	beq.n	8008d60 <__pow5mult+0x20>
 8008d50:	3a01      	subs	r2, #1
 8008d52:	4c25      	ldr	r4, [pc, #148]	@ (8008de8 <__pow5mult+0xa8>)
 8008d54:	2300      	movs	r3, #0
 8008d56:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008d5a:	f7ff fe53 	bl	8008a04 <__multadd>
 8008d5e:	4606      	mov	r6, r0
 8008d60:	10ad      	asrs	r5, r5, #2
 8008d62:	d03d      	beq.n	8008de0 <__pow5mult+0xa0>
 8008d64:	69fc      	ldr	r4, [r7, #28]
 8008d66:	b97c      	cbnz	r4, 8008d88 <__pow5mult+0x48>
 8008d68:	2010      	movs	r0, #16
 8008d6a:	f7ff fd33 	bl	80087d4 <malloc>
 8008d6e:	4602      	mov	r2, r0
 8008d70:	61f8      	str	r0, [r7, #28]
 8008d72:	b928      	cbnz	r0, 8008d80 <__pow5mult+0x40>
 8008d74:	4b1d      	ldr	r3, [pc, #116]	@ (8008dec <__pow5mult+0xac>)
 8008d76:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8008d7a:	481d      	ldr	r0, [pc, #116]	@ (8008df0 <__pow5mult+0xb0>)
 8008d7c:	f001 fd40 	bl	800a800 <__assert_func>
 8008d80:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008d84:	6004      	str	r4, [r0, #0]
 8008d86:	60c4      	str	r4, [r0, #12]
 8008d88:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8008d8c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008d90:	b94c      	cbnz	r4, 8008da6 <__pow5mult+0x66>
 8008d92:	f240 2171 	movw	r1, #625	@ 0x271
 8008d96:	4638      	mov	r0, r7
 8008d98:	f7ff ff12 	bl	8008bc0 <__i2b>
 8008d9c:	2300      	movs	r3, #0
 8008d9e:	4604      	mov	r4, r0
 8008da0:	f8c8 0008 	str.w	r0, [r8, #8]
 8008da4:	6003      	str	r3, [r0, #0]
 8008da6:	f04f 0900 	mov.w	r9, #0
 8008daa:	07eb      	lsls	r3, r5, #31
 8008dac:	d50a      	bpl.n	8008dc4 <__pow5mult+0x84>
 8008dae:	4631      	mov	r1, r6
 8008db0:	4622      	mov	r2, r4
 8008db2:	4638      	mov	r0, r7
 8008db4:	f7ff ff1a 	bl	8008bec <__multiply>
 8008db8:	4680      	mov	r8, r0
 8008dba:	4631      	mov	r1, r6
 8008dbc:	4638      	mov	r0, r7
 8008dbe:	4646      	mov	r6, r8
 8008dc0:	f7ff fdfe 	bl	80089c0 <_Bfree>
 8008dc4:	106d      	asrs	r5, r5, #1
 8008dc6:	d00b      	beq.n	8008de0 <__pow5mult+0xa0>
 8008dc8:	6820      	ldr	r0, [r4, #0]
 8008dca:	b938      	cbnz	r0, 8008ddc <__pow5mult+0x9c>
 8008dcc:	4622      	mov	r2, r4
 8008dce:	4621      	mov	r1, r4
 8008dd0:	4638      	mov	r0, r7
 8008dd2:	f7ff ff0b 	bl	8008bec <__multiply>
 8008dd6:	6020      	str	r0, [r4, #0]
 8008dd8:	f8c0 9000 	str.w	r9, [r0]
 8008ddc:	4604      	mov	r4, r0
 8008dde:	e7e4      	b.n	8008daa <__pow5mult+0x6a>
 8008de0:	4630      	mov	r0, r6
 8008de2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008de6:	bf00      	nop
 8008de8:	0800b3c8 	.word	0x0800b3c8
 8008dec:	0800b2ee 	.word	0x0800b2ee
 8008df0:	0800b36e 	.word	0x0800b36e

08008df4 <__lshift>:
 8008df4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008df8:	460c      	mov	r4, r1
 8008dfa:	4607      	mov	r7, r0
 8008dfc:	4691      	mov	r9, r2
 8008dfe:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008e02:	6923      	ldr	r3, [r4, #16]
 8008e04:	6849      	ldr	r1, [r1, #4]
 8008e06:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008e0a:	68a3      	ldr	r3, [r4, #8]
 8008e0c:	f108 0601 	add.w	r6, r8, #1
 8008e10:	42b3      	cmp	r3, r6
 8008e12:	db0b      	blt.n	8008e2c <__lshift+0x38>
 8008e14:	4638      	mov	r0, r7
 8008e16:	f7ff fd93 	bl	8008940 <_Balloc>
 8008e1a:	4605      	mov	r5, r0
 8008e1c:	b948      	cbnz	r0, 8008e32 <__lshift+0x3e>
 8008e1e:	4602      	mov	r2, r0
 8008e20:	4b28      	ldr	r3, [pc, #160]	@ (8008ec4 <__lshift+0xd0>)
 8008e22:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8008e26:	4828      	ldr	r0, [pc, #160]	@ (8008ec8 <__lshift+0xd4>)
 8008e28:	f001 fcea 	bl	800a800 <__assert_func>
 8008e2c:	3101      	adds	r1, #1
 8008e2e:	005b      	lsls	r3, r3, #1
 8008e30:	e7ee      	b.n	8008e10 <__lshift+0x1c>
 8008e32:	2300      	movs	r3, #0
 8008e34:	f100 0114 	add.w	r1, r0, #20
 8008e38:	f100 0210 	add.w	r2, r0, #16
 8008e3c:	4618      	mov	r0, r3
 8008e3e:	4553      	cmp	r3, sl
 8008e40:	db33      	blt.n	8008eaa <__lshift+0xb6>
 8008e42:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008e46:	f104 0314 	add.w	r3, r4, #20
 8008e4a:	6920      	ldr	r0, [r4, #16]
 8008e4c:	f019 091f 	ands.w	r9, r9, #31
 8008e50:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008e54:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008e58:	d02b      	beq.n	8008eb2 <__lshift+0xbe>
 8008e5a:	f1c9 0e20 	rsb	lr, r9, #32
 8008e5e:	468a      	mov	sl, r1
 8008e60:	2200      	movs	r2, #0
 8008e62:	6818      	ldr	r0, [r3, #0]
 8008e64:	fa00 f009 	lsl.w	r0, r0, r9
 8008e68:	4310      	orrs	r0, r2
 8008e6a:	f84a 0b04 	str.w	r0, [sl], #4
 8008e6e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008e72:	459c      	cmp	ip, r3
 8008e74:	fa22 f20e 	lsr.w	r2, r2, lr
 8008e78:	d8f3      	bhi.n	8008e62 <__lshift+0x6e>
 8008e7a:	ebac 0304 	sub.w	r3, ip, r4
 8008e7e:	f104 0015 	add.w	r0, r4, #21
 8008e82:	3b15      	subs	r3, #21
 8008e84:	f023 0303 	bic.w	r3, r3, #3
 8008e88:	3304      	adds	r3, #4
 8008e8a:	4584      	cmp	ip, r0
 8008e8c:	bf38      	it	cc
 8008e8e:	2304      	movcc	r3, #4
 8008e90:	50ca      	str	r2, [r1, r3]
 8008e92:	b10a      	cbz	r2, 8008e98 <__lshift+0xa4>
 8008e94:	f108 0602 	add.w	r6, r8, #2
 8008e98:	3e01      	subs	r6, #1
 8008e9a:	4638      	mov	r0, r7
 8008e9c:	4621      	mov	r1, r4
 8008e9e:	612e      	str	r6, [r5, #16]
 8008ea0:	f7ff fd8e 	bl	80089c0 <_Bfree>
 8008ea4:	4628      	mov	r0, r5
 8008ea6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008eaa:	3301      	adds	r3, #1
 8008eac:	f842 0f04 	str.w	r0, [r2, #4]!
 8008eb0:	e7c5      	b.n	8008e3e <__lshift+0x4a>
 8008eb2:	3904      	subs	r1, #4
 8008eb4:	f853 2b04 	ldr.w	r2, [r3], #4
 8008eb8:	459c      	cmp	ip, r3
 8008eba:	f841 2f04 	str.w	r2, [r1, #4]!
 8008ebe:	d8f9      	bhi.n	8008eb4 <__lshift+0xc0>
 8008ec0:	e7ea      	b.n	8008e98 <__lshift+0xa4>
 8008ec2:	bf00      	nop
 8008ec4:	0800b35d 	.word	0x0800b35d
 8008ec8:	0800b36e 	.word	0x0800b36e

08008ecc <__mcmp>:
 8008ecc:	4603      	mov	r3, r0
 8008ece:	690a      	ldr	r2, [r1, #16]
 8008ed0:	6900      	ldr	r0, [r0, #16]
 8008ed2:	1a80      	subs	r0, r0, r2
 8008ed4:	b530      	push	{r4, r5, lr}
 8008ed6:	d10e      	bne.n	8008ef6 <__mcmp+0x2a>
 8008ed8:	3314      	adds	r3, #20
 8008eda:	3114      	adds	r1, #20
 8008edc:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008ee0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008ee4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008ee8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008eec:	4295      	cmp	r5, r2
 8008eee:	d003      	beq.n	8008ef8 <__mcmp+0x2c>
 8008ef0:	d205      	bcs.n	8008efe <__mcmp+0x32>
 8008ef2:	f04f 30ff 	mov.w	r0, #4294967295
 8008ef6:	bd30      	pop	{r4, r5, pc}
 8008ef8:	42a3      	cmp	r3, r4
 8008efa:	d3f3      	bcc.n	8008ee4 <__mcmp+0x18>
 8008efc:	e7fb      	b.n	8008ef6 <__mcmp+0x2a>
 8008efe:	2001      	movs	r0, #1
 8008f00:	e7f9      	b.n	8008ef6 <__mcmp+0x2a>
	...

08008f04 <__mdiff>:
 8008f04:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f08:	4689      	mov	r9, r1
 8008f0a:	4606      	mov	r6, r0
 8008f0c:	4611      	mov	r1, r2
 8008f0e:	4614      	mov	r4, r2
 8008f10:	4648      	mov	r0, r9
 8008f12:	f7ff ffdb 	bl	8008ecc <__mcmp>
 8008f16:	1e05      	subs	r5, r0, #0
 8008f18:	d112      	bne.n	8008f40 <__mdiff+0x3c>
 8008f1a:	4629      	mov	r1, r5
 8008f1c:	4630      	mov	r0, r6
 8008f1e:	f7ff fd0f 	bl	8008940 <_Balloc>
 8008f22:	4602      	mov	r2, r0
 8008f24:	b928      	cbnz	r0, 8008f32 <__mdiff+0x2e>
 8008f26:	4b41      	ldr	r3, [pc, #260]	@ (800902c <__mdiff+0x128>)
 8008f28:	f240 2137 	movw	r1, #567	@ 0x237
 8008f2c:	4840      	ldr	r0, [pc, #256]	@ (8009030 <__mdiff+0x12c>)
 8008f2e:	f001 fc67 	bl	800a800 <__assert_func>
 8008f32:	2301      	movs	r3, #1
 8008f34:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008f38:	4610      	mov	r0, r2
 8008f3a:	b003      	add	sp, #12
 8008f3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f40:	bfbc      	itt	lt
 8008f42:	464b      	movlt	r3, r9
 8008f44:	46a1      	movlt	r9, r4
 8008f46:	4630      	mov	r0, r6
 8008f48:	bfb8      	it	lt
 8008f4a:	2501      	movlt	r5, #1
 8008f4c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8008f50:	bfb4      	ite	lt
 8008f52:	461c      	movlt	r4, r3
 8008f54:	2500      	movge	r5, #0
 8008f56:	f7ff fcf3 	bl	8008940 <_Balloc>
 8008f5a:	4602      	mov	r2, r0
 8008f5c:	b918      	cbnz	r0, 8008f66 <__mdiff+0x62>
 8008f5e:	4b33      	ldr	r3, [pc, #204]	@ (800902c <__mdiff+0x128>)
 8008f60:	f240 2145 	movw	r1, #581	@ 0x245
 8008f64:	e7e2      	b.n	8008f2c <__mdiff+0x28>
 8008f66:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8008f6a:	f104 0e14 	add.w	lr, r4, #20
 8008f6e:	6926      	ldr	r6, [r4, #16]
 8008f70:	f100 0b14 	add.w	fp, r0, #20
 8008f74:	60c5      	str	r5, [r0, #12]
 8008f76:	f109 0514 	add.w	r5, r9, #20
 8008f7a:	f109 0310 	add.w	r3, r9, #16
 8008f7e:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8008f82:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8008f86:	46d9      	mov	r9, fp
 8008f88:	f04f 0c00 	mov.w	ip, #0
 8008f8c:	9301      	str	r3, [sp, #4]
 8008f8e:	9b01      	ldr	r3, [sp, #4]
 8008f90:	f85e 0b04 	ldr.w	r0, [lr], #4
 8008f94:	f853 af04 	ldr.w	sl, [r3, #4]!
 8008f98:	4576      	cmp	r6, lr
 8008f9a:	9301      	str	r3, [sp, #4]
 8008f9c:	fa1f f38a 	uxth.w	r3, sl
 8008fa0:	4619      	mov	r1, r3
 8008fa2:	b283      	uxth	r3, r0
 8008fa4:	ea4f 4010 	mov.w	r0, r0, lsr #16
 8008fa8:	eba1 0303 	sub.w	r3, r1, r3
 8008fac:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8008fb0:	4463      	add	r3, ip
 8008fb2:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8008fb6:	b29b      	uxth	r3, r3
 8008fb8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008fbc:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8008fc0:	f849 3b04 	str.w	r3, [r9], #4
 8008fc4:	d8e3      	bhi.n	8008f8e <__mdiff+0x8a>
 8008fc6:	1b33      	subs	r3, r6, r4
 8008fc8:	3415      	adds	r4, #21
 8008fca:	3b15      	subs	r3, #21
 8008fcc:	f023 0303 	bic.w	r3, r3, #3
 8008fd0:	3304      	adds	r3, #4
 8008fd2:	42a6      	cmp	r6, r4
 8008fd4:	bf38      	it	cc
 8008fd6:	2304      	movcc	r3, #4
 8008fd8:	441d      	add	r5, r3
 8008fda:	445b      	add	r3, fp
 8008fdc:	462c      	mov	r4, r5
 8008fde:	461e      	mov	r6, r3
 8008fe0:	4544      	cmp	r4, r8
 8008fe2:	d30e      	bcc.n	8009002 <__mdiff+0xfe>
 8008fe4:	f108 0103 	add.w	r1, r8, #3
 8008fe8:	1b49      	subs	r1, r1, r5
 8008fea:	3d03      	subs	r5, #3
 8008fec:	f021 0103 	bic.w	r1, r1, #3
 8008ff0:	45a8      	cmp	r8, r5
 8008ff2:	bf38      	it	cc
 8008ff4:	2100      	movcc	r1, #0
 8008ff6:	440b      	add	r3, r1
 8008ff8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008ffc:	b199      	cbz	r1, 8009026 <__mdiff+0x122>
 8008ffe:	6117      	str	r7, [r2, #16]
 8009000:	e79a      	b.n	8008f38 <__mdiff+0x34>
 8009002:	f854 1b04 	ldr.w	r1, [r4], #4
 8009006:	46e6      	mov	lr, ip
 8009008:	fa1f fc81 	uxth.w	ip, r1
 800900c:	0c08      	lsrs	r0, r1, #16
 800900e:	4471      	add	r1, lr
 8009010:	44f4      	add	ip, lr
 8009012:	b289      	uxth	r1, r1
 8009014:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8009018:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800901c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009020:	f846 1b04 	str.w	r1, [r6], #4
 8009024:	e7dc      	b.n	8008fe0 <__mdiff+0xdc>
 8009026:	3f01      	subs	r7, #1
 8009028:	e7e6      	b.n	8008ff8 <__mdiff+0xf4>
 800902a:	bf00      	nop
 800902c:	0800b35d 	.word	0x0800b35d
 8009030:	0800b36e 	.word	0x0800b36e

08009034 <__ulp>:
 8009034:	b082      	sub	sp, #8
 8009036:	4b11      	ldr	r3, [pc, #68]	@ (800907c <__ulp+0x48>)
 8009038:	ed8d 0b00 	vstr	d0, [sp]
 800903c:	9a01      	ldr	r2, [sp, #4]
 800903e:	4013      	ands	r3, r2
 8009040:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8009044:	2b00      	cmp	r3, #0
 8009046:	dc08      	bgt.n	800905a <__ulp+0x26>
 8009048:	425b      	negs	r3, r3
 800904a:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800904e:	ea4f 5223 	mov.w	r2, r3, asr #20
 8009052:	da04      	bge.n	800905e <__ulp+0x2a>
 8009054:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8009058:	4113      	asrs	r3, r2
 800905a:	2200      	movs	r2, #0
 800905c:	e008      	b.n	8009070 <__ulp+0x3c>
 800905e:	f1a2 0314 	sub.w	r3, r2, #20
 8009062:	2b1e      	cmp	r3, #30
 8009064:	bfd6      	itet	le
 8009066:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800906a:	2201      	movgt	r2, #1
 800906c:	40da      	lsrle	r2, r3
 800906e:	2300      	movs	r3, #0
 8009070:	4619      	mov	r1, r3
 8009072:	4610      	mov	r0, r2
 8009074:	ec41 0b10 	vmov	d0, r0, r1
 8009078:	b002      	add	sp, #8
 800907a:	4770      	bx	lr
 800907c:	7ff00000 	.word	0x7ff00000

08009080 <__b2d>:
 8009080:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009084:	6906      	ldr	r6, [r0, #16]
 8009086:	f100 0814 	add.w	r8, r0, #20
 800908a:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800908e:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8009092:	1f37      	subs	r7, r6, #4
 8009094:	4610      	mov	r0, r2
 8009096:	f7ff fd47 	bl	8008b28 <__hi0bits>
 800909a:	f1c0 0320 	rsb	r3, r0, #32
 800909e:	280a      	cmp	r0, #10
 80090a0:	600b      	str	r3, [r1, #0]
 80090a2:	491d      	ldr	r1, [pc, #116]	@ (8009118 <__b2d+0x98>)
 80090a4:	dc16      	bgt.n	80090d4 <__b2d+0x54>
 80090a6:	f1c0 0c0b 	rsb	ip, r0, #11
 80090aa:	45b8      	cmp	r8, r7
 80090ac:	f100 0015 	add.w	r0, r0, #21
 80090b0:	fa22 f30c 	lsr.w	r3, r2, ip
 80090b4:	fa02 f000 	lsl.w	r0, r2, r0
 80090b8:	ea43 0501 	orr.w	r5, r3, r1
 80090bc:	bf34      	ite	cc
 80090be:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80090c2:	2300      	movcs	r3, #0
 80090c4:	fa23 f30c 	lsr.w	r3, r3, ip
 80090c8:	4303      	orrs	r3, r0
 80090ca:	461c      	mov	r4, r3
 80090cc:	ec45 4b10 	vmov	d0, r4, r5
 80090d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80090d4:	45b8      	cmp	r8, r7
 80090d6:	bf3a      	itte	cc
 80090d8:	f1a6 0708 	subcc.w	r7, r6, #8
 80090dc:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80090e0:	2300      	movcs	r3, #0
 80090e2:	380b      	subs	r0, #11
 80090e4:	d014      	beq.n	8009110 <__b2d+0x90>
 80090e6:	f1c0 0120 	rsb	r1, r0, #32
 80090ea:	4082      	lsls	r2, r0
 80090ec:	4547      	cmp	r7, r8
 80090ee:	fa23 f401 	lsr.w	r4, r3, r1
 80090f2:	fa03 f300 	lsl.w	r3, r3, r0
 80090f6:	ea42 0204 	orr.w	r2, r2, r4
 80090fa:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 80090fe:	bf8c      	ite	hi
 8009100:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8009104:	2200      	movls	r2, #0
 8009106:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800910a:	40ca      	lsrs	r2, r1
 800910c:	4313      	orrs	r3, r2
 800910e:	e7dc      	b.n	80090ca <__b2d+0x4a>
 8009110:	ea42 0501 	orr.w	r5, r2, r1
 8009114:	e7d9      	b.n	80090ca <__b2d+0x4a>
 8009116:	bf00      	nop
 8009118:	3ff00000 	.word	0x3ff00000

0800911c <__d2b>:
 800911c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009120:	460f      	mov	r7, r1
 8009122:	2101      	movs	r1, #1
 8009124:	4616      	mov	r6, r2
 8009126:	ec59 8b10 	vmov	r8, r9, d0
 800912a:	f7ff fc09 	bl	8008940 <_Balloc>
 800912e:	4604      	mov	r4, r0
 8009130:	b930      	cbnz	r0, 8009140 <__d2b+0x24>
 8009132:	4602      	mov	r2, r0
 8009134:	4b23      	ldr	r3, [pc, #140]	@ (80091c4 <__d2b+0xa8>)
 8009136:	f240 310f 	movw	r1, #783	@ 0x30f
 800913a:	4823      	ldr	r0, [pc, #140]	@ (80091c8 <__d2b+0xac>)
 800913c:	f001 fb60 	bl	800a800 <__assert_func>
 8009140:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8009144:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009148:	b10d      	cbz	r5, 800914e <__d2b+0x32>
 800914a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800914e:	9301      	str	r3, [sp, #4]
 8009150:	f1b8 0300 	subs.w	r3, r8, #0
 8009154:	d023      	beq.n	800919e <__d2b+0x82>
 8009156:	4668      	mov	r0, sp
 8009158:	9300      	str	r3, [sp, #0]
 800915a:	f7ff fd04 	bl	8008b66 <__lo0bits>
 800915e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8009162:	b1d0      	cbz	r0, 800919a <__d2b+0x7e>
 8009164:	f1c0 0320 	rsb	r3, r0, #32
 8009168:	fa02 f303 	lsl.w	r3, r2, r3
 800916c:	40c2      	lsrs	r2, r0
 800916e:	430b      	orrs	r3, r1
 8009170:	9201      	str	r2, [sp, #4]
 8009172:	6163      	str	r3, [r4, #20]
 8009174:	9b01      	ldr	r3, [sp, #4]
 8009176:	2b00      	cmp	r3, #0
 8009178:	61a3      	str	r3, [r4, #24]
 800917a:	bf0c      	ite	eq
 800917c:	2201      	moveq	r2, #1
 800917e:	2202      	movne	r2, #2
 8009180:	6122      	str	r2, [r4, #16]
 8009182:	b1a5      	cbz	r5, 80091ae <__d2b+0x92>
 8009184:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8009188:	4405      	add	r5, r0
 800918a:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800918e:	603d      	str	r5, [r7, #0]
 8009190:	6030      	str	r0, [r6, #0]
 8009192:	4620      	mov	r0, r4
 8009194:	b003      	add	sp, #12
 8009196:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800919a:	6161      	str	r1, [r4, #20]
 800919c:	e7ea      	b.n	8009174 <__d2b+0x58>
 800919e:	a801      	add	r0, sp, #4
 80091a0:	f7ff fce1 	bl	8008b66 <__lo0bits>
 80091a4:	9b01      	ldr	r3, [sp, #4]
 80091a6:	3020      	adds	r0, #32
 80091a8:	2201      	movs	r2, #1
 80091aa:	6163      	str	r3, [r4, #20]
 80091ac:	e7e8      	b.n	8009180 <__d2b+0x64>
 80091ae:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80091b2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80091b6:	6038      	str	r0, [r7, #0]
 80091b8:	6918      	ldr	r0, [r3, #16]
 80091ba:	f7ff fcb5 	bl	8008b28 <__hi0bits>
 80091be:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80091c2:	e7e5      	b.n	8009190 <__d2b+0x74>
 80091c4:	0800b35d 	.word	0x0800b35d
 80091c8:	0800b36e 	.word	0x0800b36e

080091cc <__ratio>:
 80091cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091d0:	b085      	sub	sp, #20
 80091d2:	e9cd 1000 	strd	r1, r0, [sp]
 80091d6:	a902      	add	r1, sp, #8
 80091d8:	f7ff ff52 	bl	8009080 <__b2d>
 80091dc:	a903      	add	r1, sp, #12
 80091de:	9800      	ldr	r0, [sp, #0]
 80091e0:	ec55 4b10 	vmov	r4, r5, d0
 80091e4:	f7ff ff4c 	bl	8009080 <__b2d>
 80091e8:	9b01      	ldr	r3, [sp, #4]
 80091ea:	462f      	mov	r7, r5
 80091ec:	4620      	mov	r0, r4
 80091ee:	6919      	ldr	r1, [r3, #16]
 80091f0:	9b00      	ldr	r3, [sp, #0]
 80091f2:	691b      	ldr	r3, [r3, #16]
 80091f4:	1ac9      	subs	r1, r1, r3
 80091f6:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 80091fa:	ec5b ab10 	vmov	sl, fp, d0
 80091fe:	1a9b      	subs	r3, r3, r2
 8009200:	46d9      	mov	r9, fp
 8009202:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8009206:	2b00      	cmp	r3, #0
 8009208:	bfcd      	iteet	gt
 800920a:	462a      	movgt	r2, r5
 800920c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8009210:	465a      	movle	r2, fp
 8009212:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8009216:	bfd8      	it	le
 8009218:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800921c:	4652      	mov	r2, sl
 800921e:	4639      	mov	r1, r7
 8009220:	464b      	mov	r3, r9
 8009222:	f7f7 fb31 	bl	8000888 <__aeabi_ddiv>
 8009226:	ec41 0b10 	vmov	d0, r0, r1
 800922a:	b005      	add	sp, #20
 800922c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009230 <__copybits>:
 8009230:	3901      	subs	r1, #1
 8009232:	f102 0314 	add.w	r3, r2, #20
 8009236:	1149      	asrs	r1, r1, #5
 8009238:	b570      	push	{r4, r5, r6, lr}
 800923a:	3101      	adds	r1, #1
 800923c:	6914      	ldr	r4, [r2, #16]
 800923e:	1f05      	subs	r5, r0, #4
 8009240:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8009244:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8009248:	42a3      	cmp	r3, r4
 800924a:	d30c      	bcc.n	8009266 <__copybits+0x36>
 800924c:	1aa3      	subs	r3, r4, r2
 800924e:	3211      	adds	r2, #17
 8009250:	3b11      	subs	r3, #17
 8009252:	f023 0303 	bic.w	r3, r3, #3
 8009256:	42a2      	cmp	r2, r4
 8009258:	bf88      	it	hi
 800925a:	2300      	movhi	r3, #0
 800925c:	4418      	add	r0, r3
 800925e:	2300      	movs	r3, #0
 8009260:	4288      	cmp	r0, r1
 8009262:	d305      	bcc.n	8009270 <__copybits+0x40>
 8009264:	bd70      	pop	{r4, r5, r6, pc}
 8009266:	f853 6b04 	ldr.w	r6, [r3], #4
 800926a:	f845 6f04 	str.w	r6, [r5, #4]!
 800926e:	e7eb      	b.n	8009248 <__copybits+0x18>
 8009270:	f840 3b04 	str.w	r3, [r0], #4
 8009274:	e7f4      	b.n	8009260 <__copybits+0x30>

08009276 <__any_on>:
 8009276:	f100 0214 	add.w	r2, r0, #20
 800927a:	114b      	asrs	r3, r1, #5
 800927c:	6900      	ldr	r0, [r0, #16]
 800927e:	4298      	cmp	r0, r3
 8009280:	b510      	push	{r4, lr}
 8009282:	db11      	blt.n	80092a8 <__any_on+0x32>
 8009284:	dd0a      	ble.n	800929c <__any_on+0x26>
 8009286:	f011 011f 	ands.w	r1, r1, #31
 800928a:	d007      	beq.n	800929c <__any_on+0x26>
 800928c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8009290:	fa24 f001 	lsr.w	r0, r4, r1
 8009294:	fa00 f101 	lsl.w	r1, r0, r1
 8009298:	428c      	cmp	r4, r1
 800929a:	d10b      	bne.n	80092b4 <__any_on+0x3e>
 800929c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80092a0:	4293      	cmp	r3, r2
 80092a2:	d803      	bhi.n	80092ac <__any_on+0x36>
 80092a4:	2000      	movs	r0, #0
 80092a6:	bd10      	pop	{r4, pc}
 80092a8:	4603      	mov	r3, r0
 80092aa:	e7f7      	b.n	800929c <__any_on+0x26>
 80092ac:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80092b0:	2900      	cmp	r1, #0
 80092b2:	d0f5      	beq.n	80092a0 <__any_on+0x2a>
 80092b4:	2001      	movs	r0, #1
 80092b6:	e7f6      	b.n	80092a6 <__any_on+0x30>

080092b8 <sulp>:
 80092b8:	b570      	push	{r4, r5, r6, lr}
 80092ba:	4604      	mov	r4, r0
 80092bc:	460d      	mov	r5, r1
 80092be:	4616      	mov	r6, r2
 80092c0:	ec45 4b10 	vmov	d0, r4, r5
 80092c4:	f7ff feb6 	bl	8009034 <__ulp>
 80092c8:	ec51 0b10 	vmov	r0, r1, d0
 80092cc:	b17e      	cbz	r6, 80092ee <sulp+0x36>
 80092ce:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80092d2:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	dd09      	ble.n	80092ee <sulp+0x36>
 80092da:	051b      	lsls	r3, r3, #20
 80092dc:	2400      	movs	r4, #0
 80092de:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 80092e2:	4622      	mov	r2, r4
 80092e4:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 80092e8:	462b      	mov	r3, r5
 80092ea:	f7f7 f9a3 	bl	8000634 <__aeabi_dmul>
 80092ee:	ec41 0b10 	vmov	d0, r0, r1
 80092f2:	bd70      	pop	{r4, r5, r6, pc}
 80092f4:	0000      	movs	r0, r0
	...

080092f8 <_strtod_l>:
 80092f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092fc:	b09f      	sub	sp, #124	@ 0x7c
 80092fe:	460c      	mov	r4, r1
 8009300:	f04f 0a00 	mov.w	sl, #0
 8009304:	f04f 0b00 	mov.w	fp, #0
 8009308:	9217      	str	r2, [sp, #92]	@ 0x5c
 800930a:	2200      	movs	r2, #0
 800930c:	9005      	str	r0, [sp, #20]
 800930e:	921a      	str	r2, [sp, #104]	@ 0x68
 8009310:	460a      	mov	r2, r1
 8009312:	9219      	str	r2, [sp, #100]	@ 0x64
 8009314:	7811      	ldrb	r1, [r2, #0]
 8009316:	292b      	cmp	r1, #43	@ 0x2b
 8009318:	d04a      	beq.n	80093b0 <_strtod_l+0xb8>
 800931a:	d838      	bhi.n	800938e <_strtod_l+0x96>
 800931c:	290d      	cmp	r1, #13
 800931e:	d832      	bhi.n	8009386 <_strtod_l+0x8e>
 8009320:	2908      	cmp	r1, #8
 8009322:	d832      	bhi.n	800938a <_strtod_l+0x92>
 8009324:	2900      	cmp	r1, #0
 8009326:	d03b      	beq.n	80093a0 <_strtod_l+0xa8>
 8009328:	2200      	movs	r2, #0
 800932a:	920b      	str	r2, [sp, #44]	@ 0x2c
 800932c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800932e:	782a      	ldrb	r2, [r5, #0]
 8009330:	2a30      	cmp	r2, #48	@ 0x30
 8009332:	f040 80b3 	bne.w	800949c <_strtod_l+0x1a4>
 8009336:	786a      	ldrb	r2, [r5, #1]
 8009338:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800933c:	2a58      	cmp	r2, #88	@ 0x58
 800933e:	d16e      	bne.n	800941e <_strtod_l+0x126>
 8009340:	9302      	str	r3, [sp, #8]
 8009342:	a919      	add	r1, sp, #100	@ 0x64
 8009344:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009346:	4a90      	ldr	r2, [pc, #576]	@ (8009588 <_strtod_l+0x290>)
 8009348:	9301      	str	r3, [sp, #4]
 800934a:	ab1a      	add	r3, sp, #104	@ 0x68
 800934c:	9805      	ldr	r0, [sp, #20]
 800934e:	9300      	str	r3, [sp, #0]
 8009350:	ab1b      	add	r3, sp, #108	@ 0x6c
 8009352:	f001 faed 	bl	800a930 <__gethex>
 8009356:	f010 060f 	ands.w	r6, r0, #15
 800935a:	4604      	mov	r4, r0
 800935c:	d005      	beq.n	800936a <_strtod_l+0x72>
 800935e:	2e06      	cmp	r6, #6
 8009360:	d128      	bne.n	80093b4 <_strtod_l+0xbc>
 8009362:	3501      	adds	r5, #1
 8009364:	2300      	movs	r3, #0
 8009366:	9519      	str	r5, [sp, #100]	@ 0x64
 8009368:	930b      	str	r3, [sp, #44]	@ 0x2c
 800936a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800936c:	2b00      	cmp	r3, #0
 800936e:	f040 858e 	bne.w	8009e8e <_strtod_l+0xb96>
 8009372:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009374:	b1cb      	cbz	r3, 80093aa <_strtod_l+0xb2>
 8009376:	4652      	mov	r2, sl
 8009378:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800937c:	ec43 2b10 	vmov	d0, r2, r3
 8009380:	b01f      	add	sp, #124	@ 0x7c
 8009382:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009386:	2920      	cmp	r1, #32
 8009388:	d1ce      	bne.n	8009328 <_strtod_l+0x30>
 800938a:	3201      	adds	r2, #1
 800938c:	e7c1      	b.n	8009312 <_strtod_l+0x1a>
 800938e:	292d      	cmp	r1, #45	@ 0x2d
 8009390:	d1ca      	bne.n	8009328 <_strtod_l+0x30>
 8009392:	2101      	movs	r1, #1
 8009394:	910b      	str	r1, [sp, #44]	@ 0x2c
 8009396:	1c51      	adds	r1, r2, #1
 8009398:	9119      	str	r1, [sp, #100]	@ 0x64
 800939a:	7852      	ldrb	r2, [r2, #1]
 800939c:	2a00      	cmp	r2, #0
 800939e:	d1c5      	bne.n	800932c <_strtod_l+0x34>
 80093a0:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80093a2:	9419      	str	r4, [sp, #100]	@ 0x64
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	f040 8570 	bne.w	8009e8a <_strtod_l+0xb92>
 80093aa:	4652      	mov	r2, sl
 80093ac:	465b      	mov	r3, fp
 80093ae:	e7e5      	b.n	800937c <_strtod_l+0x84>
 80093b0:	2100      	movs	r1, #0
 80093b2:	e7ef      	b.n	8009394 <_strtod_l+0x9c>
 80093b4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80093b6:	b13a      	cbz	r2, 80093c8 <_strtod_l+0xd0>
 80093b8:	2135      	movs	r1, #53	@ 0x35
 80093ba:	a81c      	add	r0, sp, #112	@ 0x70
 80093bc:	f7ff ff38 	bl	8009230 <__copybits>
 80093c0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80093c2:	9805      	ldr	r0, [sp, #20]
 80093c4:	f7ff fafc 	bl	80089c0 <_Bfree>
 80093c8:	3e01      	subs	r6, #1
 80093ca:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 80093cc:	2e04      	cmp	r6, #4
 80093ce:	d806      	bhi.n	80093de <_strtod_l+0xe6>
 80093d0:	e8df f006 	tbb	[pc, r6]
 80093d4:	201d0314 	.word	0x201d0314
 80093d8:	14          	.byte	0x14
 80093d9:	00          	.byte	0x00
 80093da:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 80093de:	05e1      	lsls	r1, r4, #23
 80093e0:	bf48      	it	mi
 80093e2:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 80093e6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80093ea:	0d1b      	lsrs	r3, r3, #20
 80093ec:	051b      	lsls	r3, r3, #20
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	d1bb      	bne.n	800936a <_strtod_l+0x72>
 80093f2:	f7fe fb03 	bl	80079fc <__errno>
 80093f6:	2322      	movs	r3, #34	@ 0x22
 80093f8:	6003      	str	r3, [r0, #0]
 80093fa:	e7b6      	b.n	800936a <_strtod_l+0x72>
 80093fc:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8009400:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8009404:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8009408:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800940c:	e7e7      	b.n	80093de <_strtod_l+0xe6>
 800940e:	f8df b180 	ldr.w	fp, [pc, #384]	@ 8009590 <_strtod_l+0x298>
 8009412:	e7e4      	b.n	80093de <_strtod_l+0xe6>
 8009414:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8009418:	f04f 3aff 	mov.w	sl, #4294967295
 800941c:	e7df      	b.n	80093de <_strtod_l+0xe6>
 800941e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009420:	1c5a      	adds	r2, r3, #1
 8009422:	9219      	str	r2, [sp, #100]	@ 0x64
 8009424:	785b      	ldrb	r3, [r3, #1]
 8009426:	2b30      	cmp	r3, #48	@ 0x30
 8009428:	d0f9      	beq.n	800941e <_strtod_l+0x126>
 800942a:	2b00      	cmp	r3, #0
 800942c:	d09d      	beq.n	800936a <_strtod_l+0x72>
 800942e:	2301      	movs	r3, #1
 8009430:	9309      	str	r3, [sp, #36]	@ 0x24
 8009432:	220a      	movs	r2, #10
 8009434:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009436:	930c      	str	r3, [sp, #48]	@ 0x30
 8009438:	2300      	movs	r3, #0
 800943a:	461f      	mov	r7, r3
 800943c:	9308      	str	r3, [sp, #32]
 800943e:	930a      	str	r3, [sp, #40]	@ 0x28
 8009440:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8009442:	7805      	ldrb	r5, [r0, #0]
 8009444:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8009448:	b2d9      	uxtb	r1, r3
 800944a:	2909      	cmp	r1, #9
 800944c:	d928      	bls.n	80094a0 <_strtod_l+0x1a8>
 800944e:	2201      	movs	r2, #1
 8009450:	494e      	ldr	r1, [pc, #312]	@ (800958c <_strtod_l+0x294>)
 8009452:	f001 f9ab 	bl	800a7ac <strncmp>
 8009456:	2800      	cmp	r0, #0
 8009458:	d033      	beq.n	80094c2 <_strtod_l+0x1ca>
 800945a:	2000      	movs	r0, #0
 800945c:	462a      	mov	r2, r5
 800945e:	463d      	mov	r5, r7
 8009460:	4681      	mov	r9, r0
 8009462:	4603      	mov	r3, r0
 8009464:	2a65      	cmp	r2, #101	@ 0x65
 8009466:	d001      	beq.n	800946c <_strtod_l+0x174>
 8009468:	2a45      	cmp	r2, #69	@ 0x45
 800946a:	d114      	bne.n	8009496 <_strtod_l+0x19e>
 800946c:	b91d      	cbnz	r5, 8009476 <_strtod_l+0x17e>
 800946e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009470:	4302      	orrs	r2, r0
 8009472:	d095      	beq.n	80093a0 <_strtod_l+0xa8>
 8009474:	2500      	movs	r5, #0
 8009476:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8009478:	1c62      	adds	r2, r4, #1
 800947a:	9219      	str	r2, [sp, #100]	@ 0x64
 800947c:	7862      	ldrb	r2, [r4, #1]
 800947e:	2a2b      	cmp	r2, #43	@ 0x2b
 8009480:	d078      	beq.n	8009574 <_strtod_l+0x27c>
 8009482:	2a2d      	cmp	r2, #45	@ 0x2d
 8009484:	d07c      	beq.n	8009580 <_strtod_l+0x288>
 8009486:	f04f 0c00 	mov.w	ip, #0
 800948a:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800948e:	2909      	cmp	r1, #9
 8009490:	f240 8084 	bls.w	800959c <_strtod_l+0x2a4>
 8009494:	9419      	str	r4, [sp, #100]	@ 0x64
 8009496:	f04f 0800 	mov.w	r8, #0
 800949a:	e0a4      	b.n	80095e6 <_strtod_l+0x2ee>
 800949c:	2300      	movs	r3, #0
 800949e:	e7c7      	b.n	8009430 <_strtod_l+0x138>
 80094a0:	2f08      	cmp	r7, #8
 80094a2:	f100 0001 	add.w	r0, r0, #1
 80094a6:	f107 0701 	add.w	r7, r7, #1
 80094aa:	bfd5      	itete	le
 80094ac:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 80094ae:	9908      	ldrgt	r1, [sp, #32]
 80094b0:	fb02 3301 	mlale	r3, r2, r1, r3
 80094b4:	fb02 3301 	mlagt	r3, r2, r1, r3
 80094b8:	bfd4      	ite	le
 80094ba:	930a      	strle	r3, [sp, #40]	@ 0x28
 80094bc:	9308      	strgt	r3, [sp, #32]
 80094be:	9019      	str	r0, [sp, #100]	@ 0x64
 80094c0:	e7be      	b.n	8009440 <_strtod_l+0x148>
 80094c2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80094c4:	1c5a      	adds	r2, r3, #1
 80094c6:	9219      	str	r2, [sp, #100]	@ 0x64
 80094c8:	785a      	ldrb	r2, [r3, #1]
 80094ca:	b37f      	cbz	r7, 800952c <_strtod_l+0x234>
 80094cc:	4681      	mov	r9, r0
 80094ce:	463d      	mov	r5, r7
 80094d0:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 80094d4:	2b09      	cmp	r3, #9
 80094d6:	d912      	bls.n	80094fe <_strtod_l+0x206>
 80094d8:	2301      	movs	r3, #1
 80094da:	e7c3      	b.n	8009464 <_strtod_l+0x16c>
 80094dc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80094de:	3001      	adds	r0, #1
 80094e0:	1c5a      	adds	r2, r3, #1
 80094e2:	9219      	str	r2, [sp, #100]	@ 0x64
 80094e4:	785a      	ldrb	r2, [r3, #1]
 80094e6:	2a30      	cmp	r2, #48	@ 0x30
 80094e8:	d0f8      	beq.n	80094dc <_strtod_l+0x1e4>
 80094ea:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 80094ee:	2b08      	cmp	r3, #8
 80094f0:	f200 84d2 	bhi.w	8009e98 <_strtod_l+0xba0>
 80094f4:	4681      	mov	r9, r0
 80094f6:	2000      	movs	r0, #0
 80094f8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80094fa:	4605      	mov	r5, r0
 80094fc:	930c      	str	r3, [sp, #48]	@ 0x30
 80094fe:	3a30      	subs	r2, #48	@ 0x30
 8009500:	f100 0301 	add.w	r3, r0, #1
 8009504:	d02a      	beq.n	800955c <_strtod_l+0x264>
 8009506:	4499      	add	r9, r3
 8009508:	eb00 0c05 	add.w	ip, r0, r5
 800950c:	462b      	mov	r3, r5
 800950e:	210a      	movs	r1, #10
 8009510:	4563      	cmp	r3, ip
 8009512:	d10d      	bne.n	8009530 <_strtod_l+0x238>
 8009514:	1c69      	adds	r1, r5, #1
 8009516:	4401      	add	r1, r0
 8009518:	4428      	add	r0, r5
 800951a:	2808      	cmp	r0, #8
 800951c:	dc16      	bgt.n	800954c <_strtod_l+0x254>
 800951e:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8009520:	230a      	movs	r3, #10
 8009522:	fb03 2300 	mla	r3, r3, r0, r2
 8009526:	930a      	str	r3, [sp, #40]	@ 0x28
 8009528:	2300      	movs	r3, #0
 800952a:	e018      	b.n	800955e <_strtod_l+0x266>
 800952c:	4638      	mov	r0, r7
 800952e:	e7da      	b.n	80094e6 <_strtod_l+0x1ee>
 8009530:	2b08      	cmp	r3, #8
 8009532:	f103 0301 	add.w	r3, r3, #1
 8009536:	dc03      	bgt.n	8009540 <_strtod_l+0x248>
 8009538:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800953a:	434e      	muls	r6, r1
 800953c:	960a      	str	r6, [sp, #40]	@ 0x28
 800953e:	e7e7      	b.n	8009510 <_strtod_l+0x218>
 8009540:	2b10      	cmp	r3, #16
 8009542:	bfde      	ittt	le
 8009544:	9e08      	ldrle	r6, [sp, #32]
 8009546:	434e      	mulle	r6, r1
 8009548:	9608      	strle	r6, [sp, #32]
 800954a:	e7e1      	b.n	8009510 <_strtod_l+0x218>
 800954c:	280f      	cmp	r0, #15
 800954e:	dceb      	bgt.n	8009528 <_strtod_l+0x230>
 8009550:	9808      	ldr	r0, [sp, #32]
 8009552:	230a      	movs	r3, #10
 8009554:	fb03 2300 	mla	r3, r3, r0, r2
 8009558:	9308      	str	r3, [sp, #32]
 800955a:	e7e5      	b.n	8009528 <_strtod_l+0x230>
 800955c:	4629      	mov	r1, r5
 800955e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009560:	460d      	mov	r5, r1
 8009562:	1c50      	adds	r0, r2, #1
 8009564:	9019      	str	r0, [sp, #100]	@ 0x64
 8009566:	4618      	mov	r0, r3
 8009568:	7852      	ldrb	r2, [r2, #1]
 800956a:	e7b1      	b.n	80094d0 <_strtod_l+0x1d8>
 800956c:	f04f 0900 	mov.w	r9, #0
 8009570:	2301      	movs	r3, #1
 8009572:	e77c      	b.n	800946e <_strtod_l+0x176>
 8009574:	f04f 0c00 	mov.w	ip, #0
 8009578:	1ca2      	adds	r2, r4, #2
 800957a:	9219      	str	r2, [sp, #100]	@ 0x64
 800957c:	78a2      	ldrb	r2, [r4, #2]
 800957e:	e784      	b.n	800948a <_strtod_l+0x192>
 8009580:	f04f 0c01 	mov.w	ip, #1
 8009584:	e7f8      	b.n	8009578 <_strtod_l+0x280>
 8009586:	bf00      	nop
 8009588:	0800b4e0 	.word	0x0800b4e0
 800958c:	0800b4c8 	.word	0x0800b4c8
 8009590:	7ff00000 	.word	0x7ff00000
 8009594:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009596:	1c51      	adds	r1, r2, #1
 8009598:	9119      	str	r1, [sp, #100]	@ 0x64
 800959a:	7852      	ldrb	r2, [r2, #1]
 800959c:	2a30      	cmp	r2, #48	@ 0x30
 800959e:	d0f9      	beq.n	8009594 <_strtod_l+0x29c>
 80095a0:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 80095a4:	2908      	cmp	r1, #8
 80095a6:	f63f af76 	bhi.w	8009496 <_strtod_l+0x19e>
 80095aa:	3a30      	subs	r2, #48	@ 0x30
 80095ac:	f04f 080a 	mov.w	r8, #10
 80095b0:	920e      	str	r2, [sp, #56]	@ 0x38
 80095b2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80095b4:	920f      	str	r2, [sp, #60]	@ 0x3c
 80095b6:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80095b8:	1c56      	adds	r6, r2, #1
 80095ba:	9619      	str	r6, [sp, #100]	@ 0x64
 80095bc:	7852      	ldrb	r2, [r2, #1]
 80095be:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 80095c2:	f1be 0f09 	cmp.w	lr, #9
 80095c6:	d939      	bls.n	800963c <_strtod_l+0x344>
 80095c8:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80095ca:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 80095ce:	1a76      	subs	r6, r6, r1
 80095d0:	2e08      	cmp	r6, #8
 80095d2:	dc03      	bgt.n	80095dc <_strtod_l+0x2e4>
 80095d4:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80095d6:	4588      	cmp	r8, r1
 80095d8:	bfa8      	it	ge
 80095da:	4688      	movge	r8, r1
 80095dc:	f1bc 0f00 	cmp.w	ip, #0
 80095e0:	d001      	beq.n	80095e6 <_strtod_l+0x2ee>
 80095e2:	f1c8 0800 	rsb	r8, r8, #0
 80095e6:	2d00      	cmp	r5, #0
 80095e8:	d14e      	bne.n	8009688 <_strtod_l+0x390>
 80095ea:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80095ec:	4308      	orrs	r0, r1
 80095ee:	f47f aebc 	bne.w	800936a <_strtod_l+0x72>
 80095f2:	2b00      	cmp	r3, #0
 80095f4:	f47f aed4 	bne.w	80093a0 <_strtod_l+0xa8>
 80095f8:	2a69      	cmp	r2, #105	@ 0x69
 80095fa:	d028      	beq.n	800964e <_strtod_l+0x356>
 80095fc:	dc25      	bgt.n	800964a <_strtod_l+0x352>
 80095fe:	2a49      	cmp	r2, #73	@ 0x49
 8009600:	d025      	beq.n	800964e <_strtod_l+0x356>
 8009602:	2a4e      	cmp	r2, #78	@ 0x4e
 8009604:	f47f aecc 	bne.w	80093a0 <_strtod_l+0xa8>
 8009608:	499b      	ldr	r1, [pc, #620]	@ (8009878 <_strtod_l+0x580>)
 800960a:	a819      	add	r0, sp, #100	@ 0x64
 800960c:	f001 fbb0 	bl	800ad70 <__match>
 8009610:	2800      	cmp	r0, #0
 8009612:	f43f aec5 	beq.w	80093a0 <_strtod_l+0xa8>
 8009616:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009618:	781b      	ldrb	r3, [r3, #0]
 800961a:	2b28      	cmp	r3, #40	@ 0x28
 800961c:	d12e      	bne.n	800967c <_strtod_l+0x384>
 800961e:	aa1c      	add	r2, sp, #112	@ 0x70
 8009620:	4996      	ldr	r1, [pc, #600]	@ (800987c <_strtod_l+0x584>)
 8009622:	a819      	add	r0, sp, #100	@ 0x64
 8009624:	f001 fbb8 	bl	800ad98 <__hexnan>
 8009628:	2805      	cmp	r0, #5
 800962a:	d127      	bne.n	800967c <_strtod_l+0x384>
 800962c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800962e:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8009632:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8009636:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800963a:	e696      	b.n	800936a <_strtod_l+0x72>
 800963c:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800963e:	fb08 2101 	mla	r1, r8, r1, r2
 8009642:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8009646:	920e      	str	r2, [sp, #56]	@ 0x38
 8009648:	e7b5      	b.n	80095b6 <_strtod_l+0x2be>
 800964a:	2a6e      	cmp	r2, #110	@ 0x6e
 800964c:	e7da      	b.n	8009604 <_strtod_l+0x30c>
 800964e:	498c      	ldr	r1, [pc, #560]	@ (8009880 <_strtod_l+0x588>)
 8009650:	a819      	add	r0, sp, #100	@ 0x64
 8009652:	f001 fb8d 	bl	800ad70 <__match>
 8009656:	2800      	cmp	r0, #0
 8009658:	f43f aea2 	beq.w	80093a0 <_strtod_l+0xa8>
 800965c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800965e:	a819      	add	r0, sp, #100	@ 0x64
 8009660:	4988      	ldr	r1, [pc, #544]	@ (8009884 <_strtod_l+0x58c>)
 8009662:	3b01      	subs	r3, #1
 8009664:	9319      	str	r3, [sp, #100]	@ 0x64
 8009666:	f001 fb83 	bl	800ad70 <__match>
 800966a:	b910      	cbnz	r0, 8009672 <_strtod_l+0x37a>
 800966c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800966e:	3301      	adds	r3, #1
 8009670:	9319      	str	r3, [sp, #100]	@ 0x64
 8009672:	f8df b220 	ldr.w	fp, [pc, #544]	@ 8009894 <_strtod_l+0x59c>
 8009676:	f04f 0a00 	mov.w	sl, #0
 800967a:	e676      	b.n	800936a <_strtod_l+0x72>
 800967c:	4882      	ldr	r0, [pc, #520]	@ (8009888 <_strtod_l+0x590>)
 800967e:	f001 f8b7 	bl	800a7f0 <nan>
 8009682:	ec5b ab10 	vmov	sl, fp, d0
 8009686:	e670      	b.n	800936a <_strtod_l+0x72>
 8009688:	eba8 0309 	sub.w	r3, r8, r9
 800968c:	2f00      	cmp	r7, #0
 800968e:	bf08      	it	eq
 8009690:	462f      	moveq	r7, r5
 8009692:	2d10      	cmp	r5, #16
 8009694:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8009696:	462c      	mov	r4, r5
 8009698:	9309      	str	r3, [sp, #36]	@ 0x24
 800969a:	bfa8      	it	ge
 800969c:	2410      	movge	r4, #16
 800969e:	f7f6 ff4f 	bl	8000540 <__aeabi_ui2d>
 80096a2:	2d09      	cmp	r5, #9
 80096a4:	4682      	mov	sl, r0
 80096a6:	468b      	mov	fp, r1
 80096a8:	dc13      	bgt.n	80096d2 <_strtod_l+0x3da>
 80096aa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	f43f ae5c 	beq.w	800936a <_strtod_l+0x72>
 80096b2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80096b4:	dd78      	ble.n	80097a8 <_strtod_l+0x4b0>
 80096b6:	2b16      	cmp	r3, #22
 80096b8:	dc5f      	bgt.n	800977a <_strtod_l+0x482>
 80096ba:	4974      	ldr	r1, [pc, #464]	@ (800988c <_strtod_l+0x594>)
 80096bc:	4652      	mov	r2, sl
 80096be:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80096c2:	465b      	mov	r3, fp
 80096c4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80096c8:	f7f6 ffb4 	bl	8000634 <__aeabi_dmul>
 80096cc:	4682      	mov	sl, r0
 80096ce:	468b      	mov	fp, r1
 80096d0:	e64b      	b.n	800936a <_strtod_l+0x72>
 80096d2:	4b6e      	ldr	r3, [pc, #440]	@ (800988c <_strtod_l+0x594>)
 80096d4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80096d8:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 80096dc:	f7f6 ffaa 	bl	8000634 <__aeabi_dmul>
 80096e0:	4682      	mov	sl, r0
 80096e2:	468b      	mov	fp, r1
 80096e4:	9808      	ldr	r0, [sp, #32]
 80096e6:	f7f6 ff2b 	bl	8000540 <__aeabi_ui2d>
 80096ea:	4602      	mov	r2, r0
 80096ec:	460b      	mov	r3, r1
 80096ee:	4650      	mov	r0, sl
 80096f0:	4659      	mov	r1, fp
 80096f2:	f7f6 fde9 	bl	80002c8 <__adddf3>
 80096f6:	2d0f      	cmp	r5, #15
 80096f8:	4682      	mov	sl, r0
 80096fa:	468b      	mov	fp, r1
 80096fc:	ddd5      	ble.n	80096aa <_strtod_l+0x3b2>
 80096fe:	1b2c      	subs	r4, r5, r4
 8009700:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009702:	441c      	add	r4, r3
 8009704:	2c00      	cmp	r4, #0
 8009706:	f340 8096 	ble.w	8009836 <_strtod_l+0x53e>
 800970a:	f014 030f 	ands.w	r3, r4, #15
 800970e:	d00a      	beq.n	8009726 <_strtod_l+0x42e>
 8009710:	495e      	ldr	r1, [pc, #376]	@ (800988c <_strtod_l+0x594>)
 8009712:	4652      	mov	r2, sl
 8009714:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009718:	465b      	mov	r3, fp
 800971a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800971e:	f7f6 ff89 	bl	8000634 <__aeabi_dmul>
 8009722:	4682      	mov	sl, r0
 8009724:	468b      	mov	fp, r1
 8009726:	f034 040f 	bics.w	r4, r4, #15
 800972a:	d073      	beq.n	8009814 <_strtod_l+0x51c>
 800972c:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8009730:	dd48      	ble.n	80097c4 <_strtod_l+0x4cc>
 8009732:	2400      	movs	r4, #0
 8009734:	46a0      	mov	r8, r4
 8009736:	46a1      	mov	r9, r4
 8009738:	940a      	str	r4, [sp, #40]	@ 0x28
 800973a:	2322      	movs	r3, #34	@ 0x22
 800973c:	9a05      	ldr	r2, [sp, #20]
 800973e:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8009894 <_strtod_l+0x59c>
 8009742:	f04f 0a00 	mov.w	sl, #0
 8009746:	6013      	str	r3, [r2, #0]
 8009748:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800974a:	2b00      	cmp	r3, #0
 800974c:	f43f ae0d 	beq.w	800936a <_strtod_l+0x72>
 8009750:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009752:	9805      	ldr	r0, [sp, #20]
 8009754:	f7ff f934 	bl	80089c0 <_Bfree>
 8009758:	4649      	mov	r1, r9
 800975a:	9805      	ldr	r0, [sp, #20]
 800975c:	f7ff f930 	bl	80089c0 <_Bfree>
 8009760:	4641      	mov	r1, r8
 8009762:	9805      	ldr	r0, [sp, #20]
 8009764:	f7ff f92c 	bl	80089c0 <_Bfree>
 8009768:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800976a:	9805      	ldr	r0, [sp, #20]
 800976c:	f7ff f928 	bl	80089c0 <_Bfree>
 8009770:	4621      	mov	r1, r4
 8009772:	9805      	ldr	r0, [sp, #20]
 8009774:	f7ff f924 	bl	80089c0 <_Bfree>
 8009778:	e5f7      	b.n	800936a <_strtod_l+0x72>
 800977a:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800977e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009780:	4293      	cmp	r3, r2
 8009782:	dbbc      	blt.n	80096fe <_strtod_l+0x406>
 8009784:	f1c5 050f 	rsb	r5, r5, #15
 8009788:	4c40      	ldr	r4, [pc, #256]	@ (800988c <_strtod_l+0x594>)
 800978a:	4652      	mov	r2, sl
 800978c:	465b      	mov	r3, fp
 800978e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8009792:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009796:	f7f6 ff4d 	bl	8000634 <__aeabi_dmul>
 800979a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800979c:	1b5d      	subs	r5, r3, r5
 800979e:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80097a2:	e9d4 2300 	ldrd	r2, r3, [r4]
 80097a6:	e78f      	b.n	80096c8 <_strtod_l+0x3d0>
 80097a8:	3316      	adds	r3, #22
 80097aa:	dba8      	blt.n	80096fe <_strtod_l+0x406>
 80097ac:	eba9 0808 	sub.w	r8, r9, r8
 80097b0:	4b36      	ldr	r3, [pc, #216]	@ (800988c <_strtod_l+0x594>)
 80097b2:	4650      	mov	r0, sl
 80097b4:	4659      	mov	r1, fp
 80097b6:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 80097ba:	e9d8 2300 	ldrd	r2, r3, [r8]
 80097be:	f7f7 f863 	bl	8000888 <__aeabi_ddiv>
 80097c2:	e783      	b.n	80096cc <_strtod_l+0x3d4>
 80097c4:	4b32      	ldr	r3, [pc, #200]	@ (8009890 <_strtod_l+0x598>)
 80097c6:	1124      	asrs	r4, r4, #4
 80097c8:	4650      	mov	r0, sl
 80097ca:	4659      	mov	r1, fp
 80097cc:	9308      	str	r3, [sp, #32]
 80097ce:	2300      	movs	r3, #0
 80097d0:	461e      	mov	r6, r3
 80097d2:	2c01      	cmp	r4, #1
 80097d4:	dc21      	bgt.n	800981a <_strtod_l+0x522>
 80097d6:	b10b      	cbz	r3, 80097dc <_strtod_l+0x4e4>
 80097d8:	4682      	mov	sl, r0
 80097da:	468b      	mov	fp, r1
 80097dc:	492c      	ldr	r1, [pc, #176]	@ (8009890 <_strtod_l+0x598>)
 80097de:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 80097e2:	4652      	mov	r2, sl
 80097e4:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 80097e8:	465b      	mov	r3, fp
 80097ea:	e9d1 0100 	ldrd	r0, r1, [r1]
 80097ee:	f7f6 ff21 	bl	8000634 <__aeabi_dmul>
 80097f2:	4b28      	ldr	r3, [pc, #160]	@ (8009894 <_strtod_l+0x59c>)
 80097f4:	460a      	mov	r2, r1
 80097f6:	4682      	mov	sl, r0
 80097f8:	400b      	ands	r3, r1
 80097fa:	4927      	ldr	r1, [pc, #156]	@ (8009898 <_strtod_l+0x5a0>)
 80097fc:	428b      	cmp	r3, r1
 80097fe:	d898      	bhi.n	8009732 <_strtod_l+0x43a>
 8009800:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8009804:	428b      	cmp	r3, r1
 8009806:	bf86      	itte	hi
 8009808:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 800989c <_strtod_l+0x5a4>
 800980c:	f04f 3aff 	movhi.w	sl, #4294967295
 8009810:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8009814:	2300      	movs	r3, #0
 8009816:	9308      	str	r3, [sp, #32]
 8009818:	e07a      	b.n	8009910 <_strtod_l+0x618>
 800981a:	07e2      	lsls	r2, r4, #31
 800981c:	d505      	bpl.n	800982a <_strtod_l+0x532>
 800981e:	9b08      	ldr	r3, [sp, #32]
 8009820:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009824:	f7f6 ff06 	bl	8000634 <__aeabi_dmul>
 8009828:	2301      	movs	r3, #1
 800982a:	9a08      	ldr	r2, [sp, #32]
 800982c:	3601      	adds	r6, #1
 800982e:	1064      	asrs	r4, r4, #1
 8009830:	3208      	adds	r2, #8
 8009832:	9208      	str	r2, [sp, #32]
 8009834:	e7cd      	b.n	80097d2 <_strtod_l+0x4da>
 8009836:	d0ed      	beq.n	8009814 <_strtod_l+0x51c>
 8009838:	4264      	negs	r4, r4
 800983a:	f014 020f 	ands.w	r2, r4, #15
 800983e:	d00a      	beq.n	8009856 <_strtod_l+0x55e>
 8009840:	4b12      	ldr	r3, [pc, #72]	@ (800988c <_strtod_l+0x594>)
 8009842:	4650      	mov	r0, sl
 8009844:	4659      	mov	r1, fp
 8009846:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800984a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800984e:	f7f7 f81b 	bl	8000888 <__aeabi_ddiv>
 8009852:	4682      	mov	sl, r0
 8009854:	468b      	mov	fp, r1
 8009856:	1124      	asrs	r4, r4, #4
 8009858:	d0dc      	beq.n	8009814 <_strtod_l+0x51c>
 800985a:	2c1f      	cmp	r4, #31
 800985c:	dd20      	ble.n	80098a0 <_strtod_l+0x5a8>
 800985e:	2400      	movs	r4, #0
 8009860:	46a0      	mov	r8, r4
 8009862:	46a1      	mov	r9, r4
 8009864:	940a      	str	r4, [sp, #40]	@ 0x28
 8009866:	2322      	movs	r3, #34	@ 0x22
 8009868:	9a05      	ldr	r2, [sp, #20]
 800986a:	f04f 0a00 	mov.w	sl, #0
 800986e:	f04f 0b00 	mov.w	fp, #0
 8009872:	6013      	str	r3, [r2, #0]
 8009874:	e768      	b.n	8009748 <_strtod_l+0x450>
 8009876:	bf00      	nop
 8009878:	0800b2b5 	.word	0x0800b2b5
 800987c:	0800b4cc 	.word	0x0800b4cc
 8009880:	0800b2ad 	.word	0x0800b2ad
 8009884:	0800b2e4 	.word	0x0800b2e4
 8009888:	0800b675 	.word	0x0800b675
 800988c:	0800b400 	.word	0x0800b400
 8009890:	0800b3d8 	.word	0x0800b3d8
 8009894:	7ff00000 	.word	0x7ff00000
 8009898:	7ca00000 	.word	0x7ca00000
 800989c:	7fefffff 	.word	0x7fefffff
 80098a0:	f014 0310 	ands.w	r3, r4, #16
 80098a4:	4650      	mov	r0, sl
 80098a6:	4659      	mov	r1, fp
 80098a8:	4ea9      	ldr	r6, [pc, #676]	@ (8009b50 <_strtod_l+0x858>)
 80098aa:	bf18      	it	ne
 80098ac:	236a      	movne	r3, #106	@ 0x6a
 80098ae:	9308      	str	r3, [sp, #32]
 80098b0:	2300      	movs	r3, #0
 80098b2:	07e2      	lsls	r2, r4, #31
 80098b4:	d504      	bpl.n	80098c0 <_strtod_l+0x5c8>
 80098b6:	e9d6 2300 	ldrd	r2, r3, [r6]
 80098ba:	f7f6 febb 	bl	8000634 <__aeabi_dmul>
 80098be:	2301      	movs	r3, #1
 80098c0:	1064      	asrs	r4, r4, #1
 80098c2:	f106 0608 	add.w	r6, r6, #8
 80098c6:	d1f4      	bne.n	80098b2 <_strtod_l+0x5ba>
 80098c8:	b10b      	cbz	r3, 80098ce <_strtod_l+0x5d6>
 80098ca:	4682      	mov	sl, r0
 80098cc:	468b      	mov	fp, r1
 80098ce:	9b08      	ldr	r3, [sp, #32]
 80098d0:	b1b3      	cbz	r3, 8009900 <_strtod_l+0x608>
 80098d2:	f3cb 520a 	ubfx	r2, fp, #20, #11
 80098d6:	4659      	mov	r1, fp
 80098d8:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 80098dc:	2b00      	cmp	r3, #0
 80098de:	dd0f      	ble.n	8009900 <_strtod_l+0x608>
 80098e0:	2b1f      	cmp	r3, #31
 80098e2:	dd55      	ble.n	8009990 <_strtod_l+0x698>
 80098e4:	2b34      	cmp	r3, #52	@ 0x34
 80098e6:	f04f 0a00 	mov.w	sl, #0
 80098ea:	bfdb      	ittet	le
 80098ec:	f04f 33ff 	movle.w	r3, #4294967295
 80098f0:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 80098f4:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 80098f8:	4093      	lslle	r3, r2
 80098fa:	bfd8      	it	le
 80098fc:	ea03 0b01 	andle.w	fp, r3, r1
 8009900:	2200      	movs	r2, #0
 8009902:	2300      	movs	r3, #0
 8009904:	4650      	mov	r0, sl
 8009906:	4659      	mov	r1, fp
 8009908:	f7f7 f8fc 	bl	8000b04 <__aeabi_dcmpeq>
 800990c:	2800      	cmp	r0, #0
 800990e:	d1a6      	bne.n	800985e <_strtod_l+0x566>
 8009910:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009912:	463a      	mov	r2, r7
 8009914:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8009916:	9300      	str	r3, [sp, #0]
 8009918:	462b      	mov	r3, r5
 800991a:	9805      	ldr	r0, [sp, #20]
 800991c:	f7ff f8ba 	bl	8008a94 <__s2b>
 8009920:	900a      	str	r0, [sp, #40]	@ 0x28
 8009922:	2800      	cmp	r0, #0
 8009924:	f43f af05 	beq.w	8009732 <_strtod_l+0x43a>
 8009928:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800992a:	eba9 0308 	sub.w	r3, r9, r8
 800992e:	2400      	movs	r4, #0
 8009930:	2a00      	cmp	r2, #0
 8009932:	46a0      	mov	r8, r4
 8009934:	bfa8      	it	ge
 8009936:	2300      	movge	r3, #0
 8009938:	9312      	str	r3, [sp, #72]	@ 0x48
 800993a:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800993e:	9316      	str	r3, [sp, #88]	@ 0x58
 8009940:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009942:	9805      	ldr	r0, [sp, #20]
 8009944:	6859      	ldr	r1, [r3, #4]
 8009946:	f7fe fffb 	bl	8008940 <_Balloc>
 800994a:	4681      	mov	r9, r0
 800994c:	2800      	cmp	r0, #0
 800994e:	f43f aef4 	beq.w	800973a <_strtod_l+0x442>
 8009952:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009954:	300c      	adds	r0, #12
 8009956:	691a      	ldr	r2, [r3, #16]
 8009958:	f103 010c 	add.w	r1, r3, #12
 800995c:	3202      	adds	r2, #2
 800995e:	0092      	lsls	r2, r2, #2
 8009960:	f7fe f887 	bl	8007a72 <memcpy>
 8009964:	aa1c      	add	r2, sp, #112	@ 0x70
 8009966:	a91b      	add	r1, sp, #108	@ 0x6c
 8009968:	9805      	ldr	r0, [sp, #20]
 800996a:	ec4b ab10 	vmov	d0, sl, fp
 800996e:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8009972:	f7ff fbd3 	bl	800911c <__d2b>
 8009976:	901a      	str	r0, [sp, #104]	@ 0x68
 8009978:	2800      	cmp	r0, #0
 800997a:	f43f aede 	beq.w	800973a <_strtod_l+0x442>
 800997e:	2101      	movs	r1, #1
 8009980:	9805      	ldr	r0, [sp, #20]
 8009982:	f7ff f91d 	bl	8008bc0 <__i2b>
 8009986:	4680      	mov	r8, r0
 8009988:	b948      	cbnz	r0, 800999e <_strtod_l+0x6a6>
 800998a:	f04f 0800 	mov.w	r8, #0
 800998e:	e6d4      	b.n	800973a <_strtod_l+0x442>
 8009990:	f04f 32ff 	mov.w	r2, #4294967295
 8009994:	fa02 f303 	lsl.w	r3, r2, r3
 8009998:	ea03 0a0a 	and.w	sl, r3, sl
 800999c:	e7b0      	b.n	8009900 <_strtod_l+0x608>
 800999e:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 80099a0:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 80099a2:	2d00      	cmp	r5, #0
 80099a4:	bfa9      	itett	ge
 80099a6:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 80099a8:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 80099aa:	18ef      	addge	r7, r5, r3
 80099ac:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 80099ae:	bfb8      	it	lt
 80099b0:	1b5e      	sublt	r6, r3, r5
 80099b2:	9b08      	ldr	r3, [sp, #32]
 80099b4:	bfb8      	it	lt
 80099b6:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 80099b8:	1aed      	subs	r5, r5, r3
 80099ba:	4b66      	ldr	r3, [pc, #408]	@ (8009b54 <_strtod_l+0x85c>)
 80099bc:	4415      	add	r5, r2
 80099be:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 80099c2:	3d01      	subs	r5, #1
 80099c4:	429d      	cmp	r5, r3
 80099c6:	da4f      	bge.n	8009a68 <_strtod_l+0x770>
 80099c8:	1b5b      	subs	r3, r3, r5
 80099ca:	2101      	movs	r1, #1
 80099cc:	2b1f      	cmp	r3, #31
 80099ce:	eba2 0203 	sub.w	r2, r2, r3
 80099d2:	dc3d      	bgt.n	8009a50 <_strtod_l+0x758>
 80099d4:	fa01 f303 	lsl.w	r3, r1, r3
 80099d8:	9313      	str	r3, [sp, #76]	@ 0x4c
 80099da:	2300      	movs	r3, #0
 80099dc:	9310      	str	r3, [sp, #64]	@ 0x40
 80099de:	18bd      	adds	r5, r7, r2
 80099e0:	9b08      	ldr	r3, [sp, #32]
 80099e2:	4416      	add	r6, r2
 80099e4:	42af      	cmp	r7, r5
 80099e6:	441e      	add	r6, r3
 80099e8:	463b      	mov	r3, r7
 80099ea:	bfa8      	it	ge
 80099ec:	462b      	movge	r3, r5
 80099ee:	42b3      	cmp	r3, r6
 80099f0:	bfa8      	it	ge
 80099f2:	4633      	movge	r3, r6
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	bfc2      	ittt	gt
 80099f8:	1aed      	subgt	r5, r5, r3
 80099fa:	1af6      	subgt	r6, r6, r3
 80099fc:	1aff      	subgt	r7, r7, r3
 80099fe:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8009a00:	2b00      	cmp	r3, #0
 8009a02:	dd16      	ble.n	8009a32 <_strtod_l+0x73a>
 8009a04:	4641      	mov	r1, r8
 8009a06:	461a      	mov	r2, r3
 8009a08:	9805      	ldr	r0, [sp, #20]
 8009a0a:	f7ff f999 	bl	8008d40 <__pow5mult>
 8009a0e:	4680      	mov	r8, r0
 8009a10:	2800      	cmp	r0, #0
 8009a12:	d0ba      	beq.n	800998a <_strtod_l+0x692>
 8009a14:	4601      	mov	r1, r0
 8009a16:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8009a18:	9805      	ldr	r0, [sp, #20]
 8009a1a:	f7ff f8e7 	bl	8008bec <__multiply>
 8009a1e:	900e      	str	r0, [sp, #56]	@ 0x38
 8009a20:	2800      	cmp	r0, #0
 8009a22:	f43f ae8a 	beq.w	800973a <_strtod_l+0x442>
 8009a26:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009a28:	9805      	ldr	r0, [sp, #20]
 8009a2a:	f7fe ffc9 	bl	80089c0 <_Bfree>
 8009a2e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009a30:	931a      	str	r3, [sp, #104]	@ 0x68
 8009a32:	2d00      	cmp	r5, #0
 8009a34:	dc1d      	bgt.n	8009a72 <_strtod_l+0x77a>
 8009a36:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009a38:	2b00      	cmp	r3, #0
 8009a3a:	dd23      	ble.n	8009a84 <_strtod_l+0x78c>
 8009a3c:	4649      	mov	r1, r9
 8009a3e:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8009a40:	9805      	ldr	r0, [sp, #20]
 8009a42:	f7ff f97d 	bl	8008d40 <__pow5mult>
 8009a46:	4681      	mov	r9, r0
 8009a48:	b9e0      	cbnz	r0, 8009a84 <_strtod_l+0x78c>
 8009a4a:	f04f 0900 	mov.w	r9, #0
 8009a4e:	e674      	b.n	800973a <_strtod_l+0x442>
 8009a50:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8009a54:	9113      	str	r1, [sp, #76]	@ 0x4c
 8009a56:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8009a5a:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8009a5e:	35e2      	adds	r5, #226	@ 0xe2
 8009a60:	fa01 f305 	lsl.w	r3, r1, r5
 8009a64:	9310      	str	r3, [sp, #64]	@ 0x40
 8009a66:	e7ba      	b.n	80099de <_strtod_l+0x6e6>
 8009a68:	2300      	movs	r3, #0
 8009a6a:	9310      	str	r3, [sp, #64]	@ 0x40
 8009a6c:	2301      	movs	r3, #1
 8009a6e:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009a70:	e7b5      	b.n	80099de <_strtod_l+0x6e6>
 8009a72:	462a      	mov	r2, r5
 8009a74:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009a76:	9805      	ldr	r0, [sp, #20]
 8009a78:	f7ff f9bc 	bl	8008df4 <__lshift>
 8009a7c:	901a      	str	r0, [sp, #104]	@ 0x68
 8009a7e:	2800      	cmp	r0, #0
 8009a80:	d1d9      	bne.n	8009a36 <_strtod_l+0x73e>
 8009a82:	e65a      	b.n	800973a <_strtod_l+0x442>
 8009a84:	2e00      	cmp	r6, #0
 8009a86:	dd07      	ble.n	8009a98 <_strtod_l+0x7a0>
 8009a88:	4649      	mov	r1, r9
 8009a8a:	4632      	mov	r2, r6
 8009a8c:	9805      	ldr	r0, [sp, #20]
 8009a8e:	f7ff f9b1 	bl	8008df4 <__lshift>
 8009a92:	4681      	mov	r9, r0
 8009a94:	2800      	cmp	r0, #0
 8009a96:	d0d8      	beq.n	8009a4a <_strtod_l+0x752>
 8009a98:	2f00      	cmp	r7, #0
 8009a9a:	dd08      	ble.n	8009aae <_strtod_l+0x7b6>
 8009a9c:	4641      	mov	r1, r8
 8009a9e:	463a      	mov	r2, r7
 8009aa0:	9805      	ldr	r0, [sp, #20]
 8009aa2:	f7ff f9a7 	bl	8008df4 <__lshift>
 8009aa6:	4680      	mov	r8, r0
 8009aa8:	2800      	cmp	r0, #0
 8009aaa:	f43f ae46 	beq.w	800973a <_strtod_l+0x442>
 8009aae:	464a      	mov	r2, r9
 8009ab0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009ab2:	9805      	ldr	r0, [sp, #20]
 8009ab4:	f7ff fa26 	bl	8008f04 <__mdiff>
 8009ab8:	4604      	mov	r4, r0
 8009aba:	2800      	cmp	r0, #0
 8009abc:	f43f ae3d 	beq.w	800973a <_strtod_l+0x442>
 8009ac0:	68c3      	ldr	r3, [r0, #12]
 8009ac2:	4641      	mov	r1, r8
 8009ac4:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009ac6:	2300      	movs	r3, #0
 8009ac8:	60c3      	str	r3, [r0, #12]
 8009aca:	f7ff f9ff 	bl	8008ecc <__mcmp>
 8009ace:	2800      	cmp	r0, #0
 8009ad0:	da46      	bge.n	8009b60 <_strtod_l+0x868>
 8009ad2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009ad4:	ea53 030a 	orrs.w	r3, r3, sl
 8009ad8:	d16c      	bne.n	8009bb4 <_strtod_l+0x8bc>
 8009ada:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	d168      	bne.n	8009bb4 <_strtod_l+0x8bc>
 8009ae2:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009ae6:	0d1b      	lsrs	r3, r3, #20
 8009ae8:	051b      	lsls	r3, r3, #20
 8009aea:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8009aee:	d961      	bls.n	8009bb4 <_strtod_l+0x8bc>
 8009af0:	6963      	ldr	r3, [r4, #20]
 8009af2:	b913      	cbnz	r3, 8009afa <_strtod_l+0x802>
 8009af4:	6923      	ldr	r3, [r4, #16]
 8009af6:	2b01      	cmp	r3, #1
 8009af8:	dd5c      	ble.n	8009bb4 <_strtod_l+0x8bc>
 8009afa:	4621      	mov	r1, r4
 8009afc:	2201      	movs	r2, #1
 8009afe:	9805      	ldr	r0, [sp, #20]
 8009b00:	f7ff f978 	bl	8008df4 <__lshift>
 8009b04:	4641      	mov	r1, r8
 8009b06:	4604      	mov	r4, r0
 8009b08:	f7ff f9e0 	bl	8008ecc <__mcmp>
 8009b0c:	2800      	cmp	r0, #0
 8009b0e:	dd51      	ble.n	8009bb4 <_strtod_l+0x8bc>
 8009b10:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009b14:	9a08      	ldr	r2, [sp, #32]
 8009b16:	0d1b      	lsrs	r3, r3, #20
 8009b18:	051b      	lsls	r3, r3, #20
 8009b1a:	2a00      	cmp	r2, #0
 8009b1c:	d06b      	beq.n	8009bf6 <_strtod_l+0x8fe>
 8009b1e:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8009b22:	d868      	bhi.n	8009bf6 <_strtod_l+0x8fe>
 8009b24:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8009b28:	f67f ae9d 	bls.w	8009866 <_strtod_l+0x56e>
 8009b2c:	4b0a      	ldr	r3, [pc, #40]	@ (8009b58 <_strtod_l+0x860>)
 8009b2e:	4650      	mov	r0, sl
 8009b30:	4659      	mov	r1, fp
 8009b32:	2200      	movs	r2, #0
 8009b34:	f7f6 fd7e 	bl	8000634 <__aeabi_dmul>
 8009b38:	4b08      	ldr	r3, [pc, #32]	@ (8009b5c <_strtod_l+0x864>)
 8009b3a:	4682      	mov	sl, r0
 8009b3c:	468b      	mov	fp, r1
 8009b3e:	400b      	ands	r3, r1
 8009b40:	2b00      	cmp	r3, #0
 8009b42:	f47f ae05 	bne.w	8009750 <_strtod_l+0x458>
 8009b46:	2322      	movs	r3, #34	@ 0x22
 8009b48:	9a05      	ldr	r2, [sp, #20]
 8009b4a:	6013      	str	r3, [r2, #0]
 8009b4c:	e600      	b.n	8009750 <_strtod_l+0x458>
 8009b4e:	bf00      	nop
 8009b50:	0800b4f8 	.word	0x0800b4f8
 8009b54:	fffffc02 	.word	0xfffffc02
 8009b58:	39500000 	.word	0x39500000
 8009b5c:	7ff00000 	.word	0x7ff00000
 8009b60:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8009b64:	d165      	bne.n	8009c32 <_strtod_l+0x93a>
 8009b66:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8009b68:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009b6c:	b35a      	cbz	r2, 8009bc6 <_strtod_l+0x8ce>
 8009b6e:	4a9e      	ldr	r2, [pc, #632]	@ (8009de8 <_strtod_l+0xaf0>)
 8009b70:	4293      	cmp	r3, r2
 8009b72:	d12b      	bne.n	8009bcc <_strtod_l+0x8d4>
 8009b74:	9b08      	ldr	r3, [sp, #32]
 8009b76:	4651      	mov	r1, sl
 8009b78:	b303      	cbz	r3, 8009bbc <_strtod_l+0x8c4>
 8009b7a:	465a      	mov	r2, fp
 8009b7c:	4b9b      	ldr	r3, [pc, #620]	@ (8009dec <_strtod_l+0xaf4>)
 8009b7e:	4013      	ands	r3, r2
 8009b80:	f04f 32ff 	mov.w	r2, #4294967295
 8009b84:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8009b88:	d81b      	bhi.n	8009bc2 <_strtod_l+0x8ca>
 8009b8a:	0d1b      	lsrs	r3, r3, #20
 8009b8c:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8009b90:	fa02 f303 	lsl.w	r3, r2, r3
 8009b94:	4299      	cmp	r1, r3
 8009b96:	d119      	bne.n	8009bcc <_strtod_l+0x8d4>
 8009b98:	4b95      	ldr	r3, [pc, #596]	@ (8009df0 <_strtod_l+0xaf8>)
 8009b9a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009b9c:	429a      	cmp	r2, r3
 8009b9e:	d102      	bne.n	8009ba6 <_strtod_l+0x8ae>
 8009ba0:	3101      	adds	r1, #1
 8009ba2:	f43f adca 	beq.w	800973a <_strtod_l+0x442>
 8009ba6:	4b91      	ldr	r3, [pc, #580]	@ (8009dec <_strtod_l+0xaf4>)
 8009ba8:	f04f 0a00 	mov.w	sl, #0
 8009bac:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009bae:	401a      	ands	r2, r3
 8009bb0:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8009bb4:	9b08      	ldr	r3, [sp, #32]
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	d1b8      	bne.n	8009b2c <_strtod_l+0x834>
 8009bba:	e5c9      	b.n	8009750 <_strtod_l+0x458>
 8009bbc:	f04f 33ff 	mov.w	r3, #4294967295
 8009bc0:	e7e8      	b.n	8009b94 <_strtod_l+0x89c>
 8009bc2:	4613      	mov	r3, r2
 8009bc4:	e7e6      	b.n	8009b94 <_strtod_l+0x89c>
 8009bc6:	ea53 030a 	orrs.w	r3, r3, sl
 8009bca:	d0a1      	beq.n	8009b10 <_strtod_l+0x818>
 8009bcc:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8009bce:	b1db      	cbz	r3, 8009c08 <_strtod_l+0x910>
 8009bd0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009bd2:	4213      	tst	r3, r2
 8009bd4:	d0ee      	beq.n	8009bb4 <_strtod_l+0x8bc>
 8009bd6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009bd8:	4650      	mov	r0, sl
 8009bda:	9a08      	ldr	r2, [sp, #32]
 8009bdc:	4659      	mov	r1, fp
 8009bde:	b1bb      	cbz	r3, 8009c10 <_strtod_l+0x918>
 8009be0:	f7ff fb6a 	bl	80092b8 <sulp>
 8009be4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009be8:	ec53 2b10 	vmov	r2, r3, d0
 8009bec:	f7f6 fb6c 	bl	80002c8 <__adddf3>
 8009bf0:	4682      	mov	sl, r0
 8009bf2:	468b      	mov	fp, r1
 8009bf4:	e7de      	b.n	8009bb4 <_strtod_l+0x8bc>
 8009bf6:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8009bfa:	f04f 3aff 	mov.w	sl, #4294967295
 8009bfe:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8009c02:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8009c06:	e7d5      	b.n	8009bb4 <_strtod_l+0x8bc>
 8009c08:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8009c0a:	ea13 0f0a 	tst.w	r3, sl
 8009c0e:	e7e1      	b.n	8009bd4 <_strtod_l+0x8dc>
 8009c10:	f7ff fb52 	bl	80092b8 <sulp>
 8009c14:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009c18:	ec53 2b10 	vmov	r2, r3, d0
 8009c1c:	f7f6 fb52 	bl	80002c4 <__aeabi_dsub>
 8009c20:	2200      	movs	r2, #0
 8009c22:	2300      	movs	r3, #0
 8009c24:	4682      	mov	sl, r0
 8009c26:	468b      	mov	fp, r1
 8009c28:	f7f6 ff6c 	bl	8000b04 <__aeabi_dcmpeq>
 8009c2c:	2800      	cmp	r0, #0
 8009c2e:	d0c1      	beq.n	8009bb4 <_strtod_l+0x8bc>
 8009c30:	e619      	b.n	8009866 <_strtod_l+0x56e>
 8009c32:	4641      	mov	r1, r8
 8009c34:	4620      	mov	r0, r4
 8009c36:	f7ff fac9 	bl	80091cc <__ratio>
 8009c3a:	2200      	movs	r2, #0
 8009c3c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8009c40:	ec57 6b10 	vmov	r6, r7, d0
 8009c44:	4630      	mov	r0, r6
 8009c46:	4639      	mov	r1, r7
 8009c48:	f7f6 ff70 	bl	8000b2c <__aeabi_dcmple>
 8009c4c:	2800      	cmp	r0, #0
 8009c4e:	d06f      	beq.n	8009d30 <_strtod_l+0xa38>
 8009c50:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	d17a      	bne.n	8009d4c <_strtod_l+0xa54>
 8009c56:	f1ba 0f00 	cmp.w	sl, #0
 8009c5a:	d158      	bne.n	8009d0e <_strtod_l+0xa16>
 8009c5c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009c5e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	d15a      	bne.n	8009d1c <_strtod_l+0xa24>
 8009c66:	2200      	movs	r2, #0
 8009c68:	4b62      	ldr	r3, [pc, #392]	@ (8009df4 <_strtod_l+0xafc>)
 8009c6a:	4630      	mov	r0, r6
 8009c6c:	4639      	mov	r1, r7
 8009c6e:	f7f6 ff53 	bl	8000b18 <__aeabi_dcmplt>
 8009c72:	2800      	cmp	r0, #0
 8009c74:	d159      	bne.n	8009d2a <_strtod_l+0xa32>
 8009c76:	4630      	mov	r0, r6
 8009c78:	4639      	mov	r1, r7
 8009c7a:	2200      	movs	r2, #0
 8009c7c:	4b5e      	ldr	r3, [pc, #376]	@ (8009df8 <_strtod_l+0xb00>)
 8009c7e:	f7f6 fcd9 	bl	8000634 <__aeabi_dmul>
 8009c82:	4606      	mov	r6, r0
 8009c84:	460f      	mov	r7, r1
 8009c86:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8009c8a:	9606      	str	r6, [sp, #24]
 8009c8c:	9307      	str	r3, [sp, #28]
 8009c8e:	4d57      	ldr	r5, [pc, #348]	@ (8009dec <_strtod_l+0xaf4>)
 8009c90:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009c94:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8009c98:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009c9a:	401d      	ands	r5, r3
 8009c9c:	4b57      	ldr	r3, [pc, #348]	@ (8009dfc <_strtod_l+0xb04>)
 8009c9e:	429d      	cmp	r5, r3
 8009ca0:	f040 80b0 	bne.w	8009e04 <_strtod_l+0xb0c>
 8009ca4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009ca6:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8009caa:	ec4b ab10 	vmov	d0, sl, fp
 8009cae:	f7ff f9c1 	bl	8009034 <__ulp>
 8009cb2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009cb6:	ec51 0b10 	vmov	r0, r1, d0
 8009cba:	f7f6 fcbb 	bl	8000634 <__aeabi_dmul>
 8009cbe:	4652      	mov	r2, sl
 8009cc0:	465b      	mov	r3, fp
 8009cc2:	f7f6 fb01 	bl	80002c8 <__adddf3>
 8009cc6:	460b      	mov	r3, r1
 8009cc8:	4948      	ldr	r1, [pc, #288]	@ (8009dec <_strtod_l+0xaf4>)
 8009cca:	4682      	mov	sl, r0
 8009ccc:	4a4c      	ldr	r2, [pc, #304]	@ (8009e00 <_strtod_l+0xb08>)
 8009cce:	4019      	ands	r1, r3
 8009cd0:	4291      	cmp	r1, r2
 8009cd2:	d942      	bls.n	8009d5a <_strtod_l+0xa62>
 8009cd4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8009cd6:	4b46      	ldr	r3, [pc, #280]	@ (8009df0 <_strtod_l+0xaf8>)
 8009cd8:	429a      	cmp	r2, r3
 8009cda:	d103      	bne.n	8009ce4 <_strtod_l+0x9ec>
 8009cdc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009cde:	3301      	adds	r3, #1
 8009ce0:	f43f ad2b 	beq.w	800973a <_strtod_l+0x442>
 8009ce4:	f8df b108 	ldr.w	fp, [pc, #264]	@ 8009df0 <_strtod_l+0xaf8>
 8009ce8:	f04f 3aff 	mov.w	sl, #4294967295
 8009cec:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009cee:	9805      	ldr	r0, [sp, #20]
 8009cf0:	f7fe fe66 	bl	80089c0 <_Bfree>
 8009cf4:	4649      	mov	r1, r9
 8009cf6:	9805      	ldr	r0, [sp, #20]
 8009cf8:	f7fe fe62 	bl	80089c0 <_Bfree>
 8009cfc:	4641      	mov	r1, r8
 8009cfe:	9805      	ldr	r0, [sp, #20]
 8009d00:	f7fe fe5e 	bl	80089c0 <_Bfree>
 8009d04:	4621      	mov	r1, r4
 8009d06:	9805      	ldr	r0, [sp, #20]
 8009d08:	f7fe fe5a 	bl	80089c0 <_Bfree>
 8009d0c:	e618      	b.n	8009940 <_strtod_l+0x648>
 8009d0e:	f1ba 0f01 	cmp.w	sl, #1
 8009d12:	d103      	bne.n	8009d1c <_strtod_l+0xa24>
 8009d14:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	f43f ada5 	beq.w	8009866 <_strtod_l+0x56e>
 8009d1c:	2600      	movs	r6, #0
 8009d1e:	4f35      	ldr	r7, [pc, #212]	@ (8009df4 <_strtod_l+0xafc>)
 8009d20:	ed9f 7b29 	vldr	d7, [pc, #164]	@ 8009dc8 <_strtod_l+0xad0>
 8009d24:	ed8d 7b06 	vstr	d7, [sp, #24]
 8009d28:	e7b1      	b.n	8009c8e <_strtod_l+0x996>
 8009d2a:	2600      	movs	r6, #0
 8009d2c:	4f32      	ldr	r7, [pc, #200]	@ (8009df8 <_strtod_l+0xb00>)
 8009d2e:	e7aa      	b.n	8009c86 <_strtod_l+0x98e>
 8009d30:	4b31      	ldr	r3, [pc, #196]	@ (8009df8 <_strtod_l+0xb00>)
 8009d32:	4630      	mov	r0, r6
 8009d34:	4639      	mov	r1, r7
 8009d36:	2200      	movs	r2, #0
 8009d38:	f7f6 fc7c 	bl	8000634 <__aeabi_dmul>
 8009d3c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009d3e:	4606      	mov	r6, r0
 8009d40:	460f      	mov	r7, r1
 8009d42:	2b00      	cmp	r3, #0
 8009d44:	d09f      	beq.n	8009c86 <_strtod_l+0x98e>
 8009d46:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8009d4a:	e7a0      	b.n	8009c8e <_strtod_l+0x996>
 8009d4c:	ed9f 7b20 	vldr	d7, [pc, #128]	@ 8009dd0 <_strtod_l+0xad8>
 8009d50:	ec57 6b17 	vmov	r6, r7, d7
 8009d54:	ed8d 7b06 	vstr	d7, [sp, #24]
 8009d58:	e799      	b.n	8009c8e <_strtod_l+0x996>
 8009d5a:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8009d5e:	9b08      	ldr	r3, [sp, #32]
 8009d60:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	d1c1      	bne.n	8009cec <_strtod_l+0x9f4>
 8009d68:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009d6c:	0d1b      	lsrs	r3, r3, #20
 8009d6e:	051b      	lsls	r3, r3, #20
 8009d70:	429d      	cmp	r5, r3
 8009d72:	d1bb      	bne.n	8009cec <_strtod_l+0x9f4>
 8009d74:	4630      	mov	r0, r6
 8009d76:	4639      	mov	r1, r7
 8009d78:	f7f6 ffbc 	bl	8000cf4 <__aeabi_d2lz>
 8009d7c:	f7f6 fc2c 	bl	80005d8 <__aeabi_l2d>
 8009d80:	4602      	mov	r2, r0
 8009d82:	460b      	mov	r3, r1
 8009d84:	4630      	mov	r0, r6
 8009d86:	4639      	mov	r1, r7
 8009d88:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8009d8c:	f7f6 fa9a 	bl	80002c4 <__aeabi_dsub>
 8009d90:	460b      	mov	r3, r1
 8009d92:	4602      	mov	r2, r0
 8009d94:	ea46 060a 	orr.w	r6, r6, sl
 8009d98:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8009d9c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009d9e:	431e      	orrs	r6, r3
 8009da0:	d06d      	beq.n	8009e7e <_strtod_l+0xb86>
 8009da2:	a30d      	add	r3, pc, #52	@ (adr r3, 8009dd8 <_strtod_l+0xae0>)
 8009da4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009da8:	f7f6 feb6 	bl	8000b18 <__aeabi_dcmplt>
 8009dac:	2800      	cmp	r0, #0
 8009dae:	f47f accf 	bne.w	8009750 <_strtod_l+0x458>
 8009db2:	a30b      	add	r3, pc, #44	@ (adr r3, 8009de0 <_strtod_l+0xae8>)
 8009db4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009db8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009dbc:	f7f6 feca 	bl	8000b54 <__aeabi_dcmpgt>
 8009dc0:	2800      	cmp	r0, #0
 8009dc2:	d093      	beq.n	8009cec <_strtod_l+0x9f4>
 8009dc4:	e4c4      	b.n	8009750 <_strtod_l+0x458>
 8009dc6:	bf00      	nop
 8009dc8:	00000000 	.word	0x00000000
 8009dcc:	bff00000 	.word	0xbff00000
 8009dd0:	00000000 	.word	0x00000000
 8009dd4:	3ff00000 	.word	0x3ff00000
 8009dd8:	94a03595 	.word	0x94a03595
 8009ddc:	3fdfffff 	.word	0x3fdfffff
 8009de0:	35afe535 	.word	0x35afe535
 8009de4:	3fe00000 	.word	0x3fe00000
 8009de8:	000fffff 	.word	0x000fffff
 8009dec:	7ff00000 	.word	0x7ff00000
 8009df0:	7fefffff 	.word	0x7fefffff
 8009df4:	3ff00000 	.word	0x3ff00000
 8009df8:	3fe00000 	.word	0x3fe00000
 8009dfc:	7fe00000 	.word	0x7fe00000
 8009e00:	7c9fffff 	.word	0x7c9fffff
 8009e04:	9b08      	ldr	r3, [sp, #32]
 8009e06:	b323      	cbz	r3, 8009e52 <_strtod_l+0xb5a>
 8009e08:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8009e0c:	d821      	bhi.n	8009e52 <_strtod_l+0xb5a>
 8009e0e:	4630      	mov	r0, r6
 8009e10:	4639      	mov	r1, r7
 8009e12:	a327      	add	r3, pc, #156	@ (adr r3, 8009eb0 <_strtod_l+0xbb8>)
 8009e14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e18:	f7f6 fe88 	bl	8000b2c <__aeabi_dcmple>
 8009e1c:	b1a0      	cbz	r0, 8009e48 <_strtod_l+0xb50>
 8009e1e:	4639      	mov	r1, r7
 8009e20:	4630      	mov	r0, r6
 8009e22:	f7f6 fedf 	bl	8000be4 <__aeabi_d2uiz>
 8009e26:	2801      	cmp	r0, #1
 8009e28:	bf38      	it	cc
 8009e2a:	2001      	movcc	r0, #1
 8009e2c:	f7f6 fb88 	bl	8000540 <__aeabi_ui2d>
 8009e30:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009e32:	4606      	mov	r6, r0
 8009e34:	460f      	mov	r7, r1
 8009e36:	b9fb      	cbnz	r3, 8009e78 <_strtod_l+0xb80>
 8009e38:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8009e3c:	9014      	str	r0, [sp, #80]	@ 0x50
 8009e3e:	9315      	str	r3, [sp, #84]	@ 0x54
 8009e40:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8009e44:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8009e48:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8009e4a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8009e4e:	1b5b      	subs	r3, r3, r5
 8009e50:	9311      	str	r3, [sp, #68]	@ 0x44
 8009e52:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8009e56:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8009e5a:	f7ff f8eb 	bl	8009034 <__ulp>
 8009e5e:	4650      	mov	r0, sl
 8009e60:	4659      	mov	r1, fp
 8009e62:	ec53 2b10 	vmov	r2, r3, d0
 8009e66:	f7f6 fbe5 	bl	8000634 <__aeabi_dmul>
 8009e6a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8009e6e:	f7f6 fa2b 	bl	80002c8 <__adddf3>
 8009e72:	4682      	mov	sl, r0
 8009e74:	468b      	mov	fp, r1
 8009e76:	e772      	b.n	8009d5e <_strtod_l+0xa66>
 8009e78:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8009e7c:	e7e0      	b.n	8009e40 <_strtod_l+0xb48>
 8009e7e:	a30e      	add	r3, pc, #56	@ (adr r3, 8009eb8 <_strtod_l+0xbc0>)
 8009e80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e84:	f7f6 fe48 	bl	8000b18 <__aeabi_dcmplt>
 8009e88:	e79a      	b.n	8009dc0 <_strtod_l+0xac8>
 8009e8a:	2300      	movs	r3, #0
 8009e8c:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009e8e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009e90:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8009e92:	6013      	str	r3, [r2, #0]
 8009e94:	f7ff ba6d 	b.w	8009372 <_strtod_l+0x7a>
 8009e98:	2a65      	cmp	r2, #101	@ 0x65
 8009e9a:	f43f ab67 	beq.w	800956c <_strtod_l+0x274>
 8009e9e:	2a45      	cmp	r2, #69	@ 0x45
 8009ea0:	f43f ab64 	beq.w	800956c <_strtod_l+0x274>
 8009ea4:	2301      	movs	r3, #1
 8009ea6:	f7ff bba0 	b.w	80095ea <_strtod_l+0x2f2>
 8009eaa:	bf00      	nop
 8009eac:	f3af 8000 	nop.w
 8009eb0:	ffc00000 	.word	0xffc00000
 8009eb4:	41dfffff 	.word	0x41dfffff
 8009eb8:	94a03595 	.word	0x94a03595
 8009ebc:	3fcfffff 	.word	0x3fcfffff

08009ec0 <_strtod_r>:
 8009ec0:	4b01      	ldr	r3, [pc, #4]	@ (8009ec8 <_strtod_r+0x8>)
 8009ec2:	f7ff ba19 	b.w	80092f8 <_strtod_l>
 8009ec6:	bf00      	nop
 8009ec8:	20000068 	.word	0x20000068

08009ecc <_strtol_l.constprop.0>:
 8009ecc:	2b24      	cmp	r3, #36	@ 0x24
 8009ece:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009ed2:	4686      	mov	lr, r0
 8009ed4:	4690      	mov	r8, r2
 8009ed6:	d801      	bhi.n	8009edc <_strtol_l.constprop.0+0x10>
 8009ed8:	2b01      	cmp	r3, #1
 8009eda:	d106      	bne.n	8009eea <_strtol_l.constprop.0+0x1e>
 8009edc:	f7fd fd8e 	bl	80079fc <__errno>
 8009ee0:	2316      	movs	r3, #22
 8009ee2:	6003      	str	r3, [r0, #0]
 8009ee4:	2000      	movs	r0, #0
 8009ee6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009eea:	460d      	mov	r5, r1
 8009eec:	4833      	ldr	r0, [pc, #204]	@ (8009fbc <_strtol_l.constprop.0+0xf0>)
 8009eee:	462a      	mov	r2, r5
 8009ef0:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009ef4:	5d06      	ldrb	r6, [r0, r4]
 8009ef6:	f016 0608 	ands.w	r6, r6, #8
 8009efa:	d1f8      	bne.n	8009eee <_strtol_l.constprop.0+0x22>
 8009efc:	2c2d      	cmp	r4, #45	@ 0x2d
 8009efe:	d12d      	bne.n	8009f5c <_strtol_l.constprop.0+0x90>
 8009f00:	782c      	ldrb	r4, [r5, #0]
 8009f02:	2601      	movs	r6, #1
 8009f04:	1c95      	adds	r5, r2, #2
 8009f06:	f033 0210 	bics.w	r2, r3, #16
 8009f0a:	d109      	bne.n	8009f20 <_strtol_l.constprop.0+0x54>
 8009f0c:	2c30      	cmp	r4, #48	@ 0x30
 8009f0e:	d12a      	bne.n	8009f66 <_strtol_l.constprop.0+0x9a>
 8009f10:	782a      	ldrb	r2, [r5, #0]
 8009f12:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8009f16:	2a58      	cmp	r2, #88	@ 0x58
 8009f18:	d125      	bne.n	8009f66 <_strtol_l.constprop.0+0x9a>
 8009f1a:	786c      	ldrb	r4, [r5, #1]
 8009f1c:	2310      	movs	r3, #16
 8009f1e:	3502      	adds	r5, #2
 8009f20:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8009f24:	2200      	movs	r2, #0
 8009f26:	f10c 3cff 	add.w	ip, ip, #4294967295
 8009f2a:	4610      	mov	r0, r2
 8009f2c:	fbbc f9f3 	udiv	r9, ip, r3
 8009f30:	fb03 ca19 	mls	sl, r3, r9, ip
 8009f34:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8009f38:	2f09      	cmp	r7, #9
 8009f3a:	d81b      	bhi.n	8009f74 <_strtol_l.constprop.0+0xa8>
 8009f3c:	463c      	mov	r4, r7
 8009f3e:	42a3      	cmp	r3, r4
 8009f40:	dd27      	ble.n	8009f92 <_strtol_l.constprop.0+0xc6>
 8009f42:	1c57      	adds	r7, r2, #1
 8009f44:	d007      	beq.n	8009f56 <_strtol_l.constprop.0+0x8a>
 8009f46:	4581      	cmp	r9, r0
 8009f48:	d320      	bcc.n	8009f8c <_strtol_l.constprop.0+0xc0>
 8009f4a:	d101      	bne.n	8009f50 <_strtol_l.constprop.0+0x84>
 8009f4c:	45a2      	cmp	sl, r4
 8009f4e:	db1d      	blt.n	8009f8c <_strtol_l.constprop.0+0xc0>
 8009f50:	fb00 4003 	mla	r0, r0, r3, r4
 8009f54:	2201      	movs	r2, #1
 8009f56:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009f5a:	e7eb      	b.n	8009f34 <_strtol_l.constprop.0+0x68>
 8009f5c:	2c2b      	cmp	r4, #43	@ 0x2b
 8009f5e:	bf04      	itt	eq
 8009f60:	782c      	ldrbeq	r4, [r5, #0]
 8009f62:	1c95      	addeq	r5, r2, #2
 8009f64:	e7cf      	b.n	8009f06 <_strtol_l.constprop.0+0x3a>
 8009f66:	2b00      	cmp	r3, #0
 8009f68:	d1da      	bne.n	8009f20 <_strtol_l.constprop.0+0x54>
 8009f6a:	2c30      	cmp	r4, #48	@ 0x30
 8009f6c:	bf0c      	ite	eq
 8009f6e:	2308      	moveq	r3, #8
 8009f70:	230a      	movne	r3, #10
 8009f72:	e7d5      	b.n	8009f20 <_strtol_l.constprop.0+0x54>
 8009f74:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8009f78:	2f19      	cmp	r7, #25
 8009f7a:	d801      	bhi.n	8009f80 <_strtol_l.constprop.0+0xb4>
 8009f7c:	3c37      	subs	r4, #55	@ 0x37
 8009f7e:	e7de      	b.n	8009f3e <_strtol_l.constprop.0+0x72>
 8009f80:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8009f84:	2f19      	cmp	r7, #25
 8009f86:	d804      	bhi.n	8009f92 <_strtol_l.constprop.0+0xc6>
 8009f88:	3c57      	subs	r4, #87	@ 0x57
 8009f8a:	e7d8      	b.n	8009f3e <_strtol_l.constprop.0+0x72>
 8009f8c:	f04f 32ff 	mov.w	r2, #4294967295
 8009f90:	e7e1      	b.n	8009f56 <_strtol_l.constprop.0+0x8a>
 8009f92:	1c53      	adds	r3, r2, #1
 8009f94:	d108      	bne.n	8009fa8 <_strtol_l.constprop.0+0xdc>
 8009f96:	2322      	movs	r3, #34	@ 0x22
 8009f98:	4660      	mov	r0, ip
 8009f9a:	f8ce 3000 	str.w	r3, [lr]
 8009f9e:	f1b8 0f00 	cmp.w	r8, #0
 8009fa2:	d0a0      	beq.n	8009ee6 <_strtol_l.constprop.0+0x1a>
 8009fa4:	1e69      	subs	r1, r5, #1
 8009fa6:	e006      	b.n	8009fb6 <_strtol_l.constprop.0+0xea>
 8009fa8:	b106      	cbz	r6, 8009fac <_strtol_l.constprop.0+0xe0>
 8009faa:	4240      	negs	r0, r0
 8009fac:	f1b8 0f00 	cmp.w	r8, #0
 8009fb0:	d099      	beq.n	8009ee6 <_strtol_l.constprop.0+0x1a>
 8009fb2:	2a00      	cmp	r2, #0
 8009fb4:	d1f6      	bne.n	8009fa4 <_strtol_l.constprop.0+0xd8>
 8009fb6:	f8c8 1000 	str.w	r1, [r8]
 8009fba:	e794      	b.n	8009ee6 <_strtol_l.constprop.0+0x1a>
 8009fbc:	0800b521 	.word	0x0800b521

08009fc0 <_strtol_r>:
 8009fc0:	f7ff bf84 	b.w	8009ecc <_strtol_l.constprop.0>

08009fc4 <__ssputs_r>:
 8009fc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009fc8:	461f      	mov	r7, r3
 8009fca:	688e      	ldr	r6, [r1, #8]
 8009fcc:	4682      	mov	sl, r0
 8009fce:	460c      	mov	r4, r1
 8009fd0:	42be      	cmp	r6, r7
 8009fd2:	4690      	mov	r8, r2
 8009fd4:	680b      	ldr	r3, [r1, #0]
 8009fd6:	d82d      	bhi.n	800a034 <__ssputs_r+0x70>
 8009fd8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009fdc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8009fe0:	d026      	beq.n	800a030 <__ssputs_r+0x6c>
 8009fe2:	6965      	ldr	r5, [r4, #20]
 8009fe4:	6909      	ldr	r1, [r1, #16]
 8009fe6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009fea:	eba3 0901 	sub.w	r9, r3, r1
 8009fee:	1c7b      	adds	r3, r7, #1
 8009ff0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009ff4:	444b      	add	r3, r9
 8009ff6:	106d      	asrs	r5, r5, #1
 8009ff8:	429d      	cmp	r5, r3
 8009ffa:	bf38      	it	cc
 8009ffc:	461d      	movcc	r5, r3
 8009ffe:	0553      	lsls	r3, r2, #21
 800a000:	d527      	bpl.n	800a052 <__ssputs_r+0x8e>
 800a002:	4629      	mov	r1, r5
 800a004:	f7fe fc10 	bl	8008828 <_malloc_r>
 800a008:	4606      	mov	r6, r0
 800a00a:	b360      	cbz	r0, 800a066 <__ssputs_r+0xa2>
 800a00c:	464a      	mov	r2, r9
 800a00e:	6921      	ldr	r1, [r4, #16]
 800a010:	f7fd fd2f 	bl	8007a72 <memcpy>
 800a014:	89a3      	ldrh	r3, [r4, #12]
 800a016:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800a01a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a01e:	81a3      	strh	r3, [r4, #12]
 800a020:	6126      	str	r6, [r4, #16]
 800a022:	444e      	add	r6, r9
 800a024:	6165      	str	r5, [r4, #20]
 800a026:	eba5 0509 	sub.w	r5, r5, r9
 800a02a:	6026      	str	r6, [r4, #0]
 800a02c:	463e      	mov	r6, r7
 800a02e:	60a5      	str	r5, [r4, #8]
 800a030:	42be      	cmp	r6, r7
 800a032:	d900      	bls.n	800a036 <__ssputs_r+0x72>
 800a034:	463e      	mov	r6, r7
 800a036:	4632      	mov	r2, r6
 800a038:	4641      	mov	r1, r8
 800a03a:	6820      	ldr	r0, [r4, #0]
 800a03c:	f000 fb9c 	bl	800a778 <memmove>
 800a040:	68a3      	ldr	r3, [r4, #8]
 800a042:	2000      	movs	r0, #0
 800a044:	1b9b      	subs	r3, r3, r6
 800a046:	60a3      	str	r3, [r4, #8]
 800a048:	6823      	ldr	r3, [r4, #0]
 800a04a:	4433      	add	r3, r6
 800a04c:	6023      	str	r3, [r4, #0]
 800a04e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a052:	462a      	mov	r2, r5
 800a054:	f000 ff4d 	bl	800aef2 <_realloc_r>
 800a058:	4606      	mov	r6, r0
 800a05a:	2800      	cmp	r0, #0
 800a05c:	d1e0      	bne.n	800a020 <__ssputs_r+0x5c>
 800a05e:	6921      	ldr	r1, [r4, #16]
 800a060:	4650      	mov	r0, sl
 800a062:	f7fe fb6d 	bl	8008740 <_free_r>
 800a066:	230c      	movs	r3, #12
 800a068:	f04f 30ff 	mov.w	r0, #4294967295
 800a06c:	f8ca 3000 	str.w	r3, [sl]
 800a070:	89a3      	ldrh	r3, [r4, #12]
 800a072:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a076:	81a3      	strh	r3, [r4, #12]
 800a078:	e7e9      	b.n	800a04e <__ssputs_r+0x8a>
	...

0800a07c <_svfiprintf_r>:
 800a07c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a080:	4698      	mov	r8, r3
 800a082:	898b      	ldrh	r3, [r1, #12]
 800a084:	b09d      	sub	sp, #116	@ 0x74
 800a086:	4607      	mov	r7, r0
 800a088:	061b      	lsls	r3, r3, #24
 800a08a:	460d      	mov	r5, r1
 800a08c:	4614      	mov	r4, r2
 800a08e:	d510      	bpl.n	800a0b2 <_svfiprintf_r+0x36>
 800a090:	690b      	ldr	r3, [r1, #16]
 800a092:	b973      	cbnz	r3, 800a0b2 <_svfiprintf_r+0x36>
 800a094:	2140      	movs	r1, #64	@ 0x40
 800a096:	f7fe fbc7 	bl	8008828 <_malloc_r>
 800a09a:	6028      	str	r0, [r5, #0]
 800a09c:	6128      	str	r0, [r5, #16]
 800a09e:	b930      	cbnz	r0, 800a0ae <_svfiprintf_r+0x32>
 800a0a0:	230c      	movs	r3, #12
 800a0a2:	603b      	str	r3, [r7, #0]
 800a0a4:	f04f 30ff 	mov.w	r0, #4294967295
 800a0a8:	b01d      	add	sp, #116	@ 0x74
 800a0aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a0ae:	2340      	movs	r3, #64	@ 0x40
 800a0b0:	616b      	str	r3, [r5, #20]
 800a0b2:	2300      	movs	r3, #0
 800a0b4:	f8cd 800c 	str.w	r8, [sp, #12]
 800a0b8:	f04f 0901 	mov.w	r9, #1
 800a0bc:	f8df 81a0 	ldr.w	r8, [pc, #416]	@ 800a260 <_svfiprintf_r+0x1e4>
 800a0c0:	9309      	str	r3, [sp, #36]	@ 0x24
 800a0c2:	2320      	movs	r3, #32
 800a0c4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a0c8:	2330      	movs	r3, #48	@ 0x30
 800a0ca:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a0ce:	4623      	mov	r3, r4
 800a0d0:	469a      	mov	sl, r3
 800a0d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a0d6:	b10a      	cbz	r2, 800a0dc <_svfiprintf_r+0x60>
 800a0d8:	2a25      	cmp	r2, #37	@ 0x25
 800a0da:	d1f9      	bne.n	800a0d0 <_svfiprintf_r+0x54>
 800a0dc:	ebba 0b04 	subs.w	fp, sl, r4
 800a0e0:	d00b      	beq.n	800a0fa <_svfiprintf_r+0x7e>
 800a0e2:	465b      	mov	r3, fp
 800a0e4:	4622      	mov	r2, r4
 800a0e6:	4629      	mov	r1, r5
 800a0e8:	4638      	mov	r0, r7
 800a0ea:	f7ff ff6b 	bl	8009fc4 <__ssputs_r>
 800a0ee:	3001      	adds	r0, #1
 800a0f0:	f000 80a7 	beq.w	800a242 <_svfiprintf_r+0x1c6>
 800a0f4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a0f6:	445a      	add	r2, fp
 800a0f8:	9209      	str	r2, [sp, #36]	@ 0x24
 800a0fa:	f89a 3000 	ldrb.w	r3, [sl]
 800a0fe:	2b00      	cmp	r3, #0
 800a100:	f000 809f 	beq.w	800a242 <_svfiprintf_r+0x1c6>
 800a104:	2300      	movs	r3, #0
 800a106:	f04f 32ff 	mov.w	r2, #4294967295
 800a10a:	f10a 0a01 	add.w	sl, sl, #1
 800a10e:	9304      	str	r3, [sp, #16]
 800a110:	9307      	str	r3, [sp, #28]
 800a112:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a116:	931a      	str	r3, [sp, #104]	@ 0x68
 800a118:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a11c:	4654      	mov	r4, sl
 800a11e:	2205      	movs	r2, #5
 800a120:	484f      	ldr	r0, [pc, #316]	@ (800a260 <_svfiprintf_r+0x1e4>)
 800a122:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a126:	f7fd fc96 	bl	8007a56 <memchr>
 800a12a:	9a04      	ldr	r2, [sp, #16]
 800a12c:	b9d8      	cbnz	r0, 800a166 <_svfiprintf_r+0xea>
 800a12e:	06d0      	lsls	r0, r2, #27
 800a130:	bf44      	itt	mi
 800a132:	2320      	movmi	r3, #32
 800a134:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a138:	0711      	lsls	r1, r2, #28
 800a13a:	bf44      	itt	mi
 800a13c:	232b      	movmi	r3, #43	@ 0x2b
 800a13e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a142:	f89a 3000 	ldrb.w	r3, [sl]
 800a146:	2b2a      	cmp	r3, #42	@ 0x2a
 800a148:	d015      	beq.n	800a176 <_svfiprintf_r+0xfa>
 800a14a:	9a07      	ldr	r2, [sp, #28]
 800a14c:	4654      	mov	r4, sl
 800a14e:	2000      	movs	r0, #0
 800a150:	f04f 0c0a 	mov.w	ip, #10
 800a154:	4621      	mov	r1, r4
 800a156:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a15a:	3b30      	subs	r3, #48	@ 0x30
 800a15c:	2b09      	cmp	r3, #9
 800a15e:	d94b      	bls.n	800a1f8 <_svfiprintf_r+0x17c>
 800a160:	b1b0      	cbz	r0, 800a190 <_svfiprintf_r+0x114>
 800a162:	9207      	str	r2, [sp, #28]
 800a164:	e014      	b.n	800a190 <_svfiprintf_r+0x114>
 800a166:	eba0 0308 	sub.w	r3, r0, r8
 800a16a:	46a2      	mov	sl, r4
 800a16c:	fa09 f303 	lsl.w	r3, r9, r3
 800a170:	4313      	orrs	r3, r2
 800a172:	9304      	str	r3, [sp, #16]
 800a174:	e7d2      	b.n	800a11c <_svfiprintf_r+0xa0>
 800a176:	9b03      	ldr	r3, [sp, #12]
 800a178:	1d19      	adds	r1, r3, #4
 800a17a:	681b      	ldr	r3, [r3, #0]
 800a17c:	2b00      	cmp	r3, #0
 800a17e:	9103      	str	r1, [sp, #12]
 800a180:	bfbb      	ittet	lt
 800a182:	425b      	neglt	r3, r3
 800a184:	f042 0202 	orrlt.w	r2, r2, #2
 800a188:	9307      	strge	r3, [sp, #28]
 800a18a:	9307      	strlt	r3, [sp, #28]
 800a18c:	bfb8      	it	lt
 800a18e:	9204      	strlt	r2, [sp, #16]
 800a190:	7823      	ldrb	r3, [r4, #0]
 800a192:	2b2e      	cmp	r3, #46	@ 0x2e
 800a194:	d10a      	bne.n	800a1ac <_svfiprintf_r+0x130>
 800a196:	7863      	ldrb	r3, [r4, #1]
 800a198:	2b2a      	cmp	r3, #42	@ 0x2a
 800a19a:	d132      	bne.n	800a202 <_svfiprintf_r+0x186>
 800a19c:	9b03      	ldr	r3, [sp, #12]
 800a19e:	3402      	adds	r4, #2
 800a1a0:	1d1a      	adds	r2, r3, #4
 800a1a2:	681b      	ldr	r3, [r3, #0]
 800a1a4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a1a8:	9203      	str	r2, [sp, #12]
 800a1aa:	9305      	str	r3, [sp, #20]
 800a1ac:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800a270 <_svfiprintf_r+0x1f4>
 800a1b0:	2203      	movs	r2, #3
 800a1b2:	7821      	ldrb	r1, [r4, #0]
 800a1b4:	4650      	mov	r0, sl
 800a1b6:	f7fd fc4e 	bl	8007a56 <memchr>
 800a1ba:	b138      	cbz	r0, 800a1cc <_svfiprintf_r+0x150>
 800a1bc:	eba0 000a 	sub.w	r0, r0, sl
 800a1c0:	2240      	movs	r2, #64	@ 0x40
 800a1c2:	9b04      	ldr	r3, [sp, #16]
 800a1c4:	3401      	adds	r4, #1
 800a1c6:	4082      	lsls	r2, r0
 800a1c8:	4313      	orrs	r3, r2
 800a1ca:	9304      	str	r3, [sp, #16]
 800a1cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a1d0:	2206      	movs	r2, #6
 800a1d2:	4824      	ldr	r0, [pc, #144]	@ (800a264 <_svfiprintf_r+0x1e8>)
 800a1d4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a1d8:	f7fd fc3d 	bl	8007a56 <memchr>
 800a1dc:	2800      	cmp	r0, #0
 800a1de:	d036      	beq.n	800a24e <_svfiprintf_r+0x1d2>
 800a1e0:	4b21      	ldr	r3, [pc, #132]	@ (800a268 <_svfiprintf_r+0x1ec>)
 800a1e2:	bb1b      	cbnz	r3, 800a22c <_svfiprintf_r+0x1b0>
 800a1e4:	9b03      	ldr	r3, [sp, #12]
 800a1e6:	3307      	adds	r3, #7
 800a1e8:	f023 0307 	bic.w	r3, r3, #7
 800a1ec:	3308      	adds	r3, #8
 800a1ee:	9303      	str	r3, [sp, #12]
 800a1f0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a1f2:	4433      	add	r3, r6
 800a1f4:	9309      	str	r3, [sp, #36]	@ 0x24
 800a1f6:	e76a      	b.n	800a0ce <_svfiprintf_r+0x52>
 800a1f8:	fb0c 3202 	mla	r2, ip, r2, r3
 800a1fc:	460c      	mov	r4, r1
 800a1fe:	2001      	movs	r0, #1
 800a200:	e7a8      	b.n	800a154 <_svfiprintf_r+0xd8>
 800a202:	2300      	movs	r3, #0
 800a204:	3401      	adds	r4, #1
 800a206:	f04f 0c0a 	mov.w	ip, #10
 800a20a:	4619      	mov	r1, r3
 800a20c:	9305      	str	r3, [sp, #20]
 800a20e:	4620      	mov	r0, r4
 800a210:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a214:	3a30      	subs	r2, #48	@ 0x30
 800a216:	2a09      	cmp	r2, #9
 800a218:	d903      	bls.n	800a222 <_svfiprintf_r+0x1a6>
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	d0c6      	beq.n	800a1ac <_svfiprintf_r+0x130>
 800a21e:	9105      	str	r1, [sp, #20]
 800a220:	e7c4      	b.n	800a1ac <_svfiprintf_r+0x130>
 800a222:	fb0c 2101 	mla	r1, ip, r1, r2
 800a226:	4604      	mov	r4, r0
 800a228:	2301      	movs	r3, #1
 800a22a:	e7f0      	b.n	800a20e <_svfiprintf_r+0x192>
 800a22c:	ab03      	add	r3, sp, #12
 800a22e:	462a      	mov	r2, r5
 800a230:	a904      	add	r1, sp, #16
 800a232:	4638      	mov	r0, r7
 800a234:	9300      	str	r3, [sp, #0]
 800a236:	4b0d      	ldr	r3, [pc, #52]	@ (800a26c <_svfiprintf_r+0x1f0>)
 800a238:	f7fc fc88 	bl	8006b4c <_printf_float>
 800a23c:	1c42      	adds	r2, r0, #1
 800a23e:	4606      	mov	r6, r0
 800a240:	d1d6      	bne.n	800a1f0 <_svfiprintf_r+0x174>
 800a242:	89ab      	ldrh	r3, [r5, #12]
 800a244:	065b      	lsls	r3, r3, #25
 800a246:	f53f af2d 	bmi.w	800a0a4 <_svfiprintf_r+0x28>
 800a24a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a24c:	e72c      	b.n	800a0a8 <_svfiprintf_r+0x2c>
 800a24e:	ab03      	add	r3, sp, #12
 800a250:	462a      	mov	r2, r5
 800a252:	a904      	add	r1, sp, #16
 800a254:	4638      	mov	r0, r7
 800a256:	9300      	str	r3, [sp, #0]
 800a258:	4b04      	ldr	r3, [pc, #16]	@ (800a26c <_svfiprintf_r+0x1f0>)
 800a25a:	f7fc ff13 	bl	8007084 <_printf_i>
 800a25e:	e7ed      	b.n	800a23c <_svfiprintf_r+0x1c0>
 800a260:	0800b621 	.word	0x0800b621
 800a264:	0800b62b 	.word	0x0800b62b
 800a268:	08006b4d 	.word	0x08006b4d
 800a26c:	08009fc5 	.word	0x08009fc5
 800a270:	0800b627 	.word	0x0800b627

0800a274 <__sfputc_r>:
 800a274:	6893      	ldr	r3, [r2, #8]
 800a276:	3b01      	subs	r3, #1
 800a278:	2b00      	cmp	r3, #0
 800a27a:	6093      	str	r3, [r2, #8]
 800a27c:	b410      	push	{r4}
 800a27e:	da08      	bge.n	800a292 <__sfputc_r+0x1e>
 800a280:	6994      	ldr	r4, [r2, #24]
 800a282:	42a3      	cmp	r3, r4
 800a284:	db01      	blt.n	800a28a <__sfputc_r+0x16>
 800a286:	290a      	cmp	r1, #10
 800a288:	d103      	bne.n	800a292 <__sfputc_r+0x1e>
 800a28a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a28e:	f000 b9df 	b.w	800a650 <__swbuf_r>
 800a292:	6813      	ldr	r3, [r2, #0]
 800a294:	1c58      	adds	r0, r3, #1
 800a296:	6010      	str	r0, [r2, #0]
 800a298:	4608      	mov	r0, r1
 800a29a:	7019      	strb	r1, [r3, #0]
 800a29c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a2a0:	4770      	bx	lr

0800a2a2 <__sfputs_r>:
 800a2a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a2a4:	4606      	mov	r6, r0
 800a2a6:	460f      	mov	r7, r1
 800a2a8:	4614      	mov	r4, r2
 800a2aa:	18d5      	adds	r5, r2, r3
 800a2ac:	42ac      	cmp	r4, r5
 800a2ae:	d101      	bne.n	800a2b4 <__sfputs_r+0x12>
 800a2b0:	2000      	movs	r0, #0
 800a2b2:	e007      	b.n	800a2c4 <__sfputs_r+0x22>
 800a2b4:	463a      	mov	r2, r7
 800a2b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a2ba:	4630      	mov	r0, r6
 800a2bc:	f7ff ffda 	bl	800a274 <__sfputc_r>
 800a2c0:	1c43      	adds	r3, r0, #1
 800a2c2:	d1f3      	bne.n	800a2ac <__sfputs_r+0xa>
 800a2c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a2c8 <_vfiprintf_r>:
 800a2c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a2cc:	460d      	mov	r5, r1
 800a2ce:	b09d      	sub	sp, #116	@ 0x74
 800a2d0:	4614      	mov	r4, r2
 800a2d2:	4698      	mov	r8, r3
 800a2d4:	4606      	mov	r6, r0
 800a2d6:	b118      	cbz	r0, 800a2e0 <_vfiprintf_r+0x18>
 800a2d8:	6a03      	ldr	r3, [r0, #32]
 800a2da:	b90b      	cbnz	r3, 800a2e0 <_vfiprintf_r+0x18>
 800a2dc:	f7fd fa90 	bl	8007800 <__sinit>
 800a2e0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a2e2:	07d9      	lsls	r1, r3, #31
 800a2e4:	d405      	bmi.n	800a2f2 <_vfiprintf_r+0x2a>
 800a2e6:	89ab      	ldrh	r3, [r5, #12]
 800a2e8:	059a      	lsls	r2, r3, #22
 800a2ea:	d402      	bmi.n	800a2f2 <_vfiprintf_r+0x2a>
 800a2ec:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a2ee:	f7fd fbb0 	bl	8007a52 <__retarget_lock_acquire_recursive>
 800a2f2:	89ab      	ldrh	r3, [r5, #12]
 800a2f4:	071b      	lsls	r3, r3, #28
 800a2f6:	d501      	bpl.n	800a2fc <_vfiprintf_r+0x34>
 800a2f8:	692b      	ldr	r3, [r5, #16]
 800a2fa:	b99b      	cbnz	r3, 800a324 <_vfiprintf_r+0x5c>
 800a2fc:	4629      	mov	r1, r5
 800a2fe:	4630      	mov	r0, r6
 800a300:	f000 f9e4 	bl	800a6cc <__swsetup_r>
 800a304:	b170      	cbz	r0, 800a324 <_vfiprintf_r+0x5c>
 800a306:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a308:	07dc      	lsls	r4, r3, #31
 800a30a:	d504      	bpl.n	800a316 <_vfiprintf_r+0x4e>
 800a30c:	f04f 30ff 	mov.w	r0, #4294967295
 800a310:	b01d      	add	sp, #116	@ 0x74
 800a312:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a316:	89ab      	ldrh	r3, [r5, #12]
 800a318:	0598      	lsls	r0, r3, #22
 800a31a:	d4f7      	bmi.n	800a30c <_vfiprintf_r+0x44>
 800a31c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a31e:	f7fd fb99 	bl	8007a54 <__retarget_lock_release_recursive>
 800a322:	e7f3      	b.n	800a30c <_vfiprintf_r+0x44>
 800a324:	2300      	movs	r3, #0
 800a326:	f8cd 800c 	str.w	r8, [sp, #12]
 800a32a:	f04f 0901 	mov.w	r9, #1
 800a32e:	f8df 81b4 	ldr.w	r8, [pc, #436]	@ 800a4e4 <_vfiprintf_r+0x21c>
 800a332:	9309      	str	r3, [sp, #36]	@ 0x24
 800a334:	2320      	movs	r3, #32
 800a336:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a33a:	2330      	movs	r3, #48	@ 0x30
 800a33c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a340:	4623      	mov	r3, r4
 800a342:	469a      	mov	sl, r3
 800a344:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a348:	b10a      	cbz	r2, 800a34e <_vfiprintf_r+0x86>
 800a34a:	2a25      	cmp	r2, #37	@ 0x25
 800a34c:	d1f9      	bne.n	800a342 <_vfiprintf_r+0x7a>
 800a34e:	ebba 0b04 	subs.w	fp, sl, r4
 800a352:	d00b      	beq.n	800a36c <_vfiprintf_r+0xa4>
 800a354:	465b      	mov	r3, fp
 800a356:	4622      	mov	r2, r4
 800a358:	4629      	mov	r1, r5
 800a35a:	4630      	mov	r0, r6
 800a35c:	f7ff ffa1 	bl	800a2a2 <__sfputs_r>
 800a360:	3001      	adds	r0, #1
 800a362:	f000 80a7 	beq.w	800a4b4 <_vfiprintf_r+0x1ec>
 800a366:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a368:	445a      	add	r2, fp
 800a36a:	9209      	str	r2, [sp, #36]	@ 0x24
 800a36c:	f89a 3000 	ldrb.w	r3, [sl]
 800a370:	2b00      	cmp	r3, #0
 800a372:	f000 809f 	beq.w	800a4b4 <_vfiprintf_r+0x1ec>
 800a376:	2300      	movs	r3, #0
 800a378:	f04f 32ff 	mov.w	r2, #4294967295
 800a37c:	f10a 0a01 	add.w	sl, sl, #1
 800a380:	9304      	str	r3, [sp, #16]
 800a382:	9307      	str	r3, [sp, #28]
 800a384:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a388:	931a      	str	r3, [sp, #104]	@ 0x68
 800a38a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a38e:	4654      	mov	r4, sl
 800a390:	2205      	movs	r2, #5
 800a392:	4854      	ldr	r0, [pc, #336]	@ (800a4e4 <_vfiprintf_r+0x21c>)
 800a394:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a398:	f7fd fb5d 	bl	8007a56 <memchr>
 800a39c:	9a04      	ldr	r2, [sp, #16]
 800a39e:	b9d8      	cbnz	r0, 800a3d8 <_vfiprintf_r+0x110>
 800a3a0:	06d1      	lsls	r1, r2, #27
 800a3a2:	bf44      	itt	mi
 800a3a4:	2320      	movmi	r3, #32
 800a3a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a3aa:	0713      	lsls	r3, r2, #28
 800a3ac:	bf44      	itt	mi
 800a3ae:	232b      	movmi	r3, #43	@ 0x2b
 800a3b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a3b4:	f89a 3000 	ldrb.w	r3, [sl]
 800a3b8:	2b2a      	cmp	r3, #42	@ 0x2a
 800a3ba:	d015      	beq.n	800a3e8 <_vfiprintf_r+0x120>
 800a3bc:	9a07      	ldr	r2, [sp, #28]
 800a3be:	4654      	mov	r4, sl
 800a3c0:	2000      	movs	r0, #0
 800a3c2:	f04f 0c0a 	mov.w	ip, #10
 800a3c6:	4621      	mov	r1, r4
 800a3c8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a3cc:	3b30      	subs	r3, #48	@ 0x30
 800a3ce:	2b09      	cmp	r3, #9
 800a3d0:	d94b      	bls.n	800a46a <_vfiprintf_r+0x1a2>
 800a3d2:	b1b0      	cbz	r0, 800a402 <_vfiprintf_r+0x13a>
 800a3d4:	9207      	str	r2, [sp, #28]
 800a3d6:	e014      	b.n	800a402 <_vfiprintf_r+0x13a>
 800a3d8:	eba0 0308 	sub.w	r3, r0, r8
 800a3dc:	46a2      	mov	sl, r4
 800a3de:	fa09 f303 	lsl.w	r3, r9, r3
 800a3e2:	4313      	orrs	r3, r2
 800a3e4:	9304      	str	r3, [sp, #16]
 800a3e6:	e7d2      	b.n	800a38e <_vfiprintf_r+0xc6>
 800a3e8:	9b03      	ldr	r3, [sp, #12]
 800a3ea:	1d19      	adds	r1, r3, #4
 800a3ec:	681b      	ldr	r3, [r3, #0]
 800a3ee:	2b00      	cmp	r3, #0
 800a3f0:	9103      	str	r1, [sp, #12]
 800a3f2:	bfbb      	ittet	lt
 800a3f4:	425b      	neglt	r3, r3
 800a3f6:	f042 0202 	orrlt.w	r2, r2, #2
 800a3fa:	9307      	strge	r3, [sp, #28]
 800a3fc:	9307      	strlt	r3, [sp, #28]
 800a3fe:	bfb8      	it	lt
 800a400:	9204      	strlt	r2, [sp, #16]
 800a402:	7823      	ldrb	r3, [r4, #0]
 800a404:	2b2e      	cmp	r3, #46	@ 0x2e
 800a406:	d10a      	bne.n	800a41e <_vfiprintf_r+0x156>
 800a408:	7863      	ldrb	r3, [r4, #1]
 800a40a:	2b2a      	cmp	r3, #42	@ 0x2a
 800a40c:	d132      	bne.n	800a474 <_vfiprintf_r+0x1ac>
 800a40e:	9b03      	ldr	r3, [sp, #12]
 800a410:	3402      	adds	r4, #2
 800a412:	1d1a      	adds	r2, r3, #4
 800a414:	681b      	ldr	r3, [r3, #0]
 800a416:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a41a:	9203      	str	r2, [sp, #12]
 800a41c:	9305      	str	r3, [sp, #20]
 800a41e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800a4f4 <_vfiprintf_r+0x22c>
 800a422:	2203      	movs	r2, #3
 800a424:	7821      	ldrb	r1, [r4, #0]
 800a426:	4650      	mov	r0, sl
 800a428:	f7fd fb15 	bl	8007a56 <memchr>
 800a42c:	b138      	cbz	r0, 800a43e <_vfiprintf_r+0x176>
 800a42e:	eba0 000a 	sub.w	r0, r0, sl
 800a432:	2240      	movs	r2, #64	@ 0x40
 800a434:	9b04      	ldr	r3, [sp, #16]
 800a436:	3401      	adds	r4, #1
 800a438:	4082      	lsls	r2, r0
 800a43a:	4313      	orrs	r3, r2
 800a43c:	9304      	str	r3, [sp, #16]
 800a43e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a442:	2206      	movs	r2, #6
 800a444:	4828      	ldr	r0, [pc, #160]	@ (800a4e8 <_vfiprintf_r+0x220>)
 800a446:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a44a:	f7fd fb04 	bl	8007a56 <memchr>
 800a44e:	2800      	cmp	r0, #0
 800a450:	d03f      	beq.n	800a4d2 <_vfiprintf_r+0x20a>
 800a452:	4b26      	ldr	r3, [pc, #152]	@ (800a4ec <_vfiprintf_r+0x224>)
 800a454:	bb1b      	cbnz	r3, 800a49e <_vfiprintf_r+0x1d6>
 800a456:	9b03      	ldr	r3, [sp, #12]
 800a458:	3307      	adds	r3, #7
 800a45a:	f023 0307 	bic.w	r3, r3, #7
 800a45e:	3308      	adds	r3, #8
 800a460:	9303      	str	r3, [sp, #12]
 800a462:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a464:	443b      	add	r3, r7
 800a466:	9309      	str	r3, [sp, #36]	@ 0x24
 800a468:	e76a      	b.n	800a340 <_vfiprintf_r+0x78>
 800a46a:	fb0c 3202 	mla	r2, ip, r2, r3
 800a46e:	460c      	mov	r4, r1
 800a470:	2001      	movs	r0, #1
 800a472:	e7a8      	b.n	800a3c6 <_vfiprintf_r+0xfe>
 800a474:	2300      	movs	r3, #0
 800a476:	3401      	adds	r4, #1
 800a478:	f04f 0c0a 	mov.w	ip, #10
 800a47c:	4619      	mov	r1, r3
 800a47e:	9305      	str	r3, [sp, #20]
 800a480:	4620      	mov	r0, r4
 800a482:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a486:	3a30      	subs	r2, #48	@ 0x30
 800a488:	2a09      	cmp	r2, #9
 800a48a:	d903      	bls.n	800a494 <_vfiprintf_r+0x1cc>
 800a48c:	2b00      	cmp	r3, #0
 800a48e:	d0c6      	beq.n	800a41e <_vfiprintf_r+0x156>
 800a490:	9105      	str	r1, [sp, #20]
 800a492:	e7c4      	b.n	800a41e <_vfiprintf_r+0x156>
 800a494:	fb0c 2101 	mla	r1, ip, r1, r2
 800a498:	4604      	mov	r4, r0
 800a49a:	2301      	movs	r3, #1
 800a49c:	e7f0      	b.n	800a480 <_vfiprintf_r+0x1b8>
 800a49e:	ab03      	add	r3, sp, #12
 800a4a0:	462a      	mov	r2, r5
 800a4a2:	a904      	add	r1, sp, #16
 800a4a4:	4630      	mov	r0, r6
 800a4a6:	9300      	str	r3, [sp, #0]
 800a4a8:	4b11      	ldr	r3, [pc, #68]	@ (800a4f0 <_vfiprintf_r+0x228>)
 800a4aa:	f7fc fb4f 	bl	8006b4c <_printf_float>
 800a4ae:	4607      	mov	r7, r0
 800a4b0:	1c78      	adds	r0, r7, #1
 800a4b2:	d1d6      	bne.n	800a462 <_vfiprintf_r+0x19a>
 800a4b4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a4b6:	07d9      	lsls	r1, r3, #31
 800a4b8:	d405      	bmi.n	800a4c6 <_vfiprintf_r+0x1fe>
 800a4ba:	89ab      	ldrh	r3, [r5, #12]
 800a4bc:	059a      	lsls	r2, r3, #22
 800a4be:	d402      	bmi.n	800a4c6 <_vfiprintf_r+0x1fe>
 800a4c0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a4c2:	f7fd fac7 	bl	8007a54 <__retarget_lock_release_recursive>
 800a4c6:	89ab      	ldrh	r3, [r5, #12]
 800a4c8:	065b      	lsls	r3, r3, #25
 800a4ca:	f53f af1f 	bmi.w	800a30c <_vfiprintf_r+0x44>
 800a4ce:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a4d0:	e71e      	b.n	800a310 <_vfiprintf_r+0x48>
 800a4d2:	ab03      	add	r3, sp, #12
 800a4d4:	462a      	mov	r2, r5
 800a4d6:	a904      	add	r1, sp, #16
 800a4d8:	4630      	mov	r0, r6
 800a4da:	9300      	str	r3, [sp, #0]
 800a4dc:	4b04      	ldr	r3, [pc, #16]	@ (800a4f0 <_vfiprintf_r+0x228>)
 800a4de:	f7fc fdd1 	bl	8007084 <_printf_i>
 800a4e2:	e7e4      	b.n	800a4ae <_vfiprintf_r+0x1e6>
 800a4e4:	0800b621 	.word	0x0800b621
 800a4e8:	0800b62b 	.word	0x0800b62b
 800a4ec:	08006b4d 	.word	0x08006b4d
 800a4f0:	0800a2a3 	.word	0x0800a2a3
 800a4f4:	0800b627 	.word	0x0800b627

0800a4f8 <__sflush_r>:
 800a4f8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a4fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a500:	0716      	lsls	r6, r2, #28
 800a502:	4605      	mov	r5, r0
 800a504:	460c      	mov	r4, r1
 800a506:	d454      	bmi.n	800a5b2 <__sflush_r+0xba>
 800a508:	684b      	ldr	r3, [r1, #4]
 800a50a:	2b00      	cmp	r3, #0
 800a50c:	dc02      	bgt.n	800a514 <__sflush_r+0x1c>
 800a50e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800a510:	2b00      	cmp	r3, #0
 800a512:	dd48      	ble.n	800a5a6 <__sflush_r+0xae>
 800a514:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a516:	2e00      	cmp	r6, #0
 800a518:	d045      	beq.n	800a5a6 <__sflush_r+0xae>
 800a51a:	2300      	movs	r3, #0
 800a51c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800a520:	682f      	ldr	r7, [r5, #0]
 800a522:	6a21      	ldr	r1, [r4, #32]
 800a524:	602b      	str	r3, [r5, #0]
 800a526:	d030      	beq.n	800a58a <__sflush_r+0x92>
 800a528:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800a52a:	89a3      	ldrh	r3, [r4, #12]
 800a52c:	0759      	lsls	r1, r3, #29
 800a52e:	d505      	bpl.n	800a53c <__sflush_r+0x44>
 800a530:	6863      	ldr	r3, [r4, #4]
 800a532:	1ad2      	subs	r2, r2, r3
 800a534:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800a536:	b10b      	cbz	r3, 800a53c <__sflush_r+0x44>
 800a538:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a53a:	1ad2      	subs	r2, r2, r3
 800a53c:	2300      	movs	r3, #0
 800a53e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a540:	6a21      	ldr	r1, [r4, #32]
 800a542:	4628      	mov	r0, r5
 800a544:	47b0      	blx	r6
 800a546:	1c43      	adds	r3, r0, #1
 800a548:	89a3      	ldrh	r3, [r4, #12]
 800a54a:	d106      	bne.n	800a55a <__sflush_r+0x62>
 800a54c:	6829      	ldr	r1, [r5, #0]
 800a54e:	291d      	cmp	r1, #29
 800a550:	d82b      	bhi.n	800a5aa <__sflush_r+0xb2>
 800a552:	4a2a      	ldr	r2, [pc, #168]	@ (800a5fc <__sflush_r+0x104>)
 800a554:	410a      	asrs	r2, r1
 800a556:	07d6      	lsls	r6, r2, #31
 800a558:	d427      	bmi.n	800a5aa <__sflush_r+0xb2>
 800a55a:	2200      	movs	r2, #0
 800a55c:	04d9      	lsls	r1, r3, #19
 800a55e:	6062      	str	r2, [r4, #4]
 800a560:	6922      	ldr	r2, [r4, #16]
 800a562:	6022      	str	r2, [r4, #0]
 800a564:	d504      	bpl.n	800a570 <__sflush_r+0x78>
 800a566:	1c42      	adds	r2, r0, #1
 800a568:	d101      	bne.n	800a56e <__sflush_r+0x76>
 800a56a:	682b      	ldr	r3, [r5, #0]
 800a56c:	b903      	cbnz	r3, 800a570 <__sflush_r+0x78>
 800a56e:	6560      	str	r0, [r4, #84]	@ 0x54
 800a570:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a572:	602f      	str	r7, [r5, #0]
 800a574:	b1b9      	cbz	r1, 800a5a6 <__sflush_r+0xae>
 800a576:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a57a:	4299      	cmp	r1, r3
 800a57c:	d002      	beq.n	800a584 <__sflush_r+0x8c>
 800a57e:	4628      	mov	r0, r5
 800a580:	f7fe f8de 	bl	8008740 <_free_r>
 800a584:	2300      	movs	r3, #0
 800a586:	6363      	str	r3, [r4, #52]	@ 0x34
 800a588:	e00d      	b.n	800a5a6 <__sflush_r+0xae>
 800a58a:	2301      	movs	r3, #1
 800a58c:	4628      	mov	r0, r5
 800a58e:	47b0      	blx	r6
 800a590:	4602      	mov	r2, r0
 800a592:	1c50      	adds	r0, r2, #1
 800a594:	d1c9      	bne.n	800a52a <__sflush_r+0x32>
 800a596:	682b      	ldr	r3, [r5, #0]
 800a598:	2b00      	cmp	r3, #0
 800a59a:	d0c6      	beq.n	800a52a <__sflush_r+0x32>
 800a59c:	2b1d      	cmp	r3, #29
 800a59e:	d001      	beq.n	800a5a4 <__sflush_r+0xac>
 800a5a0:	2b16      	cmp	r3, #22
 800a5a2:	d11d      	bne.n	800a5e0 <__sflush_r+0xe8>
 800a5a4:	602f      	str	r7, [r5, #0]
 800a5a6:	2000      	movs	r0, #0
 800a5a8:	e021      	b.n	800a5ee <__sflush_r+0xf6>
 800a5aa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a5ae:	b21b      	sxth	r3, r3
 800a5b0:	e01a      	b.n	800a5e8 <__sflush_r+0xf0>
 800a5b2:	690f      	ldr	r7, [r1, #16]
 800a5b4:	2f00      	cmp	r7, #0
 800a5b6:	d0f6      	beq.n	800a5a6 <__sflush_r+0xae>
 800a5b8:	0793      	lsls	r3, r2, #30
 800a5ba:	680e      	ldr	r6, [r1, #0]
 800a5bc:	600f      	str	r7, [r1, #0]
 800a5be:	bf0c      	ite	eq
 800a5c0:	694b      	ldreq	r3, [r1, #20]
 800a5c2:	2300      	movne	r3, #0
 800a5c4:	eba6 0807 	sub.w	r8, r6, r7
 800a5c8:	608b      	str	r3, [r1, #8]
 800a5ca:	f1b8 0f00 	cmp.w	r8, #0
 800a5ce:	ddea      	ble.n	800a5a6 <__sflush_r+0xae>
 800a5d0:	4643      	mov	r3, r8
 800a5d2:	463a      	mov	r2, r7
 800a5d4:	6a21      	ldr	r1, [r4, #32]
 800a5d6:	4628      	mov	r0, r5
 800a5d8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800a5da:	47b0      	blx	r6
 800a5dc:	2800      	cmp	r0, #0
 800a5de:	dc08      	bgt.n	800a5f2 <__sflush_r+0xfa>
 800a5e0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a5e4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a5e8:	f04f 30ff 	mov.w	r0, #4294967295
 800a5ec:	81a3      	strh	r3, [r4, #12]
 800a5ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a5f2:	4407      	add	r7, r0
 800a5f4:	eba8 0800 	sub.w	r8, r8, r0
 800a5f8:	e7e7      	b.n	800a5ca <__sflush_r+0xd2>
 800a5fa:	bf00      	nop
 800a5fc:	dfbffffe 	.word	0xdfbffffe

0800a600 <_fflush_r>:
 800a600:	b538      	push	{r3, r4, r5, lr}
 800a602:	690b      	ldr	r3, [r1, #16]
 800a604:	4605      	mov	r5, r0
 800a606:	460c      	mov	r4, r1
 800a608:	b913      	cbnz	r3, 800a610 <_fflush_r+0x10>
 800a60a:	2500      	movs	r5, #0
 800a60c:	4628      	mov	r0, r5
 800a60e:	bd38      	pop	{r3, r4, r5, pc}
 800a610:	b118      	cbz	r0, 800a61a <_fflush_r+0x1a>
 800a612:	6a03      	ldr	r3, [r0, #32]
 800a614:	b90b      	cbnz	r3, 800a61a <_fflush_r+0x1a>
 800a616:	f7fd f8f3 	bl	8007800 <__sinit>
 800a61a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a61e:	2b00      	cmp	r3, #0
 800a620:	d0f3      	beq.n	800a60a <_fflush_r+0xa>
 800a622:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800a624:	07d0      	lsls	r0, r2, #31
 800a626:	d404      	bmi.n	800a632 <_fflush_r+0x32>
 800a628:	0599      	lsls	r1, r3, #22
 800a62a:	d402      	bmi.n	800a632 <_fflush_r+0x32>
 800a62c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a62e:	f7fd fa10 	bl	8007a52 <__retarget_lock_acquire_recursive>
 800a632:	4628      	mov	r0, r5
 800a634:	4621      	mov	r1, r4
 800a636:	f7ff ff5f 	bl	800a4f8 <__sflush_r>
 800a63a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a63c:	4605      	mov	r5, r0
 800a63e:	07da      	lsls	r2, r3, #31
 800a640:	d4e4      	bmi.n	800a60c <_fflush_r+0xc>
 800a642:	89a3      	ldrh	r3, [r4, #12]
 800a644:	059b      	lsls	r3, r3, #22
 800a646:	d4e1      	bmi.n	800a60c <_fflush_r+0xc>
 800a648:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a64a:	f7fd fa03 	bl	8007a54 <__retarget_lock_release_recursive>
 800a64e:	e7dd      	b.n	800a60c <_fflush_r+0xc>

0800a650 <__swbuf_r>:
 800a650:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a652:	460e      	mov	r6, r1
 800a654:	4614      	mov	r4, r2
 800a656:	4605      	mov	r5, r0
 800a658:	b118      	cbz	r0, 800a662 <__swbuf_r+0x12>
 800a65a:	6a03      	ldr	r3, [r0, #32]
 800a65c:	b90b      	cbnz	r3, 800a662 <__swbuf_r+0x12>
 800a65e:	f7fd f8cf 	bl	8007800 <__sinit>
 800a662:	69a3      	ldr	r3, [r4, #24]
 800a664:	60a3      	str	r3, [r4, #8]
 800a666:	89a3      	ldrh	r3, [r4, #12]
 800a668:	071a      	lsls	r2, r3, #28
 800a66a:	d501      	bpl.n	800a670 <__swbuf_r+0x20>
 800a66c:	6923      	ldr	r3, [r4, #16]
 800a66e:	b943      	cbnz	r3, 800a682 <__swbuf_r+0x32>
 800a670:	4621      	mov	r1, r4
 800a672:	4628      	mov	r0, r5
 800a674:	f000 f82a 	bl	800a6cc <__swsetup_r>
 800a678:	b118      	cbz	r0, 800a682 <__swbuf_r+0x32>
 800a67a:	f04f 37ff 	mov.w	r7, #4294967295
 800a67e:	4638      	mov	r0, r7
 800a680:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a682:	6823      	ldr	r3, [r4, #0]
 800a684:	b2f6      	uxtb	r6, r6
 800a686:	6922      	ldr	r2, [r4, #16]
 800a688:	4637      	mov	r7, r6
 800a68a:	1a98      	subs	r0, r3, r2
 800a68c:	6963      	ldr	r3, [r4, #20]
 800a68e:	4283      	cmp	r3, r0
 800a690:	dc05      	bgt.n	800a69e <__swbuf_r+0x4e>
 800a692:	4621      	mov	r1, r4
 800a694:	4628      	mov	r0, r5
 800a696:	f7ff ffb3 	bl	800a600 <_fflush_r>
 800a69a:	2800      	cmp	r0, #0
 800a69c:	d1ed      	bne.n	800a67a <__swbuf_r+0x2a>
 800a69e:	68a3      	ldr	r3, [r4, #8]
 800a6a0:	3b01      	subs	r3, #1
 800a6a2:	60a3      	str	r3, [r4, #8]
 800a6a4:	6823      	ldr	r3, [r4, #0]
 800a6a6:	1c5a      	adds	r2, r3, #1
 800a6a8:	6022      	str	r2, [r4, #0]
 800a6aa:	701e      	strb	r6, [r3, #0]
 800a6ac:	1c43      	adds	r3, r0, #1
 800a6ae:	6962      	ldr	r2, [r4, #20]
 800a6b0:	429a      	cmp	r2, r3
 800a6b2:	d004      	beq.n	800a6be <__swbuf_r+0x6e>
 800a6b4:	89a3      	ldrh	r3, [r4, #12]
 800a6b6:	07db      	lsls	r3, r3, #31
 800a6b8:	d5e1      	bpl.n	800a67e <__swbuf_r+0x2e>
 800a6ba:	2e0a      	cmp	r6, #10
 800a6bc:	d1df      	bne.n	800a67e <__swbuf_r+0x2e>
 800a6be:	4621      	mov	r1, r4
 800a6c0:	4628      	mov	r0, r5
 800a6c2:	f7ff ff9d 	bl	800a600 <_fflush_r>
 800a6c6:	2800      	cmp	r0, #0
 800a6c8:	d0d9      	beq.n	800a67e <__swbuf_r+0x2e>
 800a6ca:	e7d6      	b.n	800a67a <__swbuf_r+0x2a>

0800a6cc <__swsetup_r>:
 800a6cc:	b538      	push	{r3, r4, r5, lr}
 800a6ce:	4b29      	ldr	r3, [pc, #164]	@ (800a774 <__swsetup_r+0xa8>)
 800a6d0:	4605      	mov	r5, r0
 800a6d2:	460c      	mov	r4, r1
 800a6d4:	6818      	ldr	r0, [r3, #0]
 800a6d6:	b118      	cbz	r0, 800a6e0 <__swsetup_r+0x14>
 800a6d8:	6a03      	ldr	r3, [r0, #32]
 800a6da:	b90b      	cbnz	r3, 800a6e0 <__swsetup_r+0x14>
 800a6dc:	f7fd f890 	bl	8007800 <__sinit>
 800a6e0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a6e4:	0719      	lsls	r1, r3, #28
 800a6e6:	d422      	bmi.n	800a72e <__swsetup_r+0x62>
 800a6e8:	06da      	lsls	r2, r3, #27
 800a6ea:	d407      	bmi.n	800a6fc <__swsetup_r+0x30>
 800a6ec:	2209      	movs	r2, #9
 800a6ee:	602a      	str	r2, [r5, #0]
 800a6f0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a6f4:	f04f 30ff 	mov.w	r0, #4294967295
 800a6f8:	81a3      	strh	r3, [r4, #12]
 800a6fa:	e033      	b.n	800a764 <__swsetup_r+0x98>
 800a6fc:	0758      	lsls	r0, r3, #29
 800a6fe:	d512      	bpl.n	800a726 <__swsetup_r+0x5a>
 800a700:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a702:	b141      	cbz	r1, 800a716 <__swsetup_r+0x4a>
 800a704:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a708:	4299      	cmp	r1, r3
 800a70a:	d002      	beq.n	800a712 <__swsetup_r+0x46>
 800a70c:	4628      	mov	r0, r5
 800a70e:	f7fe f817 	bl	8008740 <_free_r>
 800a712:	2300      	movs	r3, #0
 800a714:	6363      	str	r3, [r4, #52]	@ 0x34
 800a716:	89a3      	ldrh	r3, [r4, #12]
 800a718:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800a71c:	81a3      	strh	r3, [r4, #12]
 800a71e:	2300      	movs	r3, #0
 800a720:	6063      	str	r3, [r4, #4]
 800a722:	6923      	ldr	r3, [r4, #16]
 800a724:	6023      	str	r3, [r4, #0]
 800a726:	89a3      	ldrh	r3, [r4, #12]
 800a728:	f043 0308 	orr.w	r3, r3, #8
 800a72c:	81a3      	strh	r3, [r4, #12]
 800a72e:	6923      	ldr	r3, [r4, #16]
 800a730:	b94b      	cbnz	r3, 800a746 <__swsetup_r+0x7a>
 800a732:	89a3      	ldrh	r3, [r4, #12]
 800a734:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800a738:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a73c:	d003      	beq.n	800a746 <__swsetup_r+0x7a>
 800a73e:	4621      	mov	r1, r4
 800a740:	4628      	mov	r0, r5
 800a742:	f000 fc48 	bl	800afd6 <__smakebuf_r>
 800a746:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a74a:	f013 0201 	ands.w	r2, r3, #1
 800a74e:	d00a      	beq.n	800a766 <__swsetup_r+0x9a>
 800a750:	2200      	movs	r2, #0
 800a752:	60a2      	str	r2, [r4, #8]
 800a754:	6962      	ldr	r2, [r4, #20]
 800a756:	4252      	negs	r2, r2
 800a758:	61a2      	str	r2, [r4, #24]
 800a75a:	6922      	ldr	r2, [r4, #16]
 800a75c:	b942      	cbnz	r2, 800a770 <__swsetup_r+0xa4>
 800a75e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800a762:	d1c5      	bne.n	800a6f0 <__swsetup_r+0x24>
 800a764:	bd38      	pop	{r3, r4, r5, pc}
 800a766:	0799      	lsls	r1, r3, #30
 800a768:	bf58      	it	pl
 800a76a:	6962      	ldrpl	r2, [r4, #20]
 800a76c:	60a2      	str	r2, [r4, #8]
 800a76e:	e7f4      	b.n	800a75a <__swsetup_r+0x8e>
 800a770:	2000      	movs	r0, #0
 800a772:	e7f7      	b.n	800a764 <__swsetup_r+0x98>
 800a774:	20000018 	.word	0x20000018

0800a778 <memmove>:
 800a778:	4288      	cmp	r0, r1
 800a77a:	b510      	push	{r4, lr}
 800a77c:	eb01 0402 	add.w	r4, r1, r2
 800a780:	d902      	bls.n	800a788 <memmove+0x10>
 800a782:	4284      	cmp	r4, r0
 800a784:	4623      	mov	r3, r4
 800a786:	d807      	bhi.n	800a798 <memmove+0x20>
 800a788:	1e43      	subs	r3, r0, #1
 800a78a:	42a1      	cmp	r1, r4
 800a78c:	d008      	beq.n	800a7a0 <memmove+0x28>
 800a78e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a792:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a796:	e7f8      	b.n	800a78a <memmove+0x12>
 800a798:	4402      	add	r2, r0
 800a79a:	4601      	mov	r1, r0
 800a79c:	428a      	cmp	r2, r1
 800a79e:	d100      	bne.n	800a7a2 <memmove+0x2a>
 800a7a0:	bd10      	pop	{r4, pc}
 800a7a2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a7a6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a7aa:	e7f7      	b.n	800a79c <memmove+0x24>

0800a7ac <strncmp>:
 800a7ac:	b510      	push	{r4, lr}
 800a7ae:	b16a      	cbz	r2, 800a7cc <strncmp+0x20>
 800a7b0:	3901      	subs	r1, #1
 800a7b2:	1884      	adds	r4, r0, r2
 800a7b4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a7b8:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800a7bc:	429a      	cmp	r2, r3
 800a7be:	d103      	bne.n	800a7c8 <strncmp+0x1c>
 800a7c0:	42a0      	cmp	r0, r4
 800a7c2:	d001      	beq.n	800a7c8 <strncmp+0x1c>
 800a7c4:	2a00      	cmp	r2, #0
 800a7c6:	d1f5      	bne.n	800a7b4 <strncmp+0x8>
 800a7c8:	1ad0      	subs	r0, r2, r3
 800a7ca:	bd10      	pop	{r4, pc}
 800a7cc:	4610      	mov	r0, r2
 800a7ce:	e7fc      	b.n	800a7ca <strncmp+0x1e>

0800a7d0 <_sbrk_r>:
 800a7d0:	b538      	push	{r3, r4, r5, lr}
 800a7d2:	2300      	movs	r3, #0
 800a7d4:	4d05      	ldr	r5, [pc, #20]	@ (800a7ec <_sbrk_r+0x1c>)
 800a7d6:	4604      	mov	r4, r0
 800a7d8:	4608      	mov	r0, r1
 800a7da:	602b      	str	r3, [r5, #0]
 800a7dc:	f7f7 f90c 	bl	80019f8 <_sbrk>
 800a7e0:	1c43      	adds	r3, r0, #1
 800a7e2:	d102      	bne.n	800a7ea <_sbrk_r+0x1a>
 800a7e4:	682b      	ldr	r3, [r5, #0]
 800a7e6:	b103      	cbz	r3, 800a7ea <_sbrk_r+0x1a>
 800a7e8:	6023      	str	r3, [r4, #0]
 800a7ea:	bd38      	pop	{r3, r4, r5, pc}
 800a7ec:	200006b4 	.word	0x200006b4

0800a7f0 <nan>:
 800a7f0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800a7f8 <nan+0x8>
 800a7f4:	4770      	bx	lr
 800a7f6:	bf00      	nop
 800a7f8:	00000000 	.word	0x00000000
 800a7fc:	7ff80000 	.word	0x7ff80000

0800a800 <__assert_func>:
 800a800:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a802:	4614      	mov	r4, r2
 800a804:	461a      	mov	r2, r3
 800a806:	4b09      	ldr	r3, [pc, #36]	@ (800a82c <__assert_func+0x2c>)
 800a808:	4605      	mov	r5, r0
 800a80a:	681b      	ldr	r3, [r3, #0]
 800a80c:	68d8      	ldr	r0, [r3, #12]
 800a80e:	b954      	cbnz	r4, 800a826 <__assert_func+0x26>
 800a810:	4b07      	ldr	r3, [pc, #28]	@ (800a830 <__assert_func+0x30>)
 800a812:	461c      	mov	r4, r3
 800a814:	9100      	str	r1, [sp, #0]
 800a816:	4907      	ldr	r1, [pc, #28]	@ (800a834 <__assert_func+0x34>)
 800a818:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a81c:	462b      	mov	r3, r5
 800a81e:	f000 fba3 	bl	800af68 <fiprintf>
 800a822:	f000 fc37 	bl	800b094 <abort>
 800a826:	4b04      	ldr	r3, [pc, #16]	@ (800a838 <__assert_func+0x38>)
 800a828:	e7f4      	b.n	800a814 <__assert_func+0x14>
 800a82a:	bf00      	nop
 800a82c:	20000018 	.word	0x20000018
 800a830:	0800b675 	.word	0x0800b675
 800a834:	0800b647 	.word	0x0800b647
 800a838:	0800b63a 	.word	0x0800b63a

0800a83c <_calloc_r>:
 800a83c:	b570      	push	{r4, r5, r6, lr}
 800a83e:	fba1 5402 	umull	r5, r4, r1, r2
 800a842:	b93c      	cbnz	r4, 800a854 <_calloc_r+0x18>
 800a844:	4629      	mov	r1, r5
 800a846:	f7fd ffef 	bl	8008828 <_malloc_r>
 800a84a:	4606      	mov	r6, r0
 800a84c:	b928      	cbnz	r0, 800a85a <_calloc_r+0x1e>
 800a84e:	2600      	movs	r6, #0
 800a850:	4630      	mov	r0, r6
 800a852:	bd70      	pop	{r4, r5, r6, pc}
 800a854:	220c      	movs	r2, #12
 800a856:	6002      	str	r2, [r0, #0]
 800a858:	e7f9      	b.n	800a84e <_calloc_r+0x12>
 800a85a:	462a      	mov	r2, r5
 800a85c:	4621      	mov	r1, r4
 800a85e:	f7fd f87a 	bl	8007956 <memset>
 800a862:	e7f5      	b.n	800a850 <_calloc_r+0x14>

0800a864 <rshift>:
 800a864:	6903      	ldr	r3, [r0, #16]
 800a866:	114a      	asrs	r2, r1, #5
 800a868:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800a86c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a870:	f100 0414 	add.w	r4, r0, #20
 800a874:	dd45      	ble.n	800a902 <rshift+0x9e>
 800a876:	f011 011f 	ands.w	r1, r1, #31
 800a87a:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800a87e:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800a882:	d10c      	bne.n	800a89e <rshift+0x3a>
 800a884:	f100 0710 	add.w	r7, r0, #16
 800a888:	4629      	mov	r1, r5
 800a88a:	42b1      	cmp	r1, r6
 800a88c:	d334      	bcc.n	800a8f8 <rshift+0x94>
 800a88e:	1a9b      	subs	r3, r3, r2
 800a890:	1eea      	subs	r2, r5, #3
 800a892:	009b      	lsls	r3, r3, #2
 800a894:	4296      	cmp	r6, r2
 800a896:	bf38      	it	cc
 800a898:	2300      	movcc	r3, #0
 800a89a:	4423      	add	r3, r4
 800a89c:	e015      	b.n	800a8ca <rshift+0x66>
 800a89e:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800a8a2:	f1c1 0820 	rsb	r8, r1, #32
 800a8a6:	f105 0e04 	add.w	lr, r5, #4
 800a8aa:	46a1      	mov	r9, r4
 800a8ac:	40cf      	lsrs	r7, r1
 800a8ae:	4576      	cmp	r6, lr
 800a8b0:	46f4      	mov	ip, lr
 800a8b2:	d815      	bhi.n	800a8e0 <rshift+0x7c>
 800a8b4:	1a9a      	subs	r2, r3, r2
 800a8b6:	3501      	adds	r5, #1
 800a8b8:	0092      	lsls	r2, r2, #2
 800a8ba:	3a04      	subs	r2, #4
 800a8bc:	42ae      	cmp	r6, r5
 800a8be:	bf38      	it	cc
 800a8c0:	2200      	movcc	r2, #0
 800a8c2:	18a3      	adds	r3, r4, r2
 800a8c4:	50a7      	str	r7, [r4, r2]
 800a8c6:	b107      	cbz	r7, 800a8ca <rshift+0x66>
 800a8c8:	3304      	adds	r3, #4
 800a8ca:	1b1a      	subs	r2, r3, r4
 800a8cc:	42a3      	cmp	r3, r4
 800a8ce:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800a8d2:	bf08      	it	eq
 800a8d4:	2300      	moveq	r3, #0
 800a8d6:	6102      	str	r2, [r0, #16]
 800a8d8:	bf08      	it	eq
 800a8da:	6143      	streq	r3, [r0, #20]
 800a8dc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a8e0:	f8dc c000 	ldr.w	ip, [ip]
 800a8e4:	fa0c fc08 	lsl.w	ip, ip, r8
 800a8e8:	ea4c 0707 	orr.w	r7, ip, r7
 800a8ec:	f849 7b04 	str.w	r7, [r9], #4
 800a8f0:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a8f4:	40cf      	lsrs	r7, r1
 800a8f6:	e7da      	b.n	800a8ae <rshift+0x4a>
 800a8f8:	f851 cb04 	ldr.w	ip, [r1], #4
 800a8fc:	f847 cf04 	str.w	ip, [r7, #4]!
 800a900:	e7c3      	b.n	800a88a <rshift+0x26>
 800a902:	4623      	mov	r3, r4
 800a904:	e7e1      	b.n	800a8ca <rshift+0x66>

0800a906 <__hexdig_fun>:
 800a906:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800a90a:	2b09      	cmp	r3, #9
 800a90c:	d802      	bhi.n	800a914 <__hexdig_fun+0xe>
 800a90e:	3820      	subs	r0, #32
 800a910:	b2c0      	uxtb	r0, r0
 800a912:	4770      	bx	lr
 800a914:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800a918:	2b05      	cmp	r3, #5
 800a91a:	d801      	bhi.n	800a920 <__hexdig_fun+0x1a>
 800a91c:	3847      	subs	r0, #71	@ 0x47
 800a91e:	e7f7      	b.n	800a910 <__hexdig_fun+0xa>
 800a920:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800a924:	2b05      	cmp	r3, #5
 800a926:	d801      	bhi.n	800a92c <__hexdig_fun+0x26>
 800a928:	3827      	subs	r0, #39	@ 0x27
 800a92a:	e7f1      	b.n	800a910 <__hexdig_fun+0xa>
 800a92c:	2000      	movs	r0, #0
 800a92e:	4770      	bx	lr

0800a930 <__gethex>:
 800a930:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a934:	b085      	sub	sp, #20
 800a936:	468a      	mov	sl, r1
 800a938:	4690      	mov	r8, r2
 800a93a:	9302      	str	r3, [sp, #8]
 800a93c:	680b      	ldr	r3, [r1, #0]
 800a93e:	9001      	str	r0, [sp, #4]
 800a940:	1c9c      	adds	r4, r3, #2
 800a942:	46a1      	mov	r9, r4
 800a944:	f814 0b01 	ldrb.w	r0, [r4], #1
 800a948:	2830      	cmp	r0, #48	@ 0x30
 800a94a:	d0fa      	beq.n	800a942 <__gethex+0x12>
 800a94c:	eba9 0303 	sub.w	r3, r9, r3
 800a950:	f1a3 0b02 	sub.w	fp, r3, #2
 800a954:	f7ff ffd7 	bl	800a906 <__hexdig_fun>
 800a958:	4605      	mov	r5, r0
 800a95a:	2800      	cmp	r0, #0
 800a95c:	d166      	bne.n	800aa2c <__gethex+0xfc>
 800a95e:	2201      	movs	r2, #1
 800a960:	499e      	ldr	r1, [pc, #632]	@ (800abdc <__gethex+0x2ac>)
 800a962:	4648      	mov	r0, r9
 800a964:	f7ff ff22 	bl	800a7ac <strncmp>
 800a968:	4607      	mov	r7, r0
 800a96a:	2800      	cmp	r0, #0
 800a96c:	d165      	bne.n	800aa3a <__gethex+0x10a>
 800a96e:	f899 0001 	ldrb.w	r0, [r9, #1]
 800a972:	4626      	mov	r6, r4
 800a974:	f7ff ffc7 	bl	800a906 <__hexdig_fun>
 800a978:	2800      	cmp	r0, #0
 800a97a:	d060      	beq.n	800aa3e <__gethex+0x10e>
 800a97c:	4623      	mov	r3, r4
 800a97e:	7818      	ldrb	r0, [r3, #0]
 800a980:	4699      	mov	r9, r3
 800a982:	3301      	adds	r3, #1
 800a984:	2830      	cmp	r0, #48	@ 0x30
 800a986:	d0fa      	beq.n	800a97e <__gethex+0x4e>
 800a988:	f7ff ffbd 	bl	800a906 <__hexdig_fun>
 800a98c:	fab0 f580 	clz	r5, r0
 800a990:	f04f 0b01 	mov.w	fp, #1
 800a994:	096d      	lsrs	r5, r5, #5
 800a996:	464a      	mov	r2, r9
 800a998:	4616      	mov	r6, r2
 800a99a:	3201      	adds	r2, #1
 800a99c:	7830      	ldrb	r0, [r6, #0]
 800a99e:	f7ff ffb2 	bl	800a906 <__hexdig_fun>
 800a9a2:	2800      	cmp	r0, #0
 800a9a4:	d1f8      	bne.n	800a998 <__gethex+0x68>
 800a9a6:	2201      	movs	r2, #1
 800a9a8:	498c      	ldr	r1, [pc, #560]	@ (800abdc <__gethex+0x2ac>)
 800a9aa:	4630      	mov	r0, r6
 800a9ac:	f7ff fefe 	bl	800a7ac <strncmp>
 800a9b0:	2800      	cmp	r0, #0
 800a9b2:	d13e      	bne.n	800aa32 <__gethex+0x102>
 800a9b4:	b944      	cbnz	r4, 800a9c8 <__gethex+0x98>
 800a9b6:	1c74      	adds	r4, r6, #1
 800a9b8:	4622      	mov	r2, r4
 800a9ba:	4616      	mov	r6, r2
 800a9bc:	3201      	adds	r2, #1
 800a9be:	7830      	ldrb	r0, [r6, #0]
 800a9c0:	f7ff ffa1 	bl	800a906 <__hexdig_fun>
 800a9c4:	2800      	cmp	r0, #0
 800a9c6:	d1f8      	bne.n	800a9ba <__gethex+0x8a>
 800a9c8:	1ba4      	subs	r4, r4, r6
 800a9ca:	00a7      	lsls	r7, r4, #2
 800a9cc:	7833      	ldrb	r3, [r6, #0]
 800a9ce:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800a9d2:	2b50      	cmp	r3, #80	@ 0x50
 800a9d4:	d13d      	bne.n	800aa52 <__gethex+0x122>
 800a9d6:	7873      	ldrb	r3, [r6, #1]
 800a9d8:	2b2b      	cmp	r3, #43	@ 0x2b
 800a9da:	d032      	beq.n	800aa42 <__gethex+0x112>
 800a9dc:	2b2d      	cmp	r3, #45	@ 0x2d
 800a9de:	d033      	beq.n	800aa48 <__gethex+0x118>
 800a9e0:	1c71      	adds	r1, r6, #1
 800a9e2:	2400      	movs	r4, #0
 800a9e4:	7808      	ldrb	r0, [r1, #0]
 800a9e6:	f7ff ff8e 	bl	800a906 <__hexdig_fun>
 800a9ea:	1e43      	subs	r3, r0, #1
 800a9ec:	b2db      	uxtb	r3, r3
 800a9ee:	2b18      	cmp	r3, #24
 800a9f0:	d82f      	bhi.n	800aa52 <__gethex+0x122>
 800a9f2:	f1a0 0210 	sub.w	r2, r0, #16
 800a9f6:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800a9fa:	f7ff ff84 	bl	800a906 <__hexdig_fun>
 800a9fe:	f100 3cff 	add.w	ip, r0, #4294967295
 800aa02:	230a      	movs	r3, #10
 800aa04:	fa5f fc8c 	uxtb.w	ip, ip
 800aa08:	f1bc 0f18 	cmp.w	ip, #24
 800aa0c:	d91e      	bls.n	800aa4c <__gethex+0x11c>
 800aa0e:	b104      	cbz	r4, 800aa12 <__gethex+0xe2>
 800aa10:	4252      	negs	r2, r2
 800aa12:	4417      	add	r7, r2
 800aa14:	f8ca 1000 	str.w	r1, [sl]
 800aa18:	b1ed      	cbz	r5, 800aa56 <__gethex+0x126>
 800aa1a:	f1bb 0f00 	cmp.w	fp, #0
 800aa1e:	bf0c      	ite	eq
 800aa20:	2506      	moveq	r5, #6
 800aa22:	2500      	movne	r5, #0
 800aa24:	4628      	mov	r0, r5
 800aa26:	b005      	add	sp, #20
 800aa28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa2c:	2500      	movs	r5, #0
 800aa2e:	462c      	mov	r4, r5
 800aa30:	e7b1      	b.n	800a996 <__gethex+0x66>
 800aa32:	2c00      	cmp	r4, #0
 800aa34:	d1c8      	bne.n	800a9c8 <__gethex+0x98>
 800aa36:	4627      	mov	r7, r4
 800aa38:	e7c8      	b.n	800a9cc <__gethex+0x9c>
 800aa3a:	464e      	mov	r6, r9
 800aa3c:	462f      	mov	r7, r5
 800aa3e:	2501      	movs	r5, #1
 800aa40:	e7c4      	b.n	800a9cc <__gethex+0x9c>
 800aa42:	2400      	movs	r4, #0
 800aa44:	1cb1      	adds	r1, r6, #2
 800aa46:	e7cd      	b.n	800a9e4 <__gethex+0xb4>
 800aa48:	2401      	movs	r4, #1
 800aa4a:	e7fb      	b.n	800aa44 <__gethex+0x114>
 800aa4c:	fb03 0002 	mla	r0, r3, r2, r0
 800aa50:	e7cf      	b.n	800a9f2 <__gethex+0xc2>
 800aa52:	4631      	mov	r1, r6
 800aa54:	e7de      	b.n	800aa14 <__gethex+0xe4>
 800aa56:	eba6 0309 	sub.w	r3, r6, r9
 800aa5a:	4629      	mov	r1, r5
 800aa5c:	3b01      	subs	r3, #1
 800aa5e:	2b07      	cmp	r3, #7
 800aa60:	dc0a      	bgt.n	800aa78 <__gethex+0x148>
 800aa62:	9801      	ldr	r0, [sp, #4]
 800aa64:	f7fd ff6c 	bl	8008940 <_Balloc>
 800aa68:	4604      	mov	r4, r0
 800aa6a:	b940      	cbnz	r0, 800aa7e <__gethex+0x14e>
 800aa6c:	4b5c      	ldr	r3, [pc, #368]	@ (800abe0 <__gethex+0x2b0>)
 800aa6e:	4602      	mov	r2, r0
 800aa70:	21e4      	movs	r1, #228	@ 0xe4
 800aa72:	485c      	ldr	r0, [pc, #368]	@ (800abe4 <__gethex+0x2b4>)
 800aa74:	f7ff fec4 	bl	800a800 <__assert_func>
 800aa78:	3101      	adds	r1, #1
 800aa7a:	105b      	asrs	r3, r3, #1
 800aa7c:	e7ef      	b.n	800aa5e <__gethex+0x12e>
 800aa7e:	f100 0a14 	add.w	sl, r0, #20
 800aa82:	2300      	movs	r3, #0
 800aa84:	4655      	mov	r5, sl
 800aa86:	469b      	mov	fp, r3
 800aa88:	45b1      	cmp	r9, r6
 800aa8a:	d337      	bcc.n	800aafc <__gethex+0x1cc>
 800aa8c:	f845 bb04 	str.w	fp, [r5], #4
 800aa90:	eba5 050a 	sub.w	r5, r5, sl
 800aa94:	4658      	mov	r0, fp
 800aa96:	10ad      	asrs	r5, r5, #2
 800aa98:	6125      	str	r5, [r4, #16]
 800aa9a:	016d      	lsls	r5, r5, #5
 800aa9c:	f7fe f844 	bl	8008b28 <__hi0bits>
 800aaa0:	f8d8 6000 	ldr.w	r6, [r8]
 800aaa4:	1a2d      	subs	r5, r5, r0
 800aaa6:	42b5      	cmp	r5, r6
 800aaa8:	dd54      	ble.n	800ab54 <__gethex+0x224>
 800aaaa:	1bad      	subs	r5, r5, r6
 800aaac:	4620      	mov	r0, r4
 800aaae:	4629      	mov	r1, r5
 800aab0:	f7fe fbe1 	bl	8009276 <__any_on>
 800aab4:	4681      	mov	r9, r0
 800aab6:	b178      	cbz	r0, 800aad8 <__gethex+0x1a8>
 800aab8:	1e6b      	subs	r3, r5, #1
 800aaba:	f04f 0901 	mov.w	r9, #1
 800aabe:	1159      	asrs	r1, r3, #5
 800aac0:	f003 021f 	and.w	r2, r3, #31
 800aac4:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800aac8:	fa09 f202 	lsl.w	r2, r9, r2
 800aacc:	420a      	tst	r2, r1
 800aace:	d003      	beq.n	800aad8 <__gethex+0x1a8>
 800aad0:	454b      	cmp	r3, r9
 800aad2:	dc36      	bgt.n	800ab42 <__gethex+0x212>
 800aad4:	f04f 0902 	mov.w	r9, #2
 800aad8:	442f      	add	r7, r5
 800aada:	4629      	mov	r1, r5
 800aadc:	4620      	mov	r0, r4
 800aade:	f7ff fec1 	bl	800a864 <rshift>
 800aae2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800aae6:	42bb      	cmp	r3, r7
 800aae8:	da42      	bge.n	800ab70 <__gethex+0x240>
 800aaea:	4621      	mov	r1, r4
 800aaec:	9801      	ldr	r0, [sp, #4]
 800aaee:	f7fd ff67 	bl	80089c0 <_Bfree>
 800aaf2:	2300      	movs	r3, #0
 800aaf4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800aaf6:	25a3      	movs	r5, #163	@ 0xa3
 800aaf8:	6013      	str	r3, [r2, #0]
 800aafa:	e793      	b.n	800aa24 <__gethex+0xf4>
 800aafc:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800ab00:	2a2e      	cmp	r2, #46	@ 0x2e
 800ab02:	d012      	beq.n	800ab2a <__gethex+0x1fa>
 800ab04:	2b20      	cmp	r3, #32
 800ab06:	d104      	bne.n	800ab12 <__gethex+0x1e2>
 800ab08:	f845 bb04 	str.w	fp, [r5], #4
 800ab0c:	f04f 0b00 	mov.w	fp, #0
 800ab10:	465b      	mov	r3, fp
 800ab12:	7830      	ldrb	r0, [r6, #0]
 800ab14:	9303      	str	r3, [sp, #12]
 800ab16:	f7ff fef6 	bl	800a906 <__hexdig_fun>
 800ab1a:	9b03      	ldr	r3, [sp, #12]
 800ab1c:	f000 000f 	and.w	r0, r0, #15
 800ab20:	4098      	lsls	r0, r3
 800ab22:	3304      	adds	r3, #4
 800ab24:	ea4b 0b00 	orr.w	fp, fp, r0
 800ab28:	e7ae      	b.n	800aa88 <__gethex+0x158>
 800ab2a:	45b1      	cmp	r9, r6
 800ab2c:	d8ea      	bhi.n	800ab04 <__gethex+0x1d4>
 800ab2e:	2201      	movs	r2, #1
 800ab30:	492a      	ldr	r1, [pc, #168]	@ (800abdc <__gethex+0x2ac>)
 800ab32:	4630      	mov	r0, r6
 800ab34:	9303      	str	r3, [sp, #12]
 800ab36:	f7ff fe39 	bl	800a7ac <strncmp>
 800ab3a:	9b03      	ldr	r3, [sp, #12]
 800ab3c:	2800      	cmp	r0, #0
 800ab3e:	d1e1      	bne.n	800ab04 <__gethex+0x1d4>
 800ab40:	e7a2      	b.n	800aa88 <__gethex+0x158>
 800ab42:	1ea9      	subs	r1, r5, #2
 800ab44:	4620      	mov	r0, r4
 800ab46:	f7fe fb96 	bl	8009276 <__any_on>
 800ab4a:	2800      	cmp	r0, #0
 800ab4c:	d0c2      	beq.n	800aad4 <__gethex+0x1a4>
 800ab4e:	f04f 0903 	mov.w	r9, #3
 800ab52:	e7c1      	b.n	800aad8 <__gethex+0x1a8>
 800ab54:	da09      	bge.n	800ab6a <__gethex+0x23a>
 800ab56:	1b75      	subs	r5, r6, r5
 800ab58:	4621      	mov	r1, r4
 800ab5a:	9801      	ldr	r0, [sp, #4]
 800ab5c:	462a      	mov	r2, r5
 800ab5e:	1b7f      	subs	r7, r7, r5
 800ab60:	f7fe f948 	bl	8008df4 <__lshift>
 800ab64:	4604      	mov	r4, r0
 800ab66:	f100 0a14 	add.w	sl, r0, #20
 800ab6a:	f04f 0900 	mov.w	r9, #0
 800ab6e:	e7b8      	b.n	800aae2 <__gethex+0x1b2>
 800ab70:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800ab74:	42bd      	cmp	r5, r7
 800ab76:	dd6f      	ble.n	800ac58 <__gethex+0x328>
 800ab78:	1bed      	subs	r5, r5, r7
 800ab7a:	42ae      	cmp	r6, r5
 800ab7c:	dc34      	bgt.n	800abe8 <__gethex+0x2b8>
 800ab7e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800ab82:	2b02      	cmp	r3, #2
 800ab84:	d022      	beq.n	800abcc <__gethex+0x29c>
 800ab86:	2b03      	cmp	r3, #3
 800ab88:	d024      	beq.n	800abd4 <__gethex+0x2a4>
 800ab8a:	2b01      	cmp	r3, #1
 800ab8c:	d115      	bne.n	800abba <__gethex+0x28a>
 800ab8e:	42ae      	cmp	r6, r5
 800ab90:	d113      	bne.n	800abba <__gethex+0x28a>
 800ab92:	2e01      	cmp	r6, #1
 800ab94:	d10b      	bne.n	800abae <__gethex+0x27e>
 800ab96:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800ab9a:	2562      	movs	r5, #98	@ 0x62
 800ab9c:	9a02      	ldr	r2, [sp, #8]
 800ab9e:	6013      	str	r3, [r2, #0]
 800aba0:	2301      	movs	r3, #1
 800aba2:	6123      	str	r3, [r4, #16]
 800aba4:	f8ca 3000 	str.w	r3, [sl]
 800aba8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800abaa:	601c      	str	r4, [r3, #0]
 800abac:	e73a      	b.n	800aa24 <__gethex+0xf4>
 800abae:	1e71      	subs	r1, r6, #1
 800abb0:	4620      	mov	r0, r4
 800abb2:	f7fe fb60 	bl	8009276 <__any_on>
 800abb6:	2800      	cmp	r0, #0
 800abb8:	d1ed      	bne.n	800ab96 <__gethex+0x266>
 800abba:	4621      	mov	r1, r4
 800abbc:	9801      	ldr	r0, [sp, #4]
 800abbe:	f7fd feff 	bl	80089c0 <_Bfree>
 800abc2:	2300      	movs	r3, #0
 800abc4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800abc6:	2550      	movs	r5, #80	@ 0x50
 800abc8:	6013      	str	r3, [r2, #0]
 800abca:	e72b      	b.n	800aa24 <__gethex+0xf4>
 800abcc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800abce:	2b00      	cmp	r3, #0
 800abd0:	d1f3      	bne.n	800abba <__gethex+0x28a>
 800abd2:	e7e0      	b.n	800ab96 <__gethex+0x266>
 800abd4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800abd6:	2b00      	cmp	r3, #0
 800abd8:	d1dd      	bne.n	800ab96 <__gethex+0x266>
 800abda:	e7ee      	b.n	800abba <__gethex+0x28a>
 800abdc:	0800b4c8 	.word	0x0800b4c8
 800abe0:	0800b35d 	.word	0x0800b35d
 800abe4:	0800b676 	.word	0x0800b676
 800abe8:	1e6f      	subs	r7, r5, #1
 800abea:	f1b9 0f00 	cmp.w	r9, #0
 800abee:	d130      	bne.n	800ac52 <__gethex+0x322>
 800abf0:	b127      	cbz	r7, 800abfc <__gethex+0x2cc>
 800abf2:	4639      	mov	r1, r7
 800abf4:	4620      	mov	r0, r4
 800abf6:	f7fe fb3e 	bl	8009276 <__any_on>
 800abfa:	4681      	mov	r9, r0
 800abfc:	117a      	asrs	r2, r7, #5
 800abfe:	2301      	movs	r3, #1
 800ac00:	f007 071f 	and.w	r7, r7, #31
 800ac04:	4629      	mov	r1, r5
 800ac06:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800ac0a:	4620      	mov	r0, r4
 800ac0c:	40bb      	lsls	r3, r7
 800ac0e:	1b76      	subs	r6, r6, r5
 800ac10:	2502      	movs	r5, #2
 800ac12:	4213      	tst	r3, r2
 800ac14:	bf18      	it	ne
 800ac16:	f049 0902 	orrne.w	r9, r9, #2
 800ac1a:	f7ff fe23 	bl	800a864 <rshift>
 800ac1e:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800ac22:	f1b9 0f00 	cmp.w	r9, #0
 800ac26:	d047      	beq.n	800acb8 <__gethex+0x388>
 800ac28:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800ac2c:	2b02      	cmp	r3, #2
 800ac2e:	d015      	beq.n	800ac5c <__gethex+0x32c>
 800ac30:	2b03      	cmp	r3, #3
 800ac32:	d017      	beq.n	800ac64 <__gethex+0x334>
 800ac34:	2b01      	cmp	r3, #1
 800ac36:	d109      	bne.n	800ac4c <__gethex+0x31c>
 800ac38:	f019 0f02 	tst.w	r9, #2
 800ac3c:	d006      	beq.n	800ac4c <__gethex+0x31c>
 800ac3e:	f8da 3000 	ldr.w	r3, [sl]
 800ac42:	ea49 0903 	orr.w	r9, r9, r3
 800ac46:	f019 0f01 	tst.w	r9, #1
 800ac4a:	d10e      	bne.n	800ac6a <__gethex+0x33a>
 800ac4c:	f045 0510 	orr.w	r5, r5, #16
 800ac50:	e032      	b.n	800acb8 <__gethex+0x388>
 800ac52:	f04f 0901 	mov.w	r9, #1
 800ac56:	e7d1      	b.n	800abfc <__gethex+0x2cc>
 800ac58:	2501      	movs	r5, #1
 800ac5a:	e7e2      	b.n	800ac22 <__gethex+0x2f2>
 800ac5c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ac5e:	f1c3 0301 	rsb	r3, r3, #1
 800ac62:	930f      	str	r3, [sp, #60]	@ 0x3c
 800ac64:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ac66:	2b00      	cmp	r3, #0
 800ac68:	d0f0      	beq.n	800ac4c <__gethex+0x31c>
 800ac6a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800ac6e:	f104 0314 	add.w	r3, r4, #20
 800ac72:	f04f 0c00 	mov.w	ip, #0
 800ac76:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800ac7a:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800ac7e:	4618      	mov	r0, r3
 800ac80:	f853 2b04 	ldr.w	r2, [r3], #4
 800ac84:	f1b2 3fff 	cmp.w	r2, #4294967295
 800ac88:	d01b      	beq.n	800acc2 <__gethex+0x392>
 800ac8a:	3201      	adds	r2, #1
 800ac8c:	6002      	str	r2, [r0, #0]
 800ac8e:	2d02      	cmp	r5, #2
 800ac90:	f104 0314 	add.w	r3, r4, #20
 800ac94:	d13c      	bne.n	800ad10 <__gethex+0x3e0>
 800ac96:	f8d8 2000 	ldr.w	r2, [r8]
 800ac9a:	3a01      	subs	r2, #1
 800ac9c:	42b2      	cmp	r2, r6
 800ac9e:	d109      	bne.n	800acb4 <__gethex+0x384>
 800aca0:	1171      	asrs	r1, r6, #5
 800aca2:	2201      	movs	r2, #1
 800aca4:	f006 061f 	and.w	r6, r6, #31
 800aca8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800acac:	fa02 f606 	lsl.w	r6, r2, r6
 800acb0:	421e      	tst	r6, r3
 800acb2:	d13a      	bne.n	800ad2a <__gethex+0x3fa>
 800acb4:	f045 0520 	orr.w	r5, r5, #32
 800acb8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800acba:	601c      	str	r4, [r3, #0]
 800acbc:	9b02      	ldr	r3, [sp, #8]
 800acbe:	601f      	str	r7, [r3, #0]
 800acc0:	e6b0      	b.n	800aa24 <__gethex+0xf4>
 800acc2:	4299      	cmp	r1, r3
 800acc4:	f843 cc04 	str.w	ip, [r3, #-4]
 800acc8:	d8d9      	bhi.n	800ac7e <__gethex+0x34e>
 800acca:	68a3      	ldr	r3, [r4, #8]
 800accc:	459b      	cmp	fp, r3
 800acce:	db17      	blt.n	800ad00 <__gethex+0x3d0>
 800acd0:	6861      	ldr	r1, [r4, #4]
 800acd2:	9801      	ldr	r0, [sp, #4]
 800acd4:	3101      	adds	r1, #1
 800acd6:	f7fd fe33 	bl	8008940 <_Balloc>
 800acda:	4681      	mov	r9, r0
 800acdc:	b918      	cbnz	r0, 800ace6 <__gethex+0x3b6>
 800acde:	4b1a      	ldr	r3, [pc, #104]	@ (800ad48 <__gethex+0x418>)
 800ace0:	4602      	mov	r2, r0
 800ace2:	2184      	movs	r1, #132	@ 0x84
 800ace4:	e6c5      	b.n	800aa72 <__gethex+0x142>
 800ace6:	6922      	ldr	r2, [r4, #16]
 800ace8:	f104 010c 	add.w	r1, r4, #12
 800acec:	300c      	adds	r0, #12
 800acee:	3202      	adds	r2, #2
 800acf0:	0092      	lsls	r2, r2, #2
 800acf2:	f7fc febe 	bl	8007a72 <memcpy>
 800acf6:	4621      	mov	r1, r4
 800acf8:	464c      	mov	r4, r9
 800acfa:	9801      	ldr	r0, [sp, #4]
 800acfc:	f7fd fe60 	bl	80089c0 <_Bfree>
 800ad00:	6923      	ldr	r3, [r4, #16]
 800ad02:	1c5a      	adds	r2, r3, #1
 800ad04:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800ad08:	6122      	str	r2, [r4, #16]
 800ad0a:	2201      	movs	r2, #1
 800ad0c:	615a      	str	r2, [r3, #20]
 800ad0e:	e7be      	b.n	800ac8e <__gethex+0x35e>
 800ad10:	6922      	ldr	r2, [r4, #16]
 800ad12:	455a      	cmp	r2, fp
 800ad14:	dd0b      	ble.n	800ad2e <__gethex+0x3fe>
 800ad16:	2101      	movs	r1, #1
 800ad18:	4620      	mov	r0, r4
 800ad1a:	f7ff fda3 	bl	800a864 <rshift>
 800ad1e:	3701      	adds	r7, #1
 800ad20:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ad24:	42bb      	cmp	r3, r7
 800ad26:	f6ff aee0 	blt.w	800aaea <__gethex+0x1ba>
 800ad2a:	2501      	movs	r5, #1
 800ad2c:	e7c2      	b.n	800acb4 <__gethex+0x384>
 800ad2e:	f016 061f 	ands.w	r6, r6, #31
 800ad32:	d0fa      	beq.n	800ad2a <__gethex+0x3fa>
 800ad34:	4453      	add	r3, sl
 800ad36:	f1c6 0620 	rsb	r6, r6, #32
 800ad3a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800ad3e:	f7fd fef3 	bl	8008b28 <__hi0bits>
 800ad42:	42b0      	cmp	r0, r6
 800ad44:	dbe7      	blt.n	800ad16 <__gethex+0x3e6>
 800ad46:	e7f0      	b.n	800ad2a <__gethex+0x3fa>
 800ad48:	0800b35d 	.word	0x0800b35d

0800ad4c <L_shift>:
 800ad4c:	f1c2 0208 	rsb	r2, r2, #8
 800ad50:	0092      	lsls	r2, r2, #2
 800ad52:	b570      	push	{r4, r5, r6, lr}
 800ad54:	f1c2 0620 	rsb	r6, r2, #32
 800ad58:	6843      	ldr	r3, [r0, #4]
 800ad5a:	6804      	ldr	r4, [r0, #0]
 800ad5c:	fa03 f506 	lsl.w	r5, r3, r6
 800ad60:	40d3      	lsrs	r3, r2
 800ad62:	432c      	orrs	r4, r5
 800ad64:	6004      	str	r4, [r0, #0]
 800ad66:	f840 3f04 	str.w	r3, [r0, #4]!
 800ad6a:	4288      	cmp	r0, r1
 800ad6c:	d3f4      	bcc.n	800ad58 <L_shift+0xc>
 800ad6e:	bd70      	pop	{r4, r5, r6, pc}

0800ad70 <__match>:
 800ad70:	6803      	ldr	r3, [r0, #0]
 800ad72:	3301      	adds	r3, #1
 800ad74:	b530      	push	{r4, r5, lr}
 800ad76:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ad7a:	b914      	cbnz	r4, 800ad82 <__match+0x12>
 800ad7c:	6003      	str	r3, [r0, #0]
 800ad7e:	2001      	movs	r0, #1
 800ad80:	bd30      	pop	{r4, r5, pc}
 800ad82:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ad86:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800ad8a:	2d19      	cmp	r5, #25
 800ad8c:	bf98      	it	ls
 800ad8e:	3220      	addls	r2, #32
 800ad90:	42a2      	cmp	r2, r4
 800ad92:	d0f0      	beq.n	800ad76 <__match+0x6>
 800ad94:	2000      	movs	r0, #0
 800ad96:	e7f3      	b.n	800ad80 <__match+0x10>

0800ad98 <__hexnan>:
 800ad98:	680b      	ldr	r3, [r1, #0]
 800ad9a:	6801      	ldr	r1, [r0, #0]
 800ad9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ada0:	115e      	asrs	r6, r3, #5
 800ada2:	f013 031f 	ands.w	r3, r3, #31
 800ada6:	f04f 0500 	mov.w	r5, #0
 800adaa:	b087      	sub	sp, #28
 800adac:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800adb0:	4682      	mov	sl, r0
 800adb2:	4690      	mov	r8, r2
 800adb4:	46ab      	mov	fp, r5
 800adb6:	bf18      	it	ne
 800adb8:	3604      	addne	r6, #4
 800adba:	9301      	str	r3, [sp, #4]
 800adbc:	9502      	str	r5, [sp, #8]
 800adbe:	1f37      	subs	r7, r6, #4
 800adc0:	f846 5c04 	str.w	r5, [r6, #-4]
 800adc4:	46b9      	mov	r9, r7
 800adc6:	463c      	mov	r4, r7
 800adc8:	1c4b      	adds	r3, r1, #1
 800adca:	784a      	ldrb	r2, [r1, #1]
 800adcc:	9303      	str	r3, [sp, #12]
 800adce:	b342      	cbz	r2, 800ae22 <__hexnan+0x8a>
 800add0:	4610      	mov	r0, r2
 800add2:	9105      	str	r1, [sp, #20]
 800add4:	9204      	str	r2, [sp, #16]
 800add6:	f7ff fd96 	bl	800a906 <__hexdig_fun>
 800adda:	2800      	cmp	r0, #0
 800addc:	d151      	bne.n	800ae82 <__hexnan+0xea>
 800adde:	9a04      	ldr	r2, [sp, #16]
 800ade0:	9905      	ldr	r1, [sp, #20]
 800ade2:	2a20      	cmp	r2, #32
 800ade4:	d818      	bhi.n	800ae18 <__hexnan+0x80>
 800ade6:	9b02      	ldr	r3, [sp, #8]
 800ade8:	459b      	cmp	fp, r3
 800adea:	dd13      	ble.n	800ae14 <__hexnan+0x7c>
 800adec:	454c      	cmp	r4, r9
 800adee:	d206      	bcs.n	800adfe <__hexnan+0x66>
 800adf0:	2d07      	cmp	r5, #7
 800adf2:	dc04      	bgt.n	800adfe <__hexnan+0x66>
 800adf4:	462a      	mov	r2, r5
 800adf6:	4649      	mov	r1, r9
 800adf8:	4620      	mov	r0, r4
 800adfa:	f7ff ffa7 	bl	800ad4c <L_shift>
 800adfe:	4544      	cmp	r4, r8
 800ae00:	d951      	bls.n	800aea6 <__hexnan+0x10e>
 800ae02:	2300      	movs	r3, #0
 800ae04:	f1a4 0904 	sub.w	r9, r4, #4
 800ae08:	f8cd b008 	str.w	fp, [sp, #8]
 800ae0c:	f844 3c04 	str.w	r3, [r4, #-4]
 800ae10:	461d      	mov	r5, r3
 800ae12:	464c      	mov	r4, r9
 800ae14:	9903      	ldr	r1, [sp, #12]
 800ae16:	e7d7      	b.n	800adc8 <__hexnan+0x30>
 800ae18:	2a29      	cmp	r2, #41	@ 0x29
 800ae1a:	d156      	bne.n	800aeca <__hexnan+0x132>
 800ae1c:	3102      	adds	r1, #2
 800ae1e:	f8ca 1000 	str.w	r1, [sl]
 800ae22:	f1bb 0f00 	cmp.w	fp, #0
 800ae26:	d050      	beq.n	800aeca <__hexnan+0x132>
 800ae28:	454c      	cmp	r4, r9
 800ae2a:	d206      	bcs.n	800ae3a <__hexnan+0xa2>
 800ae2c:	2d07      	cmp	r5, #7
 800ae2e:	dc04      	bgt.n	800ae3a <__hexnan+0xa2>
 800ae30:	462a      	mov	r2, r5
 800ae32:	4649      	mov	r1, r9
 800ae34:	4620      	mov	r0, r4
 800ae36:	f7ff ff89 	bl	800ad4c <L_shift>
 800ae3a:	4544      	cmp	r4, r8
 800ae3c:	d935      	bls.n	800aeaa <__hexnan+0x112>
 800ae3e:	f1a8 0204 	sub.w	r2, r8, #4
 800ae42:	4623      	mov	r3, r4
 800ae44:	f853 1b04 	ldr.w	r1, [r3], #4
 800ae48:	429f      	cmp	r7, r3
 800ae4a:	f842 1f04 	str.w	r1, [r2, #4]!
 800ae4e:	d2f9      	bcs.n	800ae44 <__hexnan+0xac>
 800ae50:	1b3b      	subs	r3, r7, r4
 800ae52:	3e03      	subs	r6, #3
 800ae54:	3401      	adds	r4, #1
 800ae56:	2200      	movs	r2, #0
 800ae58:	f023 0303 	bic.w	r3, r3, #3
 800ae5c:	3304      	adds	r3, #4
 800ae5e:	42b4      	cmp	r4, r6
 800ae60:	bf88      	it	hi
 800ae62:	2304      	movhi	r3, #4
 800ae64:	4443      	add	r3, r8
 800ae66:	f843 2b04 	str.w	r2, [r3], #4
 800ae6a:	429f      	cmp	r7, r3
 800ae6c:	d2fb      	bcs.n	800ae66 <__hexnan+0xce>
 800ae6e:	683b      	ldr	r3, [r7, #0]
 800ae70:	b91b      	cbnz	r3, 800ae7a <__hexnan+0xe2>
 800ae72:	4547      	cmp	r7, r8
 800ae74:	d127      	bne.n	800aec6 <__hexnan+0x12e>
 800ae76:	2301      	movs	r3, #1
 800ae78:	603b      	str	r3, [r7, #0]
 800ae7a:	2005      	movs	r0, #5
 800ae7c:	b007      	add	sp, #28
 800ae7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae82:	3501      	adds	r5, #1
 800ae84:	f10b 0b01 	add.w	fp, fp, #1
 800ae88:	2d08      	cmp	r5, #8
 800ae8a:	dd05      	ble.n	800ae98 <__hexnan+0x100>
 800ae8c:	4544      	cmp	r4, r8
 800ae8e:	d9c1      	bls.n	800ae14 <__hexnan+0x7c>
 800ae90:	2300      	movs	r3, #0
 800ae92:	3c04      	subs	r4, #4
 800ae94:	2501      	movs	r5, #1
 800ae96:	6023      	str	r3, [r4, #0]
 800ae98:	6822      	ldr	r2, [r4, #0]
 800ae9a:	f000 000f 	and.w	r0, r0, #15
 800ae9e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800aea2:	6020      	str	r0, [r4, #0]
 800aea4:	e7b6      	b.n	800ae14 <__hexnan+0x7c>
 800aea6:	2508      	movs	r5, #8
 800aea8:	e7b4      	b.n	800ae14 <__hexnan+0x7c>
 800aeaa:	9b01      	ldr	r3, [sp, #4]
 800aeac:	2b00      	cmp	r3, #0
 800aeae:	d0de      	beq.n	800ae6e <__hexnan+0xd6>
 800aeb0:	f1c3 0320 	rsb	r3, r3, #32
 800aeb4:	f04f 32ff 	mov.w	r2, #4294967295
 800aeb8:	40da      	lsrs	r2, r3
 800aeba:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800aebe:	4013      	ands	r3, r2
 800aec0:	f846 3c04 	str.w	r3, [r6, #-4]
 800aec4:	e7d3      	b.n	800ae6e <__hexnan+0xd6>
 800aec6:	3f04      	subs	r7, #4
 800aec8:	e7d1      	b.n	800ae6e <__hexnan+0xd6>
 800aeca:	2004      	movs	r0, #4
 800aecc:	e7d6      	b.n	800ae7c <__hexnan+0xe4>

0800aece <__ascii_mbtowc>:
 800aece:	b082      	sub	sp, #8
 800aed0:	b901      	cbnz	r1, 800aed4 <__ascii_mbtowc+0x6>
 800aed2:	a901      	add	r1, sp, #4
 800aed4:	b142      	cbz	r2, 800aee8 <__ascii_mbtowc+0x1a>
 800aed6:	b14b      	cbz	r3, 800aeec <__ascii_mbtowc+0x1e>
 800aed8:	7813      	ldrb	r3, [r2, #0]
 800aeda:	600b      	str	r3, [r1, #0]
 800aedc:	7812      	ldrb	r2, [r2, #0]
 800aede:	1e10      	subs	r0, r2, #0
 800aee0:	bf18      	it	ne
 800aee2:	2001      	movne	r0, #1
 800aee4:	b002      	add	sp, #8
 800aee6:	4770      	bx	lr
 800aee8:	4610      	mov	r0, r2
 800aeea:	e7fb      	b.n	800aee4 <__ascii_mbtowc+0x16>
 800aeec:	f06f 0001 	mvn.w	r0, #1
 800aef0:	e7f8      	b.n	800aee4 <__ascii_mbtowc+0x16>

0800aef2 <_realloc_r>:
 800aef2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aef6:	4680      	mov	r8, r0
 800aef8:	4615      	mov	r5, r2
 800aefa:	460c      	mov	r4, r1
 800aefc:	b921      	cbnz	r1, 800af08 <_realloc_r+0x16>
 800aefe:	4611      	mov	r1, r2
 800af00:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800af04:	f7fd bc90 	b.w	8008828 <_malloc_r>
 800af08:	b92a      	cbnz	r2, 800af16 <_realloc_r+0x24>
 800af0a:	f7fd fc19 	bl	8008740 <_free_r>
 800af0e:	2400      	movs	r4, #0
 800af10:	4620      	mov	r0, r4
 800af12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800af16:	f000 f8c4 	bl	800b0a2 <_malloc_usable_size_r>
 800af1a:	4285      	cmp	r5, r0
 800af1c:	4606      	mov	r6, r0
 800af1e:	d802      	bhi.n	800af26 <_realloc_r+0x34>
 800af20:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800af24:	d8f4      	bhi.n	800af10 <_realloc_r+0x1e>
 800af26:	4629      	mov	r1, r5
 800af28:	4640      	mov	r0, r8
 800af2a:	f7fd fc7d 	bl	8008828 <_malloc_r>
 800af2e:	4607      	mov	r7, r0
 800af30:	2800      	cmp	r0, #0
 800af32:	d0ec      	beq.n	800af0e <_realloc_r+0x1c>
 800af34:	42b5      	cmp	r5, r6
 800af36:	462a      	mov	r2, r5
 800af38:	4621      	mov	r1, r4
 800af3a:	bf28      	it	cs
 800af3c:	4632      	movcs	r2, r6
 800af3e:	f7fc fd98 	bl	8007a72 <memcpy>
 800af42:	4621      	mov	r1, r4
 800af44:	4640      	mov	r0, r8
 800af46:	463c      	mov	r4, r7
 800af48:	f7fd fbfa 	bl	8008740 <_free_r>
 800af4c:	e7e0      	b.n	800af10 <_realloc_r+0x1e>

0800af4e <__ascii_wctomb>:
 800af4e:	4603      	mov	r3, r0
 800af50:	4608      	mov	r0, r1
 800af52:	b141      	cbz	r1, 800af66 <__ascii_wctomb+0x18>
 800af54:	2aff      	cmp	r2, #255	@ 0xff
 800af56:	d904      	bls.n	800af62 <__ascii_wctomb+0x14>
 800af58:	228a      	movs	r2, #138	@ 0x8a
 800af5a:	f04f 30ff 	mov.w	r0, #4294967295
 800af5e:	601a      	str	r2, [r3, #0]
 800af60:	4770      	bx	lr
 800af62:	2001      	movs	r0, #1
 800af64:	700a      	strb	r2, [r1, #0]
 800af66:	4770      	bx	lr

0800af68 <fiprintf>:
 800af68:	b40e      	push	{r1, r2, r3}
 800af6a:	b503      	push	{r0, r1, lr}
 800af6c:	ab03      	add	r3, sp, #12
 800af6e:	4601      	mov	r1, r0
 800af70:	4805      	ldr	r0, [pc, #20]	@ (800af88 <fiprintf+0x20>)
 800af72:	f853 2b04 	ldr.w	r2, [r3], #4
 800af76:	6800      	ldr	r0, [r0, #0]
 800af78:	9301      	str	r3, [sp, #4]
 800af7a:	f7ff f9a5 	bl	800a2c8 <_vfiprintf_r>
 800af7e:	b002      	add	sp, #8
 800af80:	f85d eb04 	ldr.w	lr, [sp], #4
 800af84:	b003      	add	sp, #12
 800af86:	4770      	bx	lr
 800af88:	20000018 	.word	0x20000018

0800af8c <__swhatbuf_r>:
 800af8c:	b570      	push	{r4, r5, r6, lr}
 800af8e:	460c      	mov	r4, r1
 800af90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800af94:	b096      	sub	sp, #88	@ 0x58
 800af96:	4615      	mov	r5, r2
 800af98:	2900      	cmp	r1, #0
 800af9a:	461e      	mov	r6, r3
 800af9c:	da0c      	bge.n	800afb8 <__swhatbuf_r+0x2c>
 800af9e:	89a3      	ldrh	r3, [r4, #12]
 800afa0:	2100      	movs	r1, #0
 800afa2:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800afa6:	bf14      	ite	ne
 800afa8:	2340      	movne	r3, #64	@ 0x40
 800afaa:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800afae:	2000      	movs	r0, #0
 800afb0:	6031      	str	r1, [r6, #0]
 800afb2:	602b      	str	r3, [r5, #0]
 800afb4:	b016      	add	sp, #88	@ 0x58
 800afb6:	bd70      	pop	{r4, r5, r6, pc}
 800afb8:	466a      	mov	r2, sp
 800afba:	f000 f849 	bl	800b050 <_fstat_r>
 800afbe:	2800      	cmp	r0, #0
 800afc0:	dbed      	blt.n	800af9e <__swhatbuf_r+0x12>
 800afc2:	9901      	ldr	r1, [sp, #4]
 800afc4:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800afc8:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800afcc:	4259      	negs	r1, r3
 800afce:	4159      	adcs	r1, r3
 800afd0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800afd4:	e7eb      	b.n	800afae <__swhatbuf_r+0x22>

0800afd6 <__smakebuf_r>:
 800afd6:	898b      	ldrh	r3, [r1, #12]
 800afd8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800afda:	079d      	lsls	r5, r3, #30
 800afdc:	4606      	mov	r6, r0
 800afde:	460c      	mov	r4, r1
 800afe0:	d507      	bpl.n	800aff2 <__smakebuf_r+0x1c>
 800afe2:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800afe6:	6023      	str	r3, [r4, #0]
 800afe8:	6123      	str	r3, [r4, #16]
 800afea:	2301      	movs	r3, #1
 800afec:	6163      	str	r3, [r4, #20]
 800afee:	b003      	add	sp, #12
 800aff0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800aff2:	ab01      	add	r3, sp, #4
 800aff4:	466a      	mov	r2, sp
 800aff6:	f7ff ffc9 	bl	800af8c <__swhatbuf_r>
 800affa:	9f00      	ldr	r7, [sp, #0]
 800affc:	4605      	mov	r5, r0
 800affe:	4630      	mov	r0, r6
 800b000:	4639      	mov	r1, r7
 800b002:	f7fd fc11 	bl	8008828 <_malloc_r>
 800b006:	b948      	cbnz	r0, 800b01c <__smakebuf_r+0x46>
 800b008:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b00c:	059a      	lsls	r2, r3, #22
 800b00e:	d4ee      	bmi.n	800afee <__smakebuf_r+0x18>
 800b010:	f023 0303 	bic.w	r3, r3, #3
 800b014:	f043 0302 	orr.w	r3, r3, #2
 800b018:	81a3      	strh	r3, [r4, #12]
 800b01a:	e7e2      	b.n	800afe2 <__smakebuf_r+0xc>
 800b01c:	89a3      	ldrh	r3, [r4, #12]
 800b01e:	6020      	str	r0, [r4, #0]
 800b020:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b024:	81a3      	strh	r3, [r4, #12]
 800b026:	9b01      	ldr	r3, [sp, #4]
 800b028:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800b02c:	b15b      	cbz	r3, 800b046 <__smakebuf_r+0x70>
 800b02e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b032:	4630      	mov	r0, r6
 800b034:	f000 f81e 	bl	800b074 <_isatty_r>
 800b038:	b128      	cbz	r0, 800b046 <__smakebuf_r+0x70>
 800b03a:	89a3      	ldrh	r3, [r4, #12]
 800b03c:	f023 0303 	bic.w	r3, r3, #3
 800b040:	f043 0301 	orr.w	r3, r3, #1
 800b044:	81a3      	strh	r3, [r4, #12]
 800b046:	89a3      	ldrh	r3, [r4, #12]
 800b048:	431d      	orrs	r5, r3
 800b04a:	81a5      	strh	r5, [r4, #12]
 800b04c:	e7cf      	b.n	800afee <__smakebuf_r+0x18>
	...

0800b050 <_fstat_r>:
 800b050:	b538      	push	{r3, r4, r5, lr}
 800b052:	2300      	movs	r3, #0
 800b054:	4d06      	ldr	r5, [pc, #24]	@ (800b070 <_fstat_r+0x20>)
 800b056:	4604      	mov	r4, r0
 800b058:	4608      	mov	r0, r1
 800b05a:	4611      	mov	r1, r2
 800b05c:	602b      	str	r3, [r5, #0]
 800b05e:	f7f6 fca3 	bl	80019a8 <_fstat>
 800b062:	1c43      	adds	r3, r0, #1
 800b064:	d102      	bne.n	800b06c <_fstat_r+0x1c>
 800b066:	682b      	ldr	r3, [r5, #0]
 800b068:	b103      	cbz	r3, 800b06c <_fstat_r+0x1c>
 800b06a:	6023      	str	r3, [r4, #0]
 800b06c:	bd38      	pop	{r3, r4, r5, pc}
 800b06e:	bf00      	nop
 800b070:	200006b4 	.word	0x200006b4

0800b074 <_isatty_r>:
 800b074:	b538      	push	{r3, r4, r5, lr}
 800b076:	2300      	movs	r3, #0
 800b078:	4d05      	ldr	r5, [pc, #20]	@ (800b090 <_isatty_r+0x1c>)
 800b07a:	4604      	mov	r4, r0
 800b07c:	4608      	mov	r0, r1
 800b07e:	602b      	str	r3, [r5, #0]
 800b080:	f7f6 fca2 	bl	80019c8 <_isatty>
 800b084:	1c43      	adds	r3, r0, #1
 800b086:	d102      	bne.n	800b08e <_isatty_r+0x1a>
 800b088:	682b      	ldr	r3, [r5, #0]
 800b08a:	b103      	cbz	r3, 800b08e <_isatty_r+0x1a>
 800b08c:	6023      	str	r3, [r4, #0]
 800b08e:	bd38      	pop	{r3, r4, r5, pc}
 800b090:	200006b4 	.word	0x200006b4

0800b094 <abort>:
 800b094:	2006      	movs	r0, #6
 800b096:	b508      	push	{r3, lr}
 800b098:	f000 f834 	bl	800b104 <raise>
 800b09c:	2001      	movs	r0, #1
 800b09e:	f7f6 fc33 	bl	8001908 <_exit>

0800b0a2 <_malloc_usable_size_r>:
 800b0a2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b0a6:	1f18      	subs	r0, r3, #4
 800b0a8:	2b00      	cmp	r3, #0
 800b0aa:	bfbc      	itt	lt
 800b0ac:	580b      	ldrlt	r3, [r1, r0]
 800b0ae:	18c0      	addlt	r0, r0, r3
 800b0b0:	4770      	bx	lr

0800b0b2 <_raise_r>:
 800b0b2:	291f      	cmp	r1, #31
 800b0b4:	b538      	push	{r3, r4, r5, lr}
 800b0b6:	4605      	mov	r5, r0
 800b0b8:	460c      	mov	r4, r1
 800b0ba:	d904      	bls.n	800b0c6 <_raise_r+0x14>
 800b0bc:	2316      	movs	r3, #22
 800b0be:	6003      	str	r3, [r0, #0]
 800b0c0:	f04f 30ff 	mov.w	r0, #4294967295
 800b0c4:	bd38      	pop	{r3, r4, r5, pc}
 800b0c6:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800b0c8:	b112      	cbz	r2, 800b0d0 <_raise_r+0x1e>
 800b0ca:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b0ce:	b94b      	cbnz	r3, 800b0e4 <_raise_r+0x32>
 800b0d0:	4628      	mov	r0, r5
 800b0d2:	f000 f831 	bl	800b138 <_getpid_r>
 800b0d6:	4622      	mov	r2, r4
 800b0d8:	4601      	mov	r1, r0
 800b0da:	4628      	mov	r0, r5
 800b0dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b0e0:	f000 b818 	b.w	800b114 <_kill_r>
 800b0e4:	2b01      	cmp	r3, #1
 800b0e6:	d00a      	beq.n	800b0fe <_raise_r+0x4c>
 800b0e8:	1c59      	adds	r1, r3, #1
 800b0ea:	d103      	bne.n	800b0f4 <_raise_r+0x42>
 800b0ec:	2316      	movs	r3, #22
 800b0ee:	6003      	str	r3, [r0, #0]
 800b0f0:	2001      	movs	r0, #1
 800b0f2:	e7e7      	b.n	800b0c4 <_raise_r+0x12>
 800b0f4:	2100      	movs	r1, #0
 800b0f6:	4620      	mov	r0, r4
 800b0f8:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800b0fc:	4798      	blx	r3
 800b0fe:	2000      	movs	r0, #0
 800b100:	e7e0      	b.n	800b0c4 <_raise_r+0x12>
	...

0800b104 <raise>:
 800b104:	4b02      	ldr	r3, [pc, #8]	@ (800b110 <raise+0xc>)
 800b106:	4601      	mov	r1, r0
 800b108:	6818      	ldr	r0, [r3, #0]
 800b10a:	f7ff bfd2 	b.w	800b0b2 <_raise_r>
 800b10e:	bf00      	nop
 800b110:	20000018 	.word	0x20000018

0800b114 <_kill_r>:
 800b114:	b538      	push	{r3, r4, r5, lr}
 800b116:	2300      	movs	r3, #0
 800b118:	4d06      	ldr	r5, [pc, #24]	@ (800b134 <_kill_r+0x20>)
 800b11a:	4604      	mov	r4, r0
 800b11c:	4608      	mov	r0, r1
 800b11e:	4611      	mov	r1, r2
 800b120:	602b      	str	r3, [r5, #0]
 800b122:	f7f6 fbe1 	bl	80018e8 <_kill>
 800b126:	1c43      	adds	r3, r0, #1
 800b128:	d102      	bne.n	800b130 <_kill_r+0x1c>
 800b12a:	682b      	ldr	r3, [r5, #0]
 800b12c:	b103      	cbz	r3, 800b130 <_kill_r+0x1c>
 800b12e:	6023      	str	r3, [r4, #0]
 800b130:	bd38      	pop	{r3, r4, r5, pc}
 800b132:	bf00      	nop
 800b134:	200006b4 	.word	0x200006b4

0800b138 <_getpid_r>:
 800b138:	f7f6 bbce 	b.w	80018d8 <_getpid>

0800b13c <_init>:
 800b13c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b13e:	bf00      	nop
 800b140:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b142:	bc08      	pop	{r3}
 800b144:	469e      	mov	lr, r3
 800b146:	4770      	bx	lr

0800b148 <_fini>:
 800b148:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b14a:	bf00      	nop
 800b14c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b14e:	bc08      	pop	{r3}
 800b150:	469e      	mov	lr, r3
 800b152:	4770      	bx	lr
